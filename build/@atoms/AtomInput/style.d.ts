/// <reference types="react" />
import { SerializedStyles } from '@emotion/react';
import { AtomInputTypes } from './types';
declare type Types = {
    customCSS?: SerializedStyles;
};
export declare const InputPaginationContainerStyled: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onFocus?: import("react").FocusEventHandler<HTMLDivElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement>;
    onBlur?: import("react").FocusEventHandler<HTMLDivElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement>;
    onChange?: import("react").FormEventHandler<HTMLDivElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLDivElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onInput?: import("react").FormEventHandler<HTMLDivElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onReset?: import("react").FormEventHandler<HTMLDivElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onSubmit?: import("react").FormEventHandler<HTMLDivElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onInvalid?: import("react").FormEventHandler<HTMLDivElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onLoad?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onError?: import("react").ReactEventHandler<HTMLDivElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onAbort?: import("react").ReactEventHandler<HTMLDivElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLDivElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLDivElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEnded?: import("react").ReactEventHandler<HTMLDivElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPause?: import("react").ReactEventHandler<HTMLDivElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlay?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onProgress?: import("react").ReactEventHandler<HTMLDivElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onStalled?: import("react").ReactEventHandler<HTMLDivElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLDivElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLDivElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLDivElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragExit?: import("react").DragEventHandler<HTMLDivElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLDivElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragOver?: import("react").DragEventHandler<HTMLDivElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDrop?: import("react").DragEventHandler<HTMLDivElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onSelect?: import("react").ReactEventHandler<HTMLDivElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onScroll?: import("react").UIEventHandler<HTMLDivElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLDivElement>;
    onWheel?: import("react").WheelEventHandler<HTMLDivElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement>;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLDivElement> & {
    theme?: import("@emotion/react").Theme;
}, {}, {}>;
export declare const InputTBodyStyled: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: import("react").ElementType<any>;
} & Types, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>, {}>;
export declare const InputPaginationStyled: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onFocus?: import("react").FocusEventHandler<HTMLDivElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement>;
    onBlur?: import("react").FocusEventHandler<HTMLDivElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement>;
    onChange?: import("react").FormEventHandler<HTMLDivElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLDivElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onInput?: import("react").FormEventHandler<HTMLDivElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onReset?: import("react").FormEventHandler<HTMLDivElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onSubmit?: import("react").FormEventHandler<HTMLDivElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onInvalid?: import("react").FormEventHandler<HTMLDivElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onLoad?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onError?: import("react").ReactEventHandler<HTMLDivElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onAbort?: import("react").ReactEventHandler<HTMLDivElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLDivElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLDivElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEnded?: import("react").ReactEventHandler<HTMLDivElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPause?: import("react").ReactEventHandler<HTMLDivElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlay?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onProgress?: import("react").ReactEventHandler<HTMLDivElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onStalled?: import("react").ReactEventHandler<HTMLDivElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLDivElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLDivElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLDivElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragExit?: import("react").DragEventHandler<HTMLDivElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLDivElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragOver?: import("react").DragEventHandler<HTMLDivElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDrop?: import("react").DragEventHandler<HTMLDivElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onSelect?: import("react").ReactEventHandler<HTMLDivElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onScroll?: import("react").UIEventHandler<HTMLDivElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLDivElement>;
    onWheel?: import("react").WheelEventHandler<HTMLDivElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement>;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLDivElement> & {
    theme?: import("@emotion/react").Theme;
} & AtomInputTypes, {}, {}>;
export declare const InputSelectPaginationLabelStyled: import("@emotion/styled").StyledComponent<{
    form?: string;
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onFocus?: import("react").FocusEventHandler<HTMLLabelElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLLabelElement>;
    onBlur?: import("react").FocusEventHandler<HTMLLabelElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLLabelElement>;
    onChange?: import("react").FormEventHandler<HTMLLabelElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLLabelElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onInput?: import("react").FormEventHandler<HTMLLabelElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onReset?: import("react").FormEventHandler<HTMLLabelElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onSubmit?: import("react").FormEventHandler<HTMLLabelElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onInvalid?: import("react").FormEventHandler<HTMLLabelElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onLoad?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onError?: import("react").ReactEventHandler<HTMLLabelElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onAbort?: import("react").ReactEventHandler<HTMLLabelElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEnded?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPause?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlay?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onProgress?: import("react").ReactEventHandler<HTMLLabelElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onStalled?: import("react").ReactEventHandler<HTMLLabelElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLLabelElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLLabelElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragExit?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragOver?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDrop?: import("react").DragEventHandler<HTMLLabelElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onSelect?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onScroll?: import("react").UIEventHandler<HTMLLabelElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLLabelElement>;
    onWheel?: import("react").WheelEventHandler<HTMLLabelElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLLabelElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLLabelElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLLabelElement>;
    htmlFor?: string;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLLabelElement> & {
    theme?: import("@emotion/react").Theme;
} & AtomInputTypes, {}, {}>;
export declare const InputTextLabelStyled: import("@emotion/styled").StyledComponent<{
    form?: string;
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onFocus?: import("react").FocusEventHandler<HTMLLabelElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLLabelElement>;
    onBlur?: import("react").FocusEventHandler<HTMLLabelElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLLabelElement>;
    onChange?: import("react").FormEventHandler<HTMLLabelElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLLabelElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onInput?: import("react").FormEventHandler<HTMLLabelElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onReset?: import("react").FormEventHandler<HTMLLabelElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onSubmit?: import("react").FormEventHandler<HTMLLabelElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onInvalid?: import("react").FormEventHandler<HTMLLabelElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onLoad?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onError?: import("react").ReactEventHandler<HTMLLabelElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onAbort?: import("react").ReactEventHandler<HTMLLabelElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEnded?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPause?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlay?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onProgress?: import("react").ReactEventHandler<HTMLLabelElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onStalled?: import("react").ReactEventHandler<HTMLLabelElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLLabelElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLLabelElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragExit?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragOver?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDrop?: import("react").DragEventHandler<HTMLLabelElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onSelect?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onScroll?: import("react").UIEventHandler<HTMLLabelElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLLabelElement>;
    onWheel?: import("react").WheelEventHandler<HTMLLabelElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLLabelElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLLabelElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLLabelElement>;
    htmlFor?: string;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLLabelElement> & {
    theme?: import("@emotion/react").Theme;
} & AtomInputTypes, {}, {}>;
export declare const InputCheckboxLabelStyled: import("@emotion/styled").StyledComponent<{
    form?: string;
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onFocus?: import("react").FocusEventHandler<HTMLLabelElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLLabelElement>;
    onBlur?: import("react").FocusEventHandler<HTMLLabelElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLLabelElement>;
    onChange?: import("react").FormEventHandler<HTMLLabelElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLLabelElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onInput?: import("react").FormEventHandler<HTMLLabelElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onReset?: import("react").FormEventHandler<HTMLLabelElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onSubmit?: import("react").FormEventHandler<HTMLLabelElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onInvalid?: import("react").FormEventHandler<HTMLLabelElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onLoad?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onError?: import("react").ReactEventHandler<HTMLLabelElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onAbort?: import("react").ReactEventHandler<HTMLLabelElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEnded?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPause?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlay?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onProgress?: import("react").ReactEventHandler<HTMLLabelElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onStalled?: import("react").ReactEventHandler<HTMLLabelElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLLabelElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLLabelElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragExit?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragOver?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDrop?: import("react").DragEventHandler<HTMLLabelElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onSelect?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onScroll?: import("react").UIEventHandler<HTMLLabelElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLLabelElement>;
    onWheel?: import("react").WheelEventHandler<HTMLLabelElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLLabelElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLLabelElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLLabelElement>;
    htmlFor?: string;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLLabelElement> & {
    theme?: import("@emotion/react").Theme;
} & AtomInputTypes, {}, {}>;
export declare const InputTextSpanStyled: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: import("react").ElementType<any>;
} & AtomInputTypes, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {}>;
export declare const InputTextStyled: import("@emotion/styled").StyledComponent<{
    form?: string;
    slot?: string;
    title?: string;
    pattern?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement>;
    onFocus?: import("react").FocusEventHandler<HTMLInputElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement>;
    onBlur?: import("react").FocusEventHandler<HTMLInputElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement>;
    onChange?: import("react").ChangeEventHandler<HTMLInputElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLInputElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onInput?: import("react").FormEventHandler<HTMLInputElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onReset?: import("react").FormEventHandler<HTMLInputElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onSubmit?: import("react").FormEventHandler<HTMLInputElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onInvalid?: import("react").FormEventHandler<HTMLInputElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onLoad?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onError?: import("react").ReactEventHandler<HTMLInputElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onAbort?: import("react").ReactEventHandler<HTMLInputElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLInputElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLInputElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLInputElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onEnded?: import("react").ReactEventHandler<HTMLInputElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onPause?: import("react").ReactEventHandler<HTMLInputElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlay?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onProgress?: import("react").ReactEventHandler<HTMLInputElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLInputElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onStalled?: import("react").ReactEventHandler<HTMLInputElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLInputElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLInputElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLInputElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onClick?: import("react").MouseEventHandler<HTMLInputElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLInputElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLInputElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragExit?: import("react").DragEventHandler<HTMLInputElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLInputElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragOver?: import("react").DragEventHandler<HTMLInputElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDrop?: import("react").DragEventHandler<HTMLInputElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onSelect?: import("react").ReactEventHandler<HTMLInputElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onScroll?: import("react").UIEventHandler<HTMLInputElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLInputElement>;
    onWheel?: import("react").WheelEventHandler<HTMLInputElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement>;
    list?: string;
    height?: string | number;
    width?: string | number;
    autoFocus?: boolean;
    accept?: string;
    alt?: string;
    autoComplete?: string;
    capture?: boolean | "user" | "environment";
    checked?: boolean;
    crossOrigin?: string;
    disabled?: boolean;
    enterKeyHint?: "search" | "enter" | "done" | "go" | "next" | "previous" | "send";
    formAction?: string;
    formEncType?: string;
    formMethod?: string;
    formNoValidate?: boolean;
    formTarget?: string;
    max?: string | number;
    maxLength?: number;
    min?: string | number;
    minLength?: number;
    multiple?: boolean;
    name?: string;
    readOnly?: boolean;
    required?: boolean;
    size?: number;
    src?: string;
    step?: string | number;
    type?: import("react").HTMLInputTypeAttribute;
    value?: string | number | readonly string[];
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLInputElement> & {
    theme?: import("@emotion/react").Theme;
} & AtomInputTypes, {}, {}>;
export declare const InputCheckboxStyled: import("@emotion/styled").StyledComponent<{
    form?: string;
    slot?: string;
    title?: string;
    pattern?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement>;
    onFocus?: import("react").FocusEventHandler<HTMLInputElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement>;
    onBlur?: import("react").FocusEventHandler<HTMLInputElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement>;
    onChange?: import("react").ChangeEventHandler<HTMLInputElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLInputElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onInput?: import("react").FormEventHandler<HTMLInputElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onReset?: import("react").FormEventHandler<HTMLInputElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onSubmit?: import("react").FormEventHandler<HTMLInputElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onInvalid?: import("react").FormEventHandler<HTMLInputElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onLoad?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onError?: import("react").ReactEventHandler<HTMLInputElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onAbort?: import("react").ReactEventHandler<HTMLInputElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLInputElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLInputElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLInputElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onEnded?: import("react").ReactEventHandler<HTMLInputElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onPause?: import("react").ReactEventHandler<HTMLInputElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlay?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onProgress?: import("react").ReactEventHandler<HTMLInputElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLInputElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onStalled?: import("react").ReactEventHandler<HTMLInputElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLInputElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLInputElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLInputElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onClick?: import("react").MouseEventHandler<HTMLInputElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLInputElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLInputElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragExit?: import("react").DragEventHandler<HTMLInputElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLInputElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragOver?: import("react").DragEventHandler<HTMLInputElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDrop?: import("react").DragEventHandler<HTMLInputElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onSelect?: import("react").ReactEventHandler<HTMLInputElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onScroll?: import("react").UIEventHandler<HTMLInputElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLInputElement>;
    onWheel?: import("react").WheelEventHandler<HTMLInputElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement>;
    list?: string;
    height?: string | number;
    width?: string | number;
    autoFocus?: boolean;
    accept?: string;
    alt?: string;
    autoComplete?: string;
    capture?: boolean | "user" | "environment";
    checked?: boolean;
    crossOrigin?: string;
    disabled?: boolean;
    enterKeyHint?: "search" | "enter" | "done" | "go" | "next" | "previous" | "send";
    formAction?: string;
    formEncType?: string;
    formMethod?: string;
    formNoValidate?: boolean;
    formTarget?: string;
    max?: string | number;
    maxLength?: number;
    min?: string | number;
    minLength?: number;
    multiple?: boolean;
    name?: string;
    readOnly?: boolean;
    required?: boolean;
    size?: number;
    src?: string;
    step?: string | number;
    type?: import("react").HTMLInputTypeAttribute;
    value?: string | number | readonly string[];
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLInputElement> & {
    theme?: import("@emotion/react").Theme;
} & AtomInputTypes, {}, {}>;
export declare const InputRadioButtonStyled: import("@emotion/styled").StyledComponent<{
    form?: string;
    slot?: string;
    title?: string;
    pattern?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement>;
    onFocus?: import("react").FocusEventHandler<HTMLInputElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement>;
    onBlur?: import("react").FocusEventHandler<HTMLInputElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement>;
    onChange?: import("react").ChangeEventHandler<HTMLInputElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLInputElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onInput?: import("react").FormEventHandler<HTMLInputElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onReset?: import("react").FormEventHandler<HTMLInputElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onSubmit?: import("react").FormEventHandler<HTMLInputElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onInvalid?: import("react").FormEventHandler<HTMLInputElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onLoad?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onError?: import("react").ReactEventHandler<HTMLInputElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onAbort?: import("react").ReactEventHandler<HTMLInputElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLInputElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLInputElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLInputElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onEnded?: import("react").ReactEventHandler<HTMLInputElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onPause?: import("react").ReactEventHandler<HTMLInputElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlay?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onProgress?: import("react").ReactEventHandler<HTMLInputElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLInputElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onStalled?: import("react").ReactEventHandler<HTMLInputElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLInputElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLInputElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLInputElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onClick?: import("react").MouseEventHandler<HTMLInputElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLInputElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLInputElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragExit?: import("react").DragEventHandler<HTMLInputElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLInputElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragOver?: import("react").DragEventHandler<HTMLInputElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDrop?: import("react").DragEventHandler<HTMLInputElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onSelect?: import("react").ReactEventHandler<HTMLInputElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onScroll?: import("react").UIEventHandler<HTMLInputElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLInputElement>;
    onWheel?: import("react").WheelEventHandler<HTMLInputElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement>;
    list?: string;
    height?: string | number;
    width?: string | number;
    autoFocus?: boolean;
    accept?: string;
    alt?: string;
    autoComplete?: string;
    capture?: boolean | "user" | "environment";
    checked?: boolean;
    crossOrigin?: string;
    disabled?: boolean;
    enterKeyHint?: "search" | "enter" | "done" | "go" | "next" | "previous" | "send";
    formAction?: string;
    formEncType?: string;
    formMethod?: string;
    formNoValidate?: boolean;
    formTarget?: string;
    max?: string | number;
    maxLength?: number;
    min?: string | number;
    minLength?: number;
    multiple?: boolean;
    name?: string;
    readOnly?: boolean;
    required?: boolean;
    size?: number;
    src?: string;
    step?: string | number;
    type?: import("react").HTMLInputTypeAttribute;
    value?: string | number | readonly string[];
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLInputElement> & {
    theme?: import("@emotion/react").Theme;
} & AtomInputTypes, {}, {}>;
export declare const LabelRadioButtonStyled: import("@emotion/styled").StyledComponent<{
    form?: string;
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onFocus?: import("react").FocusEventHandler<HTMLLabelElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLLabelElement>;
    onBlur?: import("react").FocusEventHandler<HTMLLabelElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLLabelElement>;
    onChange?: import("react").FormEventHandler<HTMLLabelElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLLabelElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onInput?: import("react").FormEventHandler<HTMLLabelElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onReset?: import("react").FormEventHandler<HTMLLabelElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onSubmit?: import("react").FormEventHandler<HTMLLabelElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onInvalid?: import("react").FormEventHandler<HTMLLabelElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onLoad?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onError?: import("react").ReactEventHandler<HTMLLabelElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onAbort?: import("react").ReactEventHandler<HTMLLabelElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEnded?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPause?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlay?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onProgress?: import("react").ReactEventHandler<HTMLLabelElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onStalled?: import("react").ReactEventHandler<HTMLLabelElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLLabelElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLLabelElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragExit?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragOver?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDrop?: import("react").DragEventHandler<HTMLLabelElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onSelect?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onScroll?: import("react").UIEventHandler<HTMLLabelElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLLabelElement>;
    onWheel?: import("react").WheelEventHandler<HTMLLabelElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLLabelElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLLabelElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLLabelElement>;
    htmlFor?: string;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLLabelElement> & {
    theme?: import("@emotion/react").Theme;
} & AtomInputTypes, {}, {}>;
export declare const InputCheckboxToggleStyled: import("@emotion/styled").StyledComponent<{
    form?: string;
    slot?: string;
    title?: string;
    pattern?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement>;
    onFocus?: import("react").FocusEventHandler<HTMLInputElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement>;
    onBlur?: import("react").FocusEventHandler<HTMLInputElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement>;
    onChange?: import("react").ChangeEventHandler<HTMLInputElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLInputElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onInput?: import("react").FormEventHandler<HTMLInputElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onReset?: import("react").FormEventHandler<HTMLInputElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onSubmit?: import("react").FormEventHandler<HTMLInputElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onInvalid?: import("react").FormEventHandler<HTMLInputElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onLoad?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onError?: import("react").ReactEventHandler<HTMLInputElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onAbort?: import("react").ReactEventHandler<HTMLInputElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLInputElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLInputElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLInputElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onEnded?: import("react").ReactEventHandler<HTMLInputElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onPause?: import("react").ReactEventHandler<HTMLInputElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlay?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onProgress?: import("react").ReactEventHandler<HTMLInputElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLInputElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onStalled?: import("react").ReactEventHandler<HTMLInputElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLInputElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLInputElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLInputElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onClick?: import("react").MouseEventHandler<HTMLInputElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLInputElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLInputElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragExit?: import("react").DragEventHandler<HTMLInputElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLInputElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragOver?: import("react").DragEventHandler<HTMLInputElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDrop?: import("react").DragEventHandler<HTMLInputElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onSelect?: import("react").ReactEventHandler<HTMLInputElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onScroll?: import("react").UIEventHandler<HTMLInputElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLInputElement>;
    onWheel?: import("react").WheelEventHandler<HTMLInputElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement>;
    list?: string;
    height?: string | number;
    width?: string | number;
    autoFocus?: boolean;
    accept?: string;
    alt?: string;
    autoComplete?: string;
    capture?: boolean | "user" | "environment";
    checked?: boolean;
    crossOrigin?: string;
    disabled?: boolean;
    enterKeyHint?: "search" | "enter" | "done" | "go" | "next" | "previous" | "send";
    formAction?: string;
    formEncType?: string;
    formMethod?: string;
    formNoValidate?: boolean;
    formTarget?: string;
    max?: string | number;
    maxLength?: number;
    min?: string | number;
    minLength?: number;
    multiple?: boolean;
    name?: string;
    readOnly?: boolean;
    required?: boolean;
    size?: number;
    src?: string;
    step?: string | number;
    type?: import("react").HTMLInputTypeAttribute;
    value?: string | number | readonly string[];
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLInputElement> & {
    theme?: import("@emotion/react").Theme;
} & AtomInputTypes, {}, {}>;
export declare const InputErrorStyled: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: import("react").ElementType<any>;
} & AtomInputTypes, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {}>;
export declare const FileInputStyled: import("@emotion/styled").StyledComponent<{
    form?: string;
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onFocus?: import("react").FocusEventHandler<HTMLLabelElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLLabelElement>;
    onBlur?: import("react").FocusEventHandler<HTMLLabelElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLLabelElement>;
    onChange?: import("react").FormEventHandler<HTMLLabelElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLLabelElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onInput?: import("react").FormEventHandler<HTMLLabelElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onReset?: import("react").FormEventHandler<HTMLLabelElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onSubmit?: import("react").FormEventHandler<HTMLLabelElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onInvalid?: import("react").FormEventHandler<HTMLLabelElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onLoad?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onError?: import("react").ReactEventHandler<HTMLLabelElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onAbort?: import("react").ReactEventHandler<HTMLLabelElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEnded?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPause?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlay?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onProgress?: import("react").ReactEventHandler<HTMLLabelElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onStalled?: import("react").ReactEventHandler<HTMLLabelElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLLabelElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLLabelElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragExit?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragOver?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDrop?: import("react").DragEventHandler<HTMLLabelElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onSelect?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onScroll?: import("react").UIEventHandler<HTMLLabelElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLLabelElement>;
    onWheel?: import("react").WheelEventHandler<HTMLLabelElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLLabelElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLLabelElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLLabelElement>;
    htmlFor?: string;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLLabelElement> & {
    theme?: import("@emotion/react").Theme;
} & AtomInputTypes, {}, {}>;
export declare const FileInputMultipleStyled: import("@emotion/styled").StyledComponent<{
    form?: string;
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onFocus?: import("react").FocusEventHandler<HTMLLabelElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLLabelElement>;
    onBlur?: import("react").FocusEventHandler<HTMLLabelElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLLabelElement>;
    onChange?: import("react").FormEventHandler<HTMLLabelElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLLabelElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onInput?: import("react").FormEventHandler<HTMLLabelElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onReset?: import("react").FormEventHandler<HTMLLabelElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onSubmit?: import("react").FormEventHandler<HTMLLabelElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onInvalid?: import("react").FormEventHandler<HTMLLabelElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onLoad?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onError?: import("react").ReactEventHandler<HTMLLabelElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onAbort?: import("react").ReactEventHandler<HTMLLabelElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEnded?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPause?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlay?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onProgress?: import("react").ReactEventHandler<HTMLLabelElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onStalled?: import("react").ReactEventHandler<HTMLLabelElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLLabelElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLLabelElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragExit?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragOver?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDrop?: import("react").DragEventHandler<HTMLLabelElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onSelect?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onScroll?: import("react").UIEventHandler<HTMLLabelElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLLabelElement>;
    onWheel?: import("react").WheelEventHandler<HTMLLabelElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLLabelElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLLabelElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLLabelElement>;
    htmlFor?: string;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLLabelElement> & {
    theme?: import("@emotion/react").Theme;
} & AtomInputTypes, {}, {}>;
export declare const InputSelectStyled: import("@emotion/styled").StyledComponent<{
    form?: string;
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLSelectElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLSelectElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLSelectElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLSelectElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLSelectElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLSelectElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLSelectElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLSelectElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLSelectElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLSelectElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLSelectElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLSelectElement>;
    onFocus?: import("react").FocusEventHandler<HTMLSelectElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLSelectElement>;
    onBlur?: import("react").FocusEventHandler<HTMLSelectElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLSelectElement>;
    onChange?: import("react").ChangeEventHandler<HTMLSelectElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLSelectElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLSelectElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLSelectElement>;
    onInput?: import("react").FormEventHandler<HTMLSelectElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLSelectElement>;
    onReset?: import("react").FormEventHandler<HTMLSelectElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLSelectElement>;
    onSubmit?: import("react").FormEventHandler<HTMLSelectElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLSelectElement>;
    onInvalid?: import("react").FormEventHandler<HTMLSelectElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLSelectElement>;
    onLoad?: import("react").ReactEventHandler<HTMLSelectElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onError?: import("react").ReactEventHandler<HTMLSelectElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLSelectElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLSelectElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLSelectElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLSelectElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLSelectElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLSelectElement>;
    onAbort?: import("react").ReactEventHandler<HTMLSelectElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLSelectElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLSelectElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLSelectElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLSelectElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLSelectElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onEnded?: import("react").ReactEventHandler<HTMLSelectElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLSelectElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLSelectElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLSelectElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onPause?: import("react").ReactEventHandler<HTMLSelectElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onPlay?: import("react").ReactEventHandler<HTMLSelectElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLSelectElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onProgress?: import("react").ReactEventHandler<HTMLSelectElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLSelectElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLSelectElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLSelectElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onStalled?: import("react").ReactEventHandler<HTMLSelectElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLSelectElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLSelectElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLSelectElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLSelectElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLSelectElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLSelectElement>;
    onClick?: import("react").MouseEventHandler<HTMLSelectElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLSelectElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLSelectElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLSelectElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLSelectElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLSelectElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLSelectElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLSelectElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLSelectElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLSelectElement>;
    onDragExit?: import("react").DragEventHandler<HTMLSelectElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLSelectElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLSelectElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLSelectElement>;
    onDragOver?: import("react").DragEventHandler<HTMLSelectElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLSelectElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLSelectElement>;
    onDrop?: import("react").DragEventHandler<HTMLSelectElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLSelectElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLSelectElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLSelectElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLSelectElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLSelectElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLSelectElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLSelectElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLSelectElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLSelectElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLSelectElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLSelectElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLSelectElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLSelectElement>;
    onSelect?: import("react").ReactEventHandler<HTMLSelectElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLSelectElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLSelectElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLSelectElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLSelectElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLSelectElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLSelectElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLSelectElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLSelectElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLSelectElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLSelectElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLSelectElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLSelectElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLSelectElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLSelectElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLSelectElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLSelectElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLSelectElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLSelectElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLSelectElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLSelectElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLSelectElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLSelectElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLSelectElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLSelectElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLSelectElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLSelectElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLSelectElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLSelectElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLSelectElement>;
    onScroll?: import("react").UIEventHandler<HTMLSelectElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLSelectElement>;
    onWheel?: import("react").WheelEventHandler<HTMLSelectElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLSelectElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLSelectElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLSelectElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLSelectElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLSelectElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLSelectElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLSelectElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLSelectElement>;
    autoFocus?: boolean;
    autoComplete?: string;
    disabled?: boolean;
    multiple?: boolean;
    name?: string;
    required?: boolean;
    size?: number;
    value?: string | number | readonly string[];
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLSelectElement> & {
    theme?: import("@emotion/react").Theme;
} & AtomInputTypes, {}, {}>;
export declare const InputOptionStyled: import("@emotion/styled").StyledComponent<{
    label?: string;
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLOptionElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLOptionElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLOptionElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLOptionElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLOptionElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLOptionElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLOptionElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLOptionElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLOptionElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLOptionElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLOptionElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLOptionElement>;
    onFocus?: import("react").FocusEventHandler<HTMLOptionElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLOptionElement>;
    onBlur?: import("react").FocusEventHandler<HTMLOptionElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLOptionElement>;
    onChange?: import("react").FormEventHandler<HTMLOptionElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLOptionElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLOptionElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLOptionElement>;
    onInput?: import("react").FormEventHandler<HTMLOptionElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLOptionElement>;
    onReset?: import("react").FormEventHandler<HTMLOptionElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLOptionElement>;
    onSubmit?: import("react").FormEventHandler<HTMLOptionElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLOptionElement>;
    onInvalid?: import("react").FormEventHandler<HTMLOptionElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLOptionElement>;
    onLoad?: import("react").ReactEventHandler<HTMLOptionElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onError?: import("react").ReactEventHandler<HTMLOptionElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLOptionElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLOptionElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLOptionElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLOptionElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLOptionElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLOptionElement>;
    onAbort?: import("react").ReactEventHandler<HTMLOptionElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLOptionElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLOptionElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLOptionElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLOptionElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLOptionElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onEnded?: import("react").ReactEventHandler<HTMLOptionElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLOptionElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLOptionElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLOptionElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onPause?: import("react").ReactEventHandler<HTMLOptionElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onPlay?: import("react").ReactEventHandler<HTMLOptionElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLOptionElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onProgress?: import("react").ReactEventHandler<HTMLOptionElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLOptionElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLOptionElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLOptionElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onStalled?: import("react").ReactEventHandler<HTMLOptionElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLOptionElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLOptionElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLOptionElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLOptionElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLOptionElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLOptionElement>;
    onClick?: import("react").MouseEventHandler<HTMLOptionElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLOptionElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLOptionElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLOptionElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLOptionElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLOptionElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLOptionElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLOptionElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLOptionElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLOptionElement>;
    onDragExit?: import("react").DragEventHandler<HTMLOptionElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLOptionElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLOptionElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLOptionElement>;
    onDragOver?: import("react").DragEventHandler<HTMLOptionElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLOptionElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLOptionElement>;
    onDrop?: import("react").DragEventHandler<HTMLOptionElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLOptionElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLOptionElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLOptionElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLOptionElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLOptionElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLOptionElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLOptionElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLOptionElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLOptionElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLOptionElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLOptionElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLOptionElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLOptionElement>;
    onSelect?: import("react").ReactEventHandler<HTMLOptionElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLOptionElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLOptionElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLOptionElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLOptionElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLOptionElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLOptionElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLOptionElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLOptionElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLOptionElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLOptionElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLOptionElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLOptionElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLOptionElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLOptionElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLOptionElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLOptionElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLOptionElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLOptionElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLOptionElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLOptionElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLOptionElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLOptionElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLOptionElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLOptionElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLOptionElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLOptionElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLOptionElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLOptionElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLOptionElement>;
    onScroll?: import("react").UIEventHandler<HTMLOptionElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLOptionElement>;
    onWheel?: import("react").WheelEventHandler<HTMLOptionElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLOptionElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLOptionElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLOptionElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLOptionElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLOptionElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLOptionElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLOptionElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLOptionElement>;
    disabled?: boolean;
    value?: string | number | readonly string[];
    selected?: boolean;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLOptionElement> & {
    theme?: import("@emotion/react").Theme;
}, {}, {}>;
export declare const InputRangeLabelStyled: import("@emotion/styled").StyledComponent<{
    form?: string;
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLLabelElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLLabelElement>;
    onFocus?: import("react").FocusEventHandler<HTMLLabelElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLLabelElement>;
    onBlur?: import("react").FocusEventHandler<HTMLLabelElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLLabelElement>;
    onChange?: import("react").FormEventHandler<HTMLLabelElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLLabelElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onInput?: import("react").FormEventHandler<HTMLLabelElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onReset?: import("react").FormEventHandler<HTMLLabelElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onSubmit?: import("react").FormEventHandler<HTMLLabelElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onInvalid?: import("react").FormEventHandler<HTMLLabelElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLLabelElement>;
    onLoad?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onError?: import("react").ReactEventHandler<HTMLLabelElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLLabelElement>;
    onAbort?: import("react").ReactEventHandler<HTMLLabelElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLLabelElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEnded?: import("react").ReactEventHandler<HTMLLabelElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLLabelElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPause?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlay?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLLabelElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onProgress?: import("react").ReactEventHandler<HTMLLabelElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onStalled?: import("react").ReactEventHandler<HTMLLabelElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLLabelElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLLabelElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLLabelElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragExit?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragOver?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onDrop?: import("react").DragEventHandler<HTMLLabelElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLLabelElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLLabelElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLLabelElement>;
    onSelect?: import("react").ReactEventHandler<HTMLLabelElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLLabelElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLLabelElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLLabelElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLLabelElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement>;
    onScroll?: import("react").UIEventHandler<HTMLLabelElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLLabelElement>;
    onWheel?: import("react").WheelEventHandler<HTMLLabelElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLLabelElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLLabelElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLLabelElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLLabelElement>;
    htmlFor?: string;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLLabelElement> & {
    theme?: import("@emotion/react").Theme;
} & AtomInputTypes, {}, {}>;
export declare const InputRangeStyled: import("@emotion/styled").StyledComponent<{
    form?: string;
    slot?: string;
    title?: string;
    pattern?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement>;
    onFocus?: import("react").FocusEventHandler<HTMLInputElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement>;
    onBlur?: import("react").FocusEventHandler<HTMLInputElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement>;
    onChange?: import("react").ChangeEventHandler<HTMLInputElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLInputElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onInput?: import("react").FormEventHandler<HTMLInputElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onReset?: import("react").FormEventHandler<HTMLInputElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onSubmit?: import("react").FormEventHandler<HTMLInputElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onInvalid?: import("react").FormEventHandler<HTMLInputElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement>;
    onLoad?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onError?: import("react").ReactEventHandler<HTMLInputElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement>;
    onAbort?: import("react").ReactEventHandler<HTMLInputElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLInputElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLInputElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLInputElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onEnded?: import("react").ReactEventHandler<HTMLInputElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLInputElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onPause?: import("react").ReactEventHandler<HTMLInputElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlay?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLInputElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onProgress?: import("react").ReactEventHandler<HTMLInputElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLInputElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLInputElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onStalled?: import("react").ReactEventHandler<HTMLInputElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLInputElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLInputElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLInputElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onClick?: import("react").MouseEventHandler<HTMLInputElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLInputElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLInputElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragExit?: import("react").DragEventHandler<HTMLInputElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLInputElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragOver?: import("react").DragEventHandler<HTMLInputElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onDrop?: import("react").DragEventHandler<HTMLInputElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLInputElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLInputElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement>;
    onSelect?: import("react").ReactEventHandler<HTMLInputElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLInputElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLInputElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement>;
    onScroll?: import("react").UIEventHandler<HTMLInputElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLInputElement>;
    onWheel?: import("react").WheelEventHandler<HTMLInputElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement>;
    list?: string;
    height?: string | number;
    width?: string | number;
    autoFocus?: boolean;
    accept?: string;
    alt?: string;
    autoComplete?: string;
    capture?: boolean | "user" | "environment";
    checked?: boolean;
    crossOrigin?: string;
    disabled?: boolean;
    enterKeyHint?: "search" | "enter" | "done" | "go" | "next" | "previous" | "send";
    formAction?: string;
    formEncType?: string;
    formMethod?: string;
    formNoValidate?: boolean;
    formTarget?: string;
    max?: string | number;
    maxLength?: number;
    min?: string | number;
    minLength?: number;
    multiple?: boolean;
    name?: string;
    readOnly?: boolean;
    required?: boolean;
    size?: number;
    src?: string;
    step?: string | number;
    type?: import("react").HTMLInputTypeAttribute;
    value?: string | number | readonly string[];
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLInputElement> & {
    theme?: import("@emotion/react").Theme;
} & AtomInputTypes, {}, {}>;
export declare const SliderTrackStyled: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onFocus?: import("react").FocusEventHandler<HTMLDivElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement>;
    onBlur?: import("react").FocusEventHandler<HTMLDivElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement>;
    onChange?: import("react").FormEventHandler<HTMLDivElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLDivElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onInput?: import("react").FormEventHandler<HTMLDivElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onReset?: import("react").FormEventHandler<HTMLDivElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onSubmit?: import("react").FormEventHandler<HTMLDivElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onInvalid?: import("react").FormEventHandler<HTMLDivElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onLoad?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onError?: import("react").ReactEventHandler<HTMLDivElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onAbort?: import("react").ReactEventHandler<HTMLDivElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLDivElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLDivElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEnded?: import("react").ReactEventHandler<HTMLDivElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPause?: import("react").ReactEventHandler<HTMLDivElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlay?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onProgress?: import("react").ReactEventHandler<HTMLDivElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onStalled?: import("react").ReactEventHandler<HTMLDivElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLDivElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLDivElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLDivElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragExit?: import("react").DragEventHandler<HTMLDivElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLDivElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragOver?: import("react").DragEventHandler<HTMLDivElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDrop?: import("react").DragEventHandler<HTMLDivElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onSelect?: import("react").ReactEventHandler<HTMLDivElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onScroll?: import("react").UIEventHandler<HTMLDivElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLDivElement>;
    onWheel?: import("react").WheelEventHandler<HTMLDivElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement>;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLDivElement> & {
    theme?: import("@emotion/react").Theme;
} & AtomInputTypes & {
    minTrack: number;
    maxTrack: number;
}, {}, {}>;
export declare const InputTextBoxStyled: import("@emotion/styled").StyledComponent<{
    form?: string;
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLTextAreaElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLTextAreaElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLTextAreaElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLTextAreaElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLTextAreaElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLTextAreaElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLTextAreaElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLTextAreaElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLTextAreaElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLTextAreaElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLTextAreaElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLTextAreaElement>;
    onFocus?: import("react").FocusEventHandler<HTMLTextAreaElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLTextAreaElement>;
    onBlur?: import("react").FocusEventHandler<HTMLTextAreaElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLTextAreaElement>;
    onChange?: import("react").ChangeEventHandler<HTMLTextAreaElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onInput?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onReset?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onSubmit?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onInvalid?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLTextAreaElement>;
    onLoad?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onError?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLTextAreaElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLTextAreaElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLTextAreaElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLTextAreaElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLTextAreaElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLTextAreaElement>;
    onAbort?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onEnded?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onPause?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onPlay?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onProgress?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onStalled?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onClick?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragExit?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragOver?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDrop?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLTextAreaElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLTextAreaElement>;
    onSelect?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLTextAreaElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLTextAreaElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLTextAreaElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLTextAreaElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLTextAreaElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLTextAreaElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLTextAreaElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLTextAreaElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLTextAreaElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLTextAreaElement>;
    onScroll?: import("react").UIEventHandler<HTMLTextAreaElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLTextAreaElement>;
    onWheel?: import("react").WheelEventHandler<HTMLTextAreaElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLTextAreaElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLTextAreaElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLTextAreaElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLTextAreaElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLTextAreaElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLTextAreaElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLTextAreaElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLTextAreaElement>;
    autoFocus?: boolean;
    autoComplete?: string;
    disabled?: boolean;
    maxLength?: number;
    minLength?: number;
    name?: string;
    readOnly?: boolean;
    required?: boolean;
    value?: string | number | readonly string[];
    cols?: number;
    dirName?: string;
    rows?: number;
    wrap?: string;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLTextAreaElement> & {
    theme?: import("@emotion/react").Theme;
} & AtomInputTypes, {}, {}>;
export declare const VideoPlayerStyledContainer: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onFocus?: import("react").FocusEventHandler<HTMLDivElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement>;
    onBlur?: import("react").FocusEventHandler<HTMLDivElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement>;
    onChange?: import("react").FormEventHandler<HTMLDivElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLDivElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onInput?: import("react").FormEventHandler<HTMLDivElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onReset?: import("react").FormEventHandler<HTMLDivElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onSubmit?: import("react").FormEventHandler<HTMLDivElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onInvalid?: import("react").FormEventHandler<HTMLDivElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onLoad?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onError?: import("react").ReactEventHandler<HTMLDivElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onAbort?: import("react").ReactEventHandler<HTMLDivElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLDivElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLDivElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEnded?: import("react").ReactEventHandler<HTMLDivElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPause?: import("react").ReactEventHandler<HTMLDivElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlay?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onProgress?: import("react").ReactEventHandler<HTMLDivElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onStalled?: import("react").ReactEventHandler<HTMLDivElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLDivElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLDivElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLDivElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragExit?: import("react").DragEventHandler<HTMLDivElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLDivElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragOver?: import("react").DragEventHandler<HTMLDivElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDrop?: import("react").DragEventHandler<HTMLDivElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onSelect?: import("react").ReactEventHandler<HTMLDivElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onScroll?: import("react").UIEventHandler<HTMLDivElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLDivElement>;
    onWheel?: import("react").WheelEventHandler<HTMLDivElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement>;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLDivElement> & {
    theme?: import("@emotion/react").Theme;
} & AtomInputTypes, {}, {}>;
export declare const VideoPlayerStyled: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLVideoElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLVideoElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLVideoElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLVideoElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLVideoElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLVideoElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLVideoElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLVideoElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLVideoElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLVideoElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLVideoElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLVideoElement>;
    onFocus?: import("react").FocusEventHandler<HTMLVideoElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLVideoElement>;
    onBlur?: import("react").FocusEventHandler<HTMLVideoElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLVideoElement>;
    onChange?: import("react").FormEventHandler<HTMLVideoElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLVideoElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLVideoElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLVideoElement>;
    onInput?: import("react").FormEventHandler<HTMLVideoElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLVideoElement>;
    onReset?: import("react").FormEventHandler<HTMLVideoElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLVideoElement>;
    onSubmit?: import("react").FormEventHandler<HTMLVideoElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLVideoElement>;
    onInvalid?: import("react").FormEventHandler<HTMLVideoElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLVideoElement>;
    onLoad?: import("react").ReactEventHandler<HTMLVideoElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onError?: import("react").ReactEventHandler<HTMLVideoElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLVideoElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLVideoElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLVideoElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLVideoElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLVideoElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLVideoElement>;
    onAbort?: import("react").ReactEventHandler<HTMLVideoElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLVideoElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLVideoElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLVideoElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLVideoElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLVideoElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onEnded?: import("react").ReactEventHandler<HTMLVideoElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLVideoElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLVideoElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLVideoElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onPause?: import("react").ReactEventHandler<HTMLVideoElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onPlay?: import("react").ReactEventHandler<HTMLVideoElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLVideoElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onProgress?: import("react").ReactEventHandler<HTMLVideoElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLVideoElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLVideoElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLVideoElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onStalled?: import("react").ReactEventHandler<HTMLVideoElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLVideoElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLVideoElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLVideoElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLVideoElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLVideoElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLVideoElement>;
    onClick?: import("react").MouseEventHandler<HTMLVideoElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLVideoElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLVideoElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLVideoElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLVideoElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLVideoElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLVideoElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLVideoElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLVideoElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLVideoElement>;
    onDragExit?: import("react").DragEventHandler<HTMLVideoElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLVideoElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLVideoElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLVideoElement>;
    onDragOver?: import("react").DragEventHandler<HTMLVideoElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLVideoElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLVideoElement>;
    onDrop?: import("react").DragEventHandler<HTMLVideoElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLVideoElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLVideoElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLVideoElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLVideoElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLVideoElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLVideoElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLVideoElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLVideoElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLVideoElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLVideoElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLVideoElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLVideoElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLVideoElement>;
    onSelect?: import("react").ReactEventHandler<HTMLVideoElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLVideoElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLVideoElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLVideoElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLVideoElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLVideoElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLVideoElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLVideoElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLVideoElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLVideoElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLVideoElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLVideoElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLVideoElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLVideoElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLVideoElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLVideoElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLVideoElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLVideoElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLVideoElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLVideoElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLVideoElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLVideoElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLVideoElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLVideoElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLVideoElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLVideoElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLVideoElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLVideoElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLVideoElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLVideoElement>;
    onScroll?: import("react").UIEventHandler<HTMLVideoElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLVideoElement>;
    onWheel?: import("react").WheelEventHandler<HTMLVideoElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLVideoElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLVideoElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLVideoElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLVideoElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLVideoElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLVideoElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLVideoElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLVideoElement>;
    height?: string | number;
    width?: string | number;
    crossOrigin?: string;
    src?: string;
    playsInline?: boolean;
    poster?: string;
    disablePictureInPicture?: boolean;
    disableRemotePlayback?: boolean;
    autoPlay?: boolean;
    controls?: boolean;
    controlsList?: string;
    loop?: boolean;
    mediaGroup?: string;
    muted?: boolean;
    preload?: string;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLVideoElement> & {
    theme?: import("@emotion/react").Theme;
} & AtomInputTypes, {}, {}>;
export {};
