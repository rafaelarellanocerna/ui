'use strict';

var tslib = require('tslib');
var jsxRuntime = require('@emotion/react/jsx-runtime');
var react = require('@emotion/react');
var React = require('react');
var index$3 = require('../AtomIcon/index.js');
var index$1 = require('../AtomLink/index.js');
var index$2 = require('../AtomText/index.js');
var index = require('../AtomWrapper/index.js');

var RecursiveDropdown = function (props, recursive, hover, setHover, stylesWrapper, stylesText, stylesLink) {
    var _a = tslib.__read(React.useState(0), 2), actual = _a[0], setActual = _a[1];
    return (jsxRuntime.jsx(index, tslib.__assign({ position: "absolute", shadow: true, backgroundColor: "#fff", width: "max-content", justifyContent: "flex-start", alignItems: "center", borderRadius: "5px", padding: "5px 0", customCSS: react.css(templateObject_3 || (templateObject_3 = tslib.__makeTemplateObject(["\n        * {\n          align-items: center !important;\n          justify-content: space-around !important;\n          align-text: center;\n        }\n        ", "\n        transform: translateX(-50%);\n        a {\n          width: 100%;\n          padding: 5px 10px;\n          font-width: bold;\n        }\n        li {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          width: max-content;\n          padding: 0px 4px;\n        }\n        min-width: 130px;\n      "], ["\n        * {\n          align-items: center !important;\n          justify-content: space-around !important;\n          align-text: center;\n        }\n        ", "\n        transform: translateX(-50%);\n        a {\n          width: 100%;\n          padding: 5px 10px;\n          font-width: bold;\n        }\n        li {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          width: max-content;\n          padding: 0px 4px;\n        }\n        min-width: 130px;\n      "])), recursive
            ? react.css(templateObject_1 || (templateObject_1 = tslib.__makeTemplateObject(["\n              top: 0;\n              left: 140%;\n            "], ["\n              top: 0;\n              left: 140%;\n            "]))) : react.css(templateObject_2 || (templateObject_2 = tslib.__makeTemplateObject(["\n              top: 18px;\n              left: 50%;\n            "], ["\n              top: 18px;\n              left: 50%;\n            "])))) }, stylesWrapper, { children: props === null || props === void 0 ? void 0 : props.map(function (link, index) { return (jsxRuntime.jsx(jsxRuntime.Fragment, { children: link.type === 'dropdown' ? (jsxRuntime.jsxs(index$1, tslib.__assign({ margin: "0px", onHoverEnd: function () { return setHover(false); }, onHoverStart: function () {
                    setHover(true);
                    setActual(index);
                }, customCSS: react.css(templateObject_4 || (templateObject_4 = tslib.__makeTemplateObject(["\n                width: 100%;\n                padding: 5px 10px;\n              "], ["\n                width: 100%;\n                padding: 5px 10px;\n              "]))) }, { children: [jsxRuntime.jsxs(index$2, tslib.__assign({ fontSize: "12px", as: "a" }, link, { color: "#7F7F7F", padding: "5px 10px", align: "center", fontWeight: 600, customCSS: react.css(templateObject_5 || (templateObject_5 = tslib.__makeTemplateObject(["\n                  display: flex;\n                  flex-direction: row;\n                  align-items: center;\n                  border-radius: 2px;\n                  text-align: center;\n                  width: max-content;\n                  flex-grow: 1;\n                  align-items: center;\n                  justify-content: center;\n                  align-text: center;\n                  padding: 5px 10px;\n                  :hover {\n                    width: 100%;\n                    background-color: #dadada;\n                  }\n                  transition: background-color 0.3s ease;\n                "], ["\n                  display: flex;\n                  flex-direction: row;\n                  align-items: center;\n                  border-radius: 2px;\n                  text-align: center;\n                  width: max-content;\n                  flex-grow: 1;\n                  align-items: center;\n                  justify-content: center;\n                  align-text: center;\n                  padding: 5px 10px;\n                  :hover {\n                    width: 100%;\n                    background-color: #dadada;\n                  }\n                  transition: background-color 0.3s ease;\n                "]))) }, stylesText, { children: [link.label, jsxRuntime.jsx(index$3, { customCSS: react.css(templateObject_6 || (templateObject_6 = tslib.__makeTemplateObject(["\n                    margin: 0px 0px 0px 10px;\n                    transform: rotate(-90deg);\n                  "], ["\n                    margin: 0px 0px 0px 10px;\n                    transform: rotate(-90deg);\n                  "]))), height: "10px", width: "10px", color: "#7F7F7F", icon: "https://storage.googleapis.com/cdn-bucket-ixulabs-commons/frontend-library/icons/arrow-down-3101.svg" })] })), link.subFields && hover && index === actual && (jsxRuntime.jsx(RecursiveDropdownHook, { data: link.subFields, recursive: true }))] }), "".concat(index + 1))) : (jsxRuntime.jsx(index$1, tslib.__assign({ fontSize: "12px", as: "a" }, link, { color: "#7F7F7F", padding: "5px 10px", margin: "4px 0px", fontWeight: 600, customCSS: react.css(templateObject_7 || (templateObject_7 = tslib.__makeTemplateObject(["\n                display: flex;\n                flex-direction: row;\n                align-items: center;\n                border-radius: 2px;\n                text-align: center;\n                width: 100%;\n                padding: 5px 10px;\n                :hover {\n                  width: 100%;\n                  background-color: #dadada;\n                }\n                transition: background-color 0.3s ease;\n              "], ["\n                display: flex;\n                flex-direction: row;\n                align-items: center;\n                border-radius: 2px;\n                text-align: center;\n                width: 100%;\n                padding: 5px 10px;\n                :hover {\n                  width: 100%;\n                  background-color: #dadada;\n                }\n                transition: background-color 0.3s ease;\n              "]))) }, stylesLink, { children: link.label }))) })); }) })));
};
var RecursiveDropdownHook = function (_a) {
    var data = _a.data, _b = _a.recursive, recursive = _b === void 0 ? false : _b, stylesWrapper = _a.stylesWrapper, stylesText = _a.stylesText, stylesLink = _a.stylesLink;
    var _c = tslib.__read(React.useState(false), 2), hover = _c[0], setHover = _c[1];
    return (jsxRuntime.jsx(jsxRuntime.Fragment, { children: RecursiveDropdown(data, recursive, hover, setHover, stylesWrapper, stylesText, stylesLink) }));
};
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7;

module.exports = RecursiveDropdownHook;
//# sourceMappingURL=index.js.map
