'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var jsxRuntime = require('@emotion/react/jsx-runtime');

function isClassComponent(Component) {
    return !!(typeof Component === 'function'
        && Component.prototype
        && Component.prototype.isReactComponent);
}
function isForwardRefComponent(Component) {
    var _a;
    return !!(typeof Component === 'object'
        && ((_a = Component.$$typeof) === null || _a === void 0 ? void 0 : _a.toString()) === 'Symbol(react.forward_ref)');
}
var ReactRenderer = /** @class */ (function () {
    function ReactRenderer(component, _a) {
        var _b;
        var editor = _a.editor, _c = _a.props, props = _c === void 0 ? {} : _c, _d = _a.as, as = _d === void 0 ? 'div' : _d, _e = _a.className, className = _e === void 0 ? '' : _e;
        this.ref = null;
        this.id = Math.floor(Math.random() * 0xFFFFFFFF).toString();
        this.component = component;
        this.editor = editor;
        this.props = props;
        this.element = document.createElement(as);
        this.element.classList.add('react-renderer');
        if (className) {
            (_b = this.element.classList).add.apply(_b, tslib.__spreadArray([], tslib.__read(className.split(' ')), false));
        }
        this.render();
    }
    ReactRenderer.prototype.render = function () {
        var _this = this;
        var _a;
        var Component = this.component;
        var props = this.props;
        if (isClassComponent(Component) || isForwardRefComponent(Component)) {
            props.ref = function (ref) {
                _this.ref = ref;
            };
        }
        this.reactElement = jsxRuntime.jsx(Component, tslib.__assign({}, props));
        if ((_a = this.editor) === null || _a === void 0 ? void 0 : _a.contentComponent) {
            this.editor.contentComponent.setState({
                renderers: this.editor.contentComponent.state.renderers.set(this.id, this),
            });
        }
    };
    ReactRenderer.prototype.updateProps = function (props) {
        if (props === void 0) { props = {}; }
        this.props = tslib.__assign(tslib.__assign({}, this.props), props);
        this.render();
    };
    ReactRenderer.prototype.destroy = function () {
        var _a;
        if ((_a = this.editor) === null || _a === void 0 ? void 0 : _a.contentComponent) {
            var renderers = this.editor.contentComponent.state.renderers;
            renderers.delete(this.id);
            this.editor.contentComponent.setState({
                renderers: renderers,
            });
        }
    };
    return ReactRenderer;
}());

exports.ReactRenderer = ReactRenderer;
//# sourceMappingURL=ReactRenderer.js.map
