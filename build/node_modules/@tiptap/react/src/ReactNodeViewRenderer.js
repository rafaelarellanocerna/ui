'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var jsxRuntime = require('@emotion/react/jsx-runtime');
var tiptapCore_esm = require('../../core/dist/tiptap-core.esm.js');
var ReactRenderer = require('./ReactRenderer.js');
var useReactNodeView = require('./useReactNodeView.js');

var ReactNodeView = /** @class */ (function (_super) {
    tslib.__extends(ReactNodeView, _super);
    function ReactNodeView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ReactNodeView.prototype.mount = function () {
        var _this = this;
        var props = {
            editor: this.editor,
            node: this.node,
            decorations: this.decorations,
            selected: false,
            extension: this.extension,
            getPos: function () { return _this.getPos(); },
            updateAttributes: function (attributes) {
                if (attributes === void 0) { attributes = {}; }
                return _this.updateAttributes(attributes);
            },
            deleteNode: function () { return _this.deleteNode(); },
        };
        if (!this.component.displayName) {
            var capitalizeFirstChar = function (string) {
                return string.charAt(0).toUpperCase() + string.substring(1);
            };
            this.component.displayName = capitalizeFirstChar(this.extension.name);
        }
        var ReactNodeViewProvider = function (componentProps) {
            var Component = _this.component;
            var onDragStart = _this.onDragStart.bind(_this);
            var nodeViewContentRef = function (element) {
                if (element
                    && _this.contentDOMElement
                    && element.firstChild !== _this.contentDOMElement) {
                    element.appendChild(_this.contentDOMElement);
                }
            };
            return (jsxRuntime.jsx(useReactNodeView.ReactNodeViewContext.Provider, tslib.__assign({ value: { onDragStart: onDragStart, nodeViewContentRef: nodeViewContentRef } }, { children: jsxRuntime.jsx(Component, tslib.__assign({}, componentProps)) })));
        };
        ReactNodeViewProvider.displayName = 'ReactNodeView';
        this.contentDOMElement = this.node.isLeaf
            ? null
            : document.createElement(this.node.isInline ? 'span' : 'div');
        if (this.contentDOMElement) {
            // For some reason the whiteSpace prop is not inherited properly in Chrome and Safari
            // With this fix it seems to work fine
            // See: https://github.com/ueberdosis/tiptap/issues/1197
            this.contentDOMElement.style.whiteSpace = 'inherit';
        }
        var as = this.node.isInline ? 'span' : 'div';
        if (this.options.as) {
            as = this.options.as;
        }
        this.renderer = new ReactRenderer.ReactRenderer(ReactNodeViewProvider, {
            editor: this.editor,
            props: props,
            as: as,
            className: "node-".concat(this.node.type.name),
        });
    };
    Object.defineProperty(ReactNodeView.prototype, "dom", {
        get: function () {
            var _a;
            if (this.renderer.element.firstElementChild
                && !((_a = this.renderer.element.firstElementChild) === null || _a === void 0 ? void 0 : _a.hasAttribute('data-node-view-wrapper'))) {
                throw Error('Please use the NodeViewWrapper component for your node view.');
            }
            return this.renderer.element;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReactNodeView.prototype, "contentDOM", {
        get: function () {
            if (this.node.isLeaf) {
                return null;
            }
            return this.contentDOMElement;
        },
        enumerable: false,
        configurable: true
    });
    ReactNodeView.prototype.update = function (node, decorations) {
        var _this = this;
        var updateProps = function (props) {
            _this.renderer.updateProps(props);
        };
        if (node.type !== this.node.type) {
            return false;
        }
        if (typeof this.options.update === 'function') {
            var oldNode = this.node;
            var oldDecorations = this.decorations;
            this.node = node;
            this.decorations = decorations;
            return this.options.update({
                oldNode: oldNode,
                oldDecorations: oldDecorations,
                newNode: node,
                newDecorations: decorations,
                updateProps: function () { return updateProps({ node: node, decorations: decorations }); },
            });
        }
        if (node === this.node && this.decorations === decorations) {
            return true;
        }
        this.node = node;
        this.decorations = decorations;
        updateProps({ node: node, decorations: decorations });
        return true;
    };
    ReactNodeView.prototype.selectNode = function () {
        this.renderer.updateProps({
            selected: true,
        });
    };
    ReactNodeView.prototype.deselectNode = function () {
        this.renderer.updateProps({
            selected: false,
        });
    };
    ReactNodeView.prototype.destroy = function () {
        this.renderer.destroy();
        this.contentDOMElement = null;
    };
    return ReactNodeView;
}(tiptapCore_esm.NodeView));
function ReactNodeViewRenderer(component, options) {
    return function (props) {
        // try to get the parent component
        // this is important for vue devtools to show the component hierarchy correctly
        // maybe it’s `undefined` because <editor-content> isn’t rendered yet
        if (!props.editor.contentComponent) {
            return {};
        }
        return new ReactNodeView(component, props, options);
    };
}

exports.ReactNodeViewRenderer = ReactNodeViewRenderer;
//# sourceMappingURL=ReactNodeViewRenderer.js.map
