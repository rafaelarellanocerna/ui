import { SerializedStyles } from '@emotion/utils';
import { FormikValues } from 'formik';
import { ChangeEvent, KeyboardEvent, ReactNode, RefObject } from 'react';
export declare type ImagesArray = {
    id: string;
    url: string;
    file: File;
};
export declare type FilesArray = {
    id: string;
    url?: string;
    file: File;
};
export declare type AtomInputTypes = {
    onClick?: () => void;
    type?: 'password' | 'select' | 'time' | 'selectBig' | 'checkbox' | 'toggle' | 'email' | 'text' | 'search' | 'number' | 'radio' | 'tel' | 'date' | 'textbox' | 'tel' | 'dragdrop' | 'file' | 'range' | 'dragdropMultiple' | 'dragdropMultipleImages' | 'phone' | 'color' | 'dragDropFile' | 'dragdropMultipleFiles';
    justifyContent?: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly';
    alignItems?: 'center' | 'flex-start' | 'flex-end';
    flexDirection?: 'column' | 'row' | 'row-reverse' | 'column-reverse';
    formik?: FormikValues;
    refObject?: RefObject<any>;
    autoFocus?: boolean;
    children?: React.ReactNode;
    onFocus?: (event: React.FocusEvent<HTMLLabelElement | HTMLDivElement | HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;
    video?: boolean;
    heightpreview?: string;
    disabled?: boolean;
    value?: string | number | boolean;
    dropActive?: boolean;
    autoComplete?: string;
    onChange?: (e: ChangeEvent<any>) => void;
    onBlur?: (e: any) => void;
    onChangeDrop?: (e: File) => void;
    onChangeImageEditor?: (value: {
        url: string;
        file: File;
    }) => void;
    onUpdateValues?: (value: {
        min: number;
        max: number;
    }) => void;
    onKeyUp?: (e: KeyboardEvent<any>) => void;
    onKeyPress?: (e: KeyboardEvent<any>) => void;
    error?: string;
    errorColor?: string;
    errorFontSize?: string;
    errorFontWeight?: string;
    errorFontFamily?: string;
    errorTextAlign?: string;
    errorMargin?: string;
    errorPadding?: string;
    errorHeight?: string;
    label?: string;
    labelWidth?: string;
    labelHeight?: string;
    labelTextAlign?: string;
    labelMargin?: string;
    labelColor?: string;
    labelPadding?: string;
    labelFontSize?: string;
    labelFontWeight?: string | number;
    labelFontFamily?: string;
    spanMargin?: string;
    id?: string;
    name?: string;
    margin?: string;
    padding?: string;
    width?: string;
    maxWidth?: string;
    height?: string;
    borderRadius?: string;
    border?: string;
    color?: string;
    backgroundColor?: string;
    fontSize?: string;
    fontWeight?: string;
    fontFamily?: string;
    placeholder?: string;
    placeholderDragDrop?: (e: boolean) => ReactNode;
    placeholderColor?: string;
    multiple?: boolean;
    checked?: boolean;
    optionColor?: string;
    options?: {
        value: string | number;
        label: string;
        id: string;
    }[];
    minRange?: number;
    maxRange?: number;
    loadValues?: {
        min: number;
        max: number;
    };
    thumbColor?: string;
    thumbBorder?: string;
    trackColor?: string;
    trackBackground?: string;
    defaultText?: string;
    imagePreview?: string;
    imagePreviewMultiple?: ImagesArray[];
    imagePreviewArray?: string[];
    accentColor?: string;
    customCSS?: SerializedStyles;
    wrapperCustomCSS?: SerializedStyles;
    typeFile?: string;
    step?: string | number;
};
