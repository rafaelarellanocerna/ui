{"version":3,"file":"index.js","sources":["../../../@hooks/usePermissions/index.tsx"],"sourcesContent":["import { gql, useQuery } from '@apollo/client';\r\nimport { IFunction, IFunctionArrayInput, IQueryFilter } from '@types';\r\nimport { DependencyList, useMemo } from 'react';\r\n\r\nexport const SERVICES_BY_PROJECT = gql`\r\n  query ServicesByProject($servicesByProjectId: UUID!) {\r\n    servicesByProject(id: $servicesByProjectId) {\r\n      id\r\n      name\r\n      codeName\r\n      image\r\n      description\r\n      priority\r\n      updatedAt\r\n      createdAt\r\n      isActive\r\n      label\r\n      functions {\r\n        id\r\n        name\r\n        codeName\r\n        functionType\r\n        microservice {\r\n          id\r\n          description\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const MEBYID = gql`\r\n  query meById($id: UUID!) {\r\n    meById(id: $id) {\r\n      id\r\n      email\r\n      createdAt\r\n      updatedAt\r\n      email\r\n      recoverToken\r\n      recoverRegister\r\n      isActive\r\n      firstTime\r\n      loginCount\r\n      taxonomies {\r\n        memberId\r\n        taxonomyId\r\n      }\r\n      groups {\r\n        id\r\n        name\r\n        description\r\n        groupTaxonomies {\r\n          taxonomy {\r\n            id\r\n            name\r\n          }\r\n        }\r\n      }\r\n      memberRoles {\r\n        id\r\n        role {\r\n          id\r\n          name\r\n          codeName\r\n        }\r\n        roleId\r\n      }\r\n      memberProjects {\r\n        id\r\n        projectId\r\n        project {\r\n          name\r\n          description\r\n          logo\r\n          tagLine\r\n          url\r\n        }\r\n        memberProjectRoleProject {\r\n          projectRoleId\r\n          projectRole {\r\n            name\r\n            codeName\r\n            projectId\r\n            id\r\n            createdAt\r\n            updatedAt\r\n          }\r\n          id\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n      memberCompanies {\r\n        companyId\r\n        company {\r\n          id\r\n          name\r\n        }\r\n      }\r\n      profile {\r\n        id\r\n        firstName\r\n        lastName\r\n        phone\r\n        photo\r\n        countryId\r\n        country {\r\n          name\r\n          code\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ROLSBYPROJECTS = gql`\r\n  query rolesByProject($id: UUID!) {\r\n    rolesByProject(id: $id) {\r\n      id\r\n      name\r\n      codeName\r\n      permission {\r\n        rules\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\ntype Props = {\r\n  userId?: string;\r\n  role?: string;\r\n  projectId?: string;\r\n  service?: string;\r\n};\r\n\r\nconst DEFAULT_PERMISSION = 'DISABLED';\r\n\r\nexport type PermissionType = {\r\n  access:\r\n    | 'READER'\r\n    | 'WRITE'\r\n    | 'CUSTOM'\r\n    | 'DISABLED'\r\n    | typeof DEFAULT_PERMISSION;\r\n  permissions: IFunctionArrayInput[];\r\n};\r\n\r\nconst AccessRol = {\r\n  __owner__: 'WRITE',\r\n  __project_manager__: 'WRITE',\r\n  __project_user__: 'READER',\r\n  default: DEFAULT_PERMISSION,\r\n};\r\n\r\nconst usePermissions = (props = {} as Props, deps?: DependencyList) => {\r\n  const { userId, projectId, service, role } = props;\r\n\r\n  const { data: dataUser } = useQuery<IQueryFilter<'meById'>>(MEBYID, {\r\n    variables: {\r\n      id: userId,\r\n    },\r\n    skip: !userId,\r\n  });\r\n\r\n  const { data: dataServices } = useQuery<IQueryFilter<'servicesByProject'>>(\r\n    SERVICES_BY_PROJECT,\r\n    {\r\n      variables: {\r\n        servicesByProjectId: projectId,\r\n      },\r\n    }\r\n  );\r\n\r\n  const { data: dataRoles } = useQuery<IQueryFilter<'rolesByProject'>>(\r\n    ROLSBYPROJECTS,\r\n    {\r\n      variables: {\r\n        id: projectId,\r\n      },\r\n    }\r\n  );\r\n\r\n  const permission = useMemo<PermissionType>(() => {\r\n    const user = dataUser?.meById;\r\n    const roles = dataRoles?.rolesByProject;\r\n\r\n    const FindRole =\r\n      role ??\r\n      user?.memberProjects?.find((e) => e.projectId === projectId)\r\n        ?.memberProjectRoleProject.projectRole.codeName ??\r\n      user?.memberRoles?.find((_, idx) => idx === 0)?.role.codeName;\r\n\r\n    const FindRoleProject = roles?.find((e) => e.codeName === FindRole);\r\n    const Rule = FindRoleProject?.permission?.rules;\r\n\r\n    const GetRule = (rule: string): PermissionType => {\r\n      type ConvertJSONType = {\r\n        codeName: string;\r\n        access: string;\r\n        permision: IFunction[];\r\n      }[];\r\n      const ConvertJSON = JSON.parse(rule) as ConvertJSONType;\r\n      const FindRule = ConvertJSON.find((e) => e.codeName === service);\r\n      const RuleAccess = (FindRule?.access ??\r\n        DEFAULT_PERMISSION) as PermissionType['access'];\r\n\r\n      return {\r\n        access: RuleAccess,\r\n        permissions: FindRule?.permision ?? [],\r\n      };\r\n    };\r\n    const GetRoleByUser = (): PermissionType => ({\r\n      access: (AccessRol[FindRole as keyof typeof AccessRol] ??\r\n        DEFAULT_PERMISSION) as PermissionType['access'],\r\n      permissions: [],\r\n    });\r\n\r\n    return Rule ? GetRule(Rule) : GetRoleByUser();\r\n  }, [dataServices, dataRoles, dataUser, role, ...(deps ?? [])]);\r\n\r\n  return permission;\r\n};\r\n\r\nexport const havePermission = (\r\n  permission: PermissionType,\r\n  funcinalityConame: string\r\n) => {\r\n  if (permission.access === 'DISABLED') {\r\n    return false;\r\n  }\r\n  const isExist = permission.permissions.some(\r\n    (e) => e.codeName === funcinalityConame\r\n  );\r\n  return !!isExist;\r\n};\r\n\r\nexport default usePermissions;\r\n"],"names":["gql","__makeTemplateObject","useQuery","useMemo","__read"],"mappings":"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"}