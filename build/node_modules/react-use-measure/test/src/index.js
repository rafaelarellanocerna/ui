'use strict';

var tslib = require('tslib');
var jsxRuntime = require('@emotion/react/jsx-runtime');
var React = require('react');
var ReactDOM = require('react-dom');
var web = require('../../dist/web.js');
var reactSpringWeb_esm = require('../../../@react-spring/web/dist/react-spring-web.esm.js');
var styles = require('./styles.js');
var reactSpringCore_esm = require('../../../@react-spring/core/dist/react-spring-core.esm.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);

function ScrollBox(_a) {
    var size = _a.size, color = _a.color, children = _a.children;
    var scrollBoxRef = React__default["default"].useRef(null);
    React__default["default"].useLayoutEffect(function () {
        if (!scrollBoxRef.current)
            return;
        var height = scrollBoxRef.current.offsetHeight;
        var width = scrollBoxRef.current.offsetWidth;
        scrollBoxRef.current.scrollTop = 1000 / 2 - height / 2;
        scrollBoxRef.current.scrollLeft = 1000 / 2 - width / 2;
    }, []);
    return (jsxRuntime.jsx(styles.ScrollArea, tslib.__assign({ ref: scrollBoxRef, size: size, color: color }, { children: jsxRuntime.jsx(styles.ScrollContent, { children: children }) })));
}
function MeasuredBox(_a) {
    var color = _a.color, offsetSize = _a.offsetSize;
    // This line is all you need ...
    var _b = tslib.__read(web({ scroll: true, debounce: { scroll: 0, resize: 0 }, offsetSize: offsetSize }), 2), ref = _b[0], bounds = _b[1];
    // The rest is just for effects, hover and mouse tracking
    var prev = React.useRef(bounds);
    var _c = tslib.__read(React.useState(false), 2), big = _c[0], setBig = _c[1];
    var _d = tslib.__read(React.useState(false), 2), hovered = _d[0], setHover = _d[1];
    var _e = tslib.__read(React.useState([0, 0]), 2), xy = _e[0], setXY = _e[1];
    var _f = tslib.__read(reactSpringCore_esm.useSpring(function () { return Object.keys(bounds).reduce(function (acc, key) {
        var _a;
        return (tslib.__assign(tslib.__assign({}, acc), (_a = {}, _a[key] = 0, _a)));
    }, {}); }), 2), springs = _f[0], set = _f[1];
    React.useEffect(function () {
        set(Object.keys(bounds).reduce(function (acc, key) {
            var _a;
            return (tslib.__assign(tslib.__assign({}, acc), (_a = {}, _a[key] = prev.current[key] !== bounds[key] ? 1 : 0, _a)));
        }, {}));
        prev.current = tslib.__assign({}, bounds);
    }, [bounds, set]);
    return (jsxRuntime.jsxs(styles.Box, tslib.__assign({ ref: ref, onMouseEnter: function () { return setHover(true); }, onMouseLeave: function () { return setHover(false); }, onMouseMove: function (_a) {
            var clientX = _a.clientX, clientY = _a.clientY;
            return setXY([clientX, clientY]);
        }, onClick: function () { return setBig(!big); }, size: big ? 270 : 235, color: color }, { children: [Object.keys(bounds).map(function (key) { return (jsxRuntime.jsxs(React.Fragment, { children: [jsxRuntime.jsx("span", { children: key }), jsxRuntime.jsxs(reactSpringWeb_esm.a.span, tslib.__assign({ style: { background: springs[key].interpolate(function (o) { return "rgba(0,0,0,".concat(o, ")"); }) } }, { children: [Math.round(bounds[key]), "px"] }))] }, key)); }), hovered && (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx("span", { children: "mouse x" }), jsxRuntime.jsxs("span", { children: [Math.round(xy[0] - bounds.left), "px"] }), jsxRuntime.jsx("span", { children: "mouse y" }), jsxRuntime.jsxs("span", { children: [Math.round(xy[1] - bounds.top), "px"] })] }))] })));
}
function Example() {
    var _a = tslib.__read(React.useState(false), 2), offsetSize = _a[0], setOffsetSize = _a[1];
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(styles.Global, { color: "white" }), jsxRuntime.jsx("div", tslib.__assign({ style: { width: '150vw', height: '150vh', marginLeft: '-25vw', paddingTop: '20vh' } }, { children: jsxRuntime.jsxs(styles.Container, tslib.__assign({ scale: 0.9 }, { children: [jsxRuntime.jsx(ScrollBox, tslib.__assign({ size: "66vh", color: "#272730" }, { children: jsxRuntime.jsx(ScrollBox, tslib.__assign({ size: "55vh", color: "#676770" }, { children: jsxRuntime.jsx(MeasuredBox, { color: "#F7567C", offsetSize: offsetSize }) })) })), jsxRuntime.jsxs(styles.Button, tslib.__assign({ onClick: function () { return setOffsetSize(!offsetSize); } }, { children: [jsxRuntime.jsx("span", { children: "OffsetSize: " }), offsetSize ? 'True' : 'False'] }))] })) }))] }));
}
ReactDOM__default["default"].render(jsxRuntime.jsx(Example, {}), document.getElementById('root'));
//# sourceMappingURL=index.js.map
