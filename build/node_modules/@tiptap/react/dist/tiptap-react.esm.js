'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tiptapCore_esm = require('../../core/dist/tiptap-core.esm.js');
var React = require('react');
var ReactDOM = require('react-dom');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);

class Editor extends tiptapCore_esm.Editor {
    constructor() {
        super(...arguments);
        this.contentComponent = null;
    }
}

function useForceUpdate() {
    const [, setValue] = React.useState(0);
    return () => setValue(value => value + 1);
}
const useEditor = (options = {}, deps = []) => {
    const [editor, setEditor] = React.useState(null);
    const forceUpdate = useForceUpdate();
    React.useEffect(() => {
        const instance = new Editor(options);
        setEditor(instance);
        instance.on('transaction', () => {
            requestAnimationFrame(() => {
                requestAnimationFrame(() => {
                    forceUpdate();
                });
            });
        });
        return () => {
            instance.destroy();
        };
    }, deps);
    return editor;
};

const ReactNodeViewContext = React.createContext({
    onDragStart: undefined,
});
const useReactNodeView = () => React.useContext(ReactNodeViewContext);

const Portals = ({ renderers }) => {
    return (React__default["default"].createElement(React__default["default"].Fragment, null, Array.from(renderers).map(([key, renderer]) => {
        return ReactDOM__default["default"].createPortal(renderer.reactElement, renderer.element, key);
    })));
};
class PureEditorContent extends React__default["default"].Component {
    constructor(props) {
        super(props);
        this.editorContentRef = React__default["default"].createRef();
        this.state = {
            renderers: new Map(),
        };
    }
    componentDidMount() {
        this.init();
    }
    componentDidUpdate() {
        this.init();
    }
    init() {
        const { editor } = this.props;
        if (editor && editor.options.element) {
            if (editor.contentComponent) {
                return;
            }
            const element = this.editorContentRef.current;
            element.append(...editor.options.element.childNodes);
            editor.setOptions({
                element,
            });
            editor.contentComponent = this;
            editor.createNodeViews();
        }
    }
    componentWillUnmount() {
        const { editor } = this.props;
        if (!editor) {
            return;
        }
        if (!editor.isDestroyed) {
            editor.view.setProps({
                nodeViews: {},
            });
        }
        editor.contentComponent = null;
        if (!editor.options.element.firstChild) {
            return;
        }
        const newElement = document.createElement('div');
        newElement.append(...editor.options.element.childNodes);
        editor.setOptions({
            element: newElement,
        });
    }
    render() {
        const { editor, ...rest } = this.props;
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement("div", { ref: this.editorContentRef, ...rest }),
            React__default["default"].createElement(Portals, { renderers: this.state.renderers })));
    }
}
const EditorContent = React__default["default"].memo(PureEditorContent);

React__default["default"].forwardRef((props, ref) => {
    const { onDragStart } = useReactNodeView();
    const Tag = props.as || 'div';
    return (React__default["default"].createElement(Tag, { ...props, ref: ref, "data-node-view-wrapper": "", onDragStart: onDragStart, style: {
            ...props.style,
            whiteSpace: 'normal',
        } }));
});

exports.CommandManager = tiptapCore_esm.CommandManager;
exports.Extension = tiptapCore_esm.Extension;
exports.InputRule = tiptapCore_esm.InputRule;
exports.Mark = tiptapCore_esm.Mark;
exports.Node = tiptapCore_esm.Node;
exports.NodeView = tiptapCore_esm.NodeView;
exports.PasteRule = tiptapCore_esm.PasteRule;
exports.callOrReturn = tiptapCore_esm.callOrReturn;
exports.combineTransactionSteps = tiptapCore_esm.combineTransactionSteps;
exports.extensions = tiptapCore_esm.extensions;
exports.findChildrenInRange = tiptapCore_esm.findChildrenInRange;
exports.findParentNode = tiptapCore_esm.findParentNode;
exports.findParentNodeClosestToPos = tiptapCore_esm.findParentNodeClosestToPos;
exports.getAttributes = tiptapCore_esm.getAttributes;
exports.getChangedRanges = tiptapCore_esm.getChangedRanges;
exports.getExtensionField = tiptapCore_esm.getExtensionField;
exports.getHTMLFromFragment = tiptapCore_esm.getHTMLFromFragment;
exports.getMarkAttributes = tiptapCore_esm.getMarkAttributes;
exports.getMarkRange = tiptapCore_esm.getMarkRange;
exports.getMarkType = tiptapCore_esm.getMarkType;
exports.getMarksBetween = tiptapCore_esm.getMarksBetween;
exports.getNodeAttributes = tiptapCore_esm.getNodeAttributes;
exports.getNodeType = tiptapCore_esm.getNodeType;
exports.getText = tiptapCore_esm.getText;
exports.getTextBetween = tiptapCore_esm.getTextBetween;
exports.getTextSerializersFromSchema = tiptapCore_esm.getTextSerializersFromSchema;
exports.inputRulesPlugin = tiptapCore_esm.inputRulesPlugin;
exports.isActive = tiptapCore_esm.isActive;
exports.isList = tiptapCore_esm.isList;
exports.isMarkActive = tiptapCore_esm.isMarkActive;
exports.isNodeActive = tiptapCore_esm.isNodeActive;
exports.isNodeEmpty = tiptapCore_esm.isNodeEmpty;
exports.isNodeSelection = tiptapCore_esm.isNodeSelection;
exports.isTextSelection = tiptapCore_esm.isTextSelection;
exports.markInputRule = tiptapCore_esm.markInputRule;
exports.markPasteRule = tiptapCore_esm.markPasteRule;
exports.mergeAttributes = tiptapCore_esm.mergeAttributes;
exports.nodeInputRule = tiptapCore_esm.nodeInputRule;
exports.pasteRulesPlugin = tiptapCore_esm.pasteRulesPlugin;
exports.posToDOMRect = tiptapCore_esm.posToDOMRect;
exports.textblockTypeInputRule = tiptapCore_esm.textblockTypeInputRule;
exports.wrappingInputRule = tiptapCore_esm.wrappingInputRule;
exports.Editor = Editor;
exports.EditorContent = EditorContent;
exports.PureEditorContent = PureEditorContent;
exports.useEditor = useEditor;
//# sourceMappingURL=tiptap-react.esm.js.map
