/// <reference types="react" />
import { SerializedStyles } from '@emotion/utils';
declare type Types = {
    customCSS?: SerializedStyles;
};
export declare const AtomTableContainerStyled: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLElement>;
    onFocus?: import("react").FocusEventHandler<HTMLElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLElement>;
    onBlur?: import("react").FocusEventHandler<HTMLElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLElement>;
    onChange?: import("react").FormEventHandler<HTMLElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLElement>;
    onInput?: import("react").FormEventHandler<HTMLElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLElement>;
    onReset?: import("react").FormEventHandler<HTMLElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLElement>;
    onSubmit?: import("react").FormEventHandler<HTMLElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLElement>;
    onInvalid?: import("react").FormEventHandler<HTMLElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLElement>;
    onLoad?: import("react").ReactEventHandler<HTMLElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLElement>;
    onError?: import("react").ReactEventHandler<HTMLElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLElement>;
    onAbort?: import("react").ReactEventHandler<HTMLElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onEnded?: import("react").ReactEventHandler<HTMLElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLElement>;
    onPause?: import("react").ReactEventHandler<HTMLElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLElement>;
    onPlay?: import("react").ReactEventHandler<HTMLElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLElement>;
    onProgress?: import("react").ReactEventHandler<HTMLElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLElement>;
    onStalled?: import("react").ReactEventHandler<HTMLElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLElement>;
    onClick?: import("react").MouseEventHandler<HTMLElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragExit?: import("react").DragEventHandler<HTMLElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragOver?: import("react").DragEventHandler<HTMLElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLElement>;
    onDrop?: import("react").DragEventHandler<HTMLElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLElement>;
    onSelect?: import("react").ReactEventHandler<HTMLElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLElement>;
    onScroll?: import("react").UIEventHandler<HTMLElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLElement>;
    onWheel?: import("react").WheelEventHandler<HTMLElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLElement>;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLElement> & {
    theme?: import("@emotion/react").Theme;
}, {}, {}>;
export declare const AtomTableSectionStyled: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLElement>;
    onFocus?: import("react").FocusEventHandler<HTMLElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLElement>;
    onBlur?: import("react").FocusEventHandler<HTMLElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLElement>;
    onChange?: import("react").FormEventHandler<HTMLElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLElement>;
    onInput?: import("react").FormEventHandler<HTMLElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLElement>;
    onReset?: import("react").FormEventHandler<HTMLElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLElement>;
    onSubmit?: import("react").FormEventHandler<HTMLElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLElement>;
    onInvalid?: import("react").FormEventHandler<HTMLElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLElement>;
    onLoad?: import("react").ReactEventHandler<HTMLElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLElement>;
    onError?: import("react").ReactEventHandler<HTMLElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLElement>;
    onAbort?: import("react").ReactEventHandler<HTMLElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onEnded?: import("react").ReactEventHandler<HTMLElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLElement>;
    onPause?: import("react").ReactEventHandler<HTMLElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLElement>;
    onPlay?: import("react").ReactEventHandler<HTMLElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLElement>;
    onProgress?: import("react").ReactEventHandler<HTMLElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLElement>;
    onStalled?: import("react").ReactEventHandler<HTMLElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLElement>;
    onClick?: import("react").MouseEventHandler<HTMLElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragExit?: import("react").DragEventHandler<HTMLElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragOver?: import("react").DragEventHandler<HTMLElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLElement>;
    onDrop?: import("react").DragEventHandler<HTMLElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLElement>;
    onSelect?: import("react").ReactEventHandler<HTMLElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLElement>;
    onScroll?: import("react").UIEventHandler<HTMLElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLElement>;
    onWheel?: import("react").WheelEventHandler<HTMLElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLElement>;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLElement> & {
    theme?: import("@emotion/react").Theme;
}, {}, {}>;
declare type IAtomTableStyled = {
    cl: number;
    min?: number;
    customCSST?: SerializedStyles;
};
export declare const AtomTableStyled: import("@emotion/styled").StyledComponent<{
    slot?: string;
    summary?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLTableElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLTableElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLTableElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLTableElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLTableElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLTableElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLTableElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLTableElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLTableElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLTableElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLTableElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLTableElement>;
    onFocus?: import("react").FocusEventHandler<HTMLTableElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLTableElement>;
    onBlur?: import("react").FocusEventHandler<HTMLTableElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLTableElement>;
    onChange?: import("react").FormEventHandler<HTMLTableElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLTableElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLTableElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLTableElement>;
    onInput?: import("react").FormEventHandler<HTMLTableElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLTableElement>;
    onReset?: import("react").FormEventHandler<HTMLTableElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLTableElement>;
    onSubmit?: import("react").FormEventHandler<HTMLTableElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLTableElement>;
    onInvalid?: import("react").FormEventHandler<HTMLTableElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLTableElement>;
    onLoad?: import("react").ReactEventHandler<HTMLTableElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onError?: import("react").ReactEventHandler<HTMLTableElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLTableElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLTableElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLTableElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLTableElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLTableElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLTableElement>;
    onAbort?: import("react").ReactEventHandler<HTMLTableElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLTableElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLTableElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLTableElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLTableElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLTableElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onEnded?: import("react").ReactEventHandler<HTMLTableElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLTableElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLTableElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLTableElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onPause?: import("react").ReactEventHandler<HTMLTableElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onPlay?: import("react").ReactEventHandler<HTMLTableElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLTableElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onProgress?: import("react").ReactEventHandler<HTMLTableElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLTableElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLTableElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLTableElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onStalled?: import("react").ReactEventHandler<HTMLTableElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLTableElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLTableElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLTableElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLTableElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLTableElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLTableElement>;
    onClick?: import("react").MouseEventHandler<HTMLTableElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLTableElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLTableElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLTableElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLTableElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLTableElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLTableElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLTableElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLTableElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLTableElement>;
    onDragExit?: import("react").DragEventHandler<HTMLTableElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLTableElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLTableElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLTableElement>;
    onDragOver?: import("react").DragEventHandler<HTMLTableElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLTableElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLTableElement>;
    onDrop?: import("react").DragEventHandler<HTMLTableElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLTableElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLTableElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLTableElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLTableElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLTableElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLTableElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLTableElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLTableElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLTableElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLTableElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLTableElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLTableElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLTableElement>;
    onSelect?: import("react").ReactEventHandler<HTMLTableElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLTableElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLTableElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLTableElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLTableElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLTableElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLTableElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLTableElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLTableElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLTableElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLTableElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLTableElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLTableElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLTableElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLTableElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLTableElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLTableElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLTableElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLTableElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLTableElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLTableElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLTableElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLTableElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLTableElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLTableElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLTableElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLTableElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLTableElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLTableElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLTableElement>;
    onScroll?: import("react").UIEventHandler<HTMLTableElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLTableElement>;
    onWheel?: import("react").WheelEventHandler<HTMLTableElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLTableElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLTableElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLTableElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLTableElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLTableElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLTableElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLTableElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLTableElement>;
    width?: string | number;
    cellPadding?: string | number;
    cellSpacing?: string | number;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLTableElement> & {
    theme?: import("@emotion/react").Theme;
} & IAtomTableStyled, {}, {}>;
export declare const AtomTheadStyled: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLTableSectionElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLTableSectionElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLTableSectionElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLTableSectionElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLTableSectionElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLTableSectionElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLTableSectionElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLTableSectionElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLTableSectionElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLTableSectionElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLTableSectionElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLTableSectionElement>;
    onFocus?: import("react").FocusEventHandler<HTMLTableSectionElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLTableSectionElement>;
    onBlur?: import("react").FocusEventHandler<HTMLTableSectionElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLTableSectionElement>;
    onChange?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onInput?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onReset?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onSubmit?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onInvalid?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onLoad?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onError?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLTableSectionElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLTableSectionElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLTableSectionElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLTableSectionElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLTableSectionElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLTableSectionElement>;
    onAbort?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onEnded?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onPause?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onPlay?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onProgress?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onStalled?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onClick?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragExit?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragOver?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDrop?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onSelect?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLTableSectionElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLTableSectionElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLTableSectionElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLTableSectionElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLTableSectionElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLTableSectionElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLTableSectionElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLTableSectionElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onScroll?: import("react").UIEventHandler<HTMLTableSectionElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLTableSectionElement>;
    onWheel?: import("react").WheelEventHandler<HTMLTableSectionElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLTableSectionElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLTableSectionElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLTableSectionElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLTableSectionElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLTableSectionElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLTableSectionElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLTableSectionElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLTableSectionElement>;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLTableSectionElement> & {
    theme?: import("@emotion/react").Theme;
} & Types, {}, {}>;
export declare const AtomTbodyStyled: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLTableSectionElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLTableSectionElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLTableSectionElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLTableSectionElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLTableSectionElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLTableSectionElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLTableSectionElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLTableSectionElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLTableSectionElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLTableSectionElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLTableSectionElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLTableSectionElement>;
    onFocus?: import("react").FocusEventHandler<HTMLTableSectionElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLTableSectionElement>;
    onBlur?: import("react").FocusEventHandler<HTMLTableSectionElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLTableSectionElement>;
    onChange?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onInput?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onReset?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onSubmit?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onInvalid?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLTableSectionElement>;
    onLoad?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onError?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLTableSectionElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLTableSectionElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLTableSectionElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLTableSectionElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLTableSectionElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLTableSectionElement>;
    onAbort?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onEnded?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onPause?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onPlay?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onProgress?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onStalled?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onClick?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragExit?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragOver?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDrop?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLTableSectionElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLTableSectionElement>;
    onSelect?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLTableSectionElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLTableSectionElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLTableSectionElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLTableSectionElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLTableSectionElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLTableSectionElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLTableSectionElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLTableSectionElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLTableSectionElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLTableSectionElement>;
    onScroll?: import("react").UIEventHandler<HTMLTableSectionElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLTableSectionElement>;
    onWheel?: import("react").WheelEventHandler<HTMLTableSectionElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLTableSectionElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLTableSectionElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLTableSectionElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLTableSectionElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLTableSectionElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLTableSectionElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLTableSectionElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLTableSectionElement>;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLTableSectionElement> & {
    theme?: import("@emotion/react").Theme;
} & Types, {}, {}>;
export declare const TRStyled: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLTableRowElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLTableRowElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLTableRowElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLTableRowElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLTableRowElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLTableRowElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLTableRowElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLTableRowElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLTableRowElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLTableRowElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLTableRowElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLTableRowElement>;
    onFocus?: import("react").FocusEventHandler<HTMLTableRowElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLTableRowElement>;
    onBlur?: import("react").FocusEventHandler<HTMLTableRowElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLTableRowElement>;
    onChange?: import("react").FormEventHandler<HTMLTableRowElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLTableRowElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLTableRowElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLTableRowElement>;
    onInput?: import("react").FormEventHandler<HTMLTableRowElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLTableRowElement>;
    onReset?: import("react").FormEventHandler<HTMLTableRowElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLTableRowElement>;
    onSubmit?: import("react").FormEventHandler<HTMLTableRowElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLTableRowElement>;
    onInvalid?: import("react").FormEventHandler<HTMLTableRowElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLTableRowElement>;
    onLoad?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onError?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLTableRowElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLTableRowElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLTableRowElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLTableRowElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLTableRowElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLTableRowElement>;
    onAbort?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onEnded?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onPause?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onPlay?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onProgress?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onStalled?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onClick?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLTableRowElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLTableRowElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLTableRowElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLTableRowElement>;
    onDragExit?: import("react").DragEventHandler<HTMLTableRowElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLTableRowElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLTableRowElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLTableRowElement>;
    onDragOver?: import("react").DragEventHandler<HTMLTableRowElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLTableRowElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLTableRowElement>;
    onDrop?: import("react").DragEventHandler<HTMLTableRowElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLTableRowElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLTableRowElement>;
    onSelect?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLTableRowElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLTableRowElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLTableRowElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLTableRowElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLTableRowElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLTableRowElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLTableRowElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLTableRowElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLTableRowElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLTableRowElement>;
    onScroll?: import("react").UIEventHandler<HTMLTableRowElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLTableRowElement>;
    onWheel?: import("react").WheelEventHandler<HTMLTableRowElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLTableRowElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLTableRowElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLTableRowElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLTableRowElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLTableRowElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLTableRowElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLTableRowElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLTableRowElement>;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLTableRowElement> & {
    theme?: import("@emotion/react").Theme;
} & Types, {}, {}>;
export declare const TDStyled: import("@emotion/styled").StyledComponent<{
    abbr?: string;
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLTableDataCellElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLTableDataCellElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLTableDataCellElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLTableDataCellElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLTableDataCellElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLTableDataCellElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLTableDataCellElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLTableDataCellElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLTableDataCellElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLTableDataCellElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLTableDataCellElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLTableDataCellElement>;
    onFocus?: import("react").FocusEventHandler<HTMLTableDataCellElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLTableDataCellElement>;
    onBlur?: import("react").FocusEventHandler<HTMLTableDataCellElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLTableDataCellElement>;
    onChange?: import("react").FormEventHandler<HTMLTableDataCellElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLTableDataCellElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLTableDataCellElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLTableDataCellElement>;
    onInput?: import("react").FormEventHandler<HTMLTableDataCellElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLTableDataCellElement>;
    onReset?: import("react").FormEventHandler<HTMLTableDataCellElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLTableDataCellElement>;
    onSubmit?: import("react").FormEventHandler<HTMLTableDataCellElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLTableDataCellElement>;
    onInvalid?: import("react").FormEventHandler<HTMLTableDataCellElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLTableDataCellElement>;
    onLoad?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onError?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLTableDataCellElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLTableDataCellElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLTableDataCellElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLTableDataCellElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLTableDataCellElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLTableDataCellElement>;
    onAbort?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onEnded?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onPause?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onPlay?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onProgress?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onStalled?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onClick?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLTableDataCellElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLTableDataCellElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLTableDataCellElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLTableDataCellElement>;
    onDragExit?: import("react").DragEventHandler<HTMLTableDataCellElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLTableDataCellElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLTableDataCellElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLTableDataCellElement>;
    onDragOver?: import("react").DragEventHandler<HTMLTableDataCellElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLTableDataCellElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLTableDataCellElement>;
    onDrop?: import("react").DragEventHandler<HTMLTableDataCellElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLTableDataCellElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLTableDataCellElement>;
    onSelect?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLTableDataCellElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLTableDataCellElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLTableDataCellElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLTableDataCellElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLTableDataCellElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLTableDataCellElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLTableDataCellElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLTableDataCellElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLTableDataCellElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLTableDataCellElement>;
    onScroll?: import("react").UIEventHandler<HTMLTableDataCellElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLTableDataCellElement>;
    onWheel?: import("react").WheelEventHandler<HTMLTableDataCellElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLTableDataCellElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLTableDataCellElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLTableDataCellElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLTableDataCellElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLTableDataCellElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLTableDataCellElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLTableDataCellElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLTableDataCellElement>;
    height?: string | number;
    width?: string | number;
    align?: "left" | "right" | "center" | "justify" | "char";
    colSpan?: number;
    headers?: string;
    rowSpan?: number;
    scope?: string;
    valign?: "bottom" | "top" | "baseline" | "middle";
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLTableDataCellElement> & {
    theme?: import("@emotion/react").Theme;
} & Types, {}, {}>;
export declare const AtomTheaderStyled: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLElement>;
    onFocus?: import("react").FocusEventHandler<HTMLElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLElement>;
    onBlur?: import("react").FocusEventHandler<HTMLElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLElement>;
    onChange?: import("react").FormEventHandler<HTMLElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLElement>;
    onInput?: import("react").FormEventHandler<HTMLElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLElement>;
    onReset?: import("react").FormEventHandler<HTMLElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLElement>;
    onSubmit?: import("react").FormEventHandler<HTMLElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLElement>;
    onInvalid?: import("react").FormEventHandler<HTMLElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLElement>;
    onLoad?: import("react").ReactEventHandler<HTMLElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLElement>;
    onError?: import("react").ReactEventHandler<HTMLElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLElement>;
    onAbort?: import("react").ReactEventHandler<HTMLElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onEnded?: import("react").ReactEventHandler<HTMLElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLElement>;
    onPause?: import("react").ReactEventHandler<HTMLElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLElement>;
    onPlay?: import("react").ReactEventHandler<HTMLElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLElement>;
    onProgress?: import("react").ReactEventHandler<HTMLElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLElement>;
    onStalled?: import("react").ReactEventHandler<HTMLElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLElement>;
    onClick?: import("react").MouseEventHandler<HTMLElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragExit?: import("react").DragEventHandler<HTMLElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragOver?: import("react").DragEventHandler<HTMLElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLElement>;
    onDrop?: import("react").DragEventHandler<HTMLElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLElement>;
    onSelect?: import("react").ReactEventHandler<HTMLElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLElement>;
    onScroll?: import("react").UIEventHandler<HTMLElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLElement>;
    onWheel?: import("react").WheelEventHandler<HTMLElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLElement>;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLElement> & {
    theme?: import("@emotion/react").Theme;
} & Types, {}, {}>;
export declare const AtomTfooterStyled: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLElement>;
    onFocus?: import("react").FocusEventHandler<HTMLElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLElement>;
    onBlur?: import("react").FocusEventHandler<HTMLElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLElement>;
    onChange?: import("react").FormEventHandler<HTMLElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLElement>;
    onInput?: import("react").FormEventHandler<HTMLElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLElement>;
    onReset?: import("react").FormEventHandler<HTMLElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLElement>;
    onSubmit?: import("react").FormEventHandler<HTMLElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLElement>;
    onInvalid?: import("react").FormEventHandler<HTMLElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLElement>;
    onLoad?: import("react").ReactEventHandler<HTMLElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLElement>;
    onError?: import("react").ReactEventHandler<HTMLElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLElement>;
    onAbort?: import("react").ReactEventHandler<HTMLElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onEnded?: import("react").ReactEventHandler<HTMLElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLElement>;
    onPause?: import("react").ReactEventHandler<HTMLElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLElement>;
    onPlay?: import("react").ReactEventHandler<HTMLElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLElement>;
    onProgress?: import("react").ReactEventHandler<HTMLElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLElement>;
    onStalled?: import("react").ReactEventHandler<HTMLElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLElement>;
    onClick?: import("react").MouseEventHandler<HTMLElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragExit?: import("react").DragEventHandler<HTMLElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragOver?: import("react").DragEventHandler<HTMLElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLElement>;
    onDrop?: import("react").DragEventHandler<HTMLElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLElement>;
    onSelect?: import("react").ReactEventHandler<HTMLElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLElement>;
    onScroll?: import("react").UIEventHandler<HTMLElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLElement>;
    onWheel?: import("react").WheelEventHandler<HTMLElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLElement>;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLElement> & {
    theme?: import("@emotion/react").Theme;
} & Types, {}, {}>;
export {};
