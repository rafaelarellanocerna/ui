'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var linkify_module = require('../../../linkifyjs/dist/linkify.module.js');
var tiptapCore_esm = require('../../core/dist/tiptap-core.esm.js');
var index = require('../../../prosemirror-state/dist/index.js');

function autolink(options) {
    return new index.Plugin({
        key: new index.PluginKey('autolink'),
        appendTransaction: (transactions, oldState, newState) => {
            const docChanges = transactions.some(transaction => transaction.docChanged)
                && !oldState.doc.eq(newState.doc);
            const preventAutolink = transactions.some(transaction => transaction.getMeta('preventAutolink'));
            if (!docChanges || preventAutolink) {
                return;
            }
            const { tr } = newState;
            const transform = tiptapCore_esm.combineTransactionSteps(oldState.doc, transactions);
            const { mapping } = transform;
            const changes = tiptapCore_esm.getChangedRanges(transform);
            changes.forEach(({ oldRange, newRange }) => {
                // at first we check if we have to remove links
                tiptapCore_esm.getMarksBetween(oldRange.from, oldRange.to, oldState.doc)
                    .filter(item => item.mark.type === options.type)
                    .forEach(oldMark => {
                    const newFrom = mapping.map(oldMark.from);
                    const newTo = mapping.map(oldMark.to);
                    const newMarks = tiptapCore_esm.getMarksBetween(newFrom, newTo, newState.doc)
                        .filter(item => item.mark.type === options.type);
                    if (!newMarks.length) {
                        return;
                    }
                    const newMark = newMarks[0];
                    const oldLinkText = oldState.doc.textBetween(oldMark.from, oldMark.to, undefined, ' ');
                    const newLinkText = newState.doc.textBetween(newMark.from, newMark.to, undefined, ' ');
                    const wasLink = linkify_module.test(oldLinkText);
                    const isLink = linkify_module.test(newLinkText);
                    // remove only the link, if it was a link before too
                    // because we don’t want to remove links that were set manually
                    if (wasLink && !isLink) {
                        tr.removeMark(newMark.from, newMark.to, options.type);
                    }
                });
                // now let’s see if we can add new links
                tiptapCore_esm.findChildrenInRange(newState.doc, newRange, node => node.isTextblock)
                    .forEach(textBlock => {
                    // we need to define a placeholder for leaf nodes
                    // so that the link position can be calculated correctly
                    const text = newState.doc.textBetween(textBlock.pos, textBlock.pos + textBlock.node.nodeSize, undefined, ' ');
                    linkify_module.find(text)
                        .filter(link => link.isLink)
                        .filter(link => {
                        if (options.validate) {
                            return options.validate(link.value);
                        }
                        return true;
                    })
                        // calculate link position
                        .map(link => ({
                        ...link,
                        from: textBlock.pos + link.start + 1,
                        to: textBlock.pos + link.end + 1,
                    }))
                        // check if link is within the changed range
                        .filter(link => {
                        const fromIsInRange = newRange.from >= link.from && newRange.from <= link.to;
                        const toIsInRange = newRange.to >= link.from && newRange.to <= link.to;
                        return fromIsInRange || toIsInRange;
                    })
                        // add link mark
                        .forEach(link => {
                        tr.addMark(link.from, link.to, options.type.create({
                            href: link.href,
                        }));
                    });
                });
            });
            if (!tr.steps.length) {
                return;
            }
            return tr;
        },
    });
}

function clickHandler(options) {
    return new index.Plugin({
        key: new index.PluginKey('handleClickLink'),
        props: {
            handleClick: (view, pos, event) => {
                var _a;
                const attrs = tiptapCore_esm.getAttributes(view.state, options.type.name);
                const link = (_a = event.target) === null || _a === void 0 ? void 0 : _a.closest('a');
                if (link && attrs.href) {
                    window.open(attrs.href, attrs.target);
                    return true;
                }
                return false;
            },
        },
    });
}

function pasteHandler(options) {
    return new index.Plugin({
        key: new index.PluginKey('handlePasteLink'),
        props: {
            handlePaste: (view, event, slice) => {
                const { state } = view;
                const { selection } = state;
                const { empty } = selection;
                if (empty) {
                    return false;
                }
                let textContent = '';
                slice.content.forEach(node => {
                    textContent += node.textContent;
                });
                const link = linkify_module.find(textContent).find(item => item.isLink && item.value === textContent);
                if (!textContent || !link) {
                    return false;
                }
                options.editor.commands.setMark(options.type, {
                    href: link.href,
                });
                return true;
            },
        },
    });
}

const Link = tiptapCore_esm.Mark.create({
    name: 'link',
    priority: 1000,
    keepOnSplit: false,
    inclusive() {
        return this.options.autolink;
    },
    addOptions() {
        return {
            openOnClick: true,
            linkOnPaste: true,
            autolink: true,
            HTMLAttributes: {
                target: '_blank',
                rel: 'noopener noreferrer nofollow',
                class: null,
            },
            validate: undefined,
        };
    },
    addAttributes() {
        return {
            href: {
                default: null,
            },
            target: {
                default: this.options.HTMLAttributes.target,
            },
            class: {
                default: this.options.HTMLAttributes.class,
            },
        };
    },
    parseHTML() {
        return [
            { tag: 'a[href]:not([href *= "javascript:" i])' },
        ];
    },
    renderHTML({ HTMLAttributes }) {
        return [
            'a',
            tiptapCore_esm.mergeAttributes(this.options.HTMLAttributes, HTMLAttributes),
            0,
        ];
    },
    addCommands() {
        return {
            setLink: attributes => ({ chain }) => {
                return chain()
                    .setMark(this.name, attributes)
                    .setMeta('preventAutolink', true)
                    .run();
            },
            toggleLink: attributes => ({ chain }) => {
                return chain()
                    .toggleMark(this.name, attributes, { extendEmptyMarkRange: true })
                    .setMeta('preventAutolink', true)
                    .run();
            },
            unsetLink: () => ({ chain }) => {
                return chain()
                    .unsetMark(this.name, { extendEmptyMarkRange: true })
                    .setMeta('preventAutolink', true)
                    .run();
            },
        };
    },
    addPasteRules() {
        return [
            tiptapCore_esm.markPasteRule({
                find: text => linkify_module.find(text)
                    .filter(link => {
                    if (this.options.validate) {
                        return this.options.validate(link.value);
                    }
                    return true;
                })
                    .filter(link => link.isLink)
                    .map(link => ({
                    text: link.value,
                    index: link.start,
                    data: link,
                })),
                type: this.type,
                getAttributes: match => {
                    var _a;
                    return ({
                        href: (_a = match.data) === null || _a === void 0 ? void 0 : _a.href,
                    });
                },
            }),
        ];
    },
    addProseMirrorPlugins() {
        const plugins = [];
        if (this.options.autolink) {
            plugins.push(autolink({
                type: this.type,
                validate: this.options.validate,
            }));
        }
        if (this.options.openOnClick) {
            plugins.push(clickHandler({
                type: this.type,
            }));
        }
        if (this.options.linkOnPaste) {
            plugins.push(pasteHandler({
                editor: this.editor,
                type: this.type,
            }));
        }
        return plugins;
    },
});

exports.Link = Link;
exports["default"] = Link;
//# sourceMappingURL=tiptap-extension-link.esm.js.map
