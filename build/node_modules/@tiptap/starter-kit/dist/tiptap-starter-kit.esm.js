'use strict';

var tiptapCore_esm = require('../../core/dist/tiptap-core.esm.js');
var tiptapExtensionBlockquote_esm = require('../../extension-blockquote/dist/tiptap-extension-blockquote.esm.js');
var tiptapExtensionBold_esm = require('../../extension-bold/dist/tiptap-extension-bold.esm.js');
var tiptapExtensionBulletList_esm = require('../../extension-bullet-list/dist/tiptap-extension-bullet-list.esm.js');
var tiptapExtensionCode_esm = require('../../extension-code/dist/tiptap-extension-code.esm.js');
var tiptapExtensionCodeBlock_esm = require('../../extension-code-block/dist/tiptap-extension-code-block.esm.js');
var tiptapExtensionDocument_esm = require('../../extension-document/dist/tiptap-extension-document.esm.js');
var tiptapExtensionDropcursor_esm = require('../../extension-dropcursor/dist/tiptap-extension-dropcursor.esm.js');
var tiptapExtensionGapcursor_esm = require('../../extension-gapcursor/dist/tiptap-extension-gapcursor.esm.js');
var tiptapExtensionHardBreak_esm = require('../../extension-hard-break/dist/tiptap-extension-hard-break.esm.js');
var tiptapExtensionHeading_esm = require('../../extension-heading/dist/tiptap-extension-heading.esm.js');
var tiptapExtensionHistory_esm = require('../../extension-history/dist/tiptap-extension-history.esm.js');
var tiptapExtensionHorizontalRule_esm = require('../../extension-horizontal-rule/dist/tiptap-extension-horizontal-rule.esm.js');
var tiptapExtensionItalic_esm = require('../../extension-italic/dist/tiptap-extension-italic.esm.js');
var tiptapExtensionListItem_esm = require('../../extension-list-item/dist/tiptap-extension-list-item.esm.js');
var tiptapExtensionOrderedList_esm = require('../../extension-ordered-list/dist/tiptap-extension-ordered-list.esm.js');
var tiptapExtensionParagraph_esm = require('../../extension-paragraph/dist/tiptap-extension-paragraph.esm.js');
var tiptapExtensionStrike_esm = require('../../extension-strike/dist/tiptap-extension-strike.esm.js');
var tiptapExtensionText_esm = require('../../extension-text/dist/tiptap-extension-text.esm.js');

const StarterKit = tiptapCore_esm.Extension.create({
    name: 'starterKit',
    addExtensions() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        const extensions = [];
        if (this.options.blockquote !== false) {
            extensions.push(tiptapExtensionBlockquote_esm.Blockquote.configure((_a = this.options) === null || _a === void 0 ? void 0 : _a.blockquote));
        }
        if (this.options.bold !== false) {
            extensions.push(tiptapExtensionBold_esm.Bold.configure((_b = this.options) === null || _b === void 0 ? void 0 : _b.bold));
        }
        if (this.options.bulletList !== false) {
            extensions.push(tiptapExtensionBulletList_esm.BulletList.configure((_c = this.options) === null || _c === void 0 ? void 0 : _c.bulletList));
        }
        if (this.options.code !== false) {
            extensions.push(tiptapExtensionCode_esm.Code.configure((_d = this.options) === null || _d === void 0 ? void 0 : _d.code));
        }
        if (this.options.codeBlock !== false) {
            extensions.push(tiptapExtensionCodeBlock_esm.CodeBlock.configure((_e = this.options) === null || _e === void 0 ? void 0 : _e.codeBlock));
        }
        if (this.options.document !== false) {
            extensions.push(tiptapExtensionDocument_esm.Document.configure((_f = this.options) === null || _f === void 0 ? void 0 : _f.document));
        }
        if (this.options.dropcursor !== false) {
            extensions.push(tiptapExtensionDropcursor_esm.Dropcursor.configure((_g = this.options) === null || _g === void 0 ? void 0 : _g.dropcursor));
        }
        if (this.options.gapcursor !== false) {
            extensions.push(tiptapExtensionGapcursor_esm.Gapcursor.configure((_h = this.options) === null || _h === void 0 ? void 0 : _h.gapcursor));
        }
        if (this.options.hardBreak !== false) {
            extensions.push(tiptapExtensionHardBreak_esm.HardBreak.configure((_j = this.options) === null || _j === void 0 ? void 0 : _j.hardBreak));
        }
        if (this.options.heading !== false) {
            extensions.push(tiptapExtensionHeading_esm.Heading.configure((_k = this.options) === null || _k === void 0 ? void 0 : _k.heading));
        }
        if (this.options.history !== false) {
            extensions.push(tiptapExtensionHistory_esm.History.configure((_l = this.options) === null || _l === void 0 ? void 0 : _l.history));
        }
        if (this.options.horizontalRule !== false) {
            extensions.push(tiptapExtensionHorizontalRule_esm.HorizontalRule.configure((_m = this.options) === null || _m === void 0 ? void 0 : _m.horizontalRule));
        }
        if (this.options.italic !== false) {
            extensions.push(tiptapExtensionItalic_esm.Italic.configure((_o = this.options) === null || _o === void 0 ? void 0 : _o.italic));
        }
        if (this.options.listItem !== false) {
            extensions.push(tiptapExtensionListItem_esm.ListItem.configure((_p = this.options) === null || _p === void 0 ? void 0 : _p.listItem));
        }
        if (this.options.orderedList !== false) {
            extensions.push(tiptapExtensionOrderedList_esm.OrderedList.configure((_q = this.options) === null || _q === void 0 ? void 0 : _q.orderedList));
        }
        if (this.options.paragraph !== false) {
            extensions.push(tiptapExtensionParagraph_esm.Paragraph.configure((_r = this.options) === null || _r === void 0 ? void 0 : _r.paragraph));
        }
        if (this.options.strike !== false) {
            extensions.push(tiptapExtensionStrike_esm.Strike.configure((_s = this.options) === null || _s === void 0 ? void 0 : _s.strike));
        }
        if (this.options.text !== false) {
            extensions.push(tiptapExtensionText_esm.Text.configure((_t = this.options) === null || _t === void 0 ? void 0 : _t.text));
        }
        return extensions;
    },
});

module.exports = StarterKit;
//# sourceMappingURL=tiptap-starter-kit.esm.js.map
