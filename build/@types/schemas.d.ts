import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface IQuery {
    listGroups?: IGroupCollectionSegment;
    groupById: IGroup;
    currencies: Array<ICurrency>;
    currencyById?: ICurrency;
    listNiches?: INicheCollectionSegment;
    listNicheServices?: INicheServiceCollectionSegment;
    tutorByName: IMember;
    pageManagerById: IPageManager;
    listPageManager: Array<IPageManager>;
    listViewManager: Array<IViewManager>;
    viewManagerBy: Array<IViewManager>;
    viewManagerById: IViewManager;
    viewBlockColumnById: IViewBlockColumn;
    me: IMember;
    username: IMemberStream;
    allStreams: Array<IMemberStream | null>;
    meById: IMember;
    meByIdPublic: IMember;
    referer: IMyUrl;
    projectByUrl: IProject;
    countries: Array<ICountry>;
    countriesList?: ICountryCollectionSegment;
    companies: Array<ICompany>;
    roles: Array<IRole>;
    industries: Array<IIndustry>;
    rolesByProject: Array<IProjectRole>;
    members: Array<IMember>;
    memberById?: IMember;
    deleteMyMembers: Array<IMemberProject>;
    membersByProject?: IMemberProjectCollectionSegment;
    countryByCode: ICountry;
    listUsers?: IMemberCollectionSegment;
    listIsMemberInSpace?: IMemberInSpaceCollectionSegment;
    listIsMemberInBoard?: IMemberInBoardCollectionSegment;
    listUsersLazyLoad?: IListUsersLazyLoadConnection;
    listUsersPublic: Array<IMember>;
    projectsInfinite?: IProjectsInfiniteConnection;
    projects: Array<IProject>;
    projectById: IProject;
    projectByIdPublic: IProject;
    conversationMemberBy?: IMemberChat;
    memberNameBy: IMemberFullName;
    userById?: IMember;
    customMemberById?: ICustomMemberDto;
    plans: Array<IPlan>;
    planById?: IPlan;
    projectSocialNetworksByProjectId: Array<IProjectSocialNetwork>;
    recommendedProjects: Array<IRecommendedProject>;
    publicProjects?: IProjectCollectionSegment;
    listMemberRelations?: IMemberRelationCollectionSegment;
    memberRelationById?: IMemberRelation;
    projectTemplateById?: IProjectTemplate;
    projectTemplatesByProjectId: Array<IProjectTemplate>;
    projectTemplates: Array<IProjectTemplate>;
    countryById?: ICountry;
    columnTabs: Array<IColumnTab>;
    columnTabsById?: IColumnTab;
    rankingSeller?: IRankingDTOCollectionSegment;
    ranking?: IRankingDTOCollectionSegment;
    sellByNominatorAndProspectId?: ISell;
    nominatorSellById?: ISell;
    nominatorSellByMemberRelationId?: ISell;
    listNominatorSells?: ISellCollectionSegment;
    nominatorStat: IMemberStats;
    sellStats: ISellStats;
    sellById?: ISell;
    memberIndustries: Array<IMemberIndustry>;
    memberIndustryById?: IMemberIndustry;
    stadisticsLogin?: IMemberCompanyDtoCollectionSegment;
    allStadisticsLogin?: Array<IMemberCompanyDto>;
    stadisticsLProjectsByCompany: Array<IIndustry>;
    listMembersByBusinessId: Array<IMember>;
    projectRoleById?: IProjectRole;
    fAQs: Array<IFAQ>;
    topicDiseases: Array<ITopicDisease>;
    listInsuranceForms?: IInsuranceFormCollectionSegment;
    insuranceFormById: IInsuranceForm;
    topicDiseaseById: ITopicDisease;
    resultByMemberId: Array<IQuestionDTO>;
    results: Array<IQuestionDTO>;
    answers: Array<IQuestionDTO>;
    articles?: IArticlesConnection;
    listArticles?: IArticleCollectionSegment;
    fullArticles: Array<IArticle>;
    listAddresses: Array<IAddress>;
    taxonomyById?: ITaxonomy;
    taxonomyBySlug: ITaxonomy;
    taxonomyBySlugProject: ITaxonomy;
    listProducts?: IProductCollectionSegment;
    fullProducts: Array<IProduct>;
    taxonomiesByProject?: ITaxonomyCollectionSegment;
    fullTaxonomies: Array<ITaxonomy>;
    surveysByArticleId: Array<ISurvey>;
    shopById?: IShop;
    articleById: IArticle;
    seoBySlug: ISeoDTO;
    articleBySlug: IArticle;
    articleBySlugProject: IArticle;
    productById: IProduct;
    courseById?: ICourse;
    coursesByProjectId?: ICoursesByProjectIdConnection;
    courseTaxonomiesByProjectId: Array<ICourseTaxonomy>;
    coursesByTaxonomyId: Array<ICourseTaxonomy>;
    storeStocks: Array<IStoreStock>;
    storeStocksByStoreId: Array<IStoreStock>;
    storeTransfersByStoreId?: IStoreTransfersByStoreIdConnection;
    coursesByTaxonomyAndModality?: ICoursesByTaxonomyAndModalityConnection;
    productBySlug: IProduct;
    productsBySlug: Array<IProduct>;
    productBySlugProject: IProduct;
    branchOfficesByIds: Array<IBranchOffice>;
    productByIdResolver?: IProduct;
    addressById?: IAddress;
    branchOffices?: IBranchOfficesConnection;
    storeById?: IStore;
    managers?: IManagersConnection;
    purchases?: IPurchaseCollectionSegment;
    productPurchases: Array<IProductPurchase>;
    stores?: IStoresConnection;
    productPurchasesByPurchaseId: Array<IProductPurchase>;
    managerByBranchOfficeId?: IManager;
    productProviders: Array<IProductProvider>;
    purchaseById?: IPurchase;
    branchOfficeById?: IBranchOffice;
    storeTransferById?: IStoreTransfer;
    storeStockByStoreIdAndProductId?: IStoreStock;
    storeTransfers?: IStoreTransfersConnection;
    drugs?: IDrugCollectionSegment;
    carriers: Array<ICarrier>;
    groups: IGroupResponse;
    pharmacyRadiusPricing?: Array<IPharmacyRadiusResponse>;
    pharmaciesByZipCode: IPharmacyResponse;
    searchMembers?: ISearchMemberResponse;
    productsByNameAndZipCode: Array<IPricingDrug>;
    transactions?: Array<ITransaction>;
    pricings: Array<IPricing>;
    menus?: Array<IMenu>;
    bbotRestaurants?: Array<IRestaurant>;
    listByMemberId: Array<IAddress>;
    legalTerms?: ILegalTermCollectionSegment;
    legalTermById?: ILegalTerm;
    increaseLegalTermCounter: boolean;
    stockAlerts?: IStockAlertCollectionSegment;
    stockAlertById?: IStockAlert;
    stockAlertByProductId?: IStockAlert;
    purchaseQuoteById?: IPurchaseQuote;
    purchaseQuotes?: IPurchaseQuoteCollectionSegment;
    taxes: Array<ITax>;
    productSells?: IProductSellCollectionSegment;
    productSellById?: IProductSell;
    listRoutes?: IRouteCollectionSegment;
    routes: Array<IRoute>;
    routeById?: IRoute;
    services: Array<IMicroservice>;
    fixUpdateNameService: IMessageFix;
    servicesByProject: Array<IServiceHelper>;
    microServiceByCodeName?: IMicroservice;
    endOfDay: IDateTime;
    startOfDay: IDateTime;
    listSchedules?: Array<IScheduleManagerDto>;
    scheduleManagerByEventType?: IScheduleManagerDto;
    availableEvents: Array<IEvent>;
    myEvents: Array<IEvent>;
    events: Array<IEvent>;
    filteredEvents?: IEventCollectionSegment;
    currentDate: IDateTime;
    eventTypes: Array<IEventType>;
    subEventTypes: Array<ISubEventType>;
    eventById: IEvent;
    localTime: IDateTime;
    nextEvent: Array<IEvent>;
    nextEventMembers: Array<IEvent>;
    membersEvents: Array<IEvent>;
    associatedEvents: Array<IEvent>;
    listHiring: Array<IHiring>;
    listHiringType: Array<IHiringType>;
    listShift: Array<IShift>;
    listDays: Array<IDay>;
    listResourceQuotes?: IResourceQuoteCollectionSegment;
    resourceQuoteById?: IResourceQuote;
    listResourceQuoteDetails?: IResourceQuoteDetailCollectionSegment;
    listProposal?: IProposalCollectionSegment;
    proposalById?: IProposal;
    listCollaborators?: ICollaboratorCollectionSegment;
    listCollaboratorHours?: ICollaboratorHoursCollectionSegment;
    housReportedProject: IHoursReportedDTO;
    listEnumHiringType: Array<string>;
    hiringByMemberId?: Array<IHiring | null>;
    shiftByMemberId?: Array<IShift | null>;
    resourceQuotesByMemberId?: Array<IResourceQuote | null>;
    collaboratorsByMemberId?: Array<ICollaborator | null>;
    hiringServicesByServiceAreaId?: Array<IHiringService | null>;
    configs: Array<IConfiguration>;
    configurationTemplateById: IConfigurationTemplate;
    listComponents: Array<IComponent>;
    listWebsitePages: Array<IWebsitePage>;
    webSitePageById?: IWebsitePage;
    websitePageComponentById?: IWebsitePageComponent;
    listProjectPlanSubscriptions?: IProjectPlanSubscriptionCollectionSegment;
    projectPlanSubscriptionByMemberId?: IProjectPlanSubscription;
    projectPlanSubscriptionsByMemberId: Array<IProjectPlanSubscription>;
    listBusinesses: Array<IBusiness>;
    businesses?: IBusinessCollectionSegment;
    businessTypes?: IBusinessTypeCollectionSegment;
    businessRules?: IBusinessRuleCollectionSegment;
    businessRuleById?: IBusinessRule;
    businessTypeById?: IBusinessType;
    businessById?: IBusiness;
    listProjectPlans?: Array<IProjectPlan>;
    projectPlans?: IProjectPlanCollectionSegment;
    projectPlanById?: IProjectPlan;
    websitePageBySlug?: IWebsitePage;
    listTemplates: Array<ITemplate>;
    templateById?: ITemplate;
    errorPages: Array<IErrorPage>;
    errorPageById?: IErrorPage;
    errorPageValidations: Array<IErrorPageValidation>;
    errorPageValidationById?: IErrorPageValidation;
    couponById?: ICoupon;
    coupons: Array<ICoupon>;
    couponTemplates: Array<ICouponTemplate>;
    listDocumentCategory?: IDocumentCategoryCollectionSegment;
    listDocumentCategoryDetail: Array<IDocumentCategoryDetail>;
    listDocument?: IDocumentCollectionSegment;
    listDocumentTemplate?: IDocumentTemplateCollectionSegment;
    listTemplatePage?: ITemplatePageCollectionSegment;
    listDocumentTag: Array<IDocumentTag>;
    listDocumentScan: Array<IDocumentScan>;
    listDocumentRead?: IDocumentReadCollectionSegment;
    verifyUserRoom: IVideoRoom;
    verifyVideoRoom: IVideoRoom;
    roomTokenLiveKit2: IRoomTokenLiveKit2;
    roomTokenLiveKit3: IRoomTokenLiveKit2;
    startRecordRoom2?: string;
    videoCalls: Array<IVideoCall>;
    listVideoRooms: Array<IVideoRoom>;
    listRoomRecords: Array<IVideoRoomRecord>;
    roomRecord?: string;
    videoCallsByMember: Array<IVideoCall>;
    videoCallById: IVideo;
    videoCallBySessionId: IVideo;
    contactEmails: Array<IContactEmail>;
    listServiceArea?: IServiceCollectionSegment;
    listArea?: IAreaCollectionSegment;
    listServiceQuiz?: IServiceQuizCollectionSegment;
    listQuiz?: IQuizCollectionSegment;
    listQuizSection?: IQuizSectionCollectionSegment;
    listQuizQuestion?: IQuizQuestionCollectionSegment;
    listQuizQuestionAnswer?: IQuizQuestionAnswerCollectionSegment;
    listQuizAnswer?: IQuizAnswerCollectionSegment;
    listQuizMember?: IQuizMemberCollectionSegment;
    listQuizMemberGrouped?: IQuizMemberGroupedCollectionSegment;
    listQuizQuestionMember?: IQuizQuestionMemberCollectionSegment;
    listQuizMemberAnswer?: IQuizMemberAnswerCollectionSegment;
    listQuizMemberDescription?: IQuizMemberDescriptionCollectionSegment;
    serviceAreaById?: IServiceArea;
    areaById?: IArea;
    serviceAreaMemberByMemberId?: Array<IServiceMember | null>;
    catalogAarco: ICatalog;
    quotationByIdPeticionAarco: IQuotationResponse;
    coverageAarco: ICoverage;
    payment_transactions?: ITransactionCollectionSegment;
    methodPayments?: IMethodPaymentCollectionSegment;
    plan?: IPlanCollectionSegment;
    listInvoices?: IInvoiceCollectionSegment;
    invoiceById: IInvoice;
    listInvoiceAddress: Array<IInvoice>;
    listInvoiceDetailProduct: Array<IInvoiceDetail>;
    invoicesByMemberId: Array<IInvoice>;
    customerSuscriptions: Array<ICustomerSuscription>;
    productStripeByProductId?: IProductStripe;
    planByProductId?: IPlan;
    listAccountKey?: IAccountKeyCollectionSegment;
    accountKeysByMemberId?: Array<IAccountKey | null>;
    paymentMethodByMemberId?: IPaymentMethod;
    memberWithStripePaymentMethod: boolean;
    methodPaymentById?: IMethodPayment;
    subscriptionStatus: boolean;
    paymentMethodsStripe: Array<ICardMethodDTO>;
    vehiclesCarcatalogHdiCodeYearsCarId: Array<IVehiclesCarCatalogHdiCodeYear>;
    vehiclesCarcatalogMapfreeCodeYearsCarId: Array<IVehiclesCarCatalogMapfreCodeYear>;
    vehiclesCarcatalogQualitasCodeYearsCarId: Array<IVehiclesCarCatalogQualitasCodeYear>;
    vehiclesCarcatalogZurichCodeYearsCarId: Array<IVehiclesCarCatalogZurichCodeYear>;
    quoteCoverages: Array<IQuotationCoverage>;
    quoteCoverageById?: IQuotationCoverage;
    listStaffQuote: Array<IStaffQuote>;
    multiquoter_listProposal: Array<IProposal>;
    listCollaborator: Array<ICollaborator>;
    coverageByProject: Array<IInsurerCoverageProject>;
    packages: Array<ICotizacionPackage>;
    coverages: Array<IInsurerCoverage>;
    runServiceQuoteFetch?: IRunServicePayload;
    stadistics: Array<IStadisticsResult>;
    stadisticsQualitas: Array<IStadisticsResult>;
    listRQuoterProfilesByProjectId?: IListRQuoterProfilesByProjectIdConnection;
    listRQuoterProfilesInsurerByProjectId?: IListRQuoterProfilesInsurerByProjectIdConnection;
    homologated?: IHomologator;
    listInsurerServiceCredentials: Array<IInsurerServiceCredential>;
    listInsurerService: Array<IInsurerService>;
    listInsurerService2: Array<IInsurerService>;
    listRelations: Array<IVehiclesCarCodeRelation>;
    quotes?: IQuoteCollectionSegment;
    listQuotesAlt?: IQuoteCollectionSegment;
    listQuotes: Array<IQuote>;
    quotesByMember: IQuoteCount;
    listRegistrations: Array<IRegistration>;
    quoteById: IQuoter;
    listQuoteServices: Array<IGenericsService>;
    listGenders: Array<IGenderDTO>;
    listCars: Array<IVehiclesCarCatalogAba>;
    listCarType: Array<ICarTypeDTO>;
    listCarBrand: Array<IListBrandDTO>;
    listCarSuBbrand: Array<IListSubBrandDTO>;
    listModel: Array<IListYearDTO>;
    car: Array<IListVersionDTO>;
    relationCars: Array<IHomologationService>;
    colony: IColoniaDTO;
    listCoverages: Array<ICoverageDTO>;
    catalogById: ICatalog;
    catalogs?: ICatalogCollectionSegment;
    catalogByYears: Array<ICatalogByYear>;
    insurers?: IInsurerCollectionSegment;
    offices?: IOfficeCollectionSegment;
    quatorProfiles?: IQuoterProfileCollectionSegment;
    quoterProfileById: IQuoterProfile;
    vehiclesCarCatalogAbas: Array<IVehiclesCarCatalogAba>;
    vehiclesCarCatalogAbasByBrand: Array<IVehiclesCarCatalogAba>;
    vehiclesCarCatalogAbasBySubBrand: Array<IVehiclesCarCatalogAba>;
    vehiclesCarCatalogAfirme: Array<IVehiclesCarCatalogAfirme>;
    vehiclesCarCatalogAfirmebyBrand: Array<IVehiclesCarCatalogAfirme>;
    vehiclesCarCatalogAfirmebySubrand: Array<IVehiclesCarCatalogAfirme>;
    vehiclesCarCatalogAig: Array<IVehiclesCarCatalogAig>;
    vehiclesCarCatalogAigByBrand: Array<IVehiclesCarCatalogAig>;
    vehiclesCarCatalogAigBySubBrand: Array<IVehiclesCarCatalogAig>;
    vehiclesCarCatalogAnas: Array<IVehiclesCarCatalogAna>;
    vehiclesCarCatalogAnasByBrand: Array<IVehiclesCarCatalogAna>;
    vehiclesCarCatalogAnasbySubbrand: Array<IVehiclesCarCatalogAna>;
    vehiclesAtlas: Array<IVehiclesCarCatalogAtla>;
    vehiclesAtlasByBrand: Array<IVehiclesCarCatalogAtla>;
    vehiclesAtlasBySubbrand: Array<IVehiclesCarCatalogAtla>;
    vehiclesAxa: Array<IVehiclesCarCatalogAxa>;
    vehiclesAxaByBrand: Array<IVehiclesCarCatalogAxa>;
    vehiclesAxaBySubbrand: Array<IVehiclesCarCatalogAxa>;
    vehiclesBanorte: Array<IVehiclesCarCatalogBanorte>;
    vehiclesBanorteByBrand: Array<IVehiclesCarCatalogBanorte>;
    vehiclesBanorteBySubbrand: Array<IVehiclesCarCatalogBanorte>;
    vehiclesGrip: Array<IVehiclesCarCatalogGnp>;
    vehiclesGripByBrand: Array<IVehiclesCarCatalogGnp>;
    vehiclesGripBySubbrand: Array<IVehiclesCarCatalogGnp>;
    vehiclesHdi: Array<IVehiclesCarCatalogHdi>;
    vehiclesHdiByBrand: Array<IVehiclesCarCatalogHdi>;
    vehiclesHdiBySubbrand: Array<IVehiclesCarCatalogHdi>;
    vehiclesMapfree: Array<IVehiclesCarCatalogMapfre>;
    vehiclesMapfreeByBrand: Array<IVehiclesCarCatalogMapfre>;
    vehiclesMapfreeBySubbrand: Array<IVehiclesCarCatalogMapfre>;
    vehiclesP: Array<IVehiclesCarCatalogP>;
    vehiclesPByBrand: Array<IVehiclesCarCatalogP>;
    vehiclesPBySubbrand: Array<IVehiclesCarCatalogP>;
    vehiclesPotosi: Array<IVehiclesCarCatalogPotosi>;
    vehiclesPotosiByBrand: Array<IVehiclesCarCatalogPotosi>;
    vehiclesPotosiBySubbrand: Array<IVehiclesCarCatalogPotosi>;
    vehiclesQualitas: Array<IVehiclesCarCatalogQualita>;
    vehiclesQualitasByBrand: Array<IVehiclesCarCatalogQualita>;
    vehiclesQualitasBySubbrand: Array<IVehiclesCarCatalogQualita>;
    vehiclesZurich: Array<IVehiclesCarCatalogZurich>;
    vehiclesZurichByBrand: Array<IVehiclesCarCatalogZurich>;
    vehiclesZurichBySubbrand: Array<IVehiclesCarCatalogZurich>;
    vehiclesCarcatalogAbaCodeYearsCarId: Array<IVehiclesCarCatalogAbaCodeYear>;
    vehiclesCarcatalogAfirmeCodeYearsCarId: Array<IVehiclesCarCatalogAfirmeCodeYear>;
    vehiclesCarcatalogAxaCodeYearsCarId: Array<IVehiclesCarCatalogAxaCodeYear>;
    vehiclesCarcatalogAtlasCodeYearsCarId: Array<IVehiclesCarCatalogAtlasCodeYear>;
    vehiclesCarcatalogBanorteCodeYearsCarId: Array<IVehiclesCarCatalogBanorteCodeYear>;
    vehiclesCarcatalogGnpCodeYearsCarId: Array<IVehiclesCarCatalogGnpCodeYear>;
    apiServices: Array<IApiService>;
    apiServiceBySecretAndProjectId?: IApiService;
    listDynamicPage: Array<IDynamicPage>;
    listDynamicBlock?: IDynamicBlockCollectionSegment;
    listDynamicSection?: IDynamicSectionCollectionSegment;
    listDynamicTab?: IDynamicTabCollectionSegment;
    listDynamicSectionBlock?: IDynamicSectionBlockCollectionSegment;
    listDynamicCustomMeta?: IDynamicCustomMetaCollectionSegment;
    listDynamicCustomValue?: IDynamicCustomValueCollectionSegment;
    listCharges?: IChargeCollectionSegment;
    listClinicHistory: Array<IClinicHistory>;
    listConsult?: IEventDetailCollectionSegment;
    listFisicExam: Array<IFisicExam>;
    listMedicalBackgrounds: Array<IMedicalBackground>;
    listMedicBackgroundDetails: Array<IMedicalBackgroundDetail>;
    listClinicHistory_MedicalBackgroundDetails: Array<IClinicHistoryMedicalBackgroundDetail>;
    listMedicines: Array<IMedicine>;
    listMedicalServices: Array<IMedicalService>;
    listVaccines: Array<IVaccine>;
    listVitalSigns: Array<IVitalSign>;
    listMedicalConfigs: Array<IMedicalConfig>;
    listRegistSesions: Array<IRegistSesion>;
    listTherapy?: ITherapyCollectionSegment;
    listRecipeConfig: Array<IRecipeConfig>;
    listMedicRecipe: Array<IMedicRecipe>;
    listConsultNotes: Array<IConsultNote>;
    listPacientNote: Array<IPacientNote>;
    listDiagnostic: Array<IDiagnostic>;
    listPacientMedicalBackground: Array<IPacientMedicalBackground>;
    listBillingRequests: Array<IBillingRequest>;
    listFormats: Array<IFormat>;
    listPatientResponses: Array<IPatientVitalSignsResponse>;
    medicalBackgroundsByFormatId: Array<IMedicalBackground>;
    consultInfo: IConsultDto;
    listChagesForPacient?: IEventDetailCollectionSegment;
    listPacientMedicalBackgroundById: Array<IPacientMedicalBackground>;
    listEventDetailsByMemberId: Array<IEventDetail>;
    listFisicExamsByMemberId: Array<IFisicExam>;
    listMedicalBackgroundByMemberId: Array<IMedicalBackground>;
    listMedicRecipesByMemberId: Array<IMedicRecipe>;
    listPatientNotesByMemberId: Array<IPacientNote>;
    listVitalSignsByMemberId: Array<IPatientVitalSignsResponse>;
    listVaccinesByMemberId: Array<IVaccine>;
    listDiagnosticByEventId: Array<IDiagnostic>;
    listEnumInsideType: Array<string>;
    listSpace?: ISpaceCollectionSegment;
    listBoardStatus?: IBoardStatusCollectionSegment;
    listBoard?: IBoardCollectionSegment;
    listBoardList?: IBoardListCollectionSegment;
    listCardReply?: ICardReplyCollectionSegment;
    listCard?: ICardCollectionSegment;
    listNestedFiles?: INestedFileCollectionSegment;
    listMemberCard?: IMemberCardCollectionSegment;
    listMemberBoard?: IMemberBoardCollectionSegment;
    listMemberSpace?: IMemberSpaceCollectionSegment;
    listMemberSpaceOnValue?: IListMemberSpaceOnValueConnection;
    listMemberSpaceOnCard?: IListMemberSpaceOnCardConnection;
    listMemberBoardOnValue?: IListMemberBoardOnValueConnection;
    listMemberBoardOnCard?: IListMemberBoardOnCardConnection;
    listBoardColumnTypes?: IBoardColumnTypeCollectionSegment;
    listMemberSpaceAccess: Array<IMemberBoardDTO>;
    listCardColumnValue?: ICardColumnValueCollectionSegment;
    listBoardMemberReference?: IBoardMemberReferenceCollectionSegment;
    memberBoardByMember?: Array<IMemberBoard>;
    memberSpaceByMember?: Array<IMemberSpace>;
    isMembersInspace: boolean;
    isMembersInBoard: boolean;
    attributeById?: IAttribute;
    attributeValueById?: IAttributeValue;
    buildingSiteAddressById?: IBuildingSiteAddress;
    customerById?: ICustomer;
    madreQuotationById?: IMadreQuotation;
    materialById?: IMaterial;
    materialCategoryById?: IMaterialCategory;
    materialCombinationById?: IMaterialCombination;
    materialCombinationAttributeById?: IMaterialCombinationAttribute;
    materialModuleById?: IMaterialModule;
    materialQuotationById?: IMaterialQuotation;
    materialStockById?: IMaterialStock;
    materialStockMeasureById?: IMaterialStockMeasure;
    materialVariableModuleById?: IMaterialVariableModule;
    materialVariableQuotationById?: IMaterialVariableQuotation;
    measureById?: IMeasure;
    measureUnityById?: IMeasureUnity;
    measureUnityTwoById?: IMeasureUnityTwo;
    measureValueById?: IMeasureValue;
    moduleById?: IModule;
    moduleCategoryById?: IModuleCategory;
    quotationById?: IQuotation;
    quotationModuleById?: IQuotationModule;
    userCustomerByMemberId?: IUserCustomer;
    variableById?: IVariable;
    attributes: Array<IAttribute>;
    attributeValues: Array<IAttributeValue>;
    buildingSiteAddresses: Array<IBuildingSiteAddress>;
    customers: Array<ICustomer>;
    madreQuotations: Array<IMadreQuotation>;
    materials: Array<IMaterial>;
    materialCategories?: IMaterialCategoriesConnection;
    materialCombinations: Array<IMaterialCombination>;
    materialCombinationAttributes: Array<IMaterialCombinationAttribute>;
    materialModules: Array<IMaterialModule>;
    materialQuotations: Array<IMaterialQuotation>;
    materialStocks: Array<IMaterialStock>;
    materialStockMeasures: Array<IMaterialStockMeasure>;
    materialVariableModules: Array<IMaterialVariableModule>;
    materialVariableQuotations: Array<IMaterialVariableQuotation>;
    measures: Array<IMeasure>;
    measureUnities: Array<IMeasureUnity>;
    measureUnityTwos: Array<IMeasureUnityTwo>;
    measureValues: Array<IMeasureValue>;
    modules: Array<IModule>;
    moduleCategories: Array<IModuleCategory>;
    quotations: Array<IQuotation>;
    quotationModules: Array<IQuotationModule>;
    variables: Array<IVariable>;
    brandHermer: IBrandsHermer;
    modelsHermer: IModelsHermer;
    yearHermer: IYearsHermer;
    modelLobato: Array<IModelLobatoHermer>;
    modelsMercadoLibre: IModelMercadoLibreResultHermer;
    listConsultHermer: IResultConsultHermer;
    listConsultAllHermer: IResultConsultAllHermer;
    listConsultLastAnalysisHermer: IResultConsultLastAnalysisHermer;
    getConsultHermer: IConsultHermer;
    downloadFile: IDownloadFile;
    listFolders?: IListFoldersConnection;
    foldersList?: IFoldersListConnection;
    folderAllowedMembers: Array<ISharedFolder>;
    fileAllowedMembers: Array<ISharedFile>;
    sharedFilesFromFolder?: ISharedFilesFromFolderDto;
    listFiles?: IFileCollectionSegment;
    listFilesByMemberId: Array<IFile>;
    listFoldersByMemberId: Array<IFolder>;
    outstandingFoldersByMemberId?: IFolderCollectionSegment;
    sharedFilesByMemberId: Array<ISharedFile>;
    sharedFilesAmongstMembers: Array<IFile>;
    sharedFoldersByMemberId: Array<ISharedFolder>;
    folderById?: IFolder;
    fileById?: IFile;
    outstandingFilesByMemberId?: IOutstandingFiles;
    conversationsByToMemberId: Array<IConversationReply>;
    conversationsByMemberId: Array<IMemberConversation>;
    listWallets?: IEWalletCollectionSegment;
    walletById?: IEWallet;
    listMemberWallets?: IMemberWalletCollectionSegment;
    listWalletTransaction?: IWalletTransactionCollectionSegment;
    walletTransactionById?: IWalletTransaction;
    listWalletTransactionStatus?: IWalletTransactionStatusCollectionSegment;
    listWalletTransactionMember?: IWalletTransactionMemberRelationCollectionSegment;
    listWalletTransactionMemberDetail?: IWalletTransactionMemberDetailCollectionSegment;
    investmentVsEarning: IDecimal;
    walletTransactionDetail: Array<IWalletTransactionSummary>;
    listMemberWalletsByMember: Array<IMemberWallet>;
    certificateMovements: Array<ICertificateMovement>;
    countryRequests: Array<ICountryRequest>;
    certificates?: ICertificateCollectionSegment;
    certificatesNotPaginated: Array<ICertificate>;
    fees: Array<IFee>;
    beneficiaries?: IBeneficiaryCollectionSegment;
    insurerCompanies?: IInsurerCompanyCollectionSegment;
    merchandises?: IMerchandiseCollectionSegment;
    merchandiseCategories: Array<IMerchandiseCategory>;
    merchandiseDetails: Array<IMerchandiseDetail>;
    contacts: Array<IContact>;
    contractors: Array<IContractor>;
    trafficDetails: Array<ITrafficDetail>;
    money: Array<IMoney>;
    policies: Array<IPolicy>;
    contractorBranchOffices: Array<IContractorOffice>;
    contractorContacts: Array<IContractorContact>;
    contractorPolicies: Array<IContractorPolicy>;
    contactById?: IContact;
    contractorById?: IContractor;
    contractorContactById?: IContractorContact;
    contractorPolicyById?: IContractorPolicy;
    insurerCompanyById?: IInsurerCompany;
    moneyById?: IMoney;
    certificateById?: ICertificate;
    contractorOfficeById?: IContractorOffice;
    policyModules?: IPolicyModuleCollectionSegment;
    policyModuleById?: IPolicyModule;
    insurerModules?: IInsurerModuleCollectionSegment;
    insurerModuleById?: IInsurerModule;
    beneficiaryById?: IBeneficiary;
    merchandiseById?: IMerchandise;
    insurerFeeById?: IInsurerFee;
    insurerFees?: IInsurerFeeCollectionSegment;
    listSchool?: ISchoolCollectionSegment;
    schoolById: ISchool;
    listClassroom?: IClassroomCollectionSegment;
    classroomById: IClassroom;
    listLevel?: ILevelCollectionSegment;
    levelById: ILevel;
    levelByName: ILevel;
    gradeByName: IGrade;
    classroomByName: IClassroom;
    listGrade?: IGradeCollectionSegment;
    gradeById: IGrade;
    listStudent?: IStudentCollectionSegment;
    studentById: IStudent;
    listStudentByLastAttendance?: IStudentCollectionSegment;
    listAttendanceStudent?: IAttendanceCollectionSegment;
    attendanceStudentById: IAttendance;
    listStudentTutorMemberId: Array<IStudent>;
    listClassroomTeacherMemberId: Array<IClassroom>;
    chatBotConversations?: IMyConversationCollectionSegment;
    listAgentProviderBonos?: IAgentProviderBonoCollectionSegment;
    listBeneficiaries?: IBeneficiarieCollectionSegment;
    listFormAccidentDiseases?: IFormAccidentDiseaseCollectionSegment;
    listFormAutomobileDamages?: IFormAutomobileDamageCollectionSegment;
    listFormCarCatalogs?: IFormCarCatalogCollectionSegment;
    listFormDamages?: IFormDamageCollectionSegment;
    listFormLifes?: IFormLifeCollectionSegment;
    listInvolvedReferrers?: IInvolvedReferrerCollectionSegment;
    listOldPolices?: IOldPoliceCollectionSegment;
    listPersonalInformations?: IPersonalInformationCollectionSegment;
    listPolices?: IPoliceCollectionSegment;
    listPoliceAssigns?: IPoliceAssignCollectionSegment;
    listPolicePendients?: IPolicePendientCollectionSegment;
    listPoliceQuotes?: IPoliceQuoteCollectionSegment;
    listPoliceQuotePrimas?: IPoliceQuotePrimaCollectionSegment;
    listRelationShips?: IRelationShipCollectionSegment;
    listSucursals?: ISucursalCollectionSegment;
    listEndorsements?: IEndorsementCollectionSegment;
    listEndorsementCerts?: IEndorsementCertCollectionSegment;
    listSinisters?: ISinisterCollectionSegment;
    listSinisterAccidents?: ISinisterAccidentCollectionSegment;
    listSinisterAilings?: ISinisterAilingCollectionSegment;
    listSinisterCars?: ISinisterCarCollectionSegment;
    listSinisterCarContacts?: ISinisterCarContactCollectionSegment;
    listSinisterDamages?: ISinisterDamageCollectionSegment;
    listSinisterDamageContacts?: ISinisterDamageContactCollectionSegment;
    listSinisterFacturas?: ISinisterFacturaCollectionSegment;
    listSinisterHospitals?: ISinisterHospitalCollectionSegment;
    listSinisterLifes?: ISinisterLifeCollectionSegment;
    listSinisterLifeContacts?: ISinisterLifeContactCollectionSegment;
    listPoliceReceipts?: IPoliceReceiptCollectionSegment;
    listPoliceReceiptAccounts?: IPoliceReceiptAccountCollectionSegment;
    listPoliceReceiptAccountStates?: IPoliceReceiptAccountStateCollectionSegment;
    listPoliceReceiptFolios?: IPoliceReceiptFolioCollectionSegment;
    listPoliceReceiptPayments?: IPoliceReceiptPaymentCollectionSegment;
    listPoliceFiles?: IPoliceFileCollectionSegment;
    listInsurerComments?: IInsurerCommentCollectionSegment;
    listInsurerFileReadings?: IInsurerFileReadingCollectionSegment;
    listInsurerFileReadingTags?: IInsurerFileReadingTagCollectionSegment;
    listInsurerInvolveds?: IInsurerInvolvedCollectionSegment;
    listInsurerLogs?: IInsurerLogCollectionSegment;
    listInsurerLogEmails?: IInsurerLogEmailCollectionSegment;
    listInsurerOrgInfos?: IInsurerOrgInfoCollectionSegment;
    listInsurerTickets?: IInsurerTicketCollectionSegment;
    listInsurerSchedules?: IInsurerScheduleCollectionSegment;
    listInsurerScheduleParticipants?: IInsurerScheduleParticipantCollectionSegment;
    listInsurerNotifications?: IInsurerNotificationCollectionSegment;
    listInsurerReminders?: IInsurerReminderCollectionSegment;
    listInsurerReminderProjectAgentProviders?: IInsurerReminderProjectAgentProviderCollectionSegment;
    listInsurerReminderRecords?: IInsurerReminderRecordCollectionSegment;
    listInsurerReminderSubBranches?: IInsurerReminderSubBranchCollectionSegment;
    listInsurerBailTypes?: IInsurerBailTypeCollectionSegment;
    listInsurerBirthDateTemplates?: IInsurerBirthDateTemplateCollectionSegment;
    listInsurerDirectories?: IInsurerDirectoryCollectionSegment;
    listInsurerExpenses?: IInsurerExpenseCollectionSegment;
    listInsurerIbisForms?: IInsurerIbisFormCollectionSegment;
    listInsurerIbisProviders?: IInsurerIbisProviderCollectionSegment;
    listInsurerSenders?: IInsurerSenderCollectionSegment;
    listInsurerZipCodeSepomexs?: IInsurerZipCodeSepomexCollectionSegment;
    listComissions?: IComissionCollectionSegment;
    listCoverageTopecoinsurances?: ICoverageTopecoinsuranceCollectionSegment;
    listCoverageSuminsureds?: ICoverageSuminsuredCollectionSegment;
    listCoveragePackages?: ICoveragePackageCollectionSegment;
    saam_listCoverages?: ICoverageCollectionSegment;
    listCoverageInPolicies?: ICoverageInPolicyCollectionSegment;
    listCoverageDeductibles?: ICoverageDeductibleCollectionSegment;
    listCoverageCoinsurances?: ICoverageCoinsuranceCollectionSegment;
    listResponsableInvolveds?: IResponsableInvolvedCollectionSegment;
    listProjectAgentProviderEmailReminders?: IProjectAgentProviderEmailReminderCollectionSegment;
    listProjectAgentProviders?: IProjectAgentProviderCollectionSegment;
    listAgentProviderContacts?: IAgentProviderContactCollectionSegment;
    listAgentProviders?: IAgentProviderCollectionSegment;
    listAgentKeys?: IAgentKeyCollectionSegment;
    listReferrers?: IReferrerCollectionSegment;
    listReferrerBranches?: IReferrerBranchCollectionSegment;
    listReferrerAccountStates?: IReferrerAccountStateCollectionSegment;
    listContractors?: IContractorCollectionSegment;
    listContractorCelulas?: IContractorCelulaCollectionSegment;
    listContractorGroups?: IContractorGroupCollectionSegment;
    listContractorGroupingLevels?: IContractorGroupingLevelCollectionSegment;
    listContractorClassifications?: IContractorClassificationCollectionSegment;
    listContractorProcessDocuments?: IContractorProcessDocumentCollectionSegment;
    listProcessDocuments?: IProcessDocumentCollectionSegment;
    listBranches?: IBranchCollectionSegment;
    listSubBranches?: ISubBranchCollectionSegment;
    listProjectAgentProviderBranches?: IProjectAgentProviderBranchCollectionSegment;
    listDevices?: IDeviceCollectionSegment;
    deviceById?: IDevice;
    listNotifications?: INotificationCollectionSegment;
    notificationsById?: INotification;
    devicesByMemberId?: Array<IDevice>;
    listNotificationByMemberId?: Array<INotification>;
    codes: Array<ICode>;
    brandsByProjectId: Array<IBrand>;
    providers: Array<IProvider>;
    scanCode?: ICode;
    availableDots: number;
    exchangeMovements: Array<IDotMovement>;
    dotMovementsByMemberId: Array<IDotMovement>;
    lookForAdminCode: boolean;
    prizeCategories: Array<IPrizeCategory>;
    prizeCodes: Array<IPrizeCode>;
    prizeCategoryById?: IPrizeCategory;
    dotMovementById?: IDotMovement;
}
export interface IGroupFilterInput {
    and?: Array<IGroupFilterInput>;
    or?: Array<IGroupFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    project?: IProjectFilterInput;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    members?: IListFilterInputTypeOfMemberFilterInput;
    groupTaxonomies?: IListFilterInputTypeOfGroupTaxonomyFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IComparableGuidOperationFilterInput {
    eq?: IUUID;
    neq?: IUUID;
    in?: Array<IUUID>;
    nin?: Array<IUUID>;
    gt?: IUUID;
    ngt?: IUUID;
    gte?: IUUID;
    ngte?: IUUID;
    lt?: IUUID;
    nlt?: IUUID;
    lte?: IUUID;
    nlte?: IUUID;
}
export declare type IUUID = any;
export interface IProjectFilterInput {
    and?: Array<IProjectFilterInput>;
    or?: Array<IProjectFilterInput>;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    logo?: IStringOperationFilterInput;
    tagLine?: IStringOperationFilterInput;
    isAPublicPlatform?: IBooleanOperationFilterInput;
    isReady?: IBooleanOperationFilterInput;
    url?: IStringOperationFilterInput;
    onProduction?: IBooleanOperationFilterInput;
    industryId?: IComparableNullableOfGuidOperationFilterInput;
    industry?: IIndustryFilterInput;
    companyId?: IComparableGuidOperationFilterInput;
    company?: ICompanyFilterInput;
    projectRoles?: IListFilterInputTypeOfProjectRoleFilterInput;
    memberProjects?: IListFilterInputTypeOfMemberProjectFilterInput;
    projectSocialNetworks?: IListFilterInputTypeOfProjectSocialNetworkFilterInput;
    groups?: IListFilterInputTypeOfGroupFilterInput;
    nicheId?: IComparableNullableOfGuidOperationFilterInput;
    niche?: INicheFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IStringOperationFilterInput {
    and?: Array<IStringOperationFilterInput>;
    or?: Array<IStringOperationFilterInput>;
    eq?: string;
    neq?: string;
    contains?: string;
    ncontains?: string;
    in?: Array<string | null>;
    nin?: Array<string | null>;
    startsWith?: string;
    nstartsWith?: string;
    endsWith?: string;
    nendsWith?: string;
}
export interface IBooleanOperationFilterInput {
    eq?: boolean;
    neq?: boolean;
}
export interface IComparableNullableOfGuidOperationFilterInput {
    eq?: IUUID;
    neq?: IUUID;
    in?: Array<IUUID | null>;
    nin?: Array<IUUID | null>;
    gt?: IUUID;
    ngt?: IUUID;
    gte?: IUUID;
    ngte?: IUUID;
    lt?: IUUID;
    nlt?: IUUID;
    lte?: IUUID;
    nlte?: IUUID;
}
export interface IIndustryFilterInput {
    and?: Array<IIndustryFilterInput>;
    or?: Array<IIndustryFilterInput>;
    name?: IStringOperationFilterInput;
    slug?: IStringOperationFilterInput;
    projects?: IListFilterInputTypeOfProjectFilterInput;
    companies?: IListFilterInputTypeOfCompanyFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfProjectFilterInput {
    all?: IProjectFilterInput;
    none?: IProjectFilterInput;
    some?: IProjectFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfCompanyFilterInput {
    all?: ICompanyFilterInput;
    none?: ICompanyFilterInput;
    some?: ICompanyFilterInput;
    any?: boolean;
}
export interface ICompanyFilterInput {
    and?: Array<ICompanyFilterInput>;
    or?: Array<ICompanyFilterInput>;
    name?: IStringOperationFilterInput;
    numberEmployees?: IComparableInt32OperationFilterInput;
    countryId?: IComparableGuidOperationFilterInput;
    country?: ICountryFilterInput;
    photo?: IStringOperationFilterInput;
    tagLine?: IStringOperationFilterInput;
    industryId?: IComparableNullableOfGuidOperationFilterInput;
    industry?: IIndustryFilterInput;
    memberCompanies?: IListFilterInputTypeOfMemberCompanyFilterInput;
    projects?: IListFilterInputTypeOfProjectFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IComparableInt32OperationFilterInput {
    eq?: number;
    neq?: number;
    in?: Array<number>;
    nin?: Array<number>;
    gt?: number;
    ngt?: number;
    gte?: number;
    ngte?: number;
    lt?: number;
    nlt?: number;
    lte?: number;
    nlte?: number;
}
export interface ICountryFilterInput {
    and?: Array<ICountryFilterInput>;
    or?: Array<ICountryFilterInput>;
    name?: IStringOperationFilterInput;
    code?: IStringOperationFilterInput;
    phoneCode?: IStringOperationFilterInput;
    currencyId?: IComparableGuidOperationFilterInput;
    currency?: ICurrencyFilterInput;
    profile?: IListFilterInputTypeOfProfileFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ICurrencyFilterInput {
    and?: Array<ICurrencyFilterInput>;
    or?: Array<ICurrencyFilterInput>;
    name?: IStringOperationFilterInput;
    symbol?: IStringOperationFilterInput;
    code?: IStringOperationFilterInput;
    exchangeRate?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IComparableDateTimeOperationFilterInput {
    eq?: IDateTime;
    neq?: IDateTime;
    in?: Array<IDateTime>;
    nin?: Array<IDateTime>;
    gt?: IDateTime;
    ngt?: IDateTime;
    gte?: IDateTime;
    ngte?: IDateTime;
    lt?: IDateTime;
    nlt?: IDateTime;
    lte?: IDateTime;
    nlte?: IDateTime;
}
/**
 * The `DateTime` scalar represents an ISO-8601 compliant date time type.
 */
export declare type IDateTime = any;
export interface IListFilterInputTypeOfProfileFilterInput {
    all?: IProfileFilterInput;
    none?: IProfileFilterInput;
    some?: IProfileFilterInput;
    any?: boolean;
}
export interface IProfileFilterInput {
    and?: Array<IProfileFilterInput>;
    or?: Array<IProfileFilterInput>;
    firstName?: IStringOperationFilterInput;
    lastName?: IStringOperationFilterInput;
    postalCode?: IStringOperationFilterInput;
    address?: IStringOperationFilterInput;
    town?: IStringOperationFilterInput;
    city?: IStringOperationFilterInput;
    colony?: IStringOperationFilterInput;
    street?: IStringOperationFilterInput;
    houseNumber?: IStringOperationFilterInput;
    periodInvoice?: INullableOfPeriodInvoiceOperationFilterInput;
    billingForm?: INullableOfBillingFormOperationFilterInput;
    paymentTerm?: INullableOfPaymentTermOperationFilterInput;
    dialCode?: IStringOperationFilterInput;
    fullName?: IStringOperationFilterInput;
    photo?: IStringOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    member?: IMemberFilterInput;
    countryId?: IComparableGuidOperationFilterInput;
    country?: ICountryFilterInput;
    phone?: IStringOperationFilterInput;
    cURP?: IStringOperationFilterInput;
    rFC?: IStringOperationFilterInput;
    nSS?: IStringOperationFilterInput;
    infonavitCredit?: IStringOperationFilterInput;
    nationality?: IStringOperationFilterInput;
    age?: IComparableInt32OperationFilterInput;
    gender?: INullableOfGenderOperationFilterInput;
    dateOfBirth?: IComparableNullableOfDateTimeOperationFilterInput;
    maritalStatus?: INullableOfMaritalStatusOperationFilterInput;
    biography?: IStringOperationFilterInput;
    siteLogo?: IStringOperationFilterInput;
    siteUrl?: IStringOperationFilterInput;
    quatorProfileId?: IComparableNullableOfGuidOperationFilterInput;
    state?: IStringOperationFilterInput;
    institution?: IStringOperationFilterInput;
    hospital?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfPeriodInvoiceOperationFilterInput {
    eq?: IPeriodInvoice;
    neq?: IPeriodInvoice;
    in?: Array<IPeriodInvoice | null>;
    nin?: Array<IPeriodInvoice | null>;
}
export declare const enum IPeriodInvoice {
    DAILY = "DAILY",
    WEEKLY = "WEEKLY",
    TWO_WEEKS = "TWO_WEEKS",
    MONTHLY = "MONTHLY"
}
export interface INullableOfBillingFormOperationFilterInput {
    eq?: IBillingForm;
    neq?: IBillingForm;
    in?: Array<IBillingForm | null>;
    nin?: Array<IBillingForm | null>;
}
export declare const enum IBillingForm {
    CERTIFICATE = "CERTIFICATE",
    GLOBAL = "GLOBAL"
}
export interface INullableOfPaymentTermOperationFilterInput {
    eq?: IPaymentTerm;
    neq?: IPaymentTerm;
    in?: Array<IPaymentTerm | null>;
    nin?: Array<IPaymentTerm | null>;
}
export declare const enum IPaymentTerm {
    CASH_PAYMENT = "CASH_PAYMENT",
    PREPAID = "PREPAID",
    PAYMENT_POSTPONED = "PAYMENT_POSTPONED",
    CREDIT = "CREDIT"
}
export interface IMemberFilterInput {
    and?: Array<IMemberFilterInput>;
    or?: Array<IMemberFilterInput>;
    username?: IStringOperationFilterInput;
    email?: IStringOperationFilterInput;
    recoverToken?: IStringOperationFilterInput;
    recoverRegister?: IComparableDateTimeOperationFilterInput;
    isActive?: IBooleanOperationFilterInput;
    firstTime?: IBooleanOperationFilterInput;
    loginCount?: IComparableInt32OperationFilterInput;
    rFC?: IStringOperationFilterInput;
    businessName?: IStringOperationFilterInput;
    useBilling?: IBooleanOperationFilterInput;
    socialReason?: IStringOperationFilterInput;
    adminCode?: IStringOperationFilterInput;
    canifarmaQRCodeOne?: IStringOperationFilterInput;
    canifarmaQRCodeTwo?: IStringOperationFilterInput;
    consecutive?: IComparableNullableOfInt32OperationFilterInput;
    businessId?: IComparableNullableOfGuidOperationFilterInput;
    memberCompanies?: IListFilterInputTypeOfMemberCompanyFilterInput;
    memberRoles?: IListFilterInputTypeOfMemberRoleFilterInput;
    memberProjects?: IListFilterInputTypeOfMemberProjectFilterInput;
    profile?: IProfileFilterInput;
    memberStream?: IMemberStreamFilterInput;
    lastLogin?: IComparableNullableOfDateTimeOperationFilterInput;
    groups?: IListFilterInputTypeOfGroupFilterInput;
    taxonomies?: IListFilterInputTypeOfMemberTaxonomyFilterInput;
    healthInsurance?: IHealthInsuranceFilterInput;
    companyData?: IEnterpriseDataFilterInput;
    billingData?: IBillingDataFilterInput;
    sells?: IComparableNullableOfInt32OperationFilterInput;
    sellsList?: IListFilterInputTypeOfSellFilterInput;
    sellsProspectList?: IListFilterInputTypeOfSellFilterInput;
    sellersSellList?: IListFilterInputTypeOfSellFilterInput;
    memberRelations?: IListFilterInputTypeOfMemberRelationFilterInput;
    memberBusinesses?: IListFilterInputTypeOfMemberBusinessFilterInput;
    slugs?: IListStringOperationFilterInput;
    memberIndustryId?: IComparableNullableOfGuidOperationFilterInput;
    memberIndustry?: IMemberIndustryFilterInput;
    branchOfficeIds?: IListComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IComparableNullableOfInt32OperationFilterInput {
    eq?: number;
    neq?: number;
    in?: Array<number | null>;
    nin?: Array<number | null>;
    gt?: number;
    ngt?: number;
    gte?: number;
    ngte?: number;
    lt?: number;
    nlt?: number;
    lte?: number;
    nlte?: number;
}
export interface IListFilterInputTypeOfMemberCompanyFilterInput {
    all?: IMemberCompanyFilterInput;
    none?: IMemberCompanyFilterInput;
    some?: IMemberCompanyFilterInput;
    any?: boolean;
}
export interface IMemberCompanyFilterInput {
    and?: Array<IMemberCompanyFilterInput>;
    or?: Array<IMemberCompanyFilterInput>;
    companyId?: IComparableGuidOperationFilterInput;
    company?: ICompanyFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    member?: IMemberFilterInput;
    isDefault?: IBooleanOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfMemberRoleFilterInput {
    all?: IMemberRoleFilterInput;
    none?: IMemberRoleFilterInput;
    some?: IMemberRoleFilterInput;
    any?: boolean;
}
export interface IMemberRoleFilterInput {
    and?: Array<IMemberRoleFilterInput>;
    or?: Array<IMemberRoleFilterInput>;
    companyId?: IComparableGuidOperationFilterInput;
    company?: ICompanyFilterInput;
    roleId?: IComparableGuidOperationFilterInput;
    role?: IRoleFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    member?: IMemberFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IRoleFilterInput {
    and?: Array<IRoleFilterInput>;
    or?: Array<IRoleFilterInput>;
    name?: IStringOperationFilterInput;
    codeName?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    memberRoles?: IListFilterInputTypeOfMemberRoleFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfMemberProjectFilterInput {
    all?: IMemberProjectFilterInput;
    none?: IMemberProjectFilterInput;
    some?: IMemberProjectFilterInput;
    any?: boolean;
}
export interface IMemberProjectFilterInput {
    and?: Array<IMemberProjectFilterInput>;
    or?: Array<IMemberProjectFilterInput>;
    memberId?: IComparableGuidOperationFilterInput;
    member?: IMemberFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    project?: IProjectFilterInput;
    memberProjectRoleProject?: IMemberProjectRoleProjectFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IMemberProjectRoleProjectFilterInput {
    and?: Array<IMemberProjectRoleProjectFilterInput>;
    or?: Array<IMemberProjectRoleProjectFilterInput>;
    memberProjectId?: IComparableGuidOperationFilterInput;
    memberProject?: IMemberProjectFilterInput;
    projectRoleId?: IComparableGuidOperationFilterInput;
    projectRole?: IProjectRoleFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IProjectRoleFilterInput {
    and?: Array<IProjectRoleFilterInput>;
    or?: Array<IProjectRoleFilterInput>;
    name?: IStringOperationFilterInput;
    codeName?: IStringOperationFilterInput;
    label?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    isActive?: IBooleanOperationFilterInput;
    permission?: IPermissionFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    project?: IProjectFilterInput;
    viewManagers?: IListFilterInputTypeOfViewManagerFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IPermissionFilterInput {
    and?: Array<IPermissionFilterInput>;
    or?: Array<IPermissionFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    project?: IProjectFilterInput;
    projectRoleId?: IComparableGuidOperationFilterInput;
    projectRole?: IProjectRoleFilterInput;
    rules?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfViewManagerFilterInput {
    all?: IViewManagerFilterInput;
    none?: IViewManagerFilterInput;
    some?: IViewManagerFilterInput;
    any?: boolean;
}
export interface IViewManagerFilterInput {
    and?: Array<IViewManagerFilterInput>;
    or?: Array<IViewManagerFilterInput>;
    pageManagerId?: IComparableGuidOperationFilterInput;
    pageManager?: IPageManagerFilterInput;
    name?: IStringOperationFilterInput;
    default?: IBooleanOperationFilterInput;
    config?: IStringOperationFilterInput;
    projectRoleId?: IComparableNullableOfGuidOperationFilterInput;
    projectRole?: IProjectRoleFilterInput;
    viewColumns?: IListFilterInputTypeOfViewColumnFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IPageManagerFilterInput {
    and?: Array<IPageManagerFilterInput>;
    or?: Array<IPageManagerFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    project?: IProjectFilterInput;
    pageName?: IStringOperationFilterInput;
    config?: IStringOperationFilterInput;
    viewManagers?: IListFilterInputTypeOfViewManagerFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfViewColumnFilterInput {
    all?: IViewColumnFilterInput;
    none?: IViewColumnFilterInput;
    some?: IViewColumnFilterInput;
    any?: boolean;
}
export interface IViewColumnFilterInput {
    and?: Array<IViewColumnFilterInput>;
    or?: Array<IViewColumnFilterInput>;
    viewManagerId?: IComparableGuidOperationFilterInput;
    viewManager?: IViewManagerFilterInput;
    isDefault?: IBooleanOperationFilterInput;
    position?: IComparableInt32OperationFilterInput;
    config?: IStringOperationFilterInput;
    viewBlockColumns?: IListFilterInputTypeOfViewBlockColumnFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfViewBlockColumnFilterInput {
    all?: IViewBlockColumnFilterInput;
    none?: IViewBlockColumnFilterInput;
    some?: IViewBlockColumnFilterInput;
    any?: boolean;
}
export interface IViewBlockColumnFilterInput {
    and?: Array<IViewBlockColumnFilterInput>;
    or?: Array<IViewBlockColumnFilterInput>;
    keyName?: IStringOperationFilterInput;
    name?: IStringOperationFilterInput;
    config?: IStringOperationFilterInput;
    position?: IComparableInt32OperationFilterInput;
    viewColumnId?: IComparableGuidOperationFilterInput;
    viewColumn?: IViewColumnFilterInput;
    columnTabId?: IComparableNullableOfGuidOperationFilterInput;
    columnTab?: IColumnTabFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IColumnTabFilterInput {
    and?: Array<IColumnTabFilterInput>;
    or?: Array<IColumnTabFilterInput>;
    isDefault?: IBooleanOperationFilterInput;
    name?: IStringOperationFilterInput;
    position?: IComparableInt32OperationFilterInput;
    config?: IStringOperationFilterInput;
    columnId?: IComparableGuidOperationFilterInput;
    viewColumn?: IViewColumnFilterInput;
    blockColumns?: IListFilterInputTypeOfViewBlockColumnFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IMemberStreamFilterInput {
    and?: Array<IMemberStreamFilterInput>;
    or?: Array<IMemberStreamFilterInput>;
    memberId?: IComparableGuidOperationFilterInput;
    member?: IMemberFilterInput;
    userName?: IStringOperationFilterInput;
    firstName?: IStringOperationFilterInput;
    lastName?: IStringOperationFilterInput;
    image?: IStringOperationFilterInput;
    isOnline?: IBooleanOperationFilterInput;
    description?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IComparableNullableOfDateTimeOperationFilterInput {
    eq?: IDateTime;
    neq?: IDateTime;
    in?: Array<IDateTime | null>;
    nin?: Array<IDateTime | null>;
    gt?: IDateTime;
    ngt?: IDateTime;
    gte?: IDateTime;
    ngte?: IDateTime;
    lt?: IDateTime;
    nlt?: IDateTime;
    lte?: IDateTime;
    nlte?: IDateTime;
}
export interface IListFilterInputTypeOfGroupFilterInput {
    all?: IGroupFilterInput;
    none?: IGroupFilterInput;
    some?: IGroupFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfMemberTaxonomyFilterInput {
    all?: IMemberTaxonomyFilterInput;
    none?: IMemberTaxonomyFilterInput;
    some?: IMemberTaxonomyFilterInput;
    any?: boolean;
}
export interface IMemberTaxonomyFilterInput {
    and?: Array<IMemberTaxonomyFilterInput>;
    or?: Array<IMemberTaxonomyFilterInput>;
    memberId?: IComparableGuidOperationFilterInput;
    member?: IMemberFilterInput;
    taxonomyId?: IComparableGuidOperationFilterInput;
}
export interface IHealthInsuranceFilterInput {
    and?: Array<IHealthInsuranceFilterInput>;
    or?: Array<IHealthInsuranceFilterInput>;
    memberId?: IComparableGuidOperationFilterInput;
    member?: IMemberFilterInput;
    nSS?: IStringOperationFilterInput;
    insuranceMajorMedicalExpenses?: IStringOperationFilterInput;
    typeInsurance?: ITypeInsuranceOperationFilterInput;
    insuranceCarrier?: IStringOperationFilterInput;
    policyNumber?: IStringOperationFilterInput;
    dischargeDate?: IComparableNullableOfDateTimeOperationFilterInput;
    expirationDate?: IComparableNullableOfDateTimeOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ITypeInsuranceOperationFilterInput {
    eq?: ITypeInsurance;
    neq?: ITypeInsurance;
    in?: Array<ITypeInsurance>;
    nin?: Array<ITypeInsurance>;
}
export declare const enum ITypeInsurance {
    MEDICAL_EXPENSES = "MEDICAL_EXPENSES",
    LIFE = "LIFE",
    HOME = "HOME",
    CARS = "CARS",
    OLDER = "OLDER",
    YOUNGER = "YOUNGER",
    DENTAL = "DENTAL"
}
export interface IEnterpriseDataFilterInput {
    and?: Array<IEnterpriseDataFilterInput>;
    or?: Array<IEnterpriseDataFilterInput>;
    memberId?: IComparableGuidOperationFilterInput;
    member?: IMemberFilterInput;
    companyName?: IStringOperationFilterInput;
    companyCategory?: IStringOperationFilterInput;
    sucursal?: IStringOperationFilterInput;
    phones?: IStringOperationFilterInput;
    webSite?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IBillingDataFilterInput {
    and?: Array<IBillingDataFilterInput>;
    or?: Array<IBillingDataFilterInput>;
    memberId?: IComparableGuidOperationFilterInput;
    member?: IMemberFilterInput;
    person?: IPersonOperationFilterInput;
    businessName?: IStringOperationFilterInput;
    rFC?: IStringOperationFilterInput;
    useCDFI?: INullableOfUseCDFIOperationFilterInput;
    paymentMethod?: INullableOfPaymentMethodOperationFilterInput;
    paymentTerm?: INullableOfPaymentTermOperationFilterInput;
    taxSituation?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IPersonOperationFilterInput {
    eq?: IPerson;
    neq?: IPerson;
    in?: Array<IPerson>;
    nin?: Array<IPerson>;
}
export declare const enum IPerson {
    NATURAL = "NATURAL",
    LEGAL = "LEGAL"
}
export interface INullableOfUseCDFIOperationFilterInput {
    eq?: IUseCDFI;
    neq?: IUseCDFI;
    in?: Array<IUseCDFI | null>;
    nin?: Array<IUseCDFI | null>;
}
export declare const enum IUseCDFI {
    PROOF_OF_INCOME = "PROOF_OF_INCOME",
    DISBURSEMENT_VOUCHER = "DISBURSEMENT_VOUCHER",
    PROOF_OF_TRANSFER = "PROOF_OF_TRANSFER",
    PAYROLL_RECEIPT = "PAYROLL_RECEIPT",
    PROOF_OF_RECEIPT_OF_PAYMENTS = "PROOF_OF_RECEIPT_OF_PAYMENTS",
    PROOF_OF_WITHHOLDINGS_AND_PAYMENT_INFORMATION = "PROOF_OF_WITHHOLDINGS_AND_PAYMENT_INFORMATION"
}
export interface INullableOfPaymentMethodOperationFilterInput {
    eq?: Iauth_PaymentMethod;
    neq?: Iauth_PaymentMethod;
    in?: Array<Iauth_PaymentMethod | null>;
    nin?: Array<Iauth_PaymentMethod | null>;
}
export declare const enum Iauth_PaymentMethod {
    CASH = "CASH",
    NOMINAL_CHECK = "NOMINAL_CHECK",
    TRANSFER = "TRANSFER",
    ELECTRONIC_FUNDS = "ELECTRONIC_FUNDS",
    TO_DEFINE = "TO_DEFINE"
}
export interface IListFilterInputTypeOfSellFilterInput {
    all?: ISellFilterInput;
    none?: ISellFilterInput;
    some?: ISellFilterInput;
    any?: boolean;
}
export interface ISellFilterInput {
    and?: Array<ISellFilterInput>;
    or?: Array<ISellFilterInput>;
    nominatorId?: IComparableNullableOfGuidOperationFilterInput;
    nominator?: IMemberFilterInput;
    prospectId?: IComparableNullableOfGuidOperationFilterInput;
    prospect?: IMemberFilterInput;
    sellerId?: IComparableNullableOfGuidOperationFilterInput;
    seller?: IMemberFilterInput;
    memberRelationId?: IComparableNullableOfGuidOperationFilterInput;
    memberRelation?: IMemberRelationFilterInput;
    concept?: IStringOperationFilterInput;
    amount?: IComparableDecimalOperationFilterInput;
    status?: ISellStatusOperationFilterInput;
    description?: IStringOperationFilterInput;
    walletTransactionId?: IComparableNullableOfGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IMemberRelationFilterInput {
    and?: Array<IMemberRelationFilterInput>;
    or?: Array<IMemberRelationFilterInput>;
    status?: INullableOfEnumMemberRelationStatusOperationFilterInput;
    parentNodeId?: IComparableGuidOperationFilterInput;
    parentNode?: IMemberFilterInput;
    childNodeId?: IComparableGuidOperationFilterInput;
    childNode?: IMemberFilterInput;
    isActive?: IBooleanOperationFilterInput;
    parentRelationId?: IComparableNullableOfGuidOperationFilterInput;
    parentRelation?: IMemberRelationFilterInput;
    memberRelations?: IListFilterInputTypeOfMemberRelationFilterInput;
    sells?: IListFilterInputTypeOfSellFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumMemberRelationStatusOperationFilterInput {
    eq?: IEnumMemberRelationStatus;
    neq?: IEnumMemberRelationStatus;
    in?: Array<IEnumMemberRelationStatus | null>;
    nin?: Array<IEnumMemberRelationStatus | null>;
}
export declare const enum IEnumMemberRelationStatus {
    ACTIVE = "ACTIVE",
    POTENTIAL = "POTENTIAL",
    INTERESTED = "INTERESTED",
    CLOSED = "CLOSED"
}
export interface IListFilterInputTypeOfMemberRelationFilterInput {
    all?: IMemberRelationFilterInput;
    none?: IMemberRelationFilterInput;
    some?: IMemberRelationFilterInput;
    any?: boolean;
}
export interface IComparableDecimalOperationFilterInput {
    eq?: IDecimal;
    neq?: IDecimal;
    in?: Array<IDecimal>;
    nin?: Array<IDecimal>;
    gt?: IDecimal;
    ngt?: IDecimal;
    gte?: IDecimal;
    ngte?: IDecimal;
    lt?: IDecimal;
    nlt?: IDecimal;
    lte?: IDecimal;
    nlte?: IDecimal;
}
/**
 * The built-in `Decimal` scalar type.
 */
export declare type IDecimal = any;
export interface ISellStatusOperationFilterInput {
    eq?: ISellStatus;
    neq?: ISellStatus;
    in?: Array<ISellStatus>;
    nin?: Array<ISellStatus>;
}
export declare const enum ISellStatus {
    IN_PROCESS = "IN_PROCESS",
    DONE = "DONE",
    CANCELLED = "CANCELLED"
}
export interface IListFilterInputTypeOfMemberBusinessFilterInput {
    all?: IMemberBusinessFilterInput;
    none?: IMemberBusinessFilterInput;
    some?: IMemberBusinessFilterInput;
    any?: boolean;
}
export interface IMemberBusinessFilterInput {
    and?: Array<IMemberBusinessFilterInput>;
    or?: Array<IMemberBusinessFilterInput>;
    memberId?: IComparableGuidOperationFilterInput;
    member?: IMemberFilterInput;
    businessId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListStringOperationFilterInput {
    all?: IStringOperationFilterInput;
    none?: IStringOperationFilterInput;
    some?: IStringOperationFilterInput;
    any?: boolean;
}
export interface IMemberIndustryFilterInput {
    and?: Array<IMemberIndustryFilterInput>;
    or?: Array<IMemberIndustryFilterInput>;
    name?: IStringOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    members?: IListFilterInputTypeOfMemberFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfMemberFilterInput {
    all?: IMemberFilterInput;
    none?: IMemberFilterInput;
    some?: IMemberFilterInput;
    any?: boolean;
}
export interface IListComparableGuidOperationFilterInput {
    all?: IComparableGuidOperationFilterInput;
    none?: IComparableGuidOperationFilterInput;
    some?: IComparableGuidOperationFilterInput;
    any?: boolean;
}
export interface INullableOfGenderOperationFilterInput {
    eq?: IGender;
    neq?: IGender;
    in?: Array<IGender | null>;
    nin?: Array<IGender | null>;
}
export declare const enum IGender {
    MALE = "MALE",
    FEMALE = "FEMALE",
    UNKNOWN = "UNKNOWN"
}
export interface INullableOfMaritalStatusOperationFilterInput {
    eq?: IMaritalStatus;
    neq?: IMaritalStatus;
    in?: Array<IMaritalStatus | null>;
    nin?: Array<IMaritalStatus | null>;
}
export declare const enum IMaritalStatus {
    DIVORCED = "DIVORCED",
    MARRIED = "MARRIED",
    SINGLE = "SINGLE",
    SEPARATED = "SEPARATED",
    WIDOWED = "WIDOWED",
    UNKNOWN = "UNKNOWN"
}
export interface IListFilterInputTypeOfProjectRoleFilterInput {
    all?: IProjectRoleFilterInput;
    none?: IProjectRoleFilterInput;
    some?: IProjectRoleFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfProjectSocialNetworkFilterInput {
    all?: IProjectSocialNetworkFilterInput;
    none?: IProjectSocialNetworkFilterInput;
    some?: IProjectSocialNetworkFilterInput;
    any?: boolean;
}
export interface IProjectSocialNetworkFilterInput {
    and?: Array<IProjectSocialNetworkFilterInput>;
    or?: Array<IProjectSocialNetworkFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    project?: IProjectFilterInput;
    socialNetworkType?: ISocialNetworkTypeOperationFilterInput;
    value?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ISocialNetworkTypeOperationFilterInput {
    eq?: ISocialNetworkType;
    neq?: ISocialNetworkType;
    in?: Array<ISocialNetworkType>;
    nin?: Array<ISocialNetworkType>;
}
export declare const enum ISocialNetworkType {
    FACEBOOK = "FACEBOOK",
    TWITTER = "TWITTER",
    INSTAGRAM = "INSTAGRAM"
}
export interface INicheFilterInput {
    and?: Array<INicheFilterInput>;
    or?: Array<INicheFilterInput>;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    nicheServices?: IListFilterInputTypeOfNicheServiceFilterInput;
    projects?: IListFilterInputTypeOfProjectFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfNicheServiceFilterInput {
    all?: INicheServiceFilterInput;
    none?: INicheServiceFilterInput;
    some?: INicheServiceFilterInput;
    any?: boolean;
}
export interface INicheServiceFilterInput {
    and?: Array<INicheServiceFilterInput>;
    or?: Array<INicheServiceFilterInput>;
    nicheId?: IComparableGuidOperationFilterInput;
    niche?: INicheFilterInput;
    codeName?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfGroupTaxonomyFilterInput {
    all?: IGroupTaxonomyFilterInput;
    none?: IGroupTaxonomyFilterInput;
    some?: IGroupTaxonomyFilterInput;
    any?: boolean;
}
export interface IGroupTaxonomyFilterInput {
    and?: Array<IGroupTaxonomyFilterInput>;
    or?: Array<IGroupTaxonomyFilterInput>;
    taxonomyId?: IComparableGuidOperationFilterInput;
    groupId?: IComparableGuidOperationFilterInput;
    group?: IGroupFilterInput;
}
export interface IGroupSortInput {
    projectId?: ISortEnumType;
    project?: IProjectSortInput;
    name?: ISortEnumType;
    description?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export declare const enum ISortEnumType {
    ASC = "ASC",
    DESC = "DESC"
}
export interface IProjectSortInput {
    name?: ISortEnumType;
    description?: ISortEnumType;
    logo?: ISortEnumType;
    tagLine?: ISortEnumType;
    isAPublicPlatform?: ISortEnumType;
    isReady?: ISortEnumType;
    url?: ISortEnumType;
    onProduction?: ISortEnumType;
    industryId?: ISortEnumType;
    industry?: IIndustrySortInput;
    companyId?: ISortEnumType;
    company?: ICompanySortInput;
    nicheId?: ISortEnumType;
    niche?: INicheSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IIndustrySortInput {
    name?: ISortEnumType;
    slug?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ICompanySortInput {
    name?: ISortEnumType;
    numberEmployees?: ISortEnumType;
    countryId?: ISortEnumType;
    country?: ICountrySortInput;
    photo?: ISortEnumType;
    tagLine?: ISortEnumType;
    industryId?: ISortEnumType;
    industry?: IIndustrySortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ICountrySortInput {
    name?: ISortEnumType;
    code?: ISortEnumType;
    phoneCode?: ISortEnumType;
    currencyId?: ISortEnumType;
    currency?: ICurrencySortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ICurrencySortInput {
    name?: ISortEnumType;
    symbol?: ISortEnumType;
    code?: ISortEnumType;
    exchangeRate?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface INicheSortInput {
    name?: ISortEnumType;
    description?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IGroupCollectionSegment {
    items?: Array<IGroup>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IGroup {
    projectId: IUUID;
    project: IProject;
    name: string;
    description: string;
    members?: Array<IMember>;
    groupTaxonomies?: Array<IGroupTaxonomy>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProject {
    name: string;
    description: string;
    logo: string;
    tagLine: string;
    isAPublicPlatform: boolean;
    isReady: boolean;
    url: string;
    onProduction: boolean;
    industryId?: IUUID;
    industry?: IIndustry;
    companyId: IUUID;
    company: ICompany;
    projectRoles: Array<IProjectRole>;
    memberProjects: Array<IMemberProject>;
    projectSocialNetworks: Array<IProjectSocialNetwork>;
    groups: Array<IGroup>;
    nicheId?: IUUID;
    niche?: INiche;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    shop?: IShop;
    services?: Array<IServiceHelper | null>;
    site?: Array<IConfiguration | null>;
}
export interface IIndustry {
    name: string;
    slug: string;
    projects: Array<IProject>;
    companies: Array<ICompany>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICompany {
    name: string;
    numberEmployees: number;
    countryId: IUUID;
    country: ICountry;
    photo: string;
    tagLine: string;
    industryId?: IUUID;
    industry: IIndustry;
    memberCompanies: Array<IMemberCompany>;
    projects: Array<IProject>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICountry {
    name: string;
    code: string;
    phoneCode?: string;
    currencyId: IUUID;
    currency: ICurrency;
    profile: Array<IProfile>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICurrency {
    name: string;
    symbol: string;
    code: string;
    exchangeRate: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProfile {
    firstName: string;
    lastName: string;
    postalCode?: string;
    address?: string;
    town?: string;
    city?: string;
    colony?: string;
    street?: string;
    houseNumber?: string;
    periodInvoice?: IPeriodInvoice;
    billingForm?: IBillingForm;
    paymentTerm?: IPaymentTerm;
    dialCode?: string;
    fullName?: string;
    photo: string;
    memberId: IUUID;
    member: IMember;
    countryId: IUUID;
    country: ICountry;
    phone?: string;
    cURP?: string;
    rFC?: string;
    nSS?: string;
    infonavitCredit?: string;
    nationality?: string;
    age: number;
    gender?: IGender;
    dateOfBirth?: IDateTime;
    maritalStatus?: IMaritalStatus;
    biography?: string;
    siteLogo?: string;
    siteUrl?: string;
    quatorProfileId?: IUUID;
    state?: string;
    institution?: string;
    hospital?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMember {
    username?: string;
    email: string;
    recoverToken: string;
    recoverRegister: IDateTime;
    isActive: boolean;
    firstTime: boolean;
    loginCount: number;
    rFC: string;
    businessName: string;
    useBilling: boolean;
    socialReason: string;
    adminCode?: string;
    canifarmaQRCodeOne?: string;
    canifarmaQRCodeTwo?: string;
    consecutive?: number;
    businessId?: IUUID;
    memberCompanies?: Array<IMemberCompany>;
    memberRoles?: Array<IMemberRole>;
    memberProjects?: Array<IMemberProject>;
    profile?: IProfile;
    memberStream?: IMemberStream;
    lastLogin?: IDateTime;
    groups?: Array<IGroup>;
    taxonomies?: Array<IMemberTaxonomy>;
    healthInsurance?: IHealthInsurance;
    companyData?: IEnterpriseData;
    billingData?: IBillingData;
    sells?: number;
    sellsList?: Array<ISell>;
    sellsProspectList?: Array<ISell>;
    sellersSellList?: Array<ISell>;
    memberRelations?: Array<IMemberRelation>;
    memberBusinesses?: Array<IMemberBusiness>;
    slugs?: Array<string>;
    memberIndustryId?: IUUID;
    memberIndustry?: IMemberIndustry;
    branchOfficeIds?: Array<IUUID>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    addresses?: Array<IAddress | null>;
    hiring?: Array<IHiring | null>;
    shift?: Array<IShift | null>;
    resourceQuotes?: Array<IResourceQuote | null>;
    collaborator?: Array<ICollaborator | null>;
    business?: IBusiness;
    projectPlanSuscriptions?: Array<IProjectPlanSubscription | null>;
    serviceMember?: Array<IServiceMember | null>;
    accountKeys?: Array<IAccountKey | null>;
    paymentMethod?: boolean;
    listEventDetails?: Array<IEventDetail | null>;
    listFisicExams?: Array<IFisicExam | null>;
    listMedicalBackgrounds?: Array<IMedicalBackground | null>;
    listMedicRecipes?: Array<IMedicRecipe | null>;
    listPatientNotes?: Array<IPacientNote | null>;
    listVitalSigns?: Array<IVitalSign | null>;
    listVaccines?: Array<IVaccine | null>;
    memberBoards?: Array<IMemberBoard | null>;
    memberSpaces?: Array<IMemberSpace | null>;
    files?: Array<IFile | null>;
    folders?: Array<IFolder | null>;
    sharedFiles?: Array<ISharedFile | null>;
    sharedFolders?: Array<ISharedFolder | null>;
    memberWallets?: Array<IMemberWallet | null>;
    devices?: Array<IDevice | null>;
    notifications?: Array<INotification | null>;
}
export interface IMemberCompany {
    companyId: IUUID;
    company: ICompany;
    memberId: IUUID;
    member: IMember;
    isDefault: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMemberRole {
    companyId: IUUID;
    company: ICompany;
    roleId: IUUID;
    role: IRole;
    memberId: IUUID;
    member: IMember;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IRole {
    name: string;
    codeName: string;
    description: string;
    memberRoles: Array<IMemberRole>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMemberProject {
    memberId: IUUID;
    member: IMember;
    projectId: IUUID;
    project: IProject;
    memberProjectRoleProject?: IMemberProjectRoleProject;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMemberProjectRoleProject {
    memberProjectId: IUUID;
    memberProject: IMemberProject;
    projectRoleId: IUUID;
    projectRole: IProjectRole;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProjectRole {
    name: string;
    codeName: string;
    label?: string;
    description?: string;
    isActive: boolean;
    permission?: IPermission;
    projectId: IUUID;
    project: IProject;
    viewManagers?: Array<IViewManager>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPermission {
    projectId: IUUID;
    project: IProject;
    projectRoleId: IUUID;
    projectRole: IProjectRole;
    rules: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IViewManager {
    pageManagerId: IUUID;
    pageManager: IPageManager;
    name: string;
    default: boolean;
    config?: string;
    projectRoleId?: IUUID;
    projectRole?: IProjectRole;
    viewColumns?: Array<IViewColumn>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPageManager {
    projectId: IUUID;
    project: IProject;
    pageName: string;
    config?: string;
    viewManagers?: Array<IViewManager>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IViewColumn {
    viewManagerId: IUUID;
    viewManager?: IViewManager;
    isDefault: boolean;
    position: number;
    config?: string;
    viewBlockColumns?: Array<IViewBlockColumn>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IViewBlockColumnSortInput {
    keyName?: ISortEnumType;
    name?: ISortEnumType;
    config?: ISortEnumType;
    position?: ISortEnumType;
    viewColumnId?: ISortEnumType;
    viewColumn?: IViewColumnSortInput;
    columnTabId?: ISortEnumType;
    columnTab?: IColumnTabSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IViewColumnSortInput {
    viewManagerId?: ISortEnumType;
    viewManager?: IViewManagerSortInput;
    isDefault?: ISortEnumType;
    position?: ISortEnumType;
    config?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IViewManagerSortInput {
    pageManagerId?: ISortEnumType;
    pageManager?: IPageManagerSortInput;
    name?: ISortEnumType;
    default?: ISortEnumType;
    config?: ISortEnumType;
    projectRoleId?: ISortEnumType;
    projectRole?: IProjectRoleSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPageManagerSortInput {
    projectId?: ISortEnumType;
    project?: IProjectSortInput;
    pageName?: ISortEnumType;
    config?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IProjectRoleSortInput {
    name?: ISortEnumType;
    codeName?: ISortEnumType;
    label?: ISortEnumType;
    description?: ISortEnumType;
    isActive?: ISortEnumType;
    permission?: IPermissionSortInput;
    projectId?: ISortEnumType;
    project?: IProjectSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPermissionSortInput {
    projectId?: ISortEnumType;
    project?: IProjectSortInput;
    projectRoleId?: ISortEnumType;
    projectRole?: IProjectRoleSortInput;
    rules?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IColumnTabSortInput {
    isDefault?: ISortEnumType;
    name?: ISortEnumType;
    position?: ISortEnumType;
    config?: ISortEnumType;
    columnId?: ISortEnumType;
    viewColumn?: IViewColumnSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IViewBlockColumn {
    keyName: string;
    name?: string;
    config?: string;
    position: number;
    viewColumnId: IUUID;
    viewColumn?: IViewColumn;
    columnTabId?: IUUID;
    columnTab?: IColumnTab;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IColumnTab {
    isDefault: boolean;
    name: string;
    position: number;
    config: string;
    columnId: IUUID;
    viewColumn?: IViewColumn;
    blockColumns?: Array<IViewBlockColumn>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMemberStream {
    memberId: IUUID;
    member: IMember;
    userName?: string;
    firstName?: string;
    lastName?: string;
    image?: string;
    isOnline: boolean;
    description?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMemberTaxonomy {
    memberId: IUUID;
    member: IMember;
    taxonomyId: IUUID;
}
export interface IHealthInsurance {
    memberId: IUUID;
    member: IMember;
    nSS: string;
    insuranceMajorMedicalExpenses?: string;
    typeInsurance: ITypeInsurance;
    insuranceCarrier?: string;
    policyNumber?: string;
    dischargeDate?: IDateTime;
    expirationDate?: IDateTime;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IEnterpriseData {
    memberId: IUUID;
    member: IMember;
    companyName: string;
    companyCategory?: string;
    sucursal?: string;
    phones?: string;
    webSite?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IBillingData {
    memberId: IUUID;
    member: IMember;
    person: IPerson;
    businessName: string;
    rFC?: string;
    useCDFI?: IUseCDFI;
    paymentMethod?: Iauth_PaymentMethod;
    paymentTerm?: IPaymentTerm;
    taxSituation?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ISell {
    nominatorId?: IUUID;
    nominator?: IMember;
    prospectId?: IUUID;
    prospect?: IMember;
    sellerId?: IUUID;
    seller?: IMember;
    memberRelationId?: IUUID;
    memberRelation?: IMemberRelation;
    concept?: string;
    amount: IDecimal;
    status: ISellStatus;
    description?: string;
    walletTransactionId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    walletTransaction?: IWalletTransaction;
}
export interface IMemberRelation {
    status?: IEnumMemberRelationStatus;
    parentNodeId: IUUID;
    parentNode?: IMember;
    childNodeId: IUUID;
    childNode?: IMember;
    isActive: boolean;
    parentRelationId?: IUUID;
    parentRelation?: IMemberRelation;
    memberRelations?: Array<IMemberRelation>;
    sells?: Array<ISell>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IWalletTransaction {
    walletTransactionStatus: Array<IWalletTransactionStatus>;
    receptor?: IEWallet;
    eWallet?: IEWallet;
    service?: IEnumTransactionService;
    paymentServiceId?: string;
    paymentServiceToken?: string;
    amount: IDecimal;
    detainedAmount: IDecimal;
    concept: string;
    description: string;
    projectWalletKeyId?: IUUID;
    memberId?: IUUID;
    eWalletId?: IUUID;
    receptorId?: IUUID;
    type: IEnumTransactionType;
    walletTransactionMember?: IWalletTransactionMemberRelation;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface IWalletTransactionStatus {
    walletTransaction?: IWalletTransaction;
    status?: IEnumTransactionStatus;
    description?: string;
    walletTransactionId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IEnumTransactionStatus {
    PENDING = "PENDING",
    IN_POCESS = "IN_POCESS",
    PAID = "PAID",
    CANCELED = "CANCELED"
}
export interface IEWallet {
    balance: IDecimal;
    detained: IDecimal;
    eWalletTransactions: Array<IWalletTransaction>;
    eWalletRetrieves: Array<IWalletTransaction>;
    memberWallets: Array<IMemberWallet>;
    projectId: IUUID;
    principal: boolean;
    detainedManual: IDecimal;
    automaticPayment: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMemberWallet {
    eWallet?: IEWallet;
    memberId?: IUUID;
    eWalletId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export declare const enum IEnumTransactionService {
    STRIPE = "STRIPE",
    PAYPAL = "PAYPAL"
}
export declare const enum IEnumTransactionType {
    RETIREMENT = "RETIREMENT",
    DEPOSIT = "DEPOSIT",
    PAYMENT = "PAYMENT"
}
export interface IWalletTransactionMemberRelation {
    walletTransaction?: IWalletTransaction;
    walletTransactionMemberDetails: Array<IWalletTransactionMemberDetail>;
    memberRelationId: IUUID;
    walletTransactionId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IWalletTransactionMemberDetail {
    walletTransactionMember?: IWalletTransactionMemberRelation;
    amount: IDecimal;
    description: string;
    walletTransactionMemberId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMemberBusiness {
    memberId: IUUID;
    member?: IMember;
    businessId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMemberIndustry {
    name: string;
    projectId: IUUID;
    members?: Array<IMember>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IAddress {
    projectId: IUUID;
    memberId: IUUID;
    rFC?: string;
    businessName?: string;
    addressType?: string;
    firstName?: string;
    lastName?: string;
    countryName?: string;
    state?: string;
    city?: string;
    subUrb?: string;
    zipCode?: string;
    addressLine1: string;
    addressLine2?: string;
    phone?: string;
    number?: string;
    municipality?: string;
    addressDetails?: string;
    isPrincipal: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    invoice?: Array<IInvoice | null>;
}
export interface IInvoice {
    invoiceNumber: string;
    invoiceStatus: IInvoiceStatus;
    projectId: IUUID;
    memberId: IUUID;
    invoiceDate: IDateTime;
    observations: string;
    subTotal: IDecimal;
    shippingSale: IDecimal;
    discount: IDecimal;
    total: IDecimal;
    addressId: IUUID;
    details?: Array<IInvoiceDetail>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
    address?: IAddress;
}
export declare const enum IInvoiceStatus {
    PENDING = "PENDING",
    PAID = "PAID",
    CANCELLED = "CANCELLED"
}
export interface IInvoiceDetail {
    invoiceId: IUUID;
    invoice: IInvoice;
    productId: IUUID;
    quantity: number;
    salePrice: IDecimal;
    totalPrice: IDecimal;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    product?: IProduct;
}
export interface IProduct {
    projectId: IUUID;
    memberId: IUUID;
    title: string;
    photo: string;
    slug: string;
    sku: string;
    price: IDecimal;
    offerPrice: IDecimal;
    stock: number;
    active: boolean;
    shippingType: string;
    shippingPrice: IDecimal;
    description: string;
    publishDate: IDateTime;
    views: number;
    status: IProductStatus;
    seoProduct: string;
    subCategories?: Array<ITaxonomy>;
    categories?: Array<ITaxonomy>;
    details?: Array<IProductDetail>;
    images: Array<IImage>;
    shopType: IShopType;
    code?: string;
    purchasePrice?: number;
    sellPrice?: number;
    storeId?: IUUID;
    store?: IStore;
    measure?: string;
    utility?: number;
    measureType?: string;
    origin?: string;
    productType?: IProductType;
    planId?: IUUID;
    barcode?: string;
    brand?: string;
    family?: string;
    line?: string;
    subFamily?: string;
    key?: string;
    onStore?: boolean;
    onCatalog?: boolean;
    sellMeasure?: string;
    costType?: string;
    purchaseMeasure?: string;
    costingType: ICostingType;
    productModality?: IProductModality;
    stockAlertId?: IUUID;
    stockAlert?: IStockAlert;
    providers?: Array<IProductProv>;
    prices?: Array<IProductPrice>;
    discounts?: Array<IDecimal>;
    partNumber?: string;
    fee?: IDecimal;
    dataSheet?: string;
    ecommerceTitle?: string;
    ecommerceDescription?: string;
    ecommerceInstructions?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    invoiceDetail?: Array<IInvoiceDetail | null>;
}
export declare const enum IProductStatus {
    DRAFT = "DRAFT",
    PUBLISHED = "PUBLISHED",
    INACTIVE = "INACTIVE",
    PROGRAMMED = "PROGRAMMED"
}
export interface ITaxonomy {
    projectId: IUUID;
    name: string;
    slug: string;
    description?: string;
    termGroup: string;
    photo?: string;
    tagLine?: string;
    tagLine2?: string;
    parentId?: IUUID;
    parent?: ITaxonomy;
    subCategories: Array<ITaxonomy>;
    isPublic: boolean;
    articles?: Array<IArticle>;
    groupArticles?: Array<IArticle>;
    products?: Array<IProduct>;
    seoTaxonomy?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IArticle {
    projectId: IUUID;
    memberId: IUUID;
    title: string;
    photo: string;
    slug: string;
    resume: string;
    content: string;
    active: boolean;
    views: number;
    status: IArticleStatus;
    releaseDate: IDateTime;
    seoTitle: string;
    seoDescription: string;
    seoKeywords: string;
    structuredMarking: string;
    imageAlt: string;
    seoArticle?: string;
    typeContent?: ITypeContent;
    embedContent?: string;
    groupId?: IUUID;
    group?: ITaxonomy;
    language?: IArticleLanguage;
    parentId?: IUUID;
    parent?: IArticle;
    variants?: Array<IArticle>;
    subCategories?: Array<ITaxonomy>;
    categories?: Array<ITaxonomy>;
    tags?: Array<ITaxonomy>;
    surveys: Array<ISurvey>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    author?: string;
}
export declare const enum IArticleStatus {
    DRAFT = "DRAFT",
    PUBLISHED = "PUBLISHED",
    PROGRAMMED = "PROGRAMMED"
}
export declare const enum ITypeContent {
    ARTICLE = "ARTICLE",
    PODCAST = "PODCAST",
    VIDEO = "VIDEO",
    BENEFITS = "BENEFITS",
    PROMOTIONS = "PROMOTIONS",
    COMUNICATIONS = "COMUNICATIONS"
}
export declare const enum IArticleLanguage {
    ES = "ES",
    EN = "EN",
    PT = "PT",
    ZH = "ZH",
    DE = "DE",
    FR = "FR",
    RU = "RU"
}
export interface ISurvey {
    title: string;
    description: string;
    isActive: boolean;
    thankYouMessage: string;
    articles: Array<IArticle>;
    questions: Array<IQuestion>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuestion {
    surveyId: IUUID;
    survey: ISurvey;
    title: string;
    type: IQuestionType;
    image: string;
    isRequired: boolean;
    position: number;
    allowsFileUpload: boolean;
    options: Array<IOption>;
    answers?: Array<IAnswer>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IQuestionType {
    SINGLE = "SINGLE",
    OPEN = "OPEN",
    MULTIPLE = "MULTIPLE"
}
export interface IOption {
    questionId: IUUID;
    question: IQuestion;
    title: string;
    position: number;
    count: number;
    answers?: Array<IAnswer>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IAnswer {
    memberId: IUUID;
    questionId: IUUID;
    question: IQuestion;
    optionId?: IUUID;
    option?: IOption;
    uploadFile?: string;
    responseText: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: string;
}
export interface IProductDetail {
    productId: IUUID;
    product: IProduct;
    key: string;
    value: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IImage {
    projectId: IUUID;
    original: string;
    title: string;
    products: Array<IProduct>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IShopType {
    IXULABS = "IXULABS",
    MERCADOLIBRE = "MERCADOLIBRE",
    BODEGA = "BODEGA"
}
export interface IStore {
    projectId?: IUUID;
    name: string;
    branchOfficeId: IUUID;
    branchOffice?: IBranchOffice;
    code: string;
    storeType?: IStoreType;
    sellerId?: IUUID;
    stocks?: Array<IStoreStock>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    seller?: IMember;
}
export interface IBranchOffice {
    projectId?: IUUID;
    isActive: boolean;
    name: string;
    countryId: IUUID;
    state?: string;
    municipality?: string;
    email: string;
    phone: string;
    postalCode: string;
    street: string;
    number: string;
    managerId?: IUUID;
    manager?: IManager;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    country?: ICountry;
}
export interface IManager {
    projectId?: IUUID;
    memberId: IUUID;
    branchOfficeId: IUUID;
    branchOffice?: IBranchOffice;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IStoreType {
    MOVIL = "MOVIL",
    FIJO = "FIJO"
}
export interface IStoreStock {
    projectId: IUUID;
    productId: IUUID;
    storeId: IUUID;
    store?: IStore;
    product?: IProduct;
    stock: number;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IProductType {
    CASH = "CASH",
    SUBSCRIPTION = "SUBSCRIPTION"
}
export declare const enum ICostingType {
    AVERAGE = "AVERAGE",
    STANDARD = "STANDARD",
    EUPS = "EUPS",
    PEPS = "PEPS",
    EQUAL = "EQUAL",
    PACKAGE = "PACKAGE"
}
export declare const enum IProductModality {
    PURCHASE = "PURCHASE",
    SELL = "SELL",
    PRODUCTION = "PRODUCTION",
    CONSUMPTION = "CONSUMPTION",
    FIXED_ACTIVE = "FIXED_ACTIVE",
    BILLS = "BILLS"
}
export interface IStockAlert {
    projectId: IUUID;
    productId: IUUID;
    product?: IProduct;
    lowestQuantity: number;
    middleQuantity: number;
    highestQuantity: number;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProductProv {
    productId: IUUID;
    providerId: IUUID;
    product?: IProduct;
    provider?: IProductProvider;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProductProvider {
    projectId?: IUUID;
    name: string;
    rfc: string;
    socialReason: string;
    address: string;
    purchase?: Array<IPurchase>;
    creditDays?: number;
    afectaDiot: boolean;
    city?: string;
    credit?: IDecimal;
    balance?: IDecimal;
    providerType?: IProviderType;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPurchase {
    projectId?: IUUID;
    invoice: string;
    invoiceDate: IDateTime;
    expirationDate: IDateTime;
    branchOfficeId: IUUID;
    storeId: IUUID;
    providerId: IUUID;
    total?: number;
    currencyId: IUUID;
    hasBuyer: boolean;
    globalDiscount?: IDecimal;
    buyerId?: IUUID;
    isActive: boolean;
    discount?: number;
    subTotal?: number;
    provider?: IProductProvider;
    store?: IStore;
    branchOffice?: IBranchOffice;
    productPurchases?: Array<IProductPurchase>;
    files?: Array<IPurchaseFile>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProductPurchase {
    projectId?: IUUID;
    productId: IUUID;
    purchaseId: IUUID;
    quantity: number;
    price: number;
    discount?: number;
    taxes?: number;
    product?: IProduct;
    purchase?: IPurchase;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPurchaseFile {
    fileid: IUUID;
    purchaseId: IUUID;
    purchase?: IPurchase;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IProviderType {
    NATIONAL = "NATIONAL",
    FOREIGN = "FOREIGN"
}
export interface IProductPrice {
    price: IDecimal;
    productId: IUUID;
    product?: IProduct;
    utility: IDecimal;
    setPrice: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IHiring {
    hiringType: IHiringType;
    collaborators: Array<ICollaborator>;
    hiringServices: Array<IHiringService>;
    projectRoleId?: IUUID;
    memberId: IUUID;
    dateStart?: IDateTime;
    dateEnd?: IDateTime;
    job?: string;
    description?: string;
    amount?: IDecimal;
    amountWritted?: string;
    amountPerHour?: IDecimal;
    vacationDays: number;
    professionalLicense?: string;
    cURP?: string;
    iNE?: string;
    infonavit?: string;
    nationality?: string;
    birthNationality?: string;
    civilState?: IEnumCivilState;
    benefits?: IEnumBenefits;
    enumHiringType?: IEnumHiringType;
    hiringTypeId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IHiringType {
    projectId: IUUID;
    name: string;
    hirings?: Array<IHiring>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICollaborator {
    resourceQuoteDetail?: IResourceQuoteDetail;
    hiring?: IHiring;
    reportedHours?: number;
    hours?: number;
    costByHour?: IDecimal;
    role?: string;
    projectRoleId?: IUUID;
    timeEstimated?: string;
    amount?: IDecimal;
    memberId: IUUID;
    resourceQuoteDetailId?: IUUID;
    hiringId?: IUUID;
    collaboratorHours: Array<ICollaboratorHours>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface IResourceQuoteDetail {
    resourceQuote?: IResourceQuote;
    resourceQuoteDetailBoardRow: Array<IResourceQuoteDetailBoardRow>;
    collaborators: Array<ICollaborator>;
    totalCost: IDecimal;
    totalHours: number;
    totalEarnings: IDecimal;
    totalReportedHours: number;
    title: string;
    serviceId: IUUID;
    resourceQuoteId?: IUUID;
    description?: string;
    nomenclature: string;
    consecutive: number;
    earningPercentage: IDecimal;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    service?: IServiceArea;
}
export interface IResourceQuote {
    proposals: Array<IProposal>;
    resourceQuoteDetails: Array<IResourceQuoteDetail>;
    totalCostServices: IDecimal;
    totalHoursServices: number;
    totalEarnings: IDecimal;
    totalReportedHours: number;
    calculatedClosingDate?: IDateTime;
    memberId?: IUUID;
    projectId: IUUID;
    title: string;
    areaId?: IUUID;
    approvedDate?: IDateTime;
    status: IEnumResourceQuoteStatus;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
    area?: IArea;
}
export interface IProposal {
    resourceQuote?: IResourceQuote;
    title: string;
    state?: string;
    city?: string;
    pDF?: string;
    introduction?: string;
    summary?: string;
    methodology?: string;
    timeEstimate?: string;
    finishDate?: IDateTime;
    discount?: IDecimal;
    discountType?: IEnumDiscount;
    tax?: IDecimal;
    taxType?: IEnumDiscount;
    status: IEnumResourceQuoteStatus;
    total: IDecimal;
    resourceQuoteId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IEnumDiscount {
    FIXED = "FIXED",
    DISCOUNT = "DISCOUNT"
}
export declare const enum IEnumResourceQuoteStatus {
    DRAFT = "DRAFT",
    RELEASED = "RELEASED",
    PENDING = "PENDING",
    APPROVED = "APPROVED",
    REJECTED = "REJECTED"
}
export interface IArea {
    services: Array<IServiceArea>;
    name: string;
    description?: string;
    code: string;
    active: boolean;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IServiceArea {
    serviceQuizes: Array<IServiceQuiz>;
    serviceMembers: Array<IServiceMember>;
    area?: IArea;
    name: string;
    description?: string;
    code?: string;
    active: boolean;
    areaId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    hiringService?: Array<IHiringService | null>;
}
export interface IServiceQuiz {
    quiz: IServiceArea;
    service: IQuiz;
    serviceId: IUUID;
    quizId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuiz {
    serviceQuizes: Array<IServiceQuiz>;
    quizSections: Array<IQuizSection>;
    quizMembers: Array<IQuizMember>;
    timesAnswered?: number;
    name: string;
    description?: string;
    note?: string;
    projectId: IUUID;
    answerableOnlyOnce: boolean;
    maxTimesAnswerable?: number;
    mailInterviewed?: boolean;
    mailCreator?: boolean;
    saveSend?: boolean;
    tagPosition?: IEnumTagPosition;
    quizStatus?: IEnumOnlineQuizStatus;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuizSection {
    quizQuestions: Array<IQuizQuestion>;
    quiz: IQuiz;
    name: string;
    description?: string;
    order?: number;
    quizId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuizQuestion {
    quizSection?: IQuizSection;
    quizQuestionAnswers: Array<IQuizQuestionAnswer>;
    quizQuestionMembers: Array<IQuizQuestionMember>;
    quizQuestionNesteds: Array<IQuizQuestionNested>;
    question: string;
    questionType: IQuiz_QuestionType;
    description?: string;
    helpText?: string;
    placeHolder?: string;
    required?: boolean;
    requireConfimation?: boolean;
    maxCharacters?: number;
    memberId: IUUID;
    tagPosition: IEnumTagPosition;
    order?: number;
    active: boolean;
    quizSectionId: IUUID;
    quizQuestionPrefabId?: IUUID;
    quizQuestionPrefab?: IQuizQuestionPrefab;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuizQuestionAnswer {
    quizAnswer: IQuizAnswer;
    quizQuestion: IQuizQuestion;
    quizQuestionId: IUUID;
    quizAnswerId: IUUID;
    order?: number;
    value?: string;
    calc?: number;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuizAnswer {
    quizQuestionAnswers: Array<IQuizQuestionAnswer>;
    description: string;
    active: boolean;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuizQuestionMember {
    quizMember: IQuizMember;
    quizMemberDescriptions: Array<IQuizMemberDescription>;
    quizMemberAnswers: Array<IQuizMemberAnswer>;
    quizQuestion: IQuizQuestion;
    quizMemberId: IUUID;
    quizQuestionId: IUUID;
    active: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuizMember {
    quiz: IQuiz;
    quizQuestionMembers: Array<IQuizQuestionMember>;
    quizId: IUUID;
    email?: string;
    projectId?: IUUID;
    memberId?: IUUID;
    quizStatus?: IEnumQuizStatus;
    active: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IEnumQuizStatus {
    STARTED = "STARTED",
    SAVED = "SAVED",
    FINISHED = "FINISHED"
}
export interface IQuizMemberDescription {
    quizQuestionMember: IQuizQuestionMember;
    quizQuestionMemberId: IUUID;
    description: string;
    active: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuizMemberAnswer {
    quizQuestionMember: IQuizQuestionMember;
    quizAnswer: IQuizAnswer;
    quizQuestionMemberId: IUUID;
    quizAnswerId: IUUID;
    active: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuizQuestionNested {
    quizQuestion?: IQuizQuestion;
    name: string;
    description?: string;
    url?: string;
    show?: boolean;
    order?: number;
    quizQuestionId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IQuiz_QuestionType {
    MULTIPLE_OPTION = "MULTIPLE_OPTION",
    MULTIPLE_SELECTION = "MULTIPLE_SELECTION",
    OPEN = "OPEN"
}
export declare const enum IEnumTagPosition {
    TOP = "TOP",
    BOTTOM = "BOTTOM",
    LEFT = "LEFT",
    RIGHT = "RIGHT",
    HIDDEN = "HIDDEN",
    QUIZ = "QUIZ"
}
export interface IQuizQuestionPrefab {
    name: string;
    icon?: string;
    code: string;
    quizQuestionPrefabGroupId?: IUUID;
    quizQuestionPrefabGroup?: IQuizQuestionPrefabGroup;
    quizQuestions: Array<IQuizQuestion>;
    quizQuestionPrefabFeatureds: Array<IQuizQuestionPrefabFeatured>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuizQuestionPrefabGroup {
    name: string;
    quizQuestionPrefabs: Array<IQuizQuestionPrefab>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuizQuestionPrefabFeatured {
    outstand?: boolean;
    projectId: IUUID;
    quizQuestionPrefabId?: IUUID;
    quizQuestionPrefab?: IQuizQuestionPrefab;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IEnumOnlineQuizStatus {
    DRAFT = "DRAFT",
    PUBLISHED = "PUBLISHED"
}
export interface IServiceMember {
    service: IServiceArea;
    memberId: IUUID;
    serviceId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface IHiringService {
    hiring?: IHiring;
    serviceId: IUUID;
    hiringId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    service?: IServiceArea;
}
export interface IResourceQuoteDetailBoardRow {
    resourceQuoteDetail?: IResourceQuoteDetail;
    boardRowId: IUUID;
    resourceQuoteDetailId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICollaboratorHours {
    collaborator?: ICollaborator;
    totalHours?: number;
    date?: IDateTime;
    initialHour?: string;
    finalHour?: string;
    collaboratorId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IEnumCivilState {
    SINGLE = "SINGLE",
    MARRIED = "MARRIED",
    FREE_UNION = "FREE_UNION",
    SEPARATE = "SEPARATE",
    DIVORCED = "DIVORCED",
    WIDOWER = "WIDOWER"
}
export declare const enum IEnumBenefits {
    ANOTHER = "ANOTHER",
    LAW_BENEFITS = "LAW_BENEFITS"
}
export declare const enum IEnumHiringType {
    DETERMINATED = "DETERMINATED",
    UNDETERMINATED = "UNDETERMINATED",
    TRIAL = "TRIAL",
    TRAINING = "TRAINING",
    SEASON = "SEASON"
}
export interface IShift {
    day: IDay;
    projectId: IUUID;
    memberId: IUUID;
    timeStart: ITimeSpan;
    timeEnd: ITimeSpan;
    dayId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDay {
    shifts: Array<IShift>;
    name: string;
    codeDay: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
/**
 * The `TimeSpan` scalar represents an ISO-8601 compliant duration type.
 */
export declare type ITimeSpan = any;
export interface IBusiness {
    projectId: IUUID;
    name: string;
    description?: string;
    slogan?: string;
    image?: string;
    businessTypeId?: IUUID;
    businessType?: IBusinessType;
    businessRuleProjectPlans?: Array<IBusinessRuleProjectPlan>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IBusinessType {
    projectId: IUUID;
    image?: string;
    name: string;
    description: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    members?: Array<IMember | null>;
}
export interface IBusinessRuleProjectPlan {
    businessRuleId: IUUID;
    businessId?: IUUID;
    bussines?: IBusiness;
    businessRule?: IBusinessRule;
    projectPlanId: IUUID;
    projectPlan?: IProjectPlan;
    commission?: string;
    commissionSell?: string;
    commissionProspect?: string;
    commissionInterested?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IBusinessRule {
    projectId: IUUID;
    businessId?: IUUID;
    business?: IBusiness;
    title?: string;
    commissionNominator?: string;
    potentialProspectLimit?: number;
    allowExtraBonus?: boolean;
    minimumBalance?: number;
    idealBalance?: number;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProjectPlan {
    projectId: IUUID;
    title: string;
    description: string;
    cost: number;
    serviceProductId: string;
    currency: string;
    changeNominators: string;
    default: boolean;
    rateBase: boolean;
    frequencyPayment: IFrequencyPayment;
    availableNominators: number;
    accessExternalNominators: boolean;
    accessExternalProspects: boolean;
    vendorRakingDisplay: boolean;
    accessConnectionProspectsWhatsapp: boolean;
    serviceSupport: boolean;
    fee: number;
    projectPlanSubscriptions?: Array<IProjectPlanSubscription>;
    businessRuleProjectPlans?: Array<IBusinessRuleProjectPlan>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IFrequencyPayment {
    BIWEEKLY = "BIWEEKLY",
    MONTHLY = "MONTHLY",
    QUARTERLY = "QUARTERLY",
    SEMI_ANNUALLY = "SEMI_ANNUALLY",
    ANNUALLY = "ANNUALLY"
}
export interface IProjectPlanSubscription {
    projectPlanId: IUUID;
    projectPlan: IProjectPlan;
    projectId: IUUID;
    memberId: IUUID;
    active: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface IAccountKey {
    detailsSubmitted: boolean;
    paymentMethods: Array<IPaymentMethod>;
    projectId: IUUID;
    memberId: IUUID;
    accountServiceId: string;
    customerServiceId: string;
    servicePayment?: IServicePayment;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPaymentMethod {
    memberId: IUUID;
    projectId: IUUID;
    paymentToken: string;
    default: boolean;
    lastNumbers: string;
    accountKeyId?: IUUID;
    accountKey?: IAccountKey;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IServicePayment {
    MEXPAGO = "MEXPAGO",
    PAYPAL = "PAYPAL",
    STRIPE = "STRIPE",
    CONEKTA = "CONEKTA",
    FLAP = "FLAP"
}
export interface IEventDetail {
    projectId: IUUID;
    memberId: IUUID;
    eventId: IUUID;
    subTotal: IDecimal;
    descuento: IDecimal;
    tax: IDecimal;
    total: IDecimal;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IFisicExam {
    projectId: IUUID;
    memberId: IUUID;
    eventId: IUUID;
    title?: string;
    content: string;
    isVisible: boolean;
    position?: number;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface IMedicalBackground {
    format?: IFormat;
    projectId: IUUID;
    formatId?: IUUID;
    label?: string;
    isVisible: boolean;
    position: number;
    pacientMedicalBackground?: IPacientMedicalBackground;
    medicalBackgroundDetails: Array<IMedicalBackgroundDetail>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface IFormat {
    projectId: IUUID;
    memberId: IUUID;
    eventTypeId: IUUID;
    nameFormat?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPacientMedicalBackground {
    medicalBackgroundDetail?: IMedicalBackgroundDetail;
    medicalBackgroundDetailId: IUUID;
    projectId: IUUID;
    memberId: IUUID;
    eventId: IUUID;
    text?: string;
    isResponse?: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMedicalBackgroundDetail {
    medicalBackground?: IMedicalBackground;
    clinicHistoryMedicalBackgroundDetails?: Array<IClinicHistoryMedicalBackgroundDetail>;
    projectId: IUUID;
    medicalBackgroundId: IUUID;
    label: string;
    backgroundTypeOption?: IBackgroundTypesOptions;
    isOption?: boolean;
    isVisible?: boolean;
    position: number;
    pacientMedicalBackgrounds?: Array<IPacientMedicalBackground>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IClinicHistoryMedicalBackgroundDetail {
    medicalBackgroundDetail?: IMedicalBackgroundDetail;
    medicalBackgroundDetailId: IUUID;
    backgroundType: IBackgroundTypesOptions;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IBackgroundTypesOptions {
    INPUTTEXT = "INPUTTEXT",
    CHECKBOX = "CHECKBOX",
    RADIOINPUT = "RADIOINPUT",
    TEXTEDITOR = "TEXTEDITOR"
}
export interface IPacientMedicalBackgroundFilterInput {
    and?: Array<IPacientMedicalBackgroundFilterInput>;
    or?: Array<IPacientMedicalBackgroundFilterInput>;
    medicalBackgroundDetailId?: IComparableGuidOperationFilterInput;
    medicalBackgroundDetail?: IMedicalBackgroundDetailFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    eventId?: IComparableGuidOperationFilterInput;
    text?: IStringOperationFilterInput;
    isResponse?: IBooleanOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IMedicalBackgroundDetailFilterInput {
    and?: Array<IMedicalBackgroundDetailFilterInput>;
    or?: Array<IMedicalBackgroundDetailFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    medicalBackgroundId?: IComparableGuidOperationFilterInput;
    medicalBackground?: IMedicalBackgroundFilterInput;
    label?: IStringOperationFilterInput;
    backgroundTypeOption?: INullableOfBackgroundTypesOptionsOperationFilterInput;
    isOption?: IBooleanOperationFilterInput;
    isVisible?: IBooleanOperationFilterInput;
    position?: IComparableInt32OperationFilterInput;
    clinicHistoryMedicalBackgroundDetails?: IListFilterInputTypeOfClinicHistoryMedicalBackgroundDetailFilterInput;
    pacientMedicalBackgrounds?: IListFilterInputTypeOfPacientMedicalBackgroundFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IMedicalBackgroundFilterInput {
    and?: Array<IMedicalBackgroundFilterInput>;
    or?: Array<IMedicalBackgroundFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    formatId?: IComparableNullableOfGuidOperationFilterInput;
    format?: IFormatFilterInput;
    label?: IStringOperationFilterInput;
    isVisible?: IBooleanOperationFilterInput;
    position?: IComparableInt32OperationFilterInput;
    pacientMedicalBackground?: IPacientMedicalBackgroundFilterInput;
    medicalBackgroundDetails?: IListFilterInputTypeOfMedicalBackgroundDetailFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IFormatFilterInput {
    and?: Array<IFormatFilterInput>;
    or?: Array<IFormatFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    eventTypeId?: IComparableGuidOperationFilterInput;
    nameFormat?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfMedicalBackgroundDetailFilterInput {
    all?: IMedicalBackgroundDetailFilterInput;
    none?: IMedicalBackgroundDetailFilterInput;
    some?: IMedicalBackgroundDetailFilterInput;
    any?: boolean;
}
export interface INullableOfBackgroundTypesOptionsOperationFilterInput {
    eq?: IBackgroundTypesOptions;
    neq?: IBackgroundTypesOptions;
    in?: Array<IBackgroundTypesOptions | null>;
    nin?: Array<IBackgroundTypesOptions | null>;
}
export interface IListFilterInputTypeOfClinicHistoryMedicalBackgroundDetailFilterInput {
    all?: IClinicHistoryMedicalBackgroundDetailFilterInput;
    none?: IClinicHistoryMedicalBackgroundDetailFilterInput;
    some?: IClinicHistoryMedicalBackgroundDetailFilterInput;
    any?: boolean;
}
export interface IClinicHistoryMedicalBackgroundDetailFilterInput {
    and?: Array<IClinicHistoryMedicalBackgroundDetailFilterInput>;
    or?: Array<IClinicHistoryMedicalBackgroundDetailFilterInput>;
    medicalBackgroundDetailId?: IComparableGuidOperationFilterInput;
    medicalBackgroundDetail?: IMedicalBackgroundDetailFilterInput;
    backgroundType?: IBackgroundTypesOptionsOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IBackgroundTypesOptionsOperationFilterInput {
    eq?: IBackgroundTypesOptions;
    neq?: IBackgroundTypesOptions;
    in?: Array<IBackgroundTypesOptions>;
    nin?: Array<IBackgroundTypesOptions>;
}
export interface IListFilterInputTypeOfPacientMedicalBackgroundFilterInput {
    all?: IPacientMedicalBackgroundFilterInput;
    none?: IPacientMedicalBackgroundFilterInput;
    some?: IPacientMedicalBackgroundFilterInput;
    any?: boolean;
}
export interface IMedicRecipe {
    projectId: IUUID;
    memberId: IUUID;
    profesionalCell: string;
    speciality: string;
    institute: string;
    electronicSing: string;
    isCorrect: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface IPacientNote {
    memberId: IUUID;
    projectId: IUUID;
    eventId: IUUID;
    note: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface IVitalSign {
    projectId: IUUID;
    labelNameVt?: string;
    isVisible?: boolean;
    position?: number;
    patientVitalSignsResponse?: IPatientVitalSignsResponse;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface IPatientVitalSignsResponse {
    vitalSignId: IUUID;
    vitalSign?: IVitalSign;
    eventId: IUUID;
    memberId: IUUID;
    value?: IDecimal;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IVaccine {
    projectId: IUUID;
    memberId: IUUID;
    nameVac: string;
    dateAplicationVac: IDateTime;
    nextVac?: IDateTime;
    notesVac?: string;
    position?: number;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface IMemberBoard {
    board?: IBoard;
    memberId: IUUID;
    boardId: IUUID;
    outstading: boolean;
    order: number;
    active: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface IBoard {
    boardLists: Array<IBoardList>;
    space?: ISpace;
    memberBoards?: Array<IMemberBoard | null>;
    boardStatus: Array<IBoardStatus>;
    name: string;
    description?: string;
    memberId: IUUID;
    order: number;
    color?: string;
    active: boolean;
    serviceId?: IUUID;
    spaceId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    service?: IServiceArea;
}
export interface IBoardList {
    boards: IBoard;
    cards: Array<ICard>;
    boardGroupColumn: Array<IBoardGroupColumn>;
    boardRows: Array<IBoardRow>;
    name: string;
    description?: string;
    order: number;
    color?: string;
    active: boolean;
    boardId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICard {
    boardList: IBoardList;
    cardReplies: Array<ICardReply>;
    nestedFiles: Array<INestedFile>;
    memberCards: Array<IMemberCard>;
    cardColumnValues: Array<ICardColumnValue>;
    cardChecklists: Array<ICardChecklist>;
    boardStatus?: IBoardStatus;
    name: string;
    description?: string;
    active: boolean;
    progress: IProgress;
    priority: IPriority;
    startDate?: IDateTime;
    endDate?: IDateTime;
    projectId: IUUID;
    boardStatusId?: IUUID;
    boardListId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICardReply {
    card: ICard;
    cardId: IUUID;
    memberId: IUUID;
    description: string;
    active: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface INestedFile {
    card: ICard;
    name: string;
    show: boolean;
    url: string;
    cardId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMemberCard {
    card: ICard;
    cardId: IUUID;
    memberId: IUUID;
    active: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface ICardColumnValue {
    card: ICard;
    boardColumnValue: IBoardColumnValue;
    cardId: IUUID;
    boardColumnValueId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IBoardColumnValue {
    boardGroupColumn?: IBoardGroupColumn;
    boardRow?: IBoardRow;
    boardMemberReferece: Array<IBoardMemberReference>;
    cardColumnValues: Array<ICardColumnValue>;
    value?: string;
    boardGroupColumnId?: IUUID;
    boardRowId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IBoardGroupColumn {
    boardList: IBoardList;
    boardColumnValues: Array<IBoardColumnValue>;
    boardColumnType: IBoardColumnType;
    name?: string;
    order: number;
    boardListId: IUUID;
    boardColumnTypeId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IBoardColumnType {
    boardGroupColumns: Array<IBoardGroupColumn>;
    name: string;
    description?: string;
    dataType: string;
    insideType: IEnumInsideType;
    active: boolean;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IEnumInsideType {
    PROGRESS = "PROGRESS",
    DEADLINE = "DEADLINE",
    TEXT = "TEXT",
    MEMBER = "MEMBER",
    TASK = "TASK",
    STATUS = "STATUS",
    FILE = "FILE",
    DATE = "DATE"
}
export interface IBoardRow {
    boardList: IBoardList;
    boardColumnValues: Array<IBoardColumnValue>;
    title: string;
    description?: string;
    order: number;
    active: boolean;
    boardListId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IBoardMemberReference {
    boardColumnValue?: IBoardColumnValue;
    memberId?: IUUID;
    description?: string;
    active: boolean;
    boardColumnValueId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface ICardChecklist {
    card?: ICard;
    cardCheckComponents: Array<ICardCheckComponent>;
    name?: string;
    cardId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICardCheckComponent {
    cardChecklist?: ICardChecklist;
    description?: string;
    selected: boolean;
    order: number;
    cardChecklistId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IBoardStatus {
    board?: IBoard;
    name: string;
    description?: string;
    color?: string;
    code?: string;
    active: boolean;
    projectId: IUUID;
    boardId?: IUUID;
    cards?: Array<ICard>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IProgress {
    NONE = "NONE",
    NOT_INITIALIZED = "NOT_INITIALIZED",
    IN_PROGRESS = "IN_PROGRESS",
    STAGNANT = "STAGNANT",
    FINALIZED = "FINALIZED"
}
export declare const enum IPriority {
    NONE = "NONE",
    LOW = "LOW",
    MEDIUM = "MEDIUM",
    HIGH = "HIGH"
}
export interface ISpace {
    boards: Array<IBoard>;
    memberSpaces: Array<IMemberSpace>;
    name: string;
    description?: string;
    image?: string;
    projectId: IUUID;
    areaId?: IUUID;
    visibility?: IEnumVisibility;
    active: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    area?: IArea;
}
export interface IMemberSpace {
    space?: ISpace;
    memberId: IUUID;
    spaceId: IUUID;
    order?: number;
    outstading: boolean;
    access: IEnumSpaceAccess;
    active: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export declare const enum IEnumSpaceAccess {
    READER = "READER",
    EDITOR = "EDITOR"
}
export declare const enum IEnumVisibility {
    NONE = "NONE",
    PUBLIC = "PUBLIC",
    PRIVATE = "PRIVATE"
}
export interface IFile {
    folderId: IUUID;
    folder?: IFolder;
    memberId: IUUID;
    isProfile?: boolean;
    token?: string;
    name?: string;
    url?: string;
    description?: string;
    isActive?: boolean;
    isOutstanding?: boolean;
    partialUrl?: string;
    sharedFiles?: Array<ISharedFile>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface IFolder {
    isActive?: boolean;
    projectId: IUUID;
    memberId: IUUID;
    label: string;
    background: string;
    parentId?: IUUID;
    path?: string;
    folderType?: string;
    isPersonal?: boolean;
    isOutstanding?: boolean;
    parent?: IFolder;
    subFolders?: Array<IFolder>;
    files?: Array<IFile>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface ISharedFile {
    fileId: IUUID;
    file?: IFile;
    memberId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface ISharedFolder {
    folderId: IUUID;
    folder?: IFolder;
    memberId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface IDevice {
    deviceNotifications: Array<IDeviceNotification>;
    memberId: IUUID;
    projectId: IUUID;
    token: string;
    unique: boolean;
    avalible: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface IDeviceNotification {
    device?: IDevice;
    notification?: INotification;
    deviceId?: IUUID;
    notificationId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface INotification {
    deviceNotifications: Array<IDeviceNotification>;
    title: string;
    description: string;
    data: string;
    enabled: boolean;
    view: boolean;
    date: IDateTime;
    memberId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface IProjectSocialNetwork {
    projectId: IUUID;
    project?: IProject;
    socialNetworkType: ISocialNetworkType;
    value: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface INiche {
    name?: string;
    description?: string;
    nicheServices: Array<INicheService>;
    projects: Array<IProject>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface INicheService {
    nicheId: IUUID;
    niche?: INiche;
    codeName: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    microservice?: IMicroservice;
}
export interface IMicroservice {
    name: string;
    codeName: string;
    image: string;
    description: string;
    priority: number;
    isPublic: boolean;
    projectMicroservices: Array<IProjectMicroservice>;
    functions: Array<IFunction>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProjectMicroservice {
    microserviceId: IUUID;
    microservice?: IMicroservice;
    isActive: boolean;
    label?: string;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IFunction {
    name: string;
    codeName: string;
    functionType: IFunctionType;
    microserviceId: IUUID;
    microservice: IMicroservice;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IFunctionType {
    WRITE = "WRITE",
    READER = "READER",
    CUSTOM = "CUSTOM",
    DISABLE = "DISABLE"
}
export interface IShop {
    projectId: IUUID;
    shopType: IShopType;
    profileUrl: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IServiceHelper {
    id: IUUID;
    name: string;
    label?: string;
    isActive: boolean;
    codeName: string;
    image?: string;
    description?: string;
    priority: number;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    projectMicroservices: Array<IProjectMicroservice>;
    functions: Array<IFunction>;
}
export interface IConfiguration {
    projectId: IUUID;
    key: string;
    value: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IGroupTaxonomy {
    taxonomyId: IUUID;
    groupId: IUUID;
    group: IGroup;
    taxonomy?: ITaxonomy;
}
/**
 * Information about the offset pagination.
 */
export interface ICollectionSegmentInfo {
    /**
     * Indicates whether more items exist following the set defined by the clients arguments.
     */
    hasNextPage: boolean;
    /**
     * Indicates whether more items exist prior the set defined by the clients arguments.
     */
    hasPreviousPage: boolean;
}
export interface INicheCollectionSegment {
    items?: Array<INiche>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface INicheServiceSortInput {
    nicheId?: ISortEnumType;
    niche?: INicheSortInput;
    codeName?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface INicheServiceCollectionSegment {
    items?: Array<INicheService>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IMyUrl {
    url: string;
}
export interface ICountryCollectionSegment {
    items?: Array<ICountry>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IMemberProjectSortInput {
    memberId?: ISortEnumType;
    member?: IMemberSortInput;
    projectId?: ISortEnumType;
    project?: IProjectSortInput;
    memberProjectRoleProject?: IMemberProjectRoleProjectSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMemberSortInput {
    username?: ISortEnumType;
    email?: ISortEnumType;
    recoverToken?: ISortEnumType;
    recoverRegister?: ISortEnumType;
    isActive?: ISortEnumType;
    firstTime?: ISortEnumType;
    loginCount?: ISortEnumType;
    rFC?: ISortEnumType;
    businessName?: ISortEnumType;
    useBilling?: ISortEnumType;
    socialReason?: ISortEnumType;
    adminCode?: ISortEnumType;
    canifarmaQRCodeOne?: ISortEnumType;
    canifarmaQRCodeTwo?: ISortEnumType;
    consecutive?: ISortEnumType;
    businessId?: ISortEnumType;
    profile?: IProfileSortInput;
    memberStream?: IMemberStreamSortInput;
    lastLogin?: ISortEnumType;
    healthInsurance?: IHealthInsuranceSortInput;
    companyData?: IEnterpriseDataSortInput;
    billingData?: IBillingDataSortInput;
    sells?: ISortEnumType;
    memberIndustryId?: ISortEnumType;
    memberIndustry?: IMemberIndustrySortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IProfileSortInput {
    firstName?: ISortEnumType;
    lastName?: ISortEnumType;
    postalCode?: ISortEnumType;
    address?: ISortEnumType;
    town?: ISortEnumType;
    city?: ISortEnumType;
    colony?: ISortEnumType;
    street?: ISortEnumType;
    houseNumber?: ISortEnumType;
    periodInvoice?: ISortEnumType;
    billingForm?: ISortEnumType;
    paymentTerm?: ISortEnumType;
    dialCode?: ISortEnumType;
    fullName?: ISortEnumType;
    photo?: ISortEnumType;
    memberId?: ISortEnumType;
    member?: IMemberSortInput;
    countryId?: ISortEnumType;
    country?: ICountrySortInput;
    phone?: ISortEnumType;
    cURP?: ISortEnumType;
    rFC?: ISortEnumType;
    nSS?: ISortEnumType;
    infonavitCredit?: ISortEnumType;
    nationality?: ISortEnumType;
    age?: ISortEnumType;
    gender?: ISortEnumType;
    dateOfBirth?: ISortEnumType;
    maritalStatus?: ISortEnumType;
    biography?: ISortEnumType;
    siteLogo?: ISortEnumType;
    siteUrl?: ISortEnumType;
    quatorProfileId?: ISortEnumType;
    state?: ISortEnumType;
    institution?: ISortEnumType;
    hospital?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMemberStreamSortInput {
    memberId?: ISortEnumType;
    member?: IMemberSortInput;
    userName?: ISortEnumType;
    firstName?: ISortEnumType;
    lastName?: ISortEnumType;
    image?: ISortEnumType;
    isOnline?: ISortEnumType;
    description?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IHealthInsuranceSortInput {
    memberId?: ISortEnumType;
    member?: IMemberSortInput;
    nSS?: ISortEnumType;
    insuranceMajorMedicalExpenses?: ISortEnumType;
    typeInsurance?: ISortEnumType;
    insuranceCarrier?: ISortEnumType;
    policyNumber?: ISortEnumType;
    dischargeDate?: ISortEnumType;
    expirationDate?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IEnterpriseDataSortInput {
    memberId?: ISortEnumType;
    member?: IMemberSortInput;
    companyName?: ISortEnumType;
    companyCategory?: ISortEnumType;
    sucursal?: ISortEnumType;
    phones?: ISortEnumType;
    webSite?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IBillingDataSortInput {
    memberId?: ISortEnumType;
    member?: IMemberSortInput;
    person?: ISortEnumType;
    businessName?: ISortEnumType;
    rFC?: ISortEnumType;
    useCDFI?: ISortEnumType;
    paymentMethod?: ISortEnumType;
    paymentTerm?: ISortEnumType;
    taxSituation?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMemberIndustrySortInput {
    name?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMemberProjectRoleProjectSortInput {
    memberProjectId?: ISortEnumType;
    memberProject?: IMemberProjectSortInput;
    projectRoleId?: ISortEnumType;
    projectRole?: IProjectRoleSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMemberProjectCollectionSegment {
    items?: Array<IMemberProject>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IMemberCollectionSegment {
    items?: Array<IMember>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IMemberInSpaceFilterInput {
    and?: Array<IMemberInSpaceFilterInput>;
    or?: Array<IMemberInSpaceFilterInput>;
    memberId?: IComparableGuidOperationFilterInput;
    spaceId?: IComparableGuidOperationFilterInput;
    member?: IMemberFilterInput;
}
export interface IMemberInSpaceSortInput {
    memberId?: ISortEnumType;
    spaceId?: ISortEnumType;
    member?: IMemberSortInput;
}
export interface IMemberInSpaceCollectionSegment {
    items?: Array<IMemberInSpace>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IMemberInSpace {
    memberId: IUUID;
    spaceId: IUUID;
    member: IMember;
    memberInSpace: boolean;
}
export interface IMemberInBoardFilterInput {
    and?: Array<IMemberInBoardFilterInput>;
    or?: Array<IMemberInBoardFilterInput>;
    memberId?: IComparableGuidOperationFilterInput;
    boardId?: IComparableGuidOperationFilterInput;
    member?: IMemberFilterInput;
}
export interface IMemberInBoardSortInput {
    memberId?: ISortEnumType;
    boardId?: ISortEnumType;
    member?: IMemberSortInput;
}
export interface IMemberInBoardCollectionSegment {
    items?: Array<IMemberInBoard>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IMemberInBoard {
    memberId: IUUID;
    boardId: IUUID;
    member: IMember;
    memberInBoard: boolean;
}
/**
 * A connection to a list of items.
 */
export interface IListUsersLazyLoadConnection {
    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;
    /**
     * A list of edges.
     */
    edges?: Array<IListUsersLazyLoadEdge>;
    /**
     * A flattened list of the nodes.
     */
    nodes?: Array<IMember>;
    totalCount: number;
}
/**
 * Information about pagination in a connection.
 */
export interface IPageInfo {
    /**
     * Indicates whether more edges exist following the set defined by the clients arguments.
     */
    hasNextPage: boolean;
    /**
     * Indicates whether more edges exist prior the set defined by the clients arguments.
     */
    hasPreviousPage: boolean;
    /**
     * When paginating backwards, the cursor to continue.
     */
    startCursor?: string;
    /**
     * When paginating forwards, the cursor to continue.
     */
    endCursor?: string;
}
/**
 * An edge in a connection.
 */
export interface IListUsersLazyLoadEdge {
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    /**
     * The item at the end of the edge.
     */
    node: IMember;
}
/**
 * A connection to a list of items.
 */
export interface IProjectsInfiniteConnection {
    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;
    /**
     * A list of edges.
     */
    edges?: Array<IProjectsInfiniteEdge>;
    /**
     * A flattened list of the nodes.
     */
    nodes?: Array<IProject>;
    totalCount: number;
}
/**
 * An edge in a connection.
 */
export interface IProjectsInfiniteEdge {
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    /**
     * The item at the end of the edge.
     */
    node: IProject;
}
export interface IMemberChat {
    email?: string;
    name?: string;
    lastName?: string;
    photo?: string;
}
export interface IMemberFullName {
    fullName?: string;
}
export interface ICustomMemberDto {
    roleName?: string;
    roleCode?: string;
    photo?: string;
    email?: string;
    fullName?: string;
    id: IUUID;
    birthday?: IDateTime;
}
export interface IPlan {
    name: string;
    price: number;
    planFunctionalities?: Array<IPlanFunctionality>;
    planLimitations?: Array<IPlanLimitation>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPlanFunctionality {
    planId: IUUID;
    plan?: IPlan;
    name: string;
    price: number;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPlanLimitation {
    functionalityId: IUUID;
    planFunctionality?: IPlanFunctionality;
    quantity: number;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IRecommendedProject {
    position: number;
    projectId: IUUID;
    project?: IProject;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProjectCollectionSegment {
    items?: Array<IProject>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IMemberRelationSortInput {
    status?: ISortEnumType;
    parentNodeId?: ISortEnumType;
    parentNode?: IMemberSortInput;
    childNodeId?: ISortEnumType;
    childNode?: IMemberSortInput;
    isActive?: ISortEnumType;
    parentRelationId?: ISortEnumType;
    parentRelation?: IMemberRelationSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMemberRelationCollectionSegment {
    items?: Array<IMemberRelation>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IProjectTemplate {
    projectId: IUUID;
    templateId: IUUID;
    serviceEmail: IServiceEmail;
    templateService: ITemplateService;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IServiceEmail {
    SENDGRID = "SENDGRID"
}
export declare const enum ITemplateService {
    REGISTER = "REGISTER"
}
export interface IRankingDTOFilterInput {
    and?: Array<IRankingDTOFilterInput>;
    or?: Array<IRankingDTOFilterInput>;
    member?: IMemberFilterInput;
    amount?: IComparableDecimalOperationFilterInput;
    sellsClose?: IComparableInt32OperationFilterInput;
    sellsInProgress?: IComparableInt32OperationFilterInput;
    position?: IComparableInt32OperationFilterInput;
    totalSells?: IComparableInt32OperationFilterInput;
    interestedProspects?: IComparableInt32OperationFilterInput;
    potentialProspects?: IComparableInt32OperationFilterInput;
}
export interface IRankingDTOCollectionSegment {
    items?: Array<IRankingDTO>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IRankingDTO {
    member: IMember;
    amount: IDecimal;
    sellsClose: number;
    sellsInProgress: number;
    position: number;
    totalSells: number;
    interestedProspects: number;
    potentialProspects: number;
}
export interface ISellSortInput {
    nominatorId?: ISortEnumType;
    nominator?: IMemberSortInput;
    prospectId?: ISortEnumType;
    prospect?: IMemberSortInput;
    sellerId?: ISortEnumType;
    seller?: IMemberSortInput;
    memberRelationId?: ISortEnumType;
    memberRelation?: IMemberRelationSortInput;
    concept?: ISortEnumType;
    amount?: ISortEnumType;
    status?: ISortEnumType;
    description?: ISortEnumType;
    walletTransactionId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ISellCollectionSegment {
    items?: Array<ISell>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IMemberStats {
    member?: IMember;
    potentials: number;
    interesteds: number;
    sells: IDecimal;
    totalSells: number;
}
export interface ISellStats {
    sells: IDecimal;
    ranking: number;
    memberRelation: number;
    interestedProspects: number;
    investment: number;
}
export interface IMemberCompanyDtoFilterInput {
    and?: Array<IMemberCompanyDtoFilterInput>;
    or?: Array<IMemberCompanyDtoFilterInput>;
    member?: IMemberFilterInput;
    profile?: IProfileFilterInput;
    memberCompany?: IMemberCompanyFilterInput;
}
export interface IMemberCompanyDtoSortInput {
    member?: IMemberSortInput;
    profile?: IProfileSortInput;
    memberCompany?: IMemberCompanySortInput;
}
export interface IMemberCompanySortInput {
    companyId?: ISortEnumType;
    company?: ICompanySortInput;
    memberId?: ISortEnumType;
    member?: IMemberSortInput;
    isDefault?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMemberCompanyDtoCollectionSegment {
    items?: Array<IMemberCompanyDto>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IMemberCompanyDto {
    member: IMember;
    profile: IProfile;
    memberCompany: IMemberCompany;
}
export interface IFAQ {
    projectId: IUUID;
    question: string;
    answer: string;
    image: string;
    position: number;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ITopicDisease {
    projectId: IUUID;
    month: number;
    title?: string;
    backgroundImage: string;
    diseases: Array<IDisease>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDisease {
    projectId: IUUID;
    topicDiseaseId: IUUID;
    topicDisease?: ITopicDisease;
    title?: string;
    iconImage: string;
    image: string;
    position: number;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsuranceFormFilterInput {
    and?: Array<IInsuranceFormFilterInput>;
    or?: Array<IInsuranceFormFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    typeForm?: ITypeFormOperationFilterInput;
    name?: IStringOperationFilterInput;
    email?: IStringOperationFilterInput;
    phone?: IStringOperationFilterInput;
    zipCode?: IStringOperationFilterInput;
    birthDate?: IComparableNullableOfDateTimeOperationFilterInput;
    typeInsurance?: IStringOperationFilterInput;
    message?: IStringOperationFilterInput;
    hospitalLevel?: IStringOperationFilterInput;
    gender?: IBooleanOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ITypeFormOperationFilterInput {
    eq?: ITypeForm;
    neq?: ITypeForm;
    in?: Array<ITypeForm>;
    nin?: Array<ITypeForm>;
}
export declare const enum ITypeForm {
    LIFE = "LIFE",
    WITHDRAWAL = "WITHDRAWAL",
    EDUCATIONAL = "EDUCATIONAL",
    INVESTMENT = "INVESTMENT",
    MEDICAL_EXPENSES = "MEDICAL_EXPENSES"
}
export interface IInsuranceFormSortInput {
    projectId?: ISortEnumType;
    typeForm?: ISortEnumType;
    name?: ISortEnumType;
    email?: ISortEnumType;
    phone?: ISortEnumType;
    zipCode?: ISortEnumType;
    birthDate?: ISortEnumType;
    typeInsurance?: ISortEnumType;
    message?: ISortEnumType;
    hospitalLevel?: ISortEnumType;
    gender?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsuranceFormCollectionSegment {
    items?: Array<IInsuranceForm>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsuranceForm {
    projectId: IUUID;
    typeForm: ITypeForm;
    name?: string;
    email?: string;
    phone?: string;
    zipCode?: string;
    birthDate?: IDateTime;
    typeInsurance?: string;
    message?: string;
    hospitalLevel?: string;
    gender?: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuestionDTO {
    title: string;
    type: IQuestionType;
    image: string;
    options?: Array<IOption>;
    answers?: Array<IAnswer>;
}
export interface IArticleFilterInput {
    and?: Array<IArticleFilterInput>;
    or?: Array<IArticleFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    title?: IStringOperationFilterInput;
    photo?: IStringOperationFilterInput;
    slug?: IStringOperationFilterInput;
    resume?: IStringOperationFilterInput;
    content?: IStringOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    views?: IComparableInt32OperationFilterInput;
    status?: IArticleStatusOperationFilterInput;
    releaseDate?: IComparableDateTimeOperationFilterInput;
    seoTitle?: IStringOperationFilterInput;
    seoDescription?: IStringOperationFilterInput;
    seoKeywords?: IStringOperationFilterInput;
    structuredMarking?: IStringOperationFilterInput;
    imageAlt?: IStringOperationFilterInput;
    seoArticle?: IStringOperationFilterInput;
    typeContent?: INullableOfTypeContentOperationFilterInput;
    embedContent?: IStringOperationFilterInput;
    groupId?: IComparableNullableOfGuidOperationFilterInput;
    group?: ITaxonomyFilterInput;
    language?: INullableOfArticleLanguageOperationFilterInput;
    parentId?: IComparableNullableOfGuidOperationFilterInput;
    parent?: IArticleFilterInput;
    variants?: IListFilterInputTypeOfArticleFilterInput;
    subCategories?: IListFilterInputTypeOfTaxonomyFilterInput;
    categories?: IListFilterInputTypeOfTaxonomyFilterInput;
    tags?: IListFilterInputTypeOfTaxonomyFilterInput;
    surveys?: IListFilterInputTypeOfSurveyFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IArticleStatusOperationFilterInput {
    eq?: IArticleStatus;
    neq?: IArticleStatus;
    in?: Array<IArticleStatus>;
    nin?: Array<IArticleStatus>;
}
export interface INullableOfTypeContentOperationFilterInput {
    eq?: ITypeContent;
    neq?: ITypeContent;
    in?: Array<ITypeContent | null>;
    nin?: Array<ITypeContent | null>;
}
export interface ITaxonomyFilterInput {
    and?: Array<ITaxonomyFilterInput>;
    or?: Array<ITaxonomyFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    slug?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    termGroup?: IStringOperationFilterInput;
    photo?: IStringOperationFilterInput;
    tagLine?: IStringOperationFilterInput;
    tagLine2?: IStringOperationFilterInput;
    parentId?: IComparableNullableOfGuidOperationFilterInput;
    parent?: ITaxonomyFilterInput;
    subCategories?: IListFilterInputTypeOfTaxonomyFilterInput;
    isPublic?: IBooleanOperationFilterInput;
    articles?: IListFilterInputTypeOfArticleFilterInput;
    groupArticles?: IListFilterInputTypeOfArticleFilterInput;
    products?: IListFilterInputTypeOfProductFilterInput;
    seoTaxonomy?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfTaxonomyFilterInput {
    all?: ITaxonomyFilterInput;
    none?: ITaxonomyFilterInput;
    some?: ITaxonomyFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfArticleFilterInput {
    all?: IArticleFilterInput;
    none?: IArticleFilterInput;
    some?: IArticleFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfProductFilterInput {
    all?: IProductFilterInput;
    none?: IProductFilterInput;
    some?: IProductFilterInput;
    any?: boolean;
}
export interface IProductFilterInput {
    and?: Array<IProductFilterInput>;
    or?: Array<IProductFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    title?: IStringOperationFilterInput;
    photo?: IStringOperationFilterInput;
    slug?: IStringOperationFilterInput;
    sku?: IStringOperationFilterInput;
    price?: IComparableDecimalOperationFilterInput;
    offerPrice?: IComparableDecimalOperationFilterInput;
    stock?: IComparableInt32OperationFilterInput;
    active?: IBooleanOperationFilterInput;
    shippingType?: IStringOperationFilterInput;
    shippingPrice?: IComparableDecimalOperationFilterInput;
    description?: IStringOperationFilterInput;
    publishDate?: IComparableDateTimeOperationFilterInput;
    views?: IComparableInt32OperationFilterInput;
    status?: IProductStatusOperationFilterInput;
    seoProduct?: IStringOperationFilterInput;
    subCategories?: IListFilterInputTypeOfTaxonomyFilterInput;
    categories?: IListFilterInputTypeOfTaxonomyFilterInput;
    details?: IListFilterInputTypeOfProductDetailFilterInput;
    images?: IListFilterInputTypeOfImageFilterInput;
    shopType?: IShopTypeOperationFilterInput;
    code?: IStringOperationFilterInput;
    purchasePrice?: IComparableNullableOfDoubleOperationFilterInput;
    sellPrice?: IComparableNullableOfDoubleOperationFilterInput;
    storeId?: IComparableNullableOfGuidOperationFilterInput;
    store?: IStoreFilterInput;
    measure?: IStringOperationFilterInput;
    utility?: IComparableNullableOfDoubleOperationFilterInput;
    measureType?: IStringOperationFilterInput;
    origin?: IStringOperationFilterInput;
    productType?: INullableOfProductTypeOperationFilterInput;
    planId?: IComparableNullableOfGuidOperationFilterInput;
    barcode?: IStringOperationFilterInput;
    brand?: IStringOperationFilterInput;
    family?: IStringOperationFilterInput;
    line?: IStringOperationFilterInput;
    subFamily?: IStringOperationFilterInput;
    key?: IStringOperationFilterInput;
    onStore?: IBooleanOperationFilterInput;
    onCatalog?: IBooleanOperationFilterInput;
    sellMeasure?: IStringOperationFilterInput;
    costType?: IStringOperationFilterInput;
    purchaseMeasure?: IStringOperationFilterInput;
    costingType?: ICostingTypeOperationFilterInput;
    productModality?: INullableOfProductModalityOperationFilterInput;
    stockAlertId?: IComparableNullableOfGuidOperationFilterInput;
    stockAlert?: IStockAlertFilterInput;
    providers?: IListFilterInputTypeOfProductProvFilterInput;
    prices?: IListFilterInputTypeOfProductPriceFilterInput;
    discounts?: IListComparableDecimalOperationFilterInput;
    partNumber?: IStringOperationFilterInput;
    fee?: IComparableNullableOfDecimalOperationFilterInput;
    dataSheet?: IStringOperationFilterInput;
    ecommerceTitle?: IStringOperationFilterInput;
    ecommerceDescription?: IStringOperationFilterInput;
    ecommerceInstructions?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IProductStatusOperationFilterInput {
    eq?: IProductStatus;
    neq?: IProductStatus;
    in?: Array<IProductStatus>;
    nin?: Array<IProductStatus>;
}
export interface IListFilterInputTypeOfProductDetailFilterInput {
    all?: IProductDetailFilterInput;
    none?: IProductDetailFilterInput;
    some?: IProductDetailFilterInput;
    any?: boolean;
}
export interface IProductDetailFilterInput {
    and?: Array<IProductDetailFilterInput>;
    or?: Array<IProductDetailFilterInput>;
    productId?: IComparableGuidOperationFilterInput;
    product?: IProductFilterInput;
    key?: IStringOperationFilterInput;
    value?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfImageFilterInput {
    all?: IImageFilterInput;
    none?: IImageFilterInput;
    some?: IImageFilterInput;
    any?: boolean;
}
export interface IImageFilterInput {
    and?: Array<IImageFilterInput>;
    or?: Array<IImageFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    original?: IStringOperationFilterInput;
    title?: IStringOperationFilterInput;
    products?: IListFilterInputTypeOfProductFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IShopTypeOperationFilterInput {
    eq?: IShopType;
    neq?: IShopType;
    in?: Array<IShopType>;
    nin?: Array<IShopType>;
}
export interface IComparableNullableOfDoubleOperationFilterInput {
    eq?: number;
    neq?: number;
    in?: Array<number | null>;
    nin?: Array<number | null>;
    gt?: number;
    ngt?: number;
    gte?: number;
    ngte?: number;
    lt?: number;
    nlt?: number;
    lte?: number;
    nlte?: number;
}
export interface IStoreFilterInput {
    and?: Array<IStoreFilterInput>;
    or?: Array<IStoreFilterInput>;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    branchOfficeId?: IComparableGuidOperationFilterInput;
    branchOffice?: IBranchOfficeFilterInput;
    code?: IStringOperationFilterInput;
    storeType?: INullableOfStoreTypeOperationFilterInput;
    sellerId?: IComparableNullableOfGuidOperationFilterInput;
    stocks?: IListFilterInputTypeOfStoreStockFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IBranchOfficeFilterInput {
    and?: Array<IBranchOfficeFilterInput>;
    or?: Array<IBranchOfficeFilterInput>;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    isActive?: IBooleanOperationFilterInput;
    name?: IStringOperationFilterInput;
    countryId?: IComparableGuidOperationFilterInput;
    state?: IStringOperationFilterInput;
    municipality?: IStringOperationFilterInput;
    email?: IStringOperationFilterInput;
    phone?: IStringOperationFilterInput;
    postalCode?: IStringOperationFilterInput;
    street?: IStringOperationFilterInput;
    number?: IStringOperationFilterInput;
    managerId?: IComparableNullableOfGuidOperationFilterInput;
    manager?: IManagerFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IManagerFilterInput {
    and?: Array<IManagerFilterInput>;
    or?: Array<IManagerFilterInput>;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    branchOfficeId?: IComparableGuidOperationFilterInput;
    branchOffice?: IBranchOfficeFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfStoreTypeOperationFilterInput {
    eq?: IStoreType;
    neq?: IStoreType;
    in?: Array<IStoreType | null>;
    nin?: Array<IStoreType | null>;
}
export interface IListFilterInputTypeOfStoreStockFilterInput {
    all?: IStoreStockFilterInput;
    none?: IStoreStockFilterInput;
    some?: IStoreStockFilterInput;
    any?: boolean;
}
export interface IStoreStockFilterInput {
    and?: Array<IStoreStockFilterInput>;
    or?: Array<IStoreStockFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    productId?: IComparableGuidOperationFilterInput;
    storeId?: IComparableGuidOperationFilterInput;
    store?: IStoreFilterInput;
    product?: IProductFilterInput;
    stock?: IComparableDoubleOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IComparableDoubleOperationFilterInput {
    eq?: number;
    neq?: number;
    in?: Array<number>;
    nin?: Array<number>;
    gt?: number;
    ngt?: number;
    gte?: number;
    ngte?: number;
    lt?: number;
    nlt?: number;
    lte?: number;
    nlte?: number;
}
export interface INullableOfProductTypeOperationFilterInput {
    eq?: IProductType;
    neq?: IProductType;
    in?: Array<IProductType | null>;
    nin?: Array<IProductType | null>;
}
export interface ICostingTypeOperationFilterInput {
    eq?: ICostingType;
    neq?: ICostingType;
    in?: Array<ICostingType>;
    nin?: Array<ICostingType>;
}
export interface INullableOfProductModalityOperationFilterInput {
    eq?: IProductModality;
    neq?: IProductModality;
    in?: Array<IProductModality | null>;
    nin?: Array<IProductModality | null>;
}
export interface IStockAlertFilterInput {
    and?: Array<IStockAlertFilterInput>;
    or?: Array<IStockAlertFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    productId?: IComparableGuidOperationFilterInput;
    product?: IProductFilterInput;
    lowestQuantity?: IComparableDoubleOperationFilterInput;
    middleQuantity?: IComparableDoubleOperationFilterInput;
    highestQuantity?: IComparableDoubleOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfProductProvFilterInput {
    all?: IProductProvFilterInput;
    none?: IProductProvFilterInput;
    some?: IProductProvFilterInput;
    any?: boolean;
}
export interface IProductProvFilterInput {
    and?: Array<IProductProvFilterInput>;
    or?: Array<IProductProvFilterInput>;
    productId?: IComparableGuidOperationFilterInput;
    providerId?: IComparableGuidOperationFilterInput;
    product?: IProductFilterInput;
    provider?: IProductProviderFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IProductProviderFilterInput {
    and?: Array<IProductProviderFilterInput>;
    or?: Array<IProductProviderFilterInput>;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    rfc?: IStringOperationFilterInput;
    socialReason?: IStringOperationFilterInput;
    address?: IStringOperationFilterInput;
    purchase?: IListFilterInputTypeOfPurchaseFilterInput;
    creditDays?: IComparableNullableOfInt32OperationFilterInput;
    afectaDiot?: IBooleanOperationFilterInput;
    city?: IStringOperationFilterInput;
    credit?: IComparableNullableOfDecimalOperationFilterInput;
    balance?: IComparableNullableOfDecimalOperationFilterInput;
    providerType?: INullableOfProviderTypeOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfPurchaseFilterInput {
    all?: IPurchaseFilterInput;
    none?: IPurchaseFilterInput;
    some?: IPurchaseFilterInput;
    any?: boolean;
}
export interface IPurchaseFilterInput {
    and?: Array<IPurchaseFilterInput>;
    or?: Array<IPurchaseFilterInput>;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    invoice?: IStringOperationFilterInput;
    invoiceDate?: IComparableDateTimeOperationFilterInput;
    expirationDate?: IComparableDateTimeOperationFilterInput;
    branchOfficeId?: IComparableGuidOperationFilterInput;
    storeId?: IComparableGuidOperationFilterInput;
    providerId?: IComparableGuidOperationFilterInput;
    total?: IComparableNullableOfDoubleOperationFilterInput;
    currencyId?: IComparableGuidOperationFilterInput;
    hasBuyer?: IBooleanOperationFilterInput;
    globalDiscount?: IComparableNullableOfDecimalOperationFilterInput;
    buyerId?: IComparableNullableOfGuidOperationFilterInput;
    isActive?: IBooleanOperationFilterInput;
    discount?: IComparableNullableOfDoubleOperationFilterInput;
    subTotal?: IComparableNullableOfDoubleOperationFilterInput;
    provider?: IProductProviderFilterInput;
    store?: IStoreFilterInput;
    branchOffice?: IBranchOfficeFilterInput;
    productPurchases?: IListFilterInputTypeOfProductPurchaseFilterInput;
    files?: IListFilterInputTypeOfPurchaseFileFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IComparableNullableOfDecimalOperationFilterInput {
    eq?: IDecimal;
    neq?: IDecimal;
    in?: Array<IDecimal | null>;
    nin?: Array<IDecimal | null>;
    gt?: IDecimal;
    ngt?: IDecimal;
    gte?: IDecimal;
    ngte?: IDecimal;
    lt?: IDecimal;
    nlt?: IDecimal;
    lte?: IDecimal;
    nlte?: IDecimal;
}
export interface IListFilterInputTypeOfProductPurchaseFilterInput {
    all?: IProductPurchaseFilterInput;
    none?: IProductPurchaseFilterInput;
    some?: IProductPurchaseFilterInput;
    any?: boolean;
}
export interface IProductPurchaseFilterInput {
    and?: Array<IProductPurchaseFilterInput>;
    or?: Array<IProductPurchaseFilterInput>;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    productId?: IComparableGuidOperationFilterInput;
    purchaseId?: IComparableGuidOperationFilterInput;
    quantity?: IComparableDoubleOperationFilterInput;
    price?: IComparableDoubleOperationFilterInput;
    discount?: IComparableNullableOfDoubleOperationFilterInput;
    taxes?: IComparableNullableOfDoubleOperationFilterInput;
    product?: IProductFilterInput;
    purchase?: IPurchaseFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfPurchaseFileFilterInput {
    all?: IPurchaseFileFilterInput;
    none?: IPurchaseFileFilterInput;
    some?: IPurchaseFileFilterInput;
    any?: boolean;
}
export interface IPurchaseFileFilterInput {
    and?: Array<IPurchaseFileFilterInput>;
    or?: Array<IPurchaseFileFilterInput>;
    fileid?: IComparableGuidOperationFilterInput;
    purchaseId?: IComparableGuidOperationFilterInput;
    purchase?: IPurchaseFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfProviderTypeOperationFilterInput {
    eq?: IProviderType;
    neq?: IProviderType;
    in?: Array<IProviderType | null>;
    nin?: Array<IProviderType | null>;
}
export interface IListFilterInputTypeOfProductPriceFilterInput {
    all?: IProductPriceFilterInput;
    none?: IProductPriceFilterInput;
    some?: IProductPriceFilterInput;
    any?: boolean;
}
export interface IProductPriceFilterInput {
    and?: Array<IProductPriceFilterInput>;
    or?: Array<IProductPriceFilterInput>;
    price?: IComparableDecimalOperationFilterInput;
    productId?: IComparableGuidOperationFilterInput;
    product?: IProductFilterInput;
    utility?: IComparableDecimalOperationFilterInput;
    setPrice?: IBooleanOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListComparableDecimalOperationFilterInput {
    all?: IComparableDecimalOperationFilterInput;
    none?: IComparableDecimalOperationFilterInput;
    some?: IComparableDecimalOperationFilterInput;
    any?: boolean;
}
export interface INullableOfArticleLanguageOperationFilterInput {
    eq?: IArticleLanguage;
    neq?: IArticleLanguage;
    in?: Array<IArticleLanguage | null>;
    nin?: Array<IArticleLanguage | null>;
}
export interface IListFilterInputTypeOfSurveyFilterInput {
    all?: ISurveyFilterInput;
    none?: ISurveyFilterInput;
    some?: ISurveyFilterInput;
    any?: boolean;
}
export interface ISurveyFilterInput {
    and?: Array<ISurveyFilterInput>;
    or?: Array<ISurveyFilterInput>;
    title?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    isActive?: IBooleanOperationFilterInput;
    thankYouMessage?: IStringOperationFilterInput;
    articles?: IListFilterInputTypeOfArticleFilterInput;
    questions?: IListFilterInputTypeOfQuestionFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfQuestionFilterInput {
    all?: IQuestionFilterInput;
    none?: IQuestionFilterInput;
    some?: IQuestionFilterInput;
    any?: boolean;
}
export interface IQuestionFilterInput {
    and?: Array<IQuestionFilterInput>;
    or?: Array<IQuestionFilterInput>;
    surveyId?: IComparableGuidOperationFilterInput;
    survey?: ISurveyFilterInput;
    title?: IStringOperationFilterInput;
    type?: IQuestionTypeOperationFilterInput;
    image?: IStringOperationFilterInput;
    isRequired?: IBooleanOperationFilterInput;
    position?: IComparableInt32OperationFilterInput;
    allowsFileUpload?: IBooleanOperationFilterInput;
    options?: IListFilterInputTypeOfOptionFilterInput;
    answers?: IListFilterInputTypeOfAnswerFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IQuestionTypeOperationFilterInput {
    eq?: IQuiz_QuestionType;
    neq?: IQuiz_QuestionType;
    in?: Array<IQuiz_QuestionType>;
    nin?: Array<IQuiz_QuestionType>;
}
export interface IListFilterInputTypeOfOptionFilterInput {
    all?: IOptionFilterInput;
    none?: IOptionFilterInput;
    some?: IOptionFilterInput;
    any?: boolean;
}
export interface IOptionFilterInput {
    and?: Array<IOptionFilterInput>;
    or?: Array<IOptionFilterInput>;
    questionId?: IComparableGuidOperationFilterInput;
    question?: IQuestionFilterInput;
    title?: IStringOperationFilterInput;
    position?: IComparableInt32OperationFilterInput;
    count?: IComparableInt32OperationFilterInput;
    answers?: IListFilterInputTypeOfAnswerFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfAnswerFilterInput {
    all?: IAnswerFilterInput;
    none?: IAnswerFilterInput;
    some?: IAnswerFilterInput;
    any?: boolean;
}
export interface IAnswerFilterInput {
    and?: Array<IAnswerFilterInput>;
    or?: Array<IAnswerFilterInput>;
    memberId?: IComparableGuidOperationFilterInput;
    questionId?: IComparableGuidOperationFilterInput;
    question?: IQuestionFilterInput;
    optionId?: IComparableNullableOfGuidOperationFilterInput;
    option?: IOptionFilterInput;
    uploadFile?: IStringOperationFilterInput;
    responseText?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IArticleSortInput {
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    title?: ISortEnumType;
    photo?: ISortEnumType;
    slug?: ISortEnumType;
    resume?: ISortEnumType;
    content?: ISortEnumType;
    active?: ISortEnumType;
    views?: ISortEnumType;
    status?: ISortEnumType;
    releaseDate?: ISortEnumType;
    seoTitle?: ISortEnumType;
    seoDescription?: ISortEnumType;
    seoKeywords?: ISortEnumType;
    structuredMarking?: ISortEnumType;
    imageAlt?: ISortEnumType;
    seoArticle?: ISortEnumType;
    typeContent?: ISortEnumType;
    embedContent?: ISortEnumType;
    groupId?: ISortEnumType;
    group?: ITaxonomySortInput;
    language?: ISortEnumType;
    parentId?: ISortEnumType;
    parent?: IArticleSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ITaxonomySortInput {
    projectId?: ISortEnumType;
    name?: ISortEnumType;
    slug?: ISortEnumType;
    description?: ISortEnumType;
    termGroup?: ISortEnumType;
    photo?: ISortEnumType;
    tagLine?: ISortEnumType;
    tagLine2?: ISortEnumType;
    parentId?: ISortEnumType;
    parent?: ITaxonomySortInput;
    isPublic?: ISortEnumType;
    seoTaxonomy?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
/**
 * A connection to a list of items.
 */
export interface IArticlesConnection {
    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;
    /**
     * A list of edges.
     */
    edges?: Array<IArticlesEdge>;
    /**
     * A flattened list of the nodes.
     */
    nodes?: Array<IArticle>;
    totalCount: number;
}
/**
 * An edge in a connection.
 */
export interface IArticlesEdge {
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    /**
     * The item at the end of the edge.
     */
    node: IArticle;
}
export interface IArticleCollectionSegment {
    items?: Array<IArticle>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IProductSortInput {
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    title?: ISortEnumType;
    photo?: ISortEnumType;
    slug?: ISortEnumType;
    sku?: ISortEnumType;
    price?: ISortEnumType;
    offerPrice?: ISortEnumType;
    stock?: ISortEnumType;
    active?: ISortEnumType;
    shippingType?: ISortEnumType;
    shippingPrice?: ISortEnumType;
    description?: ISortEnumType;
    publishDate?: ISortEnumType;
    views?: ISortEnumType;
    status?: ISortEnumType;
    seoProduct?: ISortEnumType;
    shopType?: ISortEnumType;
    code?: ISortEnumType;
    purchasePrice?: ISortEnumType;
    sellPrice?: ISortEnumType;
    storeId?: ISortEnumType;
    store?: IStoreSortInput;
    measure?: ISortEnumType;
    utility?: ISortEnumType;
    measureType?: ISortEnumType;
    origin?: ISortEnumType;
    productType?: ISortEnumType;
    planId?: ISortEnumType;
    barcode?: ISortEnumType;
    brand?: ISortEnumType;
    family?: ISortEnumType;
    line?: ISortEnumType;
    subFamily?: ISortEnumType;
    key?: ISortEnumType;
    onStore?: ISortEnumType;
    onCatalog?: ISortEnumType;
    sellMeasure?: ISortEnumType;
    costType?: ISortEnumType;
    purchaseMeasure?: ISortEnumType;
    costingType?: ISortEnumType;
    productModality?: ISortEnumType;
    stockAlertId?: ISortEnumType;
    stockAlert?: IStockAlertSortInput;
    partNumber?: ISortEnumType;
    fee?: ISortEnumType;
    dataSheet?: ISortEnumType;
    ecommerceTitle?: ISortEnumType;
    ecommerceDescription?: ISortEnumType;
    ecommerceInstructions?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IStoreSortInput {
    projectId?: ISortEnumType;
    name?: ISortEnumType;
    branchOfficeId?: ISortEnumType;
    branchOffice?: IBranchOfficeSortInput;
    code?: ISortEnumType;
    storeType?: ISortEnumType;
    sellerId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IBranchOfficeSortInput {
    projectId?: ISortEnumType;
    isActive?: ISortEnumType;
    name?: ISortEnumType;
    countryId?: ISortEnumType;
    state?: ISortEnumType;
    municipality?: ISortEnumType;
    email?: ISortEnumType;
    phone?: ISortEnumType;
    postalCode?: ISortEnumType;
    street?: ISortEnumType;
    number?: ISortEnumType;
    managerId?: ISortEnumType;
    manager?: IManagerSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IManagerSortInput {
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    branchOfficeId?: ISortEnumType;
    branchOffice?: IBranchOfficeSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IStockAlertSortInput {
    projectId?: ISortEnumType;
    productId?: ISortEnumType;
    product?: IProductSortInput;
    lowestQuantity?: ISortEnumType;
    middleQuantity?: ISortEnumType;
    highestQuantity?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IProductCollectionSegment {
    items?: Array<IProduct>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ITaxonomyCollectionSegment {
    items?: Array<ITaxonomy>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ISeoDTO {
    seo?: string;
}
export interface ICourse {
    school: string;
    courseLevel: ICourseLevel;
    projectId: IUUID;
    title: string;
    courseModality: ICourseModality;
    slug: string;
    description: string;
    endDate: IDateTime;
    startDate: IDateTime;
    addressId: IUUID;
    courseType: ICourseType;
    duration: number;
    beginType: IBeginType;
    price: number;
    schedules?: Array<ICourseSchedule>;
    discount: number;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum ICourseLevel {
    BEGGINER = "BEGGINER",
    ADVANCED = "ADVANCED"
}
export declare const enum ICourseModality {
    PRESENCIAL = "PRESENCIAL",
    VIRTUAL = "VIRTUAL"
}
export declare const enum ICourseType {
    SIMPLE = "SIMPLE",
    CERTIFICATE = "CERTIFICATE"
}
export declare const enum IBeginType {
    UNIQUE = "UNIQUE",
    MULTIPLE = "MULTIPLE"
}
export interface ICourseSchedule {
    day: string;
    time?: ITimeSpan;
    dayPosition: number;
    courseId: IUUID;
    course?: ICourse;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
/**
 * A connection to a list of items.
 */
export interface ICoursesByProjectIdConnection {
    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;
    /**
     * A list of edges.
     */
    edges?: Array<ICoursesByProjectIdEdge>;
    /**
     * A flattened list of the nodes.
     */
    nodes?: Array<ICourse>;
    totalCount: number;
}
/**
 * An edge in a connection.
 */
export interface ICoursesByProjectIdEdge {
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    /**
     * The item at the end of the edge.
     */
    node: ICourse;
}
export interface ICourseTaxonomy {
    projectId?: IUUID;
    courseId: IUUID;
    course: ICourse;
    taxonomyId: IUUID;
    taxonomy: ITaxonomy;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
/**
 * A connection to a list of items.
 */
export interface IStoreTransfersByStoreIdConnection {
    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;
    /**
     * A list of edges.
     */
    edges?: Array<IStoreTransfersByStoreIdEdge>;
    /**
     * A flattened list of the nodes.
     */
    nodes?: Array<IStoreTransfer>;
    totalCount: number;
}
/**
 * An edge in a connection.
 */
export interface IStoreTransfersByStoreIdEdge {
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    /**
     * The item at the end of the edge.
     */
    node: IStoreTransfer;
}
export interface IStoreTransfer {
    projectId?: IUUID;
    storeOriginId: IUUID;
    storeDestinyId: IUUID;
    currencyId: IUUID;
    productsTransferred?: Array<IProductTransferred>;
    storeOrigin?: IStore;
    storeDestiny?: IStore;
    folio?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProductTransferred {
    productId?: IUUID;
    product?: IProduct;
    quantity: number;
    storeTransferId: IUUID;
    storeTransfer?: IStoreTransfer;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
/**
 * A connection to a list of items.
 */
export interface ICoursesByTaxonomyAndModalityConnection {
    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;
    /**
     * A list of edges.
     */
    edges?: Array<ICoursesByTaxonomyAndModalityEdge>;
    /**
     * A flattened list of the nodes.
     */
    nodes?: Array<ICourseTaxonomy>;
    totalCount: number;
}
/**
 * An edge in a connection.
 */
export interface ICoursesByTaxonomyAndModalityEdge {
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    /**
     * The item at the end of the edge.
     */
    node: ICourseTaxonomy;
}
/**
 * A connection to a list of items.
 */
export interface IBranchOfficesConnection {
    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;
    /**
     * A list of edges.
     */
    edges?: Array<IBranchOfficesEdge>;
    /**
     * A flattened list of the nodes.
     */
    nodes?: Array<IBranchOffice>;
    totalCount: number;
}
/**
 * An edge in a connection.
 */
export interface IBranchOfficesEdge {
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    /**
     * The item at the end of the edge.
     */
    node: IBranchOffice;
}
/**
 * A connection to a list of items.
 */
export interface IManagersConnection {
    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;
    /**
     * A list of edges.
     */
    edges?: Array<IManagersEdge>;
    /**
     * A flattened list of the nodes.
     */
    nodes?: Array<IManager>;
    totalCount: number;
}
/**
 * An edge in a connection.
 */
export interface IManagersEdge {
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    /**
     * The item at the end of the edge.
     */
    node: IManager;
}
export interface IPurchaseSortInput {
    projectId?: ISortEnumType;
    invoice?: ISortEnumType;
    invoiceDate?: ISortEnumType;
    expirationDate?: ISortEnumType;
    branchOfficeId?: ISortEnumType;
    storeId?: ISortEnumType;
    providerId?: ISortEnumType;
    total?: ISortEnumType;
    currencyId?: ISortEnumType;
    hasBuyer?: ISortEnumType;
    globalDiscount?: ISortEnumType;
    buyerId?: ISortEnumType;
    isActive?: ISortEnumType;
    discount?: ISortEnumType;
    subTotal?: ISortEnumType;
    provider?: IProductProviderSortInput;
    store?: IStoreSortInput;
    branchOffice?: IBranchOfficeSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IProductProviderSortInput {
    projectId?: ISortEnumType;
    name?: ISortEnumType;
    rfc?: ISortEnumType;
    socialReason?: ISortEnumType;
    address?: ISortEnumType;
    creditDays?: ISortEnumType;
    afectaDiot?: ISortEnumType;
    city?: ISortEnumType;
    credit?: ISortEnumType;
    balance?: ISortEnumType;
    providerType?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPurchaseCollectionSegment {
    items?: Array<IPurchase>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
/**
 * A connection to a list of items.
 */
export interface IStoresConnection {
    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;
    /**
     * A list of edges.
     */
    edges?: Array<IStoresEdge>;
    /**
     * A flattened list of the nodes.
     */
    nodes?: Array<IStore>;
    totalCount: number;
}
/**
 * An edge in a connection.
 */
export interface IStoresEdge {
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    /**
     * The item at the end of the edge.
     */
    node: IStore;
}
/**
 * A connection to a list of items.
 */
export interface IStoreTransfersConnection {
    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;
    /**
     * A list of edges.
     */
    edges?: Array<IStoreTransfersEdge>;
    /**
     * A flattened list of the nodes.
     */
    nodes?: Array<IStoreTransfer>;
    totalCount: number;
}
/**
 * An edge in a connection.
 */
export interface IStoreTransfersEdge {
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    /**
     * The item at the end of the edge.
     */
    node: IStoreTransfer;
}
export interface IDrugFilterInput {
    and?: Array<IDrugFilterInput>;
    or?: Array<IDrugFilterInput>;
    ndcUpcHri?: IStringOperationFilterInput;
    prodDescAbbrev?: IStringOperationFilterInput;
    prodName?: IStringOperationFilterInput;
}
export interface IDrugCollectionSegment {
    items?: Array<IDrug>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IDrug {
    ndcUpcHri: string;
    prodDescAbbrev: string;
    prodName: string;
}
export interface ICarrier {
    carrierCode: string;
    carrierName: string;
}
export interface IGroupResponse {
    groupItemList: IGroupItem;
}
export interface IGroupItem {
    groupItems: Array<IEmployer>;
}
export interface IEmployer {
    carrierCode: string;
    employerName: string;
    groupNum: string;
    orgCode: string;
}
export interface IPharmacyRadiusResponseFilterInput {
    and?: Array<IPharmacyRadiusResponseFilterInput>;
    or?: Array<IPharmacyRadiusResponseFilterInput>;
    pharmacy?: IPharmacyFilterInput;
    pricing?: IPricingFilterInput;
}
export interface IPharmacyFilterInput {
    and?: Array<IPharmacyFilterInput>;
    or?: Array<IPharmacyFilterInput>;
    npi?: IStringOperationFilterInput;
    nabp?: IStringOperationFilterInput;
    affiliationCode?: IStringOperationFilterInput;
    name?: IStringOperationFilterInput;
    address1?: IStringOperationFilterInput;
    address2?: IStringOperationFilterInput;
    city?: IStringOperationFilterInput;
    state?: IStringOperationFilterInput;
    zip?: IStringOperationFilterInput;
    phone?: IStringOperationFilterInput;
    longitude?: IStringOperationFilterInput;
    latitude?: IStringOperationFilterInput;
}
export interface IPricingFilterInput {
    and?: Array<IPricingFilterInput>;
    or?: Array<IPricingFilterInput>;
    requestId?: IStringOperationFilterInput;
    status?: IComparableInt32OperationFilterInput;
    gpi?: IStringOperationFilterInput;
    unitCost?: IComparableNullableOfDoubleOperationFilterInput;
    dAWDifference?: IComparableNullableOfDoubleOperationFilterInput;
    patientPay?: IComparableNullableOfDoubleOperationFilterInput;
    totalPay?: IComparableNullableOfDoubleOperationFilterInput;
    planPay?: IComparableNullableOfDoubleOperationFilterInput;
    processingFee?: IComparableNullableOfDoubleOperationFilterInput;
    dispensingFee?: IComparableNullableOfDoubleOperationFilterInput;
    incentiveFee?: IComparableNullableOfDoubleOperationFilterInput;
    copay?: IComparableNullableOfDoubleOperationFilterInput;
    clientBilled?: IComparableNullableOfDoubleOperationFilterInput;
    marginApplied?: IComparableNullableOfDoubleOperationFilterInput;
    fQMessage?: IStringOperationFilterInput;
    f4Message?: IStringOperationFilterInput;
    benefitCap?: IComparableNullableOfDoubleOperationFilterInput;
    deductible?: IComparableNullableOfDoubleOperationFilterInput;
    mOOP?: IComparableNullableOfDoubleOperationFilterInput;
    patientTax?: IComparableNullableOfDoubleOperationFilterInput;
    sellTax?: IComparableNullableOfDoubleOperationFilterInput;
    buyTax?: IComparableNullableOfDoubleOperationFilterInput;
    pharmacyFee?: IComparableNullableOfDoubleOperationFilterInput;
    vaccineAdminFee?: IComparableNullableOfDoubleOperationFilterInput;
    sellDispensingFee?: IComparableNullableOfDoubleOperationFilterInput;
    buyDispensingFee?: IComparableNullableOfDoubleOperationFilterInput;
    sellIngredientCost?: IComparableNullableOfDoubleOperationFilterInput;
    buyIngredientCost?: IComparableNullableOfDoubleOperationFilterInput;
    rejectCodes?: IStringOperationFilterInput;
    billCostCalculatorRuleName?: IStringOperationFilterInput;
    costCalculatorRuleName?: IStringOperationFilterInput;
    copayRuleName?: IStringOperationFilterInput;
}
export interface IPharmacyRadiusResponse {
    pharmacy?: IPharmacy;
    pricing?: IPricing;
}
export interface IPharmacy {
    npi: string;
    nabp: string;
    affiliationCode: string;
    name: string;
    address1: string;
    address2: string;
    city: string;
    state: string;
    zip: string;
    phone: string;
    longitude: string;
    latitude: string;
}
export interface IPricing {
    requestId: string;
    status: number;
    gpi: string;
    unitCost?: number;
    dAWDifference?: number;
    patientPay?: number;
    totalPay?: number;
    planPay?: number;
    processingFee?: number;
    dispensingFee?: number;
    incentiveFee?: number;
    copay?: number;
    clientBilled?: number;
    marginApplied?: number;
    fQMessage?: string;
    f4Message?: string;
    benefitCap?: number;
    deductible?: number;
    mOOP?: number;
    patientTax?: number;
    sellTax?: number;
    buyTax?: number;
    pharmacyFee?: number;
    vaccineAdminFee?: number;
    sellDispensingFee?: number;
    buyDispensingFee?: number;
    sellIngredientCost?: number;
    buyIngredientCost?: number;
    rejectCodes?: string;
    billCostCalculatorRuleName?: string;
    costCalculatorRuleName?: string;
    copayRuleName?: string;
}
export interface IPharmacyResponse {
    message: string;
    pharmacies: Array<IPharmacy>;
}
export interface ISearchMemberResponse {
    cardHolder: ICardHolder;
}
export interface ICardHolder {
    cHID: string;
    members: Array<IMemberInfo>;
}
export interface IMemberInfo {
    id: number;
    firstName: string;
    middleName: string;
    lastName: string;
    dOB: IDateTime;
    personCode: string;
    sSN: string;
    genderCode: string;
    address1: string;
    address2: string;
    city: string;
    state: string;
    zipCode: string;
    homePhone: string;
    workPhone: string;
    mobilePhone: string;
    email: string;
    alternateID: string;
    previousID: string;
    relationshipCode: string;
    locationCode: string;
    pCPNPI: string;
    pCPPhone: string;
    pCPFax: string;
    group: Iblog_Group;
    benefitSpending: IBenefitSpending;
}
export interface Iblog_Group {
    id: number;
    groupName?: string;
    groupNumber?: string;
    benefitYearStartDay?: number;
    benefitYearStartMonth?: number;
    startDateTime?: IDateTime;
    endDateTime?: IDateTime;
    priorYearQ4CarryOverDeductible?: boolean;
    priorYearQ4CarryOverMOOP?: boolean;
    carrierCode?: string;
    coverageType?: string;
}
export interface IBenefitSpending {
    individualDeductibleSpend: number;
    familyDeductibleSpend: number;
    individualMOOPSpend: number;
    familyMOOPSpend: number;
    individualBenefitCapSpend: number;
    familyBenefitCapSpend: number;
    individualSpecialCapSpend: number;
    familySpecialCapSpend: number;
    plus1DeductibleSpend: number;
    plus1BenefitCapSpend: number;
    plus1MOOPSpend: number;
    hasIndividualDeductibleBeenMet: boolean;
    hasFamilyDeductibleBeenMet: boolean;
    hasIndividualOOPMaxBeenMet: boolean;
    hasFamilyOOPMaxBeenMet: boolean;
    hasIndividualBenefitCapBeenMet: boolean;
    hasFamilyBenefitCapBeenMet: boolean;
    hasIndividualSpecialCapBeenMet: boolean;
    hasFamilySpecialCapBeenMet: boolean;
    plus1MOOPBenefitCapSpend: number;
}
export interface IPricingDrug {
    drug?: IDrug;
    pharmacyRadiusPricing?: IPharmacyRadiusPricing;
}
export interface IPharmacyRadiusPricing {
    message: string;
    response?: Array<IPharmacyRadiusResponse>;
}
export interface ITransaction {
    clientCode: string;
    planCode: string;
    memberId: string;
    externalGroupId: string;
    firstName: string;
    lastName: string;
    dateOfBirth: IDateTime;
    gender: string;
    labelName: string;
    nDC: string;
    quantity: number;
    daysSupply: number;
    pharmacyName: string;
    prescriberName: string;
    memberKey: string;
    personCode: string;
    nABP: string;
}
export interface IMenu {
    id: number;
    name_for_guest: string;
    combine_into_id?: string;
    last_modified: string;
    display_position: number;
    menu_headings?: Array<IMenuHeading>;
    menu_items?: Array<IMenuItem>;
}
export interface IMenuHeading {
    id: string;
    heading_name: string;
    display_position: number;
}
export interface IMenuItem {
    id: string;
    display_position: IDecimal;
    image_url: string;
    image_on_front_page: boolean;
    name_for_guest: string;
    description: string;
    tax_cents: IDecimal;
    price_string: string;
    pretax_cents: number;
    tags: Array<string>;
    special_instructions_config?: string;
    most_loved: boolean;
    menu_heading_id: string;
    in_stock: boolean;
    image_on_item_page: boolean;
    modifiers_ids: Array<string>;
}
export interface IRestaurant {
    id: string;
    name_for_guest: string;
    name_for_admin: string;
    phone_for_guests: string;
}
export interface ILegalTermFilterInput {
    and?: Array<ILegalTermFilterInput>;
    or?: Array<ILegalTermFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    counter?: IComparableInt32OperationFilterInput;
    keyName?: IStringOperationFilterInput;
    title?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ILegalTermSortInput {
    projectId?: ISortEnumType;
    counter?: ISortEnumType;
    keyName?: ISortEnumType;
    title?: ISortEnumType;
    description?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ILegalTermCollectionSegment {
    items?: Array<ILegalTerm>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ILegalTerm {
    projectId: IUUID;
    counter: number;
    keyName: string;
    title: string;
    description: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IStockAlertCollectionSegment {
    items?: Array<IStockAlert>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IPurchaseQuote {
    invoiceDate: IDateTime;
    expirationDate: IDateTime;
    reference: string;
    branchOfficeId: IUUID;
    branchOffice?: IBranchOffice;
    storeId: IUUID;
    store?: IStore;
    sellerId: IUUID;
    customerId: IUUID;
    comment: string;
    products?: Array<IPurchaseQuoteProduct>;
    discount?: IDecimal;
    subTotal?: IDecimal;
    taxes?: IDecimal;
    detained?: IDecimal;
    total?: IDecimal;
    purchaseQuoteStatus: IPurchaseQuoteStatus;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPurchaseQuoteProduct {
    purchaseQuoteId: IUUID;
    productId: IUUID;
    purchaseQuote?: IPurchaseQuote;
    product?: IProduct;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IPurchaseQuoteStatus {
    PENDING = "PENDING",
    ACCEPTED = "ACCEPTED",
    DENIED = "DENIED"
}
export interface IPurchaseQuoteFilterInput {
    and?: Array<IPurchaseQuoteFilterInput>;
    or?: Array<IPurchaseQuoteFilterInput>;
    invoiceDate?: IComparableDateTimeOperationFilterInput;
    expirationDate?: IComparableDateTimeOperationFilterInput;
    reference?: IStringOperationFilterInput;
    branchOfficeId?: IComparableGuidOperationFilterInput;
    branchOffice?: IBranchOfficeFilterInput;
    storeId?: IComparableGuidOperationFilterInput;
    store?: IStoreFilterInput;
    sellerId?: IComparableGuidOperationFilterInput;
    customerId?: IComparableGuidOperationFilterInput;
    comment?: IStringOperationFilterInput;
    products?: IListFilterInputTypeOfPurchaseQuoteProductFilterInput;
    discount?: IComparableNullableOfDecimalOperationFilterInput;
    subTotal?: IComparableNullableOfDecimalOperationFilterInput;
    taxes?: IComparableNullableOfDecimalOperationFilterInput;
    detained?: IComparableNullableOfDecimalOperationFilterInput;
    total?: IComparableNullableOfDecimalOperationFilterInput;
    purchaseQuoteStatus?: IPurchaseQuoteStatusOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfPurchaseQuoteProductFilterInput {
    all?: IPurchaseQuoteProductFilterInput;
    none?: IPurchaseQuoteProductFilterInput;
    some?: IPurchaseQuoteProductFilterInput;
    any?: boolean;
}
export interface IPurchaseQuoteProductFilterInput {
    and?: Array<IPurchaseQuoteProductFilterInput>;
    or?: Array<IPurchaseQuoteProductFilterInput>;
    purchaseQuoteId?: IComparableGuidOperationFilterInput;
    productId?: IComparableGuidOperationFilterInput;
    purchaseQuote?: IPurchaseQuoteFilterInput;
    product?: IProductFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IPurchaseQuoteStatusOperationFilterInput {
    eq?: IPurchaseQuoteStatus;
    neq?: IPurchaseQuoteStatus;
    in?: Array<IPurchaseQuoteStatus>;
    nin?: Array<IPurchaseQuoteStatus>;
}
export interface IPurchaseQuoteCollectionSegment {
    items?: Array<IPurchaseQuote>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ITaxFilterInput {
    and?: Array<ITaxFilterInput>;
    or?: Array<ITaxFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    rate?: IComparableDecimalOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ITax {
    projectId: IUUID;
    name: string;
    rate: IDecimal;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProductSellFilterInput {
    and?: Array<IProductSellFilterInput>;
    or?: Array<IProductSellFilterInput>;
    folio?: IStringOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    invoiceDate?: IComparableDateTimeOperationFilterInput;
    expirationDate?: IComparableDateTimeOperationFilterInput;
    currencyId?: IComparableGuidOperationFilterInput;
    branchOfficeId?: IComparableGuidOperationFilterInput;
    branchOffice?: IBranchOfficeFilterInput;
    storeId?: IComparableGuidOperationFilterInput;
    store?: IStoreFilterInput;
    sellerId?: IComparableGuidOperationFilterInput;
    routeId?: IComparableGuidOperationFilterInput;
    customerId?: IComparableGuidOperationFilterInput;
    socialReason?: IStringOperationFilterInput;
    rfc?: IStringOperationFilterInput;
    automaticInvoicing?: IBooleanOperationFilterInput;
    address?: IStringOperationFilterInput;
    iva?: IComparableDecimalOperationFilterInput;
    total?: IComparableDecimalOperationFilterInput;
    subTotal?: IComparableDecimalOperationFilterInput;
    taxes?: IComparableDecimalOperationFilterInput;
    discount?: IComparableDecimalOperationFilterInput;
    products?: IListFilterInputTypeOfProductSellItemFilterInput;
    isActive?: IBooleanOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfProductSellItemFilterInput {
    all?: IProductSellItemFilterInput;
    none?: IProductSellItemFilterInput;
    some?: IProductSellItemFilterInput;
    any?: boolean;
}
export interface IProductSellItemFilterInput {
    and?: Array<IProductSellItemFilterInput>;
    or?: Array<IProductSellItemFilterInput>;
    productSellId?: IComparableGuidOperationFilterInput;
    productSell?: IProductSellFilterInput;
    quantity?: IComparableDoubleOperationFilterInput;
    productId?: IComparableGuidOperationFilterInput;
    product?: IProductFilterInput;
    priceId?: IComparableGuidOperationFilterInput;
    discount?: IComparableDecimalOperationFilterInput;
    finalPrice?: IComparableDecimalOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IProductSellCollectionSegment {
    items?: Array<IProductSell>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IProductSell {
    folio?: string;
    projectId: IUUID;
    invoiceDate: IDateTime;
    expirationDate: IDateTime;
    currencyId: IUUID;
    branchOfficeId: IUUID;
    branchOffice?: IBranchOffice;
    storeId: IUUID;
    store?: IStore;
    sellerId: IUUID;
    routeId: IUUID;
    customerId: IUUID;
    socialReason: string;
    rfc: string;
    automaticInvoicing: boolean;
    address: string;
    iva: IDecimal;
    total: IDecimal;
    subTotal: IDecimal;
    taxes: IDecimal;
    discount: IDecimal;
    products?: Array<IProductSellItem>;
    isActive?: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProductSellItem {
    productSellId: IUUID;
    productSell?: IProductSell;
    quantity: number;
    productId: IUUID;
    product?: IProduct;
    priceId: IUUID;
    discount: IDecimal;
    finalPrice: IDecimal;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IRouteFilterInput {
    and?: Array<IRouteFilterInput>;
    or?: Array<IRouteFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    key?: IStringOperationFilterInput;
    title?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    branchOfficeId?: IComparableGuidOperationFilterInput;
    routeType?: IStringOperationFilterInput;
    travelDays?: IComparableInt32OperationFilterInput;
    beginningDate?: IComparableDateTimeOperationFilterInput;
    sellers?: IListFilterInputTypeOfRouteSellerFilterInput;
    customers?: IListFilterInputTypeOfRouteCustomerFilterInput;
    itineraries?: IListFilterInputTypeOfRouteItineraryFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfRouteSellerFilterInput {
    all?: IRouteSellerFilterInput;
    none?: IRouteSellerFilterInput;
    some?: IRouteSellerFilterInput;
    any?: boolean;
}
export interface IRouteSellerFilterInput {
    and?: Array<IRouteSellerFilterInput>;
    or?: Array<IRouteSellerFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    routeId?: IComparableGuidOperationFilterInput;
    route?: IRouteFilterInput;
    key?: IStringOperationFilterInput;
    branchOfficeId?: IComparableGuidOperationFilterInput;
    branchOffice?: IBranchOfficeFilterInput;
    storeId?: IComparableGuidOperationFilterInput;
    store?: IStoreFilterInput;
    sellerId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfRouteCustomerFilterInput {
    all?: IRouteCustomerFilterInput;
    none?: IRouteCustomerFilterInput;
    some?: IRouteCustomerFilterInput;
    any?: boolean;
}
export interface IRouteCustomerFilterInput {
    and?: Array<IRouteCustomerFilterInput>;
    or?: Array<IRouteCustomerFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    routeId?: IComparableGuidOperationFilterInput;
    route?: IRouteFilterInput;
    customerId?: IComparableGuidOperationFilterInput;
    address?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfRouteItineraryFilterInput {
    all?: IRouteItineraryFilterInput;
    none?: IRouteItineraryFilterInput;
    some?: IRouteItineraryFilterInput;
    any?: boolean;
}
export interface IRouteItineraryFilterInput {
    and?: Array<IRouteItineraryFilterInput>;
    or?: Array<IRouteItineraryFilterInput>;
    routeId?: IComparableGuidOperationFilterInput;
    route?: IRouteFilterInput;
    customerId?: IComparableGuidOperationFilterInput;
    description?: IStringOperationFilterInput;
    address?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IRouteCollectionSegment {
    items?: Array<IRoute>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IRoute {
    projectId: IUUID;
    key: string;
    title: string;
    description: string;
    branchOfficeId: IUUID;
    routeType: string;
    travelDays: number;
    beginningDate: IDateTime;
    sellers?: Array<IRouteSeller>;
    customers?: Array<IRouteCustomer>;
    itineraries?: Array<IRouteItinerary>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IRouteSeller {
    projectId: IUUID;
    routeId: IUUID;
    route?: IRoute;
    key: string;
    branchOfficeId: IUUID;
    branchOffice?: IBranchOffice;
    storeId: IUUID;
    store?: IStore;
    sellerId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IRouteCustomer {
    projectId: IUUID;
    routeId: IUUID;
    route?: IRoute;
    customerId: IUUID;
    address?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IRouteItinerary {
    routeId: IUUID;
    route?: IRoute;
    customerId: IUUID;
    description?: string;
    address: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMessageFix {
    value: string;
}
export interface IScheduleManagerDto {
    scheduleManager: IScheduleManager;
    schedules: Array<ISchedule>;
}
export interface IScheduleManager {
    projectId: IUUID;
    memberId: IUUID;
    eventTypeId: IUUID;
    eventType?: IEventType;
    schedules?: Array<ISchedule>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IEventType {
    projectId: IUUID;
    name: string;
    price?: IDecimal;
    subEventTypes?: Array<ISubEventType>;
    image?: string;
    description?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ISubEventType {
    name: string;
    price: IDecimal;
    eventTypes?: Array<IEventType>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ISchedule {
    scheduleManagerId: IUUID;
    scheduleManager?: IScheduleManager;
    day: string;
    turn?: Array<ITurn>;
    weekDay: number;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ITurn {
    scheduleId: IUUID;
    schedule?: ISchedule;
    timeEnd?: ITimeSpan;
    timeStart?: ITimeSpan;
    timeStartString: string;
    timeEndString: string;
    isActive?: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IEvent {
    projectId: IUUID;
    memberId: IUUID;
    title?: string;
    location?: string;
    color?: string;
    description: string;
    file: string;
    roomId?: string;
    eventDate: IDateTime;
    finishDate?: IDateTime;
    eventMode?: IEventMode;
    eventSessionId?: IUUID;
    eventSession?: IEventSession;
    eventMembers?: Array<IEventMember>;
    sendDetails: boolean;
    sendRemember: boolean;
    totalPrice?: IDecimal;
    discount?: IDecimal;
    visibility?: IEventVisibility;
    eventCharges?: Array<IEventCharge>;
    eventTypeId?: IUUID;
    eventType?: IEventType;
    eventStatus?: IEventStatus;
    isActive?: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
    listDiagnostic?: Array<IDiagnostic | null>;
}
export declare const enum IEventMode {
    ONLINE = "ONLINE",
    FACE_TO_FACE = "FACE_TO_FACE"
}
export interface IEventSession {
    projectId: IUUID;
    title?: string;
    image?: string;
    price: IDecimal;
    description?: string;
    duration: number;
    eventMode?: IEventMode;
    event?: IEvent;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IEventMember {
    eventId: IUUID;
    event: IEvent;
    memberId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: ICustomMemberDto;
}
export declare const enum IEventVisibility {
    PUBLIC = "PUBLIC",
    PRIVATE = "PRIVATE"
}
export interface IEventCharge {
    eventId: IUUID;
    event?: IEvent;
    price?: IDecimal;
    description?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IEventStatus {
    CLOSED = "CLOSED",
    OPEN = "OPEN"
}
export interface IDiagnostic {
    medicines?: Array<IMedicine>;
    eventId: IUUID;
    projectId: IUUID;
    memberId: IUUID;
    content?: string;
    isVisible: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMedicine {
    projectId: IUUID;
    memberId: IUUID;
    eventId: IUUID;
    medicineName: string;
    take: string;
    frecuency: string;
    duration: string;
    isVisible: boolean;
    position: number;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IEventFilterInput {
    and?: Array<IEventFilterInput>;
    or?: Array<IEventFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    title?: IStringOperationFilterInput;
    location?: IStringOperationFilterInput;
    color?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    file?: IStringOperationFilterInput;
    roomId?: IStringOperationFilterInput;
    eventDate?: IComparableDateTimeOperationFilterInput;
    finishDate?: IComparableNullableOfDateTimeOperationFilterInput;
    eventMode?: INullableOfEventModeOperationFilterInput;
    eventSessionId?: IComparableNullableOfGuidOperationFilterInput;
    eventSession?: IEventSessionFilterInput;
    eventMembers?: IListFilterInputTypeOfEventMemberFilterInput;
    sendDetails?: IBooleanOperationFilterInput;
    sendRemember?: IBooleanOperationFilterInput;
    totalPrice?: IComparableNullableOfDecimalOperationFilterInput;
    discount?: IComparableNullableOfDecimalOperationFilterInput;
    visibility?: INullableOfEventVisibilityOperationFilterInput;
    eventCharges?: IListFilterInputTypeOfEventChargeFilterInput;
    eventTypeId?: IComparableNullableOfGuidOperationFilterInput;
    eventType?: IEventTypeFilterInput;
    eventStatus?: INullableOfEventStatusOperationFilterInput;
    isActive?: IBooleanOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEventModeOperationFilterInput {
    eq?: IEventMode;
    neq?: IEventMode;
    in?: Array<IEventMode | null>;
    nin?: Array<IEventMode | null>;
}
export interface IEventSessionFilterInput {
    and?: Array<IEventSessionFilterInput>;
    or?: Array<IEventSessionFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    title?: IStringOperationFilterInput;
    image?: IStringOperationFilterInput;
    price?: IComparableDecimalOperationFilterInput;
    description?: IStringOperationFilterInput;
    duration?: IComparableInt32OperationFilterInput;
    eventMode?: INullableOfEventModeOperationFilterInput;
    event?: IEventFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfEventMemberFilterInput {
    all?: IEventMemberFilterInput;
    none?: IEventMemberFilterInput;
    some?: IEventMemberFilterInput;
    any?: boolean;
}
export interface IEventMemberFilterInput {
    and?: Array<IEventMemberFilterInput>;
    or?: Array<IEventMemberFilterInput>;
    eventId?: IComparableGuidOperationFilterInput;
    event?: IEventFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEventVisibilityOperationFilterInput {
    eq?: IEventVisibility;
    neq?: IEventVisibility;
    in?: Array<IEventVisibility | null>;
    nin?: Array<IEventVisibility | null>;
}
export interface IListFilterInputTypeOfEventChargeFilterInput {
    all?: IEventChargeFilterInput;
    none?: IEventChargeFilterInput;
    some?: IEventChargeFilterInput;
    any?: boolean;
}
export interface IEventChargeFilterInput {
    and?: Array<IEventChargeFilterInput>;
    or?: Array<IEventChargeFilterInput>;
    eventId?: IComparableGuidOperationFilterInput;
    event?: IEventFilterInput;
    price?: IComparableNullableOfDecimalOperationFilterInput;
    description?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IEventTypeFilterInput {
    and?: Array<IEventTypeFilterInput>;
    or?: Array<IEventTypeFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    price?: IComparableNullableOfDecimalOperationFilterInput;
    subEventTypes?: IListFilterInputTypeOfSubEventTypeFilterInput;
    image?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfSubEventTypeFilterInput {
    all?: ISubEventTypeFilterInput;
    none?: ISubEventTypeFilterInput;
    some?: ISubEventTypeFilterInput;
    any?: boolean;
}
export interface ISubEventTypeFilterInput {
    and?: Array<ISubEventTypeFilterInput>;
    or?: Array<ISubEventTypeFilterInput>;
    name?: IStringOperationFilterInput;
    price?: IComparableDecimalOperationFilterInput;
    eventTypes?: IListFilterInputTypeOfEventTypeFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfEventTypeFilterInput {
    all?: IEventTypeFilterInput;
    none?: IEventTypeFilterInput;
    some?: IEventTypeFilterInput;
    any?: boolean;
}
export interface INullableOfEventStatusOperationFilterInput {
    eq?: IEventStatus;
    neq?: IEventStatus;
    in?: Array<IEventStatus | null>;
    nin?: Array<IEventStatus | null>;
}
export interface IEventSortInput {
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    title?: ISortEnumType;
    location?: ISortEnumType;
    color?: ISortEnumType;
    description?: ISortEnumType;
    file?: ISortEnumType;
    roomId?: ISortEnumType;
    eventDate?: ISortEnumType;
    finishDate?: ISortEnumType;
    eventMode?: ISortEnumType;
    eventSessionId?: ISortEnumType;
    eventSession?: IEventSessionSortInput;
    sendDetails?: ISortEnumType;
    sendRemember?: ISortEnumType;
    totalPrice?: ISortEnumType;
    discount?: ISortEnumType;
    visibility?: ISortEnumType;
    eventTypeId?: ISortEnumType;
    eventType?: IEventTypeSortInput;
    eventStatus?: ISortEnumType;
    isActive?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IEventSessionSortInput {
    projectId?: ISortEnumType;
    title?: ISortEnumType;
    image?: ISortEnumType;
    price?: ISortEnumType;
    description?: ISortEnumType;
    duration?: ISortEnumType;
    eventMode?: ISortEnumType;
    event?: IEventSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IEventTypeSortInput {
    projectId?: ISortEnumType;
    name?: ISortEnumType;
    price?: ISortEnumType;
    image?: ISortEnumType;
    description?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IEventCollectionSegment {
    items?: Array<IEvent>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IHiringFilterInput {
    and?: Array<IHiringFilterInput>;
    or?: Array<IHiringFilterInput>;
    projectRoleId?: IComparableNullableOfGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    dateStart?: IComparableNullableOfDateTimeOperationFilterInput;
    dateEnd?: IComparableNullableOfDateTimeOperationFilterInput;
    job?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    amount?: IComparableNullableOfDecimalOperationFilterInput;
    amountWritted?: IStringOperationFilterInput;
    amountPerHour?: IComparableNullableOfDecimalOperationFilterInput;
    vacationDays?: IComparableInt32OperationFilterInput;
    professionalLicense?: IStringOperationFilterInput;
    cURP?: IStringOperationFilterInput;
    iNE?: IStringOperationFilterInput;
    infonavit?: IStringOperationFilterInput;
    nationality?: IStringOperationFilterInput;
    birthNationality?: IStringOperationFilterInput;
    civilState?: INullableOfEnumCivilStateOperationFilterInput;
    benefits?: INullableOfEnumBenefitsOperationFilterInput;
    enumHiringType?: INullableOfEnumHiringTypeOperationFilterInput;
    hiringTypeId?: IComparableNullableOfGuidOperationFilterInput;
    hiringType?: IHiringTypeFilterInput;
    collaborators?: IListFilterInputTypeOfCollaboratorFilterInput;
    hiringServices?: IListFilterInputTypeOfHiringServiceFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumCivilStateOperationFilterInput {
    eq?: IEnumCivilState;
    neq?: IEnumCivilState;
    in?: Array<IEnumCivilState | null>;
    nin?: Array<IEnumCivilState | null>;
}
export interface INullableOfEnumBenefitsOperationFilterInput {
    eq?: IEnumBenefits;
    neq?: IEnumBenefits;
    in?: Array<IEnumBenefits | null>;
    nin?: Array<IEnumBenefits | null>;
}
export interface INullableOfEnumHiringTypeOperationFilterInput {
    eq?: IEnumHiringType;
    neq?: IEnumHiringType;
    in?: Array<IEnumHiringType | null>;
    nin?: Array<IEnumHiringType | null>;
}
export interface IHiringTypeFilterInput {
    and?: Array<IHiringTypeFilterInput>;
    or?: Array<IHiringTypeFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    hirings?: IListFilterInputTypeOfHiringFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfHiringFilterInput {
    all?: IHiringFilterInput;
    none?: IHiringFilterInput;
    some?: IHiringFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfCollaboratorFilterInput {
    all?: ICollaboratorFilterInput;
    none?: ICollaboratorFilterInput;
    some?: ICollaboratorFilterInput;
    any?: boolean;
}
export interface ICollaboratorFilterInput {
    and?: Array<ICollaboratorFilterInput>;
    or?: Array<ICollaboratorFilterInput>;
    hours?: IComparableNullableOfInt32OperationFilterInput;
    costByHour?: IComparableNullableOfDecimalOperationFilterInput;
    role?: IStringOperationFilterInput;
    projectRoleId?: IComparableNullableOfGuidOperationFilterInput;
    timeEstimated?: IStringOperationFilterInput;
    amount?: IComparableNullableOfDecimalOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    reportedHours?: IComparableNullableOfInt32OperationFilterInput;
    resourceQuoteDetailId?: IComparableNullableOfGuidOperationFilterInput;
    hiringId?: IComparableNullableOfGuidOperationFilterInput;
    resourceQuoteDetail?: IResourceQuoteDetailFilterInput;
    hiring?: IHiringFilterInput;
    collaboratorHours?: IListFilterInputTypeOfCollaboratorHoursFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IResourceQuoteDetailFilterInput {
    and?: Array<IResourceQuoteDetailFilterInput>;
    or?: Array<IResourceQuoteDetailFilterInput>;
    title?: IStringOperationFilterInput;
    serviceId?: IComparableGuidOperationFilterInput;
    resourceQuoteId?: IComparableNullableOfGuidOperationFilterInput;
    description?: IStringOperationFilterInput;
    nomenclature?: IStringOperationFilterInput;
    consecutive?: IComparableInt32OperationFilterInput;
    earningPercentage?: IComparableDecimalOperationFilterInput;
    totalCost?: IComparableDecimalOperationFilterInput;
    totalHours?: IComparableInt32OperationFilterInput;
    totalEarnings?: IComparableDecimalOperationFilterInput;
    totalReportedHours?: IComparableInt32OperationFilterInput;
    resourceQuote?: IResourceQuoteFilterInput;
    resourceQuoteDetailBoardRow?: IListFilterInputTypeOfResourceQuoteDetailBoardRowFilterInput;
    collaborators?: IListFilterInputTypeOfCollaboratorFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IResourceQuoteFilterInput {
    and?: Array<IResourceQuoteFilterInput>;
    or?: Array<IResourceQuoteFilterInput>;
    memberId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    title?: IStringOperationFilterInput;
    areaId?: IComparableNullableOfGuidOperationFilterInput;
    approvedDate?: IComparableNullableOfDateTimeOperationFilterInput;
    status?: IEnumResourceQuoteStatusOperationFilterInput;
    totalCostServices?: IComparableDecimalOperationFilterInput;
    totalHoursServices?: IComparableInt32OperationFilterInput;
    totalEarnings?: IComparableDecimalOperationFilterInput;
    totalReportedHours?: IComparableInt32OperationFilterInput;
    calculatedClosingDate?: IComparableNullableOfDateTimeOperationFilterInput;
    resourceQuoteDetails?: IListFilterInputTypeOfResourceQuoteDetailFilterInput;
    proposals?: IListFilterInputTypeOfProposalFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IEnumResourceQuoteStatusOperationFilterInput {
    eq?: IEnumResourceQuoteStatus;
    neq?: IEnumResourceQuoteStatus;
    in?: Array<IEnumResourceQuoteStatus>;
    nin?: Array<IEnumResourceQuoteStatus>;
}
export interface IListFilterInputTypeOfResourceQuoteDetailFilterInput {
    all?: IResourceQuoteDetailFilterInput;
    none?: IResourceQuoteDetailFilterInput;
    some?: IResourceQuoteDetailFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfProposalFilterInput {
    all?: IProposalFilterInput;
    none?: IProposalFilterInput;
    some?: IProposalFilterInput;
    any?: boolean;
}
export interface IProposalFilterInput {
    and?: Array<IProposalFilterInput>;
    or?: Array<IProposalFilterInput>;
    title?: IStringOperationFilterInput;
    state?: IStringOperationFilterInput;
    city?: IStringOperationFilterInput;
    pDF?: IStringOperationFilterInput;
    introduction?: IStringOperationFilterInput;
    summary?: IStringOperationFilterInput;
    methodology?: IStringOperationFilterInput;
    timeEstimate?: IStringOperationFilterInput;
    finishDate?: IComparableNullableOfDateTimeOperationFilterInput;
    discount?: IComparableNullableOfDecimalOperationFilterInput;
    discountType?: INullableOfEnumDiscountOperationFilterInput;
    tax?: IComparableNullableOfDecimalOperationFilterInput;
    taxType?: INullableOfEnumDiscountOperationFilterInput;
    status?: IEnumResourceQuoteStatusOperationFilterInput;
    total?: IComparableDecimalOperationFilterInput;
    resourceQuoteId?: IComparableGuidOperationFilterInput;
    resourceQuote?: IResourceQuoteFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumDiscountOperationFilterInput {
    eq?: IEnumDiscount;
    neq?: IEnumDiscount;
    in?: Array<IEnumDiscount | null>;
    nin?: Array<IEnumDiscount | null>;
}
export interface IListFilterInputTypeOfResourceQuoteDetailBoardRowFilterInput {
    all?: IResourceQuoteDetailBoardRowFilterInput;
    none?: IResourceQuoteDetailBoardRowFilterInput;
    some?: IResourceQuoteDetailBoardRowFilterInput;
    any?: boolean;
}
export interface IResourceQuoteDetailBoardRowFilterInput {
    and?: Array<IResourceQuoteDetailBoardRowFilterInput>;
    or?: Array<IResourceQuoteDetailBoardRowFilterInput>;
    boardRowId?: IComparableGuidOperationFilterInput;
    resourceQuoteDetailId?: IComparableGuidOperationFilterInput;
    resourceQuoteDetail?: IResourceQuoteDetailFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfCollaboratorHoursFilterInput {
    all?: ICollaboratorHoursFilterInput;
    none?: ICollaboratorHoursFilterInput;
    some?: ICollaboratorHoursFilterInput;
    any?: boolean;
}
export interface ICollaboratorHoursFilterInput {
    and?: Array<ICollaboratorHoursFilterInput>;
    or?: Array<ICollaboratorHoursFilterInput>;
    date?: IComparableNullableOfDateTimeOperationFilterInput;
    initialHour?: IStringOperationFilterInput;
    finalHour?: IStringOperationFilterInput;
    totalHours?: IComparableInt32OperationFilterInput;
    collaboratorId?: IComparableGuidOperationFilterInput;
    collaborator?: ICollaboratorFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfHiringServiceFilterInput {
    all?: IHiringServiceFilterInput;
    none?: IHiringServiceFilterInput;
    some?: IHiringServiceFilterInput;
    any?: boolean;
}
export interface IHiringServiceFilterInput {
    and?: Array<IHiringServiceFilterInput>;
    or?: Array<IHiringServiceFilterInput>;
    serviceId?: IComparableGuidOperationFilterInput;
    hiringId?: IComparableGuidOperationFilterInput;
    hiring?: IHiringFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IHiringSortInput {
    projectRoleId?: ISortEnumType;
    memberId?: ISortEnumType;
    dateStart?: ISortEnumType;
    dateEnd?: ISortEnumType;
    job?: ISortEnumType;
    description?: ISortEnumType;
    amount?: ISortEnumType;
    amountWritted?: ISortEnumType;
    amountPerHour?: ISortEnumType;
    vacationDays?: ISortEnumType;
    professionalLicense?: ISortEnumType;
    cURP?: ISortEnumType;
    iNE?: ISortEnumType;
    infonavit?: ISortEnumType;
    nationality?: ISortEnumType;
    birthNationality?: ISortEnumType;
    civilState?: ISortEnumType;
    benefits?: ISortEnumType;
    enumHiringType?: ISortEnumType;
    hiringTypeId?: ISortEnumType;
    hiringType?: IHiringTypeSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IHiringTypeSortInput {
    projectId?: ISortEnumType;
    name?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IShiftFilterInput {
    and?: Array<IShiftFilterInput>;
    or?: Array<IShiftFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    timeStart?: IComparableTimeSpanOperationFilterInput;
    timeEnd?: IComparableTimeSpanOperationFilterInput;
    dayId?: IComparableGuidOperationFilterInput;
    day?: IDayFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IComparableTimeSpanOperationFilterInput {
    eq?: ITimeSpan;
    neq?: ITimeSpan;
    in?: Array<ITimeSpan>;
    nin?: Array<ITimeSpan>;
    gt?: ITimeSpan;
    ngt?: ITimeSpan;
    gte?: ITimeSpan;
    ngte?: ITimeSpan;
    lt?: ITimeSpan;
    nlt?: ITimeSpan;
    lte?: ITimeSpan;
    nlte?: ITimeSpan;
}
export interface IDayFilterInput {
    and?: Array<IDayFilterInput>;
    or?: Array<IDayFilterInput>;
    name?: IStringOperationFilterInput;
    codeDay?: IStringOperationFilterInput;
    shifts?: IListFilterInputTypeOfShiftFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfShiftFilterInput {
    all?: IShiftFilterInput;
    none?: IShiftFilterInput;
    some?: IShiftFilterInput;
    any?: boolean;
}
export interface IShiftSortInput {
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    timeStart?: ISortEnumType;
    timeEnd?: ISortEnumType;
    dayId?: ISortEnumType;
    day?: IDaySortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IDaySortInput {
    name?: ISortEnumType;
    codeDay?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IResourceQuoteSortInput {
    memberId?: ISortEnumType;
    projectId?: ISortEnumType;
    title?: ISortEnumType;
    areaId?: ISortEnumType;
    approvedDate?: ISortEnumType;
    status?: ISortEnumType;
    totalCostServices?: ISortEnumType;
    totalHoursServices?: ISortEnumType;
    totalEarnings?: ISortEnumType;
    totalReportedHours?: ISortEnumType;
    calculatedClosingDate?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IResourceQuoteCollectionSegment {
    items?: Array<IResourceQuote>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IResourceQuoteDetailSortInput {
    title?: ISortEnumType;
    serviceId?: ISortEnumType;
    resourceQuoteId?: ISortEnumType;
    description?: ISortEnumType;
    nomenclature?: ISortEnumType;
    consecutive?: ISortEnumType;
    earningPercentage?: ISortEnumType;
    totalCost?: ISortEnumType;
    totalHours?: ISortEnumType;
    totalEarnings?: ISortEnumType;
    totalReportedHours?: ISortEnumType;
    resourceQuote?: IResourceQuoteSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IResourceQuoteDetailCollectionSegment {
    items?: Array<IResourceQuoteDetail>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IProposalSortInput {
    title?: ISortEnumType;
    state?: ISortEnumType;
    city?: ISortEnumType;
    pDF?: ISortEnumType;
    introduction?: ISortEnumType;
    summary?: ISortEnumType;
    methodology?: ISortEnumType;
    timeEstimate?: ISortEnumType;
    finishDate?: ISortEnumType;
    discount?: ISortEnumType;
    discountType?: ISortEnumType;
    tax?: ISortEnumType;
    taxType?: ISortEnumType;
    status?: ISortEnumType;
    total?: ISortEnumType;
    resourceQuoteId?: ISortEnumType;
    resourceQuote?: IResourceQuoteSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IProposalCollectionSegment {
    items?: Array<IProposal>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ICollaboratorSortInput {
    hours?: ISortEnumType;
    costByHour?: ISortEnumType;
    role?: ISortEnumType;
    projectRoleId?: ISortEnumType;
    timeEstimated?: ISortEnumType;
    amount?: ISortEnumType;
    memberId?: ISortEnumType;
    reportedHours?: ISortEnumType;
    resourceQuoteDetailId?: ISortEnumType;
    hiringId?: ISortEnumType;
    resourceQuoteDetail?: IResourceQuoteDetailSortInput;
    hiring?: IHiringSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ICollaboratorCollectionSegment {
    items?: Array<ICollaborator>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ICollaboratorHoursSortInput {
    date?: ISortEnumType;
    initialHour?: ISortEnumType;
    finalHour?: ISortEnumType;
    totalHours?: ISortEnumType;
    collaboratorId?: ISortEnumType;
    collaborator?: ICollaboratorSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ICollaboratorHoursCollectionSegment {
    items?: Array<ICollaboratorHours>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IHoursReportedDTO {
    totalHours: number;
    totalReportedHours: number;
    projectsActive: number;
}
export declare const enum ITemplateType {
    WHATSAPP = "WHATSAPP",
    PUSH_NOTIFICATION = "PUSH_NOTIFICATION",
    EMAIL = "EMAIL",
    SMS = "SMS",
    CAMPAIGN = "CAMPAIGN",
    WHATSAPP_MESSAGES = "WHATSAPP_MESSAGES"
}
export interface IConfigurationTemplate {
    projectId: IUUID;
    templateType: ITemplateType;
    config: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IComponent {
    keyName: string;
    services: string;
    description: string;
    type: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IWebsitePageSortInput {
    projectId?: ISortEnumType;
    name?: ISortEnumType;
    url?: ISortEnumType;
    seoWebSitePage?: ISortEnumType;
    description?: ISortEnumType;
    isActive?: ISortEnumType;
    scriptHead?: ISortEnumType;
    scriptFooter?: ISortEnumType;
    position?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IWebsitePage {
    projectId: IUUID;
    name?: string;
    url?: string;
    seoWebSitePage?: string;
    description?: string;
    isActive?: boolean;
    scriptHead?: string;
    scriptFooter?: string;
    position: number;
    websitePageComponents?: Array<IWebsitePageComponent>;
    websitePageSeos?: Array<IWebsitePageSeo>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IWebsitePageComponent {
    websitePageId: IUUID;
    websitePage?: IWebsitePage;
    keyName?: string;
    props?: string;
    position: number;
    parentId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IWebsitePageSeo {
    websitePageId: IUUID;
    websitePage?: IWebsitePage;
    title?: string;
    description?: string;
    keywords?: string;
    canonicalUrl?: string;
    robots?: string;
    googlebot?: string;
    author?: string;
    language?: string;
    twitterCard?: string;
    twitterSite?: string;
    twitterCreator?: string;
    twitterTitle?: string;
    twitterDescription?: string;
    twitterUrl?: string;
    twitterImageAlt?: string;
    twitterImageTitle?: string;
    twitterImageWidth?: string;
    twitterImageHeight?: string;
    twitterImage?: string;
    openGraphTitle?: string;
    openGraphDescription?: string;
    openGraphUrl?: string;
    openGraphImageAlt?: string;
    openGraphImageTitle?: string;
    openGraphImageWidth?: string;
    openGraphImageHeight?: string;
    openGraphImage?: string;
    openGraphType?: string;
    openGraphSiteName?: string;
    openGraphFacebookAppId?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProjectPlanSubscriptionFilterInput {
    and?: Array<IProjectPlanSubscriptionFilterInput>;
    or?: Array<IProjectPlanSubscriptionFilterInput>;
    projectPlanId?: IComparableGuidOperationFilterInput;
    projectPlan?: IProjectPlanFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IProjectPlanFilterInput {
    and?: Array<IProjectPlanFilterInput>;
    or?: Array<IProjectPlanFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    title?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    cost?: IComparableDoubleOperationFilterInput;
    serviceProductId?: IStringOperationFilterInput;
    currency?: IStringOperationFilterInput;
    changeNominators?: IStringOperationFilterInput;
    default?: IBooleanOperationFilterInput;
    rateBase?: IBooleanOperationFilterInput;
    frequencyPayment?: IFrequencyPaymentOperationFilterInput;
    availableNominators?: IComparableInt32OperationFilterInput;
    accessExternalNominators?: IBooleanOperationFilterInput;
    accessExternalProspects?: IBooleanOperationFilterInput;
    vendorRakingDisplay?: IBooleanOperationFilterInput;
    accessConnectionProspectsWhatsapp?: IBooleanOperationFilterInput;
    serviceSupport?: IBooleanOperationFilterInput;
    fee?: IComparableInt32OperationFilterInput;
    projectPlanSubscriptions?: IListFilterInputTypeOfProjectPlanSubscriptionFilterInput;
    businessRuleProjectPlans?: IListFilterInputTypeOfBusinessRuleProjectPlanFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IFrequencyPaymentOperationFilterInput {
    eq?: IFrequencyPayment;
    neq?: IFrequencyPayment;
    in?: Array<IFrequencyPayment>;
    nin?: Array<IFrequencyPayment>;
}
export interface IListFilterInputTypeOfProjectPlanSubscriptionFilterInput {
    all?: IProjectPlanSubscriptionFilterInput;
    none?: IProjectPlanSubscriptionFilterInput;
    some?: IProjectPlanSubscriptionFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfBusinessRuleProjectPlanFilterInput {
    all?: IBusinessRuleProjectPlanFilterInput;
    none?: IBusinessRuleProjectPlanFilterInput;
    some?: IBusinessRuleProjectPlanFilterInput;
    any?: boolean;
}
export interface IBusinessRuleProjectPlanFilterInput {
    and?: Array<IBusinessRuleProjectPlanFilterInput>;
    or?: Array<IBusinessRuleProjectPlanFilterInput>;
    businessRuleId?: IComparableGuidOperationFilterInput;
    businessId?: IComparableNullableOfGuidOperationFilterInput;
    bussines?: IBusinessFilterInput;
    businessRule?: IBusinessRuleFilterInput;
    projectPlanId?: IComparableGuidOperationFilterInput;
    projectPlan?: IProjectPlanFilterInput;
    commission?: IStringOperationFilterInput;
    commissionSell?: IStringOperationFilterInput;
    commissionProspect?: IStringOperationFilterInput;
    commissionInterested?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IBusinessFilterInput {
    and?: Array<IBusinessFilterInput>;
    or?: Array<IBusinessFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    slogan?: IStringOperationFilterInput;
    image?: IStringOperationFilterInput;
    businessTypeId?: IComparableNullableOfGuidOperationFilterInput;
    businessType?: IBusinessTypeFilterInput;
    businessRuleProjectPlans?: IListFilterInputTypeOfBusinessRuleProjectPlanFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IBusinessTypeFilterInput {
    and?: Array<IBusinessTypeFilterInput>;
    or?: Array<IBusinessTypeFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    image?: IStringOperationFilterInput;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IBusinessRuleFilterInput {
    and?: Array<IBusinessRuleFilterInput>;
    or?: Array<IBusinessRuleFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    businessId?: IComparableNullableOfGuidOperationFilterInput;
    business?: IBusinessFilterInput;
    title?: IStringOperationFilterInput;
    commissionNominator?: IStringOperationFilterInput;
    potentialProspectLimit?: IComparableNullableOfInt32OperationFilterInput;
    allowExtraBonus?: IBooleanOperationFilterInput;
    minimumBalance?: IComparableNullableOfDoubleOperationFilterInput;
    idealBalance?: IComparableNullableOfDoubleOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IProjectPlanSubscriptionCollectionSegment {
    items?: Array<IProjectPlanSubscription>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IBusinessCollectionSegment {
    items?: Array<IBusiness>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IBusinessTypeCollectionSegment {
    items?: Array<IBusinessType>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IBusinessRuleCollectionSegment {
    items?: Array<IBusinessRule>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IProjectPlanCollectionSegment {
    items?: Array<IProjectPlan>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ITemplateFilterInput {
    and?: Array<ITemplateFilterInput>;
    or?: Array<ITemplateFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    title?: IStringOperationFilterInput;
    message?: IStringOperationFilterInput;
    serviceName?: IStringOperationFilterInput;
    projectRoleId?: IComparableNullableOfGuidOperationFilterInput;
    templateType?: ITemplateTypeOperationFilterInput;
    releaseDate?: IComparableDateTimeOperationFilterInput;
    couponId?: IComparableNullableOfGuidOperationFilterInput;
    coupon?: ICouponFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ITemplateTypeOperationFilterInput {
    eq?: ITemplateType;
    neq?: ITemplateType;
    in?: Array<ITemplateType>;
    nin?: Array<ITemplateType>;
}
export interface ICouponFilterInput {
    and?: Array<ICouponFilterInput>;
    or?: Array<ICouponFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    beginingDate?: IComparableDateTimeOperationFilterInput;
    endDate?: IComparableDateTimeOperationFilterInput;
    code?: IStringOperationFilterInput;
    roleType?: INullableOfRoleTypeOperationFilterInput;
    couponRuleType?: ICouponRuleTypeOperationFilterInput;
    itemToApplyTo?: IComparableNullableOfGuidOperationFilterInput;
    title?: IStringOperationFilterInput;
    percentage?: IComparableDoubleOperationFilterInput;
    ruleAppliesOn?: IRuleAppliesOnOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfRoleTypeOperationFilterInput {
    eq?: IRoleType;
    neq?: IRoleType;
    in?: Array<IRoleType | null>;
    nin?: Array<IRoleType | null>;
}
export declare const enum IRoleType {
    NOMINATOR = "NOMINATOR",
    SELLER = "SELLER",
    PROSPECT = "PROSPECT"
}
export interface ICouponRuleTypeOperationFilterInput {
    eq?: ICouponRuleType;
    neq?: ICouponRuleType;
    in?: Array<ICouponRuleType>;
    nin?: Array<ICouponRuleType>;
}
export declare const enum ICouponRuleType {
    FIXED_AMOUNT = "FIXED_AMOUNT",
    DISCOUNT = "DISCOUNT"
}
export interface IRuleAppliesOnOperationFilterInput {
    eq?: IRuleAppliesOn;
    neq?: IRuleAppliesOn;
    in?: Array<IRuleAppliesOn>;
    nin?: Array<IRuleAppliesOn>;
}
export declare const enum IRuleAppliesOn {
    MEMBERSHIP = "MEMBERSHIP",
    PRODUCT = "PRODUCT",
    CATEGORIES = "CATEGORIES"
}
export interface ITemplate {
    projectId: IUUID;
    title: string;
    message?: string;
    serviceName?: string;
    projectRoleId?: IUUID;
    templateType: ITemplateType;
    releaseDate: IDateTime;
    couponId?: IUUID;
    coupon?: ICoupon;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    projectRole?: IProjectRole;
}
export interface ICoupon {
    projectId: IUUID;
    beginingDate: IDateTime;
    endDate: IDateTime;
    code?: string;
    roleType?: IRoleType;
    couponRuleType: ICouponRuleType;
    itemToApplyTo?: IUUID;
    title?: string;
    percentage: number;
    ruleAppliesOn: IRuleAppliesOn;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IErrorPageFilterInput {
    and?: Array<IErrorPageFilterInput>;
    or?: Array<IErrorPageFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    page?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    errorPageValidations?: IListFilterInputTypeOfErrorPageValidationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfErrorPageValidationFilterInput {
    all?: IErrorPageValidationFilterInput;
    none?: IErrorPageValidationFilterInput;
    some?: IErrorPageValidationFilterInput;
    any?: boolean;
}
export interface IErrorPageValidationFilterInput {
    and?: Array<IErrorPageValidationFilterInput>;
    or?: Array<IErrorPageValidationFilterInput>;
    errorPageId?: IComparableGuidOperationFilterInput;
    errorPage?: IErrorPageFilterInput;
    keyName?: IStringOperationFilterInput;
    title?: IStringOperationFilterInput;
    textMessage?: IStringOperationFilterInput;
    textAccept?: IStringOperationFilterInput;
    textCancel?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IErrorPage {
    projectId: IUUID;
    page: string;
    description?: string;
    errorPageValidations?: Array<IErrorPageValidation>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IErrorPageValidation {
    errorPageId: IUUID;
    errorPage: IErrorPage;
    keyName: string;
    title?: string;
    textMessage?: string;
    textAccept?: string;
    textCancel?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICouponTemplateFilterInput {
    and?: Array<ICouponTemplateFilterInput>;
    or?: Array<ICouponTemplateFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    templateId?: IComparableGuidOperationFilterInput;
    couponId?: IComparableGuidOperationFilterInput;
    template?: ITemplateFilterInput;
    coupon?: ICouponFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ICouponTemplate {
    projectId: IUUID;
    templateId: IUUID;
    couponId: IUUID;
    template?: ITemplate;
    coupon?: ICoupon;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDocumentCategoryFilterInput {
    and?: Array<IDocumentCategoryFilterInput>;
    or?: Array<IDocumentCategoryFilterInput>;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    documentCategoryDetails?: IListFilterInputTypeOfDocumentCategoryDetailFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfDocumentCategoryDetailFilterInput {
    all?: IDocumentCategoryDetailFilterInput;
    none?: IDocumentCategoryDetailFilterInput;
    some?: IDocumentCategoryDetailFilterInput;
    any?: boolean;
}
export interface IDocumentCategoryDetailFilterInput {
    and?: Array<IDocumentCategoryDetailFilterInput>;
    or?: Array<IDocumentCategoryDetailFilterInput>;
    documentId?: IComparableGuidOperationFilterInput;
    documentCategoryId?: IComparableGuidOperationFilterInput;
    document?: IDocumentFilterInput;
    documentCategory?: IDocumentCategoryFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IDocumentFilterInput {
    and?: Array<IDocumentFilterInput>;
    or?: Array<IDocumentFilterInput>;
    name?: IStringOperationFilterInput;
    url?: IStringOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    documentTemplates?: IListFilterInputTypeOfDocumentTemplateFilterInput;
    documentCategoryDetails?: IListFilterInputTypeOfDocumentCategoryDetailFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfDocumentTemplateFilterInput {
    all?: IDocumentTemplateFilterInput;
    none?: IDocumentTemplateFilterInput;
    some?: IDocumentTemplateFilterInput;
    any?: boolean;
}
export interface IDocumentTemplateFilterInput {
    and?: Array<IDocumentTemplateFilterInput>;
    or?: Array<IDocumentTemplateFilterInput>;
    name?: IStringOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    documentId?: IComparableNullableOfGuidOperationFilterInput;
    document?: IDocumentFilterInput;
    templatePages?: IListFilterInputTypeOfTemplatePageFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfTemplatePageFilterInput {
    all?: ITemplatePageFilterInput;
    none?: ITemplatePageFilterInput;
    some?: ITemplatePageFilterInput;
    any?: boolean;
}
export interface ITemplatePageFilterInput {
    and?: Array<ITemplatePageFilterInput>;
    or?: Array<ITemplatePageFilterInput>;
    page?: IComparableNullableOfInt32OperationFilterInput;
    url?: IStringOperationFilterInput;
    templateId?: IComparableNullableOfGuidOperationFilterInput;
    documentTemplate?: IDocumentTemplateFilterInput;
    documentTags?: IListFilterInputTypeOfDocumentTagFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfDocumentTagFilterInput {
    all?: IDocumentTagFilterInput;
    none?: IDocumentTagFilterInput;
    some?: IDocumentTagFilterInput;
    any?: boolean;
}
export interface IDocumentTagFilterInput {
    and?: Array<IDocumentTagFilterInput>;
    or?: Array<IDocumentTagFilterInput>;
    name?: IStringOperationFilterInput;
    height?: IComparableNullableOfDecimalOperationFilterInput;
    width?: IComparableNullableOfDecimalOperationFilterInput;
    verticalAxis?: IComparableNullableOfDecimalOperationFilterInput;
    horizontalAxis?: IComparableNullableOfDecimalOperationFilterInput;
    templatePageId?: IComparableNullableOfGuidOperationFilterInput;
    templatePage?: ITemplatePageFilterInput;
    documentScans?: IListFilterInputTypeOfDocumentScanFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfDocumentScanFilterInput {
    all?: IDocumentScanFilterInput;
    none?: IDocumentScanFilterInput;
    some?: IDocumentScanFilterInput;
    any?: boolean;
}
export interface IDocumentScanFilterInput {
    and?: Array<IDocumentScanFilterInput>;
    or?: Array<IDocumentScanFilterInput>;
    value?: IStringOperationFilterInput;
    documentTagId?: IComparableNullableOfGuidOperationFilterInput;
    documentReadId?: IComparableNullableOfGuidOperationFilterInput;
    documentTag?: IDocumentTagFilterInput;
    documentRead?: IDocumentReadFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IDocumentReadFilterInput {
    and?: Array<IDocumentReadFilterInput>;
    or?: Array<IDocumentReadFilterInput>;
    memberId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    url?: IStringOperationFilterInput;
    documentScans?: IListFilterInputTypeOfDocumentScanFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IDocumentCategorySortInput {
    name?: ISortEnumType;
    description?: ISortEnumType;
    memberId?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IDocumentCategoryCollectionSegment {
    items?: Array<IDocumentCategory>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IDocumentCategory {
    documentCategoryDetails: Array<IDocumentCategoryDetail>;
    name?: string;
    description?: string;
    memberId: IUUID;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDocumentCategoryDetail {
    documentCategory?: IDocumentCategory;
    document?: IDocument;
    documentId: IUUID;
    documentCategoryId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDocument {
    documentTemplates: Array<IDocumentTemplate>;
    documentCategoryDetails: Array<IDocumentCategoryDetail>;
    name?: string;
    url?: string;
    memberId: IUUID;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDocumentTemplate {
    document?: IDocument;
    templatePages: Array<ITemplatePage>;
    name?: string;
    memberId: IUUID;
    documentId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ITemplatePage {
    documentTemplate?: IDocumentTemplate;
    documentTags: Array<IDocumentTag>;
    page?: number;
    url?: string;
    templateId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDocumentTag {
    templatePage?: ITemplatePage;
    documentScans: Array<IDocumentScan>;
    name?: string;
    height?: IDecimal;
    width?: IDecimal;
    verticalAxis?: IDecimal;
    horizontalAxis?: IDecimal;
    templatePageId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDocumentScan {
    documentTag?: IDocumentTag;
    documentRead?: IDocumentRead;
    value?: string;
    documentTagId?: IUUID;
    documentReadId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDocumentRead {
    documentScans?: Array<IDocumentScan>;
    memberId?: IUUID;
    projectId?: IUUID;
    url?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDocumentCategoryDetailSortInput {
    documentId?: ISortEnumType;
    documentCategoryId?: ISortEnumType;
    document?: IDocumentSortInput;
    documentCategory?: IDocumentCategorySortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IDocumentSortInput {
    name?: ISortEnumType;
    url?: ISortEnumType;
    memberId?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IDocumentCollectionSegment {
    items?: Array<IDocument>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IDocumentTemplateSortInput {
    name?: ISortEnumType;
    memberId?: ISortEnumType;
    documentId?: ISortEnumType;
    document?: IDocumentSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IDocumentTemplateCollectionSegment {
    items?: Array<IDocumentTemplate>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ITemplatePageSortInput {
    page?: ISortEnumType;
    url?: ISortEnumType;
    templateId?: ISortEnumType;
    documentTemplate?: IDocumentTemplateSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ITemplatePageCollectionSegment {
    items?: Array<ITemplatePage>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IDocumentTagSortInput {
    name?: ISortEnumType;
    height?: ISortEnumType;
    width?: ISortEnumType;
    verticalAxis?: ISortEnumType;
    horizontalAxis?: ISortEnumType;
    templatePageId?: ISortEnumType;
    templatePage?: ITemplatePageSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IDocumentScanSortInput {
    value?: ISortEnumType;
    documentTagId?: ISortEnumType;
    documentReadId?: ISortEnumType;
    documentTag?: IDocumentTagSortInput;
    documentRead?: IDocumentReadSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IDocumentReadSortInput {
    memberId?: ISortEnumType;
    projectId?: ISortEnumType;
    url?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IDocumentReadCollectionSegment {
    items?: Array<IDocumentRead>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IVideoRoom {
    projectId: IUUID;
    sessionId?: string;
    sessionName?: string;
    url?: string;
    creatorName?: string;
    creatorEmail?: string;
    dateScheduled?: IDateTime;
    title?: string;
    memberId?: IUUID;
    typeVideo?: ITypeVideo;
    videoRoomMembers?: Array<IVideoRoomMember>;
    videoRoomRecords?: Array<IVideoRoomRecord>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum ITypeVideo {
    STREAM = "STREAM",
    MEET = "MEET"
}
export interface IVideoRoomMember {
    videoRoomId: IUUID;
    videoRoom?: IVideoRoom;
    fullName?: string;
    email?: string;
    photo?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IVideoRoomRecord {
    roomName: string;
    memberId?: IUUID;
    status?: IEnumRecordStatus;
    name?: string;
    path: string;
    livekitRecordingId: string;
    videoRoomId: IUUID;
    videoRoom?: IVideoRoom;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IEnumRecordStatus {
    IN_PROGRESS = "IN_PROGRESS",
    FINISHED = "FINISHED"
}
export interface IRoomTokenLiveKit2 {
    createtAt: IDateTime;
    roomName?: string;
    token?: string;
    participantIdentity?: string;
}
export interface IVideoCall {
    projectId: IUUID;
    memberId: IUUID;
    sessionId: string;
    sessionName: string;
    url?: string;
    members: Array<IVideoCallMember>;
    services: Array<IVideoCallService>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IVideoCallMember {
    videoCallId: IUUID;
    videoCall: IVideoCall;
    memberId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IVideoCallService {
    videoCallId: IUUID;
    videoCall: IVideoCall;
    serviceCode: string;
    viewAdmin: boolean;
    viewUser: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IVideo {
    sessionId: string;
    token: string;
    videoCall: IVideoCall;
}
export interface IContactEmail {
    fullName: string;
    email: string;
    sendGridKey: string;
    fromEmail: string;
    fromName: string;
    sendGridTemplateId?: string;
    description: string;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IServiceFilterInput {
    and?: Array<IServiceFilterInput>;
    or?: Array<IServiceFilterInput>;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    code?: IStringOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    areaId?: IComparableGuidOperationFilterInput;
    area?: IAreaFilterInput;
    serviceQuizes?: IListFilterInputTypeOfServiceQuizFilterInput;
    serviceMembers?: IListFilterInputTypeOfServiceMemberFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IAreaFilterInput {
    and?: Array<IAreaFilterInput>;
    or?: Array<IAreaFilterInput>;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    code?: IStringOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    services?: IListFilterInputTypeOfServiceFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfServiceFilterInput {
    all?: IServiceFilterInput;
    none?: IServiceFilterInput;
    some?: IServiceFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfServiceQuizFilterInput {
    all?: IServiceQuizFilterInput;
    none?: IServiceQuizFilterInput;
    some?: IServiceQuizFilterInput;
    any?: boolean;
}
export interface IServiceQuizFilterInput {
    and?: Array<IServiceQuizFilterInput>;
    or?: Array<IServiceQuizFilterInput>;
    serviceId?: IComparableGuidOperationFilterInput;
    quizId?: IComparableGuidOperationFilterInput;
    service?: IServiceFilterInput;
    quiz?: IQuizFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IQuizFilterInput {
    and?: Array<IQuizFilterInput>;
    or?: Array<IQuizFilterInput>;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    note?: IStringOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    answerableOnlyOnce?: IBooleanOperationFilterInput;
    maxTimesAnswerable?: IComparableNullableOfInt32OperationFilterInput;
    mailInterviewed?: IBooleanOperationFilterInput;
    mailCreator?: IBooleanOperationFilterInput;
    saveSend?: IBooleanOperationFilterInput;
    tagPosition?: INullableOfEnumTagPositionOperationFilterInput;
    quizStatus?: INullableOfEnumOnlineQuizStatusOperationFilterInput;
    quizMembers?: IListFilterInputTypeOfQuizMemberFilterInput;
    serviceQuizes?: IListFilterInputTypeOfServiceQuizFilterInput;
    quizSections?: IListFilterInputTypeOfQuizSectionFilterInput;
    timesAnswered?: IComparableNullableOfInt32OperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumTagPositionOperationFilterInput {
    eq?: IEnumTagPosition;
    neq?: IEnumTagPosition;
    in?: Array<IEnumTagPosition | null>;
    nin?: Array<IEnumTagPosition | null>;
}
export interface INullableOfEnumOnlineQuizStatusOperationFilterInput {
    eq?: IEnumOnlineQuizStatus;
    neq?: IEnumOnlineQuizStatus;
    in?: Array<IEnumOnlineQuizStatus | null>;
    nin?: Array<IEnumOnlineQuizStatus | null>;
}
export interface IListFilterInputTypeOfQuizMemberFilterInput {
    all?: IQuizMemberFilterInput;
    none?: IQuizMemberFilterInput;
    some?: IQuizMemberFilterInput;
    any?: boolean;
}
export interface IQuizMemberFilterInput {
    and?: Array<IQuizMemberFilterInput>;
    or?: Array<IQuizMemberFilterInput>;
    quizId?: IComparableGuidOperationFilterInput;
    email?: IStringOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    memberId?: IComparableNullableOfGuidOperationFilterInput;
    quizStatus?: INullableOfEnumQuizStatusOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    quiz?: IQuizFilterInput;
    quizQuestionMembers?: IListFilterInputTypeOfQuizQuestionMemberFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumQuizStatusOperationFilterInput {
    eq?: IEnumQuizStatus;
    neq?: IEnumQuizStatus;
    in?: Array<IEnumQuizStatus | null>;
    nin?: Array<IEnumQuizStatus | null>;
}
export interface IListFilterInputTypeOfQuizQuestionMemberFilterInput {
    all?: IQuizQuestionMemberFilterInput;
    none?: IQuizQuestionMemberFilterInput;
    some?: IQuizQuestionMemberFilterInput;
    any?: boolean;
}
export interface IQuizQuestionMemberFilterInput {
    and?: Array<IQuizQuestionMemberFilterInput>;
    or?: Array<IQuizQuestionMemberFilterInput>;
    quizMemberId?: IComparableGuidOperationFilterInput;
    quizQuestionId?: IComparableGuidOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    quizQuestion?: IQuizQuestionFilterInput;
    quizMember?: IQuizMemberFilterInput;
    quizMemberAnswers?: IListFilterInputTypeOfQuizMemberAnswerFilterInput;
    quizMemberDescriptions?: IListFilterInputTypeOfQuizMemberDescriptionFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IQuizQuestionFilterInput {
    and?: Array<IQuizQuestionFilterInput>;
    or?: Array<IQuizQuestionFilterInput>;
    question?: IStringOperationFilterInput;
    questionType?: IQuestionTypeOperationFilterInput;
    description?: IStringOperationFilterInput;
    helpText?: IStringOperationFilterInput;
    placeHolder?: IStringOperationFilterInput;
    required?: IBooleanOperationFilterInput;
    requireConfimation?: IBooleanOperationFilterInput;
    maxCharacters?: IComparableNullableOfInt32OperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    tagPosition?: IEnumTagPositionOperationFilterInput;
    order?: IComparableNullableOfInt32OperationFilterInput;
    active?: IBooleanOperationFilterInput;
    quizSectionId?: IComparableGuidOperationFilterInput;
    quizSection?: IQuizSectionFilterInput;
    quizQuestionPrefabId?: IComparableNullableOfGuidOperationFilterInput;
    quizQuestionPrefab?: IQuizQuestionPrefabFilterInput;
    quizQuestionNesteds?: IListFilterInputTypeOfQuizQuestionNestedFilterInput;
    quizQuestionAnswers?: IListFilterInputTypeOfQuizQuestionAnswerFilterInput;
    quizQuestionMembers?: IListFilterInputTypeOfQuizQuestionMemberFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IEnumTagPositionOperationFilterInput {
    eq?: IEnumTagPosition;
    neq?: IEnumTagPosition;
    in?: Array<IEnumTagPosition>;
    nin?: Array<IEnumTagPosition>;
}
export interface IQuizSectionFilterInput {
    and?: Array<IQuizSectionFilterInput>;
    or?: Array<IQuizSectionFilterInput>;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    order?: IComparableNullableOfInt32OperationFilterInput;
    quizId?: IComparableGuidOperationFilterInput;
    quiz?: IQuizFilterInput;
    quizQuestions?: IListFilterInputTypeOfQuizQuestionFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfQuizQuestionFilterInput {
    all?: IQuizQuestionFilterInput;
    none?: IQuizQuestionFilterInput;
    some?: IQuizQuestionFilterInput;
    any?: boolean;
}
export interface IQuizQuestionPrefabFilterInput {
    and?: Array<IQuizQuestionPrefabFilterInput>;
    or?: Array<IQuizQuestionPrefabFilterInput>;
    name?: IStringOperationFilterInput;
    icon?: IStringOperationFilterInput;
    code?: IStringOperationFilterInput;
    quizQuestionPrefabGroupId?: IComparableNullableOfGuidOperationFilterInput;
    quizQuestionPrefabGroup?: IQuizQuestionPrefabGroupFilterInput;
    quizQuestions?: IListFilterInputTypeOfQuizQuestionFilterInput;
    quizQuestionPrefabFeatureds?: IListFilterInputTypeOfQuizQuestionPrefabFeaturedFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IQuizQuestionPrefabGroupFilterInput {
    and?: Array<IQuizQuestionPrefabGroupFilterInput>;
    or?: Array<IQuizQuestionPrefabGroupFilterInput>;
    name?: IStringOperationFilterInput;
    quizQuestionPrefabs?: IListFilterInputTypeOfQuizQuestionPrefabFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfQuizQuestionPrefabFilterInput {
    all?: IQuizQuestionPrefabFilterInput;
    none?: IQuizQuestionPrefabFilterInput;
    some?: IQuizQuestionPrefabFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfQuizQuestionPrefabFeaturedFilterInput {
    all?: IQuizQuestionPrefabFeaturedFilterInput;
    none?: IQuizQuestionPrefabFeaturedFilterInput;
    some?: IQuizQuestionPrefabFeaturedFilterInput;
    any?: boolean;
}
export interface IQuizQuestionPrefabFeaturedFilterInput {
    and?: Array<IQuizQuestionPrefabFeaturedFilterInput>;
    or?: Array<IQuizQuestionPrefabFeaturedFilterInput>;
    outstand?: IBooleanOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    quizQuestionPrefabId?: IComparableNullableOfGuidOperationFilterInput;
    quizQuestionPrefab?: IQuizQuestionPrefabFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfQuizQuestionNestedFilterInput {
    all?: IQuizQuestionNestedFilterInput;
    none?: IQuizQuestionNestedFilterInput;
    some?: IQuizQuestionNestedFilterInput;
    any?: boolean;
}
export interface IQuizQuestionNestedFilterInput {
    and?: Array<IQuizQuestionNestedFilterInput>;
    or?: Array<IQuizQuestionNestedFilterInput>;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    url?: IStringOperationFilterInput;
    show?: IBooleanOperationFilterInput;
    order?: IComparableNullableOfInt32OperationFilterInput;
    quizQuestionId?: IComparableGuidOperationFilterInput;
    quizQuestion?: IQuizQuestionFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfQuizQuestionAnswerFilterInput {
    all?: IQuizQuestionAnswerFilterInput;
    none?: IQuizQuestionAnswerFilterInput;
    some?: IQuizQuestionAnswerFilterInput;
    any?: boolean;
}
export interface IQuizQuestionAnswerFilterInput {
    and?: Array<IQuizQuestionAnswerFilterInput>;
    or?: Array<IQuizQuestionAnswerFilterInput>;
    quizQuestionId?: IComparableGuidOperationFilterInput;
    quizAnswerId?: IComparableGuidOperationFilterInput;
    order?: IComparableNullableOfInt32OperationFilterInput;
    value?: IStringOperationFilterInput;
    calc?: IComparableNullableOfInt32OperationFilterInput;
    quizQuestion?: IQuizQuestionFilterInput;
    quizAnswer?: IQuizAnswerFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IQuizAnswerFilterInput {
    and?: Array<IQuizAnswerFilterInput>;
    or?: Array<IQuizAnswerFilterInput>;
    description?: IStringOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    quizQuestionAnswers?: IListFilterInputTypeOfQuizQuestionAnswerFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfQuizMemberAnswerFilterInput {
    all?: IQuizMemberAnswerFilterInput;
    none?: IQuizMemberAnswerFilterInput;
    some?: IQuizMemberAnswerFilterInput;
    any?: boolean;
}
export interface IQuizMemberAnswerFilterInput {
    and?: Array<IQuizMemberAnswerFilterInput>;
    or?: Array<IQuizMemberAnswerFilterInput>;
    quizQuestionMemberId?: IComparableGuidOperationFilterInput;
    quizAnswerId?: IComparableGuidOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    quizAnswer?: IQuizAnswerFilterInput;
    quizQuestionMember?: IQuizQuestionMemberFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfQuizMemberDescriptionFilterInput {
    all?: IQuizMemberDescriptionFilterInput;
    none?: IQuizMemberDescriptionFilterInput;
    some?: IQuizMemberDescriptionFilterInput;
    any?: boolean;
}
export interface IQuizMemberDescriptionFilterInput {
    and?: Array<IQuizMemberDescriptionFilterInput>;
    or?: Array<IQuizMemberDescriptionFilterInput>;
    quizQuestionMemberId?: IComparableGuidOperationFilterInput;
    description?: IStringOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    quizQuestionMember?: IQuizQuestionMemberFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfQuizSectionFilterInput {
    all?: IQuizSectionFilterInput;
    none?: IQuizSectionFilterInput;
    some?: IQuizSectionFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfServiceMemberFilterInput {
    all?: IServiceMemberFilterInput;
    none?: IServiceMemberFilterInput;
    some?: IServiceMemberFilterInput;
    any?: boolean;
}
export interface IServiceMemberFilterInput {
    and?: Array<IServiceMemberFilterInput>;
    or?: Array<IServiceMemberFilterInput>;
    memberId?: IComparableGuidOperationFilterInput;
    serviceId?: IComparableGuidOperationFilterInput;
    service?: IServiceFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IServiceSortInput {
    name?: ISortEnumType;
    description?: ISortEnumType;
    code?: ISortEnumType;
    active?: ISortEnumType;
    areaId?: ISortEnumType;
    area?: IAreaSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IAreaSortInput {
    name?: ISortEnumType;
    description?: ISortEnumType;
    code?: ISortEnumType;
    active?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IServiceCollectionSegment {
    items?: Array<IServiceArea>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IAreaCollectionSegment {
    items?: Array<IArea>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IServiceQuizSortInput {
    serviceId?: ISortEnumType;
    quizId?: ISortEnumType;
    service?: IServiceSortInput;
    quiz?: IQuizSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IQuizSortInput {
    name?: ISortEnumType;
    description?: ISortEnumType;
    note?: ISortEnumType;
    projectId?: ISortEnumType;
    answerableOnlyOnce?: ISortEnumType;
    maxTimesAnswerable?: ISortEnumType;
    mailInterviewed?: ISortEnumType;
    mailCreator?: ISortEnumType;
    saveSend?: ISortEnumType;
    tagPosition?: ISortEnumType;
    quizStatus?: ISortEnumType;
    timesAnswered?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IServiceQuizCollectionSegment {
    items?: Array<IServiceQuiz>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IQuizCollectionSegment {
    items?: Array<IQuiz>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IQuizSectionSortInput {
    name?: ISortEnumType;
    description?: ISortEnumType;
    order?: ISortEnumType;
    quizId?: ISortEnumType;
    quiz?: IQuizSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IQuizSectionCollectionSegment {
    items?: Array<IQuizSection>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IQuizQuestionSortInput {
    question?: ISortEnumType;
    questionType?: ISortEnumType;
    description?: ISortEnumType;
    helpText?: ISortEnumType;
    placeHolder?: ISortEnumType;
    required?: ISortEnumType;
    requireConfimation?: ISortEnumType;
    maxCharacters?: ISortEnumType;
    memberId?: ISortEnumType;
    tagPosition?: ISortEnumType;
    order?: ISortEnumType;
    active?: ISortEnumType;
    quizSectionId?: ISortEnumType;
    quizSection?: IQuizSectionSortInput;
    quizQuestionPrefabId?: ISortEnumType;
    quizQuestionPrefab?: IQuizQuestionPrefabSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IQuizQuestionPrefabSortInput {
    name?: ISortEnumType;
    icon?: ISortEnumType;
    code?: ISortEnumType;
    quizQuestionPrefabGroupId?: ISortEnumType;
    quizQuestionPrefabGroup?: IQuizQuestionPrefabGroupSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IQuizQuestionPrefabGroupSortInput {
    name?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IQuizQuestionCollectionSegment {
    items?: Array<IQuizQuestion>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IQuizQuestionAnswerSortInput {
    quizQuestionId?: ISortEnumType;
    quizAnswerId?: ISortEnumType;
    order?: ISortEnumType;
    value?: ISortEnumType;
    calc?: ISortEnumType;
    quizQuestion?: IQuizQuestionSortInput;
    quizAnswer?: IQuizAnswerSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IQuizAnswerSortInput {
    description?: ISortEnumType;
    active?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IQuizQuestionAnswerCollectionSegment {
    items?: Array<IQuizQuestionAnswer>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IQuizAnswerCollectionSegment {
    items?: Array<IQuizAnswer>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IQuizMemberSortInput {
    quizId?: ISortEnumType;
    email?: ISortEnumType;
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    quizStatus?: ISortEnumType;
    active?: ISortEnumType;
    quiz?: IQuizSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IQuizMemberCollectionSegment {
    items?: Array<IQuizMember>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IQuizMemberGroupedFilterInput {
    and?: Array<IQuizMemberGroupedFilterInput>;
    or?: Array<IQuizMemberGroupedFilterInput>;
    quizMembers?: IListFilterInputTypeOfQuizMemberFilterInput;
    mail?: IStringOperationFilterInput;
    manyTimes?: IComparableInt32OperationFilterInput;
}
export interface IQuizMemberGroupedSortInput {
    mail?: ISortEnumType;
    manyTimes?: ISortEnumType;
}
export interface IQuizMemberGroupedCollectionSegment {
    items?: Array<IQuizMemberGrouped>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IQuizMemberGrouped {
    quizMembers: Array<IQuizMember>;
    mail: string;
    manyTimes: number;
}
export interface IQuizQuestionMemberSortInput {
    quizMemberId?: ISortEnumType;
    quizQuestionId?: ISortEnumType;
    active?: ISortEnumType;
    quizQuestion?: IQuizQuestionSortInput;
    quizMember?: IQuizMemberSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IQuizQuestionMemberCollectionSegment {
    items?: Array<IQuizQuestionMember>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IQuizMemberAnswerSortInput {
    quizQuestionMemberId?: ISortEnumType;
    quizAnswerId?: ISortEnumType;
    active?: ISortEnumType;
    quizAnswer?: IQuizAnswerSortInput;
    quizQuestionMember?: IQuizQuestionMemberSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IQuizMemberAnswerCollectionSegment {
    items?: Array<IQuizMemberAnswer>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IQuizMemberDescriptionSortInput {
    quizQuestionMemberId?: ISortEnumType;
    description?: ISortEnumType;
    active?: ISortEnumType;
    quizQuestionMember?: IQuizQuestionMemberSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IQuizMemberDescriptionCollectionSegment {
    items?: Array<IQuizMemberDescription>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export declare const enum IEnumNameCatalog {
    BRAND = "BRAND",
    SUB_BRAND = "SUB_BRAND",
    MODEL = "MODEL",
    DESCRIPTION_MODEL = "DESCRIPTION_MODEL",
    SEPOMEX = "SEPOMEX",
    OCCUPATION = "OCCUPATION",
    BANK = "BANK",
    INSURER_SUBBRAND = "INSURER_SUBBRAND",
    FISCAL_REGIME_INSURER_SUBBRANCH = "FISCAL_REGIME_INSURER_SUBBRANCH"
}
export interface ICatalog {
    catalogoJsonString?: string;
    error?: IErrors;
}
export interface IErrors {
    numero?: number;
    descripcion?: string;
}
export interface IQuotationResponse {
    jsonCotizacion?: Array<string>;
    estatus?: number;
    idCotizacion?: number;
    error?: IErrors;
}
export declare const enum IEnumFormsPayment {
    CASH_PAYMENT = "CASH_PAYMENT",
    BIANNUAL = "BIANNUAL",
    QUARTERLY = "QUARTERLY",
    MONTHLY = "MONTHLY"
}
export interface ICoverage {
    cotizacionId?: number;
    agente?: string;
    telefono?: string;
    email?: string;
    subramo?: string;
    detallesPorAseguradora?: Array<IDetailsInsurer>;
}
export interface IDetailsInsurer {
    aseguradoraSubRamoId?: number;
    claveVehiculo?: string;
    detallesPorProducto?: Array<IDetailsProduct>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDetailsProduct {
    productoId?: number;
    productoNombre?: string;
    condicionesCoberturas?: Array<IConditionsProduct>;
    especificaciones?: Array<ISpecs>;
    detallesPorCobertura?: Array<IDetailsCoverage>;
    detailsInsurerId: IUUID;
    detallesPorAseguradora?: IDetailsInsurer;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IConditionsProduct {
    id?: number;
    nombre?: string;
    valor?: string;
    orden?: number;
    deducibleAplica?: string;
    deducibleValor?: string;
    detailsProductId: IUUID;
    detallesPorCobertura?: IDetailsProduct;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ISpecs {
    id?: number;
    nombre?: string;
    valor?: string;
    orden?: number;
    detailsProductId: IUUID;
    detallesPorCobertura?: IDetailsProduct;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDetailsCoverage {
    coberturaId?: number;
    coberturaNombre?: string;
    coberturaOrden?: number;
    detalles?: Array<IDetails>;
    detailsProductId: IUUID;
    detallesPorCobertura?: IDetailsProduct;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDetails {
    detalleId?: number;
    detalleNombre?: string;
    detalleValor?: string;
    coberturaOrden?: number;
    detailsCoverageId: IUUID;
    detallesPorCobertura?: IDetailsCoverage;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ITransactionFilterInput {
    and?: Array<ITransactionFilterInput>;
    or?: Array<ITransactionFilterInput>;
    companyId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    transactionNumber?: IStringOperationFilterInput;
    transactionRequest?: IStringOperationFilterInput;
    transactionToken?: IStringOperationFilterInput;
    transactionType?: ITransactionTypeOperationFilterInput;
    transactionStatus?: ITransactionStatusOperationFilterInput;
    amount?: IComparableDecimalOperationFilterInput;
    trasactionResponse?: IStringOperationFilterInput;
    invoiceId?: IComparableNullableOfGuidOperationFilterInput;
    invoice?: IInvoiceFilterInput;
    methodPaymentId?: IComparableGuidOperationFilterInput;
    methodPayment?: IMethodPaymentFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ITransactionTypeOperationFilterInput {
    eq?: ITransactionType;
    neq?: ITransactionType;
    in?: Array<ITransactionType>;
    nin?: Array<ITransactionType>;
}
export declare const enum ITransactionType {
    DIRECT = "DIRECT",
    TO_ACCOUNT = "TO_ACCOUNT",
    SUBSCRIPTION = "SUBSCRIPTION"
}
export interface ITransactionStatusOperationFilterInput {
    eq?: ITransactionStatus;
    neq?: ITransactionStatus;
    in?: Array<ITransactionStatus>;
    nin?: Array<ITransactionStatus>;
}
export declare const enum ITransactionStatus {
    PAID = "PAID",
    PENDING = "PENDING",
    ERROR = "ERROR",
    CANCEL = "CANCEL"
}
export interface IInvoiceFilterInput {
    and?: Array<IInvoiceFilterInput>;
    or?: Array<IInvoiceFilterInput>;
    invoiceNumber?: IStringOperationFilterInput;
    invoiceStatus?: IInvoiceStatusOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    invoiceDate?: IComparableDateTimeOperationFilterInput;
    observations?: IStringOperationFilterInput;
    subTotal?: IComparableDecimalOperationFilterInput;
    shippingSale?: IComparableDecimalOperationFilterInput;
    discount?: IComparableDecimalOperationFilterInput;
    total?: IComparableDecimalOperationFilterInput;
    addressId?: IComparableGuidOperationFilterInput;
    details?: IListFilterInputTypeOfInvoiceDetailFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IInvoiceStatusOperationFilterInput {
    eq?: IInvoiceStatus;
    neq?: IInvoiceStatus;
    in?: Array<IInvoiceStatus>;
    nin?: Array<IInvoiceStatus>;
}
export interface IListFilterInputTypeOfInvoiceDetailFilterInput {
    all?: IInvoiceDetailFilterInput;
    none?: IInvoiceDetailFilterInput;
    some?: IInvoiceDetailFilterInput;
    any?: boolean;
}
export interface IInvoiceDetailFilterInput {
    and?: Array<IInvoiceDetailFilterInput>;
    or?: Array<IInvoiceDetailFilterInput>;
    invoiceId?: IComparableGuidOperationFilterInput;
    invoice?: IInvoiceFilterInput;
    productId?: IComparableGuidOperationFilterInput;
    quantity?: IComparableInt32OperationFilterInput;
    salePrice?: IComparableDecimalOperationFilterInput;
    totalPrice?: IComparableDecimalOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IMethodPaymentFilterInput {
    and?: Array<IMethodPaymentFilterInput>;
    or?: Array<IMethodPaymentFilterInput>;
    companyId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    alias?: IStringOperationFilterInput;
    privateKey?: IStringOperationFilterInput;
    publicKey?: IStringOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    servicePayment?: INullableOfServicePaymentOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfServicePaymentOperationFilterInput {
    eq?: IServicePayment;
    neq?: IServicePayment;
    in?: Array<IServicePayment | null>;
    nin?: Array<IServicePayment | null>;
}
export interface ITransactionSortInput {
    companyId?: ISortEnumType;
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    transactionNumber?: ISortEnumType;
    transactionRequest?: ISortEnumType;
    transactionToken?: ISortEnumType;
    transactionType?: ISortEnumType;
    transactionStatus?: ISortEnumType;
    amount?: ISortEnumType;
    trasactionResponse?: ISortEnumType;
    invoiceId?: ISortEnumType;
    invoice?: IInvoiceSortInput;
    methodPaymentId?: ISortEnumType;
    methodPayment?: IMethodPaymentSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInvoiceSortInput {
    invoiceNumber?: ISortEnumType;
    invoiceStatus?: ISortEnumType;
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    invoiceDate?: ISortEnumType;
    observations?: ISortEnumType;
    subTotal?: ISortEnumType;
    shippingSale?: ISortEnumType;
    discount?: ISortEnumType;
    total?: ISortEnumType;
    addressId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMethodPaymentSortInput {
    companyId?: ISortEnumType;
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    alias?: ISortEnumType;
    privateKey?: ISortEnumType;
    publicKey?: ISortEnumType;
    active?: ISortEnumType;
    servicePayment?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ITransactionCollectionSegment {
    items?: Array<Ipayment_Transaction>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface Ipayment_Transaction {
    companyId?: IUUID;
    projectId?: IUUID;
    memberId: IUUID;
    transactionNumber: string;
    transactionRequest: string;
    transactionToken: string;
    transactionType: ITransactionType;
    transactionStatus: ITransactionStatus;
    amount: IDecimal;
    trasactionResponse: string;
    invoiceId?: IUUID;
    invoice?: IInvoice;
    methodPaymentId: IUUID;
    methodPayment?: IMethodPayment;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMethodPayment {
    companyId?: IUUID;
    projectId?: IUUID;
    memberId: IUUID;
    alias: string;
    privateKey: string;
    publicKey: string;
    active: boolean;
    servicePayment?: IServicePayment;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMethodPaymentCollectionSegment {
    items?: Array<IMethodPayment>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IPlanFilterInput {
    and?: Array<IPlanFilterInput>;
    or?: Array<IPlanFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    description?: IStringOperationFilterInput;
    code?: IStringOperationFilterInput;
    codeStripe?: IStringOperationFilterInput;
    status?: IBooleanOperationFilterInput;
    amount?: IComparableDecimalOperationFilterInput;
    productId?: IComparableNullableOfGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IPlanSortInput {
    projectId?: ISortEnumType;
    description?: ISortEnumType;
    code?: ISortEnumType;
    codeStripe?: ISortEnumType;
    status?: ISortEnumType;
    amount?: ISortEnumType;
    productId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPlanCollectionSegment {
    items?: Array<Ipayment_Plan>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface Ipayment_Plan {
    projectId: IUUID;
    description?: string;
    code?: string;
    codeStripe: string;
    status: boolean;
    amount: IDecimal;
    productId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInvoiceCollectionSegment {
    items?: Array<IInvoice>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ICustomerSuscriptionFilterInput {
    and?: Array<ICustomerSuscriptionFilterInput>;
    or?: Array<ICustomerSuscriptionFilterInput>;
    memberId?: IComparableGuidOperationFilterInput;
    planId?: IComparableGuidOperationFilterInput;
    plan?: IPlanFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ICustomerSuscription {
    memberId: IUUID;
    planId: IUUID;
    plan?: Ipayment_Plan;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProductStripe {
    projectId: IUUID;
    productId: IUUID;
    stripeId: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IAccountKeyFilterInput {
    and?: Array<IAccountKeyFilterInput>;
    or?: Array<IAccountKeyFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    detailsSubmitted?: IBooleanOperationFilterInput;
    accountServiceId?: IStringOperationFilterInput;
    customerServiceId?: IStringOperationFilterInput;
    servicePayment?: INullableOfServicePaymentOperationFilterInput;
    paymentMethods?: IListFilterInputTypeOfPaymentMethodFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfPaymentMethodFilterInput {
    all?: IPaymentMethodFilterInput;
    none?: IPaymentMethodFilterInput;
    some?: IPaymentMethodFilterInput;
    any?: boolean;
}
export interface IPaymentMethodFilterInput {
    and?: Array<IPaymentMethodFilterInput>;
    or?: Array<IPaymentMethodFilterInput>;
    memberId?: IComparableGuidOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    paymentToken?: IStringOperationFilterInput;
    default?: IBooleanOperationFilterInput;
    lastNumbers?: IStringOperationFilterInput;
    accountKeyId?: IComparableNullableOfGuidOperationFilterInput;
    accountKey?: IAccountKeyFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IAccountKeySortInput {
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    detailsSubmitted?: ISortEnumType;
    accountServiceId?: ISortEnumType;
    customerServiceId?: ISortEnumType;
    servicePayment?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IAccountKeyCollectionSegment {
    items?: Array<IAccountKey>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ICardMethodDTO {
    paymentMethodId: IUUID;
    createdAt: IDateTime;
    default: boolean;
    brand: string;
    last4: string;
    expYear: ILong;
    expMonth: ILong;
}
/**
 * The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1.
 */
export declare type ILong = any;
export interface IVehiclesCarCatalogHdiCodeYearFilterInput {
    and?: Array<IVehiclesCarCatalogHdiCodeYearFilterInput>;
    or?: Array<IVehiclesCarCatalogHdiCodeYearFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    year?: IComparableInt64OperationFilterInput;
    cHdi?: IStringOperationFilterInput;
    carId?: IComparableInt32OperationFilterInput;
    car?: IVehiclesCarCatalogHdiFilterInput;
}
export interface IComparableInt64OperationFilterInput {
    eq?: ILong;
    neq?: ILong;
    in?: Array<ILong>;
    nin?: Array<ILong>;
    gt?: ILong;
    ngt?: ILong;
    gte?: ILong;
    ngte?: ILong;
    lt?: ILong;
    nlt?: ILong;
    lte?: ILong;
    nlte?: ILong;
}
export interface IVehiclesCarCatalogHdiFilterInput {
    and?: Array<IVehiclesCarCatalogHdiFilterInput>;
    or?: Array<IVehiclesCarCatalogHdiFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    brand?: IStringOperationFilterInput;
    subbrand?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    vehiclesCarCatalogHdiCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogHdiCodeYearFilterInput;
    vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}
export interface IListFilterInputTypeOfVehiclesCarCatalogHdiCodeYearFilterInput {
    all?: IVehiclesCarCatalogHdiCodeYearFilterInput;
    none?: IVehiclesCarCatalogHdiCodeYearFilterInput;
    some?: IVehiclesCarCatalogHdiCodeYearFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput {
    all?: IVehiclesCarCodeRelationFilterInput;
    none?: IVehiclesCarCodeRelationFilterInput;
    some?: IVehiclesCarCodeRelationFilterInput;
    any?: boolean;
}
export interface IVehiclesCarCodeRelationFilterInput {
    and?: Array<IVehiclesCarCodeRelationFilterInput>;
    or?: Array<IVehiclesCarCodeRelationFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    abaCodeId?: IComparableNullableOfInt32OperationFilterInput;
    afirmeCodeId?: IComparableNullableOfInt32OperationFilterInput;
    aigCodeId?: IComparableNullableOfInt32OperationFilterInput;
    anaCodeId?: IComparableNullableOfInt32OperationFilterInput;
    atlasCodeId?: IComparableNullableOfInt32OperationFilterInput;
    axaCodeId?: IComparableNullableOfInt32OperationFilterInput;
    banorteCodeId?: IComparableNullableOfInt32OperationFilterInput;
    gnpCodeId?: IComparableNullableOfInt32OperationFilterInput;
    hdiCodeId?: IComparableNullableOfInt32OperationFilterInput;
    potosiCodeId?: IComparableNullableOfInt32OperationFilterInput;
    psCodeId?: IComparableNullableOfInt32OperationFilterInput;
    qualitasCodeId?: IComparableNullableOfInt32OperationFilterInput;
    zurichCodeId?: IComparableNullableOfInt32OperationFilterInput;
    mapfreCodeId?: IComparableNullableOfInt32OperationFilterInput;
    abaCode?: IVehiclesCarCatalogAbaFilterInput;
    afirmeCode?: IVehiclesCarCatalogAfirmeFilterInput;
    aigCode?: IVehiclesCarCatalogAigFilterInput;
    anaCode?: IVehiclesCarCatalogAnaFilterInput;
    atlasCode?: IVehiclesCarCatalogAtlaFilterInput;
    axaCode?: IVehiclesCarCatalogAxaFilterInput;
    banorteCode?: IVehiclesCarCatalogBanorteFilterInput;
    gnpCode?: IVehiclesCarCatalogGnpFilterInput;
    hdiCode?: IVehiclesCarCatalogHdiFilterInput;
    mapfreCode?: IVehiclesCarCatalogMapfreFilterInput;
    potosiCode?: IVehiclesCarCatalogPotosiFilterInput;
    psCode?: IVehiclesCarCatalogPFilterInput;
    qualitasCode?: IVehiclesCarCatalogQualitaFilterInput;
    zurichCode?: IVehiclesCarCatalogZurichFilterInput;
}
export interface IVehiclesCarCatalogAbaFilterInput {
    and?: Array<IVehiclesCarCatalogAbaFilterInput>;
    or?: Array<IVehiclesCarCatalogAbaFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    brand?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    subbrand?: IStringOperationFilterInput;
    occupants?: IComparableInt64OperationFilterInput;
    type?: IStringOperationFilterInput;
    vehiclesCarCatalogAbaCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogAbaCodeYearFilterInput;
    vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}
export interface IListFilterInputTypeOfVehiclesCarCatalogAbaCodeYearFilterInput {
    all?: IVehiclesCarCatalogAbaCodeYearFilterInput;
    none?: IVehiclesCarCatalogAbaCodeYearFilterInput;
    some?: IVehiclesCarCatalogAbaCodeYearFilterInput;
    any?: boolean;
}
export interface IVehiclesCarCatalogAbaCodeYearFilterInput {
    and?: Array<IVehiclesCarCatalogAbaCodeYearFilterInput>;
    or?: Array<IVehiclesCarCatalogAbaCodeYearFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    year?: IComparableInt64OperationFilterInput;
    cveveh?: IStringOperationFilterInput;
    carId?: IComparableInt32OperationFilterInput;
    car?: IVehiclesCarCatalogAbaFilterInput;
}
export interface IVehiclesCarCatalogAfirmeFilterInput {
    and?: Array<IVehiclesCarCatalogAfirmeFilterInput>;
    or?: Array<IVehiclesCarCatalogAfirmeFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    brand?: IStringOperationFilterInput;
    subbrand?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    vehiclesCarCatalogAfirmeCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogAfirmeCodeYearFilterInput;
    vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}
export interface IListFilterInputTypeOfVehiclesCarCatalogAfirmeCodeYearFilterInput {
    all?: IVehiclesCarCatalogAfirmeCodeYearFilterInput;
    none?: IVehiclesCarCatalogAfirmeCodeYearFilterInput;
    some?: IVehiclesCarCatalogAfirmeCodeYearFilterInput;
    any?: boolean;
}
export interface IVehiclesCarCatalogAfirmeCodeYearFilterInput {
    and?: Array<IVehiclesCarCatalogAfirmeCodeYearFilterInput>;
    or?: Array<IVehiclesCarCatalogAfirmeCodeYearFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    year?: IComparableInt64OperationFilterInput;
    cAfirme?: IStringOperationFilterInput;
    carId?: IComparableInt32OperationFilterInput;
    car?: IVehiclesCarCatalogAfirmeFilterInput;
}
export interface IVehiclesCarCatalogAigFilterInput {
    and?: Array<IVehiclesCarCatalogAigFilterInput>;
    or?: Array<IVehiclesCarCatalogAigFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    brand?: IStringOperationFilterInput;
    year?: IComparableInt32OperationFilterInput;
    description?: IStringOperationFilterInput;
    subbrand?: IStringOperationFilterInput;
    vehiclesCarcoderelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}
export interface IVehiclesCarCatalogAnaFilterInput {
    and?: Array<IVehiclesCarCatalogAnaFilterInput>;
    or?: Array<IVehiclesCarCatalogAnaFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    subbrand?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    brand?: IStringOperationFilterInput;
    vehiclesCarCatalogAnaCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogAnaCodeYearFilterInput;
    vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}
export interface IListFilterInputTypeOfVehiclesCarCatalogAnaCodeYearFilterInput {
    all?: IVehiclesCarCatalogAnaCodeYearFilterInput;
    none?: IVehiclesCarCatalogAnaCodeYearFilterInput;
    some?: IVehiclesCarCatalogAnaCodeYearFilterInput;
    any?: boolean;
}
export interface IVehiclesCarCatalogAnaCodeYearFilterInput {
    and?: Array<IVehiclesCarCatalogAnaCodeYearFilterInput>;
    or?: Array<IVehiclesCarCatalogAnaCodeYearFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    year?: IComparableInt64OperationFilterInput;
    cAna?: IStringOperationFilterInput;
    carId?: IComparableInt32OperationFilterInput;
    car?: IVehiclesCarCatalogAnaFilterInput;
}
export interface IVehiclesCarCatalogAtlaFilterInput {
    and?: Array<IVehiclesCarCatalogAtlaFilterInput>;
    or?: Array<IVehiclesCarCatalogAtlaFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    brand?: IStringOperationFilterInput;
    subbrand?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    vehiclesCarCatalogAtlasCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogAtlasCodeYearFilterInput;
    vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}
export interface IListFilterInputTypeOfVehiclesCarCatalogAtlasCodeYearFilterInput {
    all?: IVehiclesCarCatalogAtlasCodeYearFilterInput;
    none?: IVehiclesCarCatalogAtlasCodeYearFilterInput;
    some?: IVehiclesCarCatalogAtlasCodeYearFilterInput;
    any?: boolean;
}
export interface IVehiclesCarCatalogAtlasCodeYearFilterInput {
    and?: Array<IVehiclesCarCatalogAtlasCodeYearFilterInput>;
    or?: Array<IVehiclesCarCatalogAtlasCodeYearFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    year?: IComparableInt64OperationFilterInput;
    cAtlas?: IStringOperationFilterInput;
    carId?: IComparableInt32OperationFilterInput;
    car?: IVehiclesCarCatalogAtlaFilterInput;
}
export interface IVehiclesCarCatalogAxaFilterInput {
    and?: Array<IVehiclesCarCatalogAxaFilterInput>;
    or?: Array<IVehiclesCarCatalogAxaFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    brand?: IStringOperationFilterInput;
    subbrand?: IStringOperationFilterInput;
    descriptionLinea?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    camis?: IStringOperationFilterInput;
    categoria?: IStringOperationFilterInput;
    segmento?: IStringOperationFilterInput;
    brandId?: IStringOperationFilterInput;
    versionId?: IComparableInt32OperationFilterInput;
    versionIdSec?: IComparableInt32OperationFilterInput;
    categoriaId?: IComparableInt32OperationFilterInput;
    lineaId?: IComparableInt32OperationFilterInput;
    vehiclesCarCatalogAxaCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogAxaCodeYearFilterInput;
    vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}
export interface IListFilterInputTypeOfVehiclesCarCatalogAxaCodeYearFilterInput {
    all?: IVehiclesCarCatalogAxaCodeYearFilterInput;
    none?: IVehiclesCarCatalogAxaCodeYearFilterInput;
    some?: IVehiclesCarCatalogAxaCodeYearFilterInput;
    any?: boolean;
}
export interface IVehiclesCarCatalogAxaCodeYearFilterInput {
    and?: Array<IVehiclesCarCatalogAxaCodeYearFilterInput>;
    or?: Array<IVehiclesCarCatalogAxaCodeYearFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    year?: IComparableInt64OperationFilterInput;
    cAxa?: IStringOperationFilterInput;
    carId?: IComparableInt32OperationFilterInput;
    car?: IVehiclesCarCatalogAxaFilterInput;
}
export interface IVehiclesCarCatalogBanorteFilterInput {
    and?: Array<IVehiclesCarCatalogBanorteFilterInput>;
    or?: Array<IVehiclesCarCatalogBanorteFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    brand?: IStringOperationFilterInput;
    subbrand?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    vehiclesCarCatalogBanorteCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogBanorteCodeYearFilterInput;
    vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}
export interface IListFilterInputTypeOfVehiclesCarCatalogBanorteCodeYearFilterInput {
    all?: IVehiclesCarCatalogBanorteCodeYearFilterInput;
    none?: IVehiclesCarCatalogBanorteCodeYearFilterInput;
    some?: IVehiclesCarCatalogBanorteCodeYearFilterInput;
    any?: boolean;
}
export interface IVehiclesCarCatalogBanorteCodeYearFilterInput {
    and?: Array<IVehiclesCarCatalogBanorteCodeYearFilterInput>;
    or?: Array<IVehiclesCarCatalogBanorteCodeYearFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    year?: IComparableInt64OperationFilterInput;
    cBanorte?: IStringOperationFilterInput;
    carId?: IComparableInt32OperationFilterInput;
    car?: IVehiclesCarCatalogBanorteFilterInput;
}
export interface IVehiclesCarCatalogGnpFilterInput {
    and?: Array<IVehiclesCarCatalogGnpFilterInput>;
    or?: Array<IVehiclesCarCatalogGnpFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    brand?: IStringOperationFilterInput;
    subbrand?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    vehiclesCarCatalogGnpCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogGnpCodeYearFilterInput;
    vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}
export interface IListFilterInputTypeOfVehiclesCarCatalogGnpCodeYearFilterInput {
    all?: IVehiclesCarCatalogGnpCodeYearFilterInput;
    none?: IVehiclesCarCatalogGnpCodeYearFilterInput;
    some?: IVehiclesCarCatalogGnpCodeYearFilterInput;
    any?: boolean;
}
export interface IVehiclesCarCatalogGnpCodeYearFilterInput {
    and?: Array<IVehiclesCarCatalogGnpCodeYearFilterInput>;
    or?: Array<IVehiclesCarCatalogGnpCodeYearFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    year?: IComparableInt64OperationFilterInput;
    cGnp?: IStringOperationFilterInput;
    carId?: IComparableInt32OperationFilterInput;
    car?: IVehiclesCarCatalogGnpFilterInput;
}
export interface IVehiclesCarCatalogMapfreFilterInput {
    and?: Array<IVehiclesCarCatalogMapfreFilterInput>;
    or?: Array<IVehiclesCarCatalogMapfreFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    brand?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    subbrand?: IStringOperationFilterInput;
    vehiclesCarCatalogMapfreCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogMapfreCodeYearFilterInput;
    vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}
export interface IListFilterInputTypeOfVehiclesCarCatalogMapfreCodeYearFilterInput {
    all?: IVehiclesCarCatalogMapfreCodeYearFilterInput;
    none?: IVehiclesCarCatalogMapfreCodeYearFilterInput;
    some?: IVehiclesCarCatalogMapfreCodeYearFilterInput;
    any?: boolean;
}
export interface IVehiclesCarCatalogMapfreCodeYearFilterInput {
    and?: Array<IVehiclesCarCatalogMapfreCodeYearFilterInput>;
    or?: Array<IVehiclesCarCatalogMapfreCodeYearFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    year?: IComparableInt64OperationFilterInput;
    cMapfre?: IStringOperationFilterInput;
    brand?: IStringOperationFilterInput;
    carId?: IComparableInt32OperationFilterInput;
    car?: IVehiclesCarCatalogMapfreFilterInput;
}
export interface IVehiclesCarCatalogPotosiFilterInput {
    and?: Array<IVehiclesCarCatalogPotosiFilterInput>;
    or?: Array<IVehiclesCarCatalogPotosiFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    brand?: IStringOperationFilterInput;
    subbrand?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    cPotosi?: IStringOperationFilterInput;
    vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}
export interface IVehiclesCarCatalogPFilterInput {
    and?: Array<IVehiclesCarCatalogPFilterInput>;
    or?: Array<IVehiclesCarCatalogPFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    brand?: IStringOperationFilterInput;
    subbrand?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    cPs?: IStringOperationFilterInput;
    vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}
export interface IVehiclesCarCatalogQualitaFilterInput {
    and?: Array<IVehiclesCarCatalogQualitaFilterInput>;
    or?: Array<IVehiclesCarCatalogQualitaFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    brand?: IStringOperationFilterInput;
    subbrand?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    brandCode?: IStringOperationFilterInput;
    vehiclesCarCatalogQualitasCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogQualitasCodeYearFilterInput;
    vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}
export interface IListFilterInputTypeOfVehiclesCarCatalogQualitasCodeYearFilterInput {
    all?: IVehiclesCarCatalogQualitasCodeYearFilterInput;
    none?: IVehiclesCarCatalogQualitasCodeYearFilterInput;
    some?: IVehiclesCarCatalogQualitasCodeYearFilterInput;
    any?: boolean;
}
export interface IVehiclesCarCatalogQualitasCodeYearFilterInput {
    and?: Array<IVehiclesCarCatalogQualitasCodeYearFilterInput>;
    or?: Array<IVehiclesCarCatalogQualitasCodeYearFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    year?: IComparableInt64OperationFilterInput;
    cQualitas?: IStringOperationFilterInput;
    carId?: IComparableInt32OperationFilterInput;
    car?: IVehiclesCarCatalogQualitaFilterInput;
}
export interface IVehiclesCarCatalogZurichFilterInput {
    and?: Array<IVehiclesCarCatalogZurichFilterInput>;
    or?: Array<IVehiclesCarCatalogZurichFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    brand?: IStringOperationFilterInput;
    subbrand?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    vehiclesCarCatalogZurichCodeYears?: IListFilterInputTypeOfVehiclesCarCatalogZurichCodeYearFilterInput;
    vehiclesCarCodeRelations?: IListFilterInputTypeOfVehiclesCarCodeRelationFilterInput;
}
export interface IListFilterInputTypeOfVehiclesCarCatalogZurichCodeYearFilterInput {
    all?: IVehiclesCarCatalogZurichCodeYearFilterInput;
    none?: IVehiclesCarCatalogZurichCodeYearFilterInput;
    some?: IVehiclesCarCatalogZurichCodeYearFilterInput;
    any?: boolean;
}
export interface IVehiclesCarCatalogZurichCodeYearFilterInput {
    and?: Array<IVehiclesCarCatalogZurichCodeYearFilterInput>;
    or?: Array<IVehiclesCarCatalogZurichCodeYearFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    year?: IComparableInt64OperationFilterInput;
    carId?: IComparableInt32OperationFilterInput;
    cZurich?: IStringOperationFilterInput;
    car?: IVehiclesCarCatalogZurichFilterInput;
}
export interface IVehiclesCarCatalogHdiCodeYearSortInput {
    id?: ISortEnumType;
    year?: ISortEnumType;
    cHdi?: ISortEnumType;
    carId?: ISortEnumType;
    car?: IVehiclesCarCatalogHdiSortInput;
}
export interface IVehiclesCarCatalogHdiSortInput {
    id?: ISortEnumType;
    brand?: ISortEnumType;
    subbrand?: ISortEnumType;
    description?: ISortEnumType;
}
export interface IVehiclesCarCatalogHdiCodeYear {
    id: number;
    year: ILong;
    cHdi: string;
    carId: number;
    car: IVehiclesCarCatalogHdi;
}
export interface IVehiclesCarCatalogHdi {
    id: number;
    brand: string;
    subbrand: string;
    description: string;
    vehiclesCarCatalogHdiCodeYears: Array<IVehiclesCarCatalogHdiCodeYear>;
    vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}
export interface IVehiclesCarCodeRelation {
    id: number;
    abaCodeId?: number;
    afirmeCodeId?: number;
    aigCodeId?: number;
    anaCodeId?: number;
    atlasCodeId?: number;
    axaCodeId?: number;
    banorteCodeId?: number;
    gnpCodeId?: number;
    hdiCodeId?: number;
    potosiCodeId?: number;
    psCodeId?: number;
    qualitasCodeId?: number;
    zurichCodeId?: number;
    mapfreCodeId?: number;
    abaCode?: IVehiclesCarCatalogAba;
    afirmeCode?: IVehiclesCarCatalogAfirme;
    aigCode?: IVehiclesCarCatalogAig;
    anaCode?: IVehiclesCarCatalogAna;
    atlasCode?: IVehiclesCarCatalogAtla;
    axaCode?: IVehiclesCarCatalogAxa;
    banorteCode?: IVehiclesCarCatalogBanorte;
    gnpCode?: IVehiclesCarCatalogGnp;
    hdiCode?: IVehiclesCarCatalogHdi;
    mapfreCode?: IVehiclesCarCatalogMapfre;
    potosiCode?: IVehiclesCarCatalogPotosi;
    psCode?: IVehiclesCarCatalogP;
    qualitasCode?: IVehiclesCarCatalogQualita;
    zurichCode?: IVehiclesCarCatalogZurich;
}
export interface IVehiclesCarCatalogAba {
    id: number;
    brand: string;
    description: string;
    subbrand: string;
    occupants: ILong;
    type: string;
    vehiclesCarCatalogAbaCodeYears: Array<IVehiclesCarCatalogAbaCodeYear>;
    vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}
export interface IVehiclesCarCatalogAbaCodeYear {
    id: number;
    year: ILong;
    cveveh: string;
    carId: number;
    car: IVehiclesCarCatalogAba;
}
export interface IVehiclesCarCatalogAfirme {
    id: number;
    brand?: string;
    subbrand?: string;
    description?: string;
    vehiclesCarCatalogAfirmeCodeYears: Array<IVehiclesCarCatalogAfirmeCodeYear>;
    vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}
export interface IVehiclesCarCatalogAfirmeCodeYear {
    id: number;
    year: ILong;
    cAfirme: string;
    carId: number;
    car: IVehiclesCarCatalogAfirme;
}
export interface IVehiclesCarCatalogAig {
    id: number;
    brand: string;
    year: number;
    description: string;
    subbrand: string;
    vehiclesCarcoderelations: Array<IVehiclesCarCodeRelation>;
}
export interface IVehiclesCarCatalogAna {
    id: number;
    subbrand: string;
    description: string;
    brand: string;
    vehiclesCarCatalogAnaCodeYears: Array<IVehiclesCarCatalogAnaCodeYear>;
    vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}
export interface IVehiclesCarCatalogAnaCodeYear {
    id: number;
    year: ILong;
    cAna: string;
    carId: number;
    car: IVehiclesCarCatalogAna;
}
export interface IVehiclesCarCatalogAtla {
    id: number;
    brand: string;
    subbrand: string;
    description: string;
    vehiclesCarCatalogAtlasCodeYears: Array<IVehiclesCarCatalogAtlasCodeYear>;
    vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}
export interface IVehiclesCarCatalogAtlasCodeYear {
    id: number;
    year: ILong;
    cAtlas: string;
    carId: number;
    car: IVehiclesCarCatalogAtla;
}
export interface IVehiclesCarCatalogAxa {
    id: number;
    brand?: string;
    subbrand?: string;
    descriptionLinea?: string;
    description?: string;
    camis?: string;
    categoria: string;
    segmento?: string;
    brandId: string;
    versionId: number;
    versionIdSec: number;
    categoriaId: number;
    lineaId: number;
    vehiclesCarCatalogAxaCodeYears: Array<IVehiclesCarCatalogAxaCodeYear>;
    vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}
export interface IVehiclesCarCatalogAxaCodeYear {
    id: number;
    year: ILong;
    cAxa: string;
    carId: number;
    car: IVehiclesCarCatalogAxa;
}
export interface IVehiclesCarCatalogBanorte {
    id: number;
    brand: string;
    subbrand: string;
    description: string;
    vehiclesCarCatalogBanorteCodeYears: Array<IVehiclesCarCatalogBanorteCodeYear>;
    vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}
export interface IVehiclesCarCatalogBanorteCodeYear {
    id: number;
    year: ILong;
    cBanorte: string;
    carId: number;
    car: IVehiclesCarCatalogBanorte;
}
export interface IVehiclesCarCatalogGnp {
    id: number;
    brand: string;
    subbrand: string;
    description: string;
    vehiclesCarCatalogGnpCodeYears: Array<IVehiclesCarCatalogGnpCodeYear>;
    vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}
export interface IVehiclesCarCatalogGnpCodeYear {
    id: number;
    year: ILong;
    cGnp: string;
    carId: number;
    car: IVehiclesCarCatalogGnp;
}
export interface IVehiclesCarCatalogMapfre {
    id: number;
    brand: string;
    description: string;
    subbrand: string;
    vehiclesCarCatalogMapfreCodeYears: Array<IVehiclesCarCatalogMapfreCodeYear>;
    vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}
export interface IVehiclesCarCatalogMapfreCodeYear {
    id: number;
    year: ILong;
    cMapfre: string;
    brand: string;
    carId: number;
    car: IVehiclesCarCatalogMapfre;
}
export interface IVehiclesCarCatalogPotosi {
    id: number;
    brand: string;
    subbrand: string;
    description: string;
    cPotosi: string;
    vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}
export interface IVehiclesCarCatalogP {
    id: number;
    brand: string;
    subbrand: string;
    description: string;
    cPs: string;
    vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}
export interface IVehiclesCarCatalogQualita {
    id: number;
    brand: string;
    subbrand: string;
    description: string;
    brandCode?: string;
    vehiclesCarCatalogQualitasCodeYears: Array<IVehiclesCarCatalogQualitasCodeYear>;
    vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}
export interface IVehiclesCarCatalogQualitasCodeYear {
    id: number;
    year: ILong;
    cQualitas: string;
    carId: number;
    car: IVehiclesCarCatalogQualita;
}
export interface IVehiclesCarCatalogZurich {
    id: number;
    brand: string;
    subbrand: string;
    description: string;
    vehiclesCarCatalogZurichCodeYears: Array<IVehiclesCarCatalogZurichCodeYear>;
    vehiclesCarCodeRelations: Array<IVehiclesCarCodeRelation>;
}
export interface IVehiclesCarCatalogZurichCodeYear {
    id: number;
    year: ILong;
    carId: number;
    cZurich: string;
    car: IVehiclesCarCatalogZurich;
}
export interface IVehiclesCarCatalogMapfreCodeYearSortInput {
    id?: ISortEnumType;
    year?: ISortEnumType;
    cMapfre?: ISortEnumType;
    brand?: ISortEnumType;
    carId?: ISortEnumType;
    car?: IVehiclesCarCatalogMapfreSortInput;
}
export interface IVehiclesCarCatalogMapfreSortInput {
    id?: ISortEnumType;
    brand?: ISortEnumType;
    description?: ISortEnumType;
    subbrand?: ISortEnumType;
}
export interface IVehiclesCarCatalogQualitasCodeYearSortInput {
    id?: ISortEnumType;
    year?: ISortEnumType;
    cQualitas?: ISortEnumType;
    carId?: ISortEnumType;
    car?: IVehiclesCarCatalogQualitaSortInput;
}
export interface IVehiclesCarCatalogQualitaSortInput {
    id?: ISortEnumType;
    brand?: ISortEnumType;
    subbrand?: ISortEnumType;
    description?: ISortEnumType;
    brandCode?: ISortEnumType;
}
export interface IVehiclesCarCatalogZurichCodeYearSortInput {
    id?: ISortEnumType;
    year?: ISortEnumType;
    carId?: ISortEnumType;
    cZurich?: ISortEnumType;
    car?: IVehiclesCarCatalogZurichSortInput;
}
export interface IVehiclesCarCatalogZurichSortInput {
    id?: ISortEnumType;
    brand?: ISortEnumType;
    subbrand?: ISortEnumType;
    description?: ISortEnumType;
}
export interface IQuotationCoverageFilterInput {
    and?: Array<IQuotationCoverageFilterInput>;
    or?: Array<IQuotationCoverageFilterInput>;
    name?: IStringOperationFilterInput;
    code?: IStringOperationFilterInput;
    sumAssured?: IStringOperationFilterInput;
    sumType?: IStringOperationFilterInput;
    deductible?: IStringOperationFilterInput;
    total?: IStringOperationFilterInput;
    neto?: IStringOperationFilterInput;
    priority?: IComparableInt32OperationFilterInput;
    quoteId?: IComparableGuidOperationFilterInput;
    quote?: IQuoteFilterInput;
    insurerServiceId?: IComparableGuidOperationFilterInput;
    insurerService?: IInsurerServiceFilterInput;
    insurerPackageStatus?: INullableOfInsurerPackageStatusOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IQuoteFilterInput {
    and?: Array<IQuoteFilterInput>;
    or?: Array<IQuoteFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    firstName?: IStringOperationFilterInput;
    lastName?: IStringOperationFilterInput;
    rFC?: IStringOperationFilterInput;
    phone?: IStringOperationFilterInput;
    email?: IStringOperationFilterInput;
    address?: IStringOperationFilterInput;
    hiredSame?: IBooleanOperationFilterInput;
    hiredFirstName?: IStringOperationFilterInput;
    hiredLastName?: IStringOperationFilterInput;
    hiredPhone?: IStringOperationFilterInput;
    hiredEmail?: IStringOperationFilterInput;
    hiredAddress?: IStringOperationFilterInput;
    frecuency?: IComparableNullableOfInt32OperationFilterInput;
    packageName?: IStringOperationFilterInput;
    gender?: INullableOfQuoteGenderOperationFilterInput;
    zipCode?: IStringOperationFilterInput;
    dateOfBirth?: IComparableNullableOfDateTimeOperationFilterInput;
    carCode?: IStringOperationFilterInput;
    startValidity?: IComparableNullableOfDateTimeOperationFilterInput;
    endValidity?: IComparableNullableOfDateTimeOperationFilterInput;
    year?: IComparableNullableOfInt32OperationFilterInput;
    discount?: IComparableNullableOfInt32OperationFilterInput;
    coverage?: IStringOperationFilterInput;
    primalTotal?: IStringOperationFilterInput;
    deductible?: IStringOperationFilterInput;
    typeFrecuency?: IStringOperationFilterInput;
    firstPay?: IStringOperationFilterInput;
    secondPay?: IStringOperationFilterInput;
    status?: INullableOfQuoteStatusOperationFilterInput;
    plaque?: IStringOperationFilterInput;
    compensationValue?: IStringOperationFilterInput;
    serialNumber?: IStringOperationFilterInput;
    car?: ICarQuotationFilterInput;
    carId?: IComparableInt32OperationFilterInput;
    colony?: IStringOperationFilterInput;
    town?: IStringOperationFilterInput;
    state?: IStringOperationFilterInput;
    stateId?: IStringOperationFilterInput;
    brand?: IStringOperationFilterInput;
    subBrand?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    /**
     * Contiene el numero de la cotizacion y se utiliza para almacecenarlo en todas las cotizadoras para la emision
     */
    folio?: IStringOperationFilterInput;
    totalAmount?: IComparableNullableOfDoubleOperationFilterInput;
    netAmount?: IComparableNullableOfDoubleOperationFilterInput;
    iva?: IComparableNullableOfDoubleOperationFilterInput;
    surcharge?: IComparableNullableOfDoubleOperationFilterInput;
    derecho?: IComparableNullableOfInt32OperationFilterInput;
    police?: IStringOperationFilterInput;
    service?: IInsurerServiceFilterInput;
    insurerServiceId?: IComparableNullableOfGuidOperationFilterInput;
    coverages?: IListFilterInputTypeOfQuotationCoverageFilterInput;
    quoteServices?: IListFilterInputTypeOfQuoteServiceFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfQuoteGenderOperationFilterInput {
    eq?: IQuoteGender;
    neq?: IQuoteGender;
    in?: Array<IQuoteGender | null>;
    nin?: Array<IQuoteGender | null>;
}
export declare const enum IQuoteGender {
    MALE = "MALE",
    FEMALE = "FEMALE",
    UNKNOWN = "UNKNOWN"
}
export interface INullableOfQuoteStatusOperationFilterInput {
    eq?: IQuoteStatus;
    neq?: IQuoteStatus;
    in?: Array<IQuoteStatus | null>;
    nin?: Array<IQuoteStatus | null>;
}
export declare const enum IQuoteStatus {
    HIRE = "HIRE",
    PENDING = "PENDING",
    QUOTED = "QUOTED",
    ISSUED = "ISSUED",
    CANCELED = "CANCELED",
    PAID = "PAID"
}
export interface ICarQuotationFilterInput {
    and?: Array<ICarQuotationFilterInput>;
    or?: Array<ICarQuotationFilterInput>;
    id?: IComparableInt32OperationFilterInput;
    brand?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    subbrand?: IStringOperationFilterInput;
}
export interface IInsurerServiceFilterInput {
    and?: Array<IInsurerServiceFilterInput>;
    or?: Array<IInsurerServiceFilterInput>;
    name?: IStringOperationFilterInput;
    codeName?: IStringOperationFilterInput;
    script?: IStringOperationFilterInput;
    template?: IStringOperationFilterInput;
    autos?: IBooleanOperationFilterInput;
    type?: IStringOperationFilterInput;
    module?: IStringOperationFilterInput;
    priority?: IComparableInt32OperationFilterInput;
    color?: IStringOperationFilterInput;
    logo?: IStringOperationFilterInput;
    insurerServiceCredentials?: IListFilterInputTypeOfInsurerServiceCredentialFilterInput;
    insurerServiceEnvironments?: IListFilterInputTypeOfInsurerServiceEnvironmentFilterInput;
    insurers?: IListFilterInputTypeOfInsurerFilterInput;
    quoteServices?: IListFilterInputTypeOfQuoteServiceFilterInput;
    quotationCoverages?: IListFilterInputTypeOfQuotationCoverageFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfInsurerServiceCredentialFilterInput {
    all?: IInsurerServiceCredentialFilterInput;
    none?: IInsurerServiceCredentialFilterInput;
    some?: IInsurerServiceCredentialFilterInput;
    any?: boolean;
}
export interface IInsurerServiceCredentialFilterInput {
    and?: Array<IInsurerServiceCredentialFilterInput>;
    or?: Array<IInsurerServiceCredentialFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    insurerServiceId?: IComparableGuidOperationFilterInput;
    insurerService?: IInsurerServiceFilterInput;
    conduit?: IStringOperationFilterInput;
    username?: IStringOperationFilterInput;
    password?: IStringOperationFilterInput;
    rate?: IStringOperationFilterInput;
    agent?: IStringOperationFilterInput;
    group?: IStringOperationFilterInput;
    deal?: IStringOperationFilterInput;
    office?: IStringOperationFilterInput;
    cprogram?: IStringOperationFilterInput;
    default?: IBooleanOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    extra?: IStringOperationFilterInput;
    discount?: IComparableNullableOfInt32OperationFilterInput;
    owner?: IStringOperationFilterInput;
    token?: IStringOperationFilterInput;
    environment?: INullableOfServiceEnvironmentOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfServiceEnvironmentOperationFilterInput {
    eq?: IServiceEnvironment;
    neq?: IServiceEnvironment;
    in?: Array<IServiceEnvironment | null>;
    nin?: Array<IServiceEnvironment | null>;
}
export declare const enum IServiceEnvironment {
    PRODUCTION = "PRODUCTION",
    DEVELOPMENT = "DEVELOPMENT",
    TESTING = "TESTING"
}
export interface IListFilterInputTypeOfInsurerServiceEnvironmentFilterInput {
    all?: IInsurerServiceEnvironmentFilterInput;
    none?: IInsurerServiceEnvironmentFilterInput;
    some?: IInsurerServiceEnvironmentFilterInput;
    any?: boolean;
}
export interface IInsurerServiceEnvironmentFilterInput {
    and?: Array<IInsurerServiceEnvironmentFilterInput>;
    or?: Array<IInsurerServiceEnvironmentFilterInput>;
    insurerServiceId?: IComparableGuidOperationFilterInput;
    insurerService?: IInsurerServiceFilterInput;
    environment?: INullableOfServiceEnvironmentOperationFilterInput;
    reference?: IStringOperationFilterInput;
    endPoint?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfInsurerFilterInput {
    all?: IInsurerFilterInput;
    none?: IInsurerFilterInput;
    some?: IInsurerFilterInput;
    any?: boolean;
}
export interface IInsurerFilterInput {
    and?: Array<IInsurerFilterInput>;
    or?: Array<IInsurerFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    insurerServiceId?: IComparableNullableOfGuidOperationFilterInput;
    insurerService?: IInsurerServiceFilterInput;
    name?: IStringOperationFilterInput;
    percentageMax?: IComparableNullableOfDecimalOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfQuoteServiceFilterInput {
    all?: IQuoteServiceFilterInput;
    none?: IQuoteServiceFilterInput;
    some?: IQuoteServiceFilterInput;
    any?: boolean;
}
export interface IQuoteServiceFilterInput {
    and?: Array<IQuoteServiceFilterInput>;
    or?: Array<IQuoteServiceFilterInput>;
    quoteId?: IComparableGuidOperationFilterInput;
    quote?: IQuoteFilterInput;
    serviceId?: IComparableGuidOperationFilterInput;
    insurerService?: IInsurerServiceFilterInput;
    discount?: IStringOperationFilterInput;
    deductible?: IStringOperationFilterInput;
    firstPay?: IStringOperationFilterInput;
    secondPay?: IStringOperationFilterInput;
    status?: INullableOfQuoteStatusOperationFilterInput;
    /**
     * Contiene el numero de la cotizacion y se utiliza para almacecenarlo en todas las cotizadoras para la emision
     */
    folio?: IStringOperationFilterInput;
    totalAmount?: IStringOperationFilterInput;
    netAmount?: IStringOperationFilterInput;
    derecho?: IStringOperationFilterInput;
    police?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfQuotationCoverageFilterInput {
    all?: IQuotationCoverageFilterInput;
    none?: IQuotationCoverageFilterInput;
    some?: IQuotationCoverageFilterInput;
    any?: boolean;
}
export interface INullableOfInsurerPackageStatusOperationFilterInput {
    eq?: IInsurerPackageStatus;
    neq?: IInsurerPackageStatus;
    in?: Array<IInsurerPackageStatus | null>;
    nin?: Array<IInsurerPackageStatus | null>;
}
export declare const enum IInsurerPackageStatus {
    AMPLIA = "AMPLIA",
    LIMITADA = "LIMITADA",
    RC = "RC"
}
export interface IQuotationCoverageSortInput {
    name?: ISortEnumType;
    code?: ISortEnumType;
    sumAssured?: ISortEnumType;
    sumType?: ISortEnumType;
    deductible?: ISortEnumType;
    total?: ISortEnumType;
    neto?: ISortEnumType;
    priority?: ISortEnumType;
    quoteId?: ISortEnumType;
    quote?: IQuoteSortInput;
    insurerServiceId?: ISortEnumType;
    insurerService?: IInsurerServiceSortInput;
    insurerPackageStatus?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IQuoteSortInput {
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    firstName?: ISortEnumType;
    lastName?: ISortEnumType;
    rFC?: ISortEnumType;
    phone?: ISortEnumType;
    email?: ISortEnumType;
    address?: ISortEnumType;
    hiredSame?: ISortEnumType;
    hiredFirstName?: ISortEnumType;
    hiredLastName?: ISortEnumType;
    hiredPhone?: ISortEnumType;
    hiredEmail?: ISortEnumType;
    hiredAddress?: ISortEnumType;
    frecuency?: ISortEnumType;
    packageName?: ISortEnumType;
    gender?: ISortEnumType;
    zipCode?: ISortEnumType;
    dateOfBirth?: ISortEnumType;
    carCode?: ISortEnumType;
    startValidity?: ISortEnumType;
    endValidity?: ISortEnumType;
    year?: ISortEnumType;
    discount?: ISortEnumType;
    coverage?: ISortEnumType;
    primalTotal?: ISortEnumType;
    deductible?: ISortEnumType;
    typeFrecuency?: ISortEnumType;
    firstPay?: ISortEnumType;
    secondPay?: ISortEnumType;
    status?: ISortEnumType;
    plaque?: ISortEnumType;
    compensationValue?: ISortEnumType;
    serialNumber?: ISortEnumType;
    car?: ICarQuotationSortInput;
    carId?: ISortEnumType;
    colony?: ISortEnumType;
    town?: ISortEnumType;
    state?: ISortEnumType;
    stateId?: ISortEnumType;
    brand?: ISortEnumType;
    subBrand?: ISortEnumType;
    description?: ISortEnumType;
    /**
     * Contiene el numero de la cotizacion y se utiliza para almacecenarlo en todas las cotizadoras para la emision
     */
    folio?: ISortEnumType;
    totalAmount?: ISortEnumType;
    netAmount?: ISortEnumType;
    iva?: ISortEnumType;
    surcharge?: ISortEnumType;
    derecho?: ISortEnumType;
    police?: ISortEnumType;
    service?: IInsurerServiceSortInput;
    insurerServiceId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ICarQuotationSortInput {
    id?: ISortEnumType;
    brand?: ISortEnumType;
    description?: ISortEnumType;
    subbrand?: ISortEnumType;
}
export interface IInsurerServiceSortInput {
    name?: ISortEnumType;
    codeName?: ISortEnumType;
    script?: ISortEnumType;
    template?: ISortEnumType;
    autos?: ISortEnumType;
    type?: ISortEnumType;
    module?: ISortEnumType;
    priority?: ISortEnumType;
    color?: ISortEnumType;
    logo?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IQuotationCoverage {
    name?: string;
    code?: string;
    sumAssured?: string;
    sumType?: string;
    deductible?: string;
    total?: string;
    neto?: string;
    priority: number;
    quoteId: IUUID;
    quote?: IQuote;
    insurerServiceId: IUUID;
    insurerService?: IInsurerService;
    insurerPackageStatus?: IInsurerPackageStatus;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuote {
    car: ICarQuotation;
    projectId: IUUID;
    memberId: IUUID;
    firstName?: string;
    lastName?: string;
    rFC?: string;
    phone?: string;
    email?: string;
    address?: string;
    hiredSame?: boolean;
    hiredFirstName?: string;
    hiredLastName?: string;
    hiredPhone?: string;
    hiredEmail?: string;
    hiredAddress?: string;
    frecuency?: number;
    packageName?: string;
    gender?: IQuoteGender;
    zipCode?: string;
    dateOfBirth?: IDateTime;
    carCode?: string;
    startValidity?: IDateTime;
    endValidity?: IDateTime;
    year?: number;
    discount?: number;
    coverage?: string;
    primalTotal?: string;
    deductible?: string;
    typeFrecuency?: string;
    firstPay?: string;
    secondPay?: string;
    status?: IQuoteStatus;
    plaque?: string;
    compensationValue?: string;
    serialNumber?: string;
    carId: number;
    colony?: string;
    town?: string;
    state?: string;
    stateId?: string;
    brand?: string;
    subBrand?: string;
    description?: string;
    /**
     * Contiene el numero de la cotizacion y se utiliza para almacecenarlo en todas las cotizadoras para la emision
     */
    folio?: string;
    totalAmount?: number;
    netAmount?: number;
    iva?: number;
    surcharge?: number;
    derecho?: number;
    police?: string;
    service?: IInsurerService;
    insurerServiceId?: IUUID;
    coverages: Array<IQuotationCoverage>;
    quoteServices: Array<IQuoteService>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMember;
}
export interface ICarQuotation {
    id: number;
    brand?: string;
    description?: string;
    subbrand?: string;
}
export interface IInsurerService {
    name: string;
    codeName?: string;
    script?: string;
    template?: string;
    autos: boolean;
    type?: string;
    module?: string;
    priority: number;
    color?: string;
    logo?: string;
    insurerServiceCredentials?: Array<IInsurerServiceCredential>;
    insurerServiceEnvironments?: Array<IInsurerServiceEnvironment>;
    insurers?: Array<IInsurer>;
    quoteServices?: Array<IQuoteService>;
    quotationCoverages?: Array<IQuotationCoverage>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerServiceCredential {
    projectId: IUUID;
    insurerServiceId: IUUID;
    insurerService?: IInsurerService;
    conduit?: string;
    username?: string;
    password?: string;
    rate?: string;
    agent?: string;
    group?: string;
    deal?: string;
    office?: string;
    cprogram?: string;
    default: boolean;
    active: boolean;
    extra?: string;
    discount?: number;
    owner?: string;
    token?: string;
    environment?: IServiceEnvironment;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerServiceEnvironment {
    insurerServiceId: IUUID;
    insurerService?: IInsurerService;
    environment?: IServiceEnvironment;
    reference?: string;
    endPoint?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurer {
    projectId: IUUID;
    insurerServiceId?: IUUID;
    insurerService?: IInsurerService;
    name: string;
    percentageMax?: IDecimal;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuoteService {
    quoteId: IUUID;
    quote?: IQuote;
    serviceId: IUUID;
    insurerService?: IInsurerService;
    discount?: string;
    deductible?: string;
    firstPay?: string;
    secondPay?: string;
    status?: IQuoteStatus;
    /**
     * Contiene el numero de la cotizacion y se utiliza para almacecenarlo en todas las cotizadoras para la emision
     */
    folio?: string;
    totalAmount?: string;
    netAmount?: string;
    derecho?: string;
    police?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IStaffQuoteFilterInput {
    and?: Array<IStaffQuoteFilterInput>;
    or?: Array<IStaffQuoteFilterInput>;
    solicitorId?: IComparableGuidOperationFilterInput;
    serviceId?: IComparableGuidOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    status?: INullableOfEnumQuoteStatusOperationFilterInput;
    collaborators?: Imultiquoter_ListFilterInputTypeOfCollaboratorFilterInput;
    proposals?: Imultiquoter_ListFilterInputTypeOfProposalFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumQuoteStatusOperationFilterInput {
    eq?: IEnumQuoteStatus;
    neq?: IEnumQuoteStatus;
    in?: Array<IEnumQuoteStatus | null>;
    nin?: Array<IEnumQuoteStatus | null>;
}
export declare const enum IEnumQuoteStatus {
    CANCELED = "CANCELED",
    APPROVED = "APPROVED",
    APPROVED_BY_CUSTOMER = "APPROVED_BY_CUSTOMER"
}
export interface Imultiquoter_ListFilterInputTypeOfCollaboratorFilterInput {
    all?: Imultiquoter_CollaboratorFilterInput;
    none?: Imultiquoter_CollaboratorFilterInput;
    some?: Imultiquoter_CollaboratorFilterInput;
    any?: boolean;
}
export interface Imultiquoter_CollaboratorFilterInput {
    and?: Array<Imultiquoter_CollaboratorFilterInput>;
    or?: Array<Imultiquoter_CollaboratorFilterInput>;
    memberId?: IComparableGuidOperationFilterInput;
    projectRoleId?: IComparableGuidOperationFilterInput;
    staffQuoteId?: IComparableGuidOperationFilterInput;
    estimatedTime?: IComparableNullableOfTimeSpanOperationFilterInput;
    amount?: IComparableNullableOfDecimalOperationFilterInput;
    staffQuote?: IStaffQuoteFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IComparableNullableOfTimeSpanOperationFilterInput {
    eq?: ITimeSpan;
    neq?: ITimeSpan;
    in?: Array<ITimeSpan | null>;
    nin?: Array<ITimeSpan | null>;
    gt?: ITimeSpan;
    ngt?: ITimeSpan;
    gte?: ITimeSpan;
    ngte?: ITimeSpan;
    lt?: ITimeSpan;
    nlt?: ITimeSpan;
    lte?: ITimeSpan;
    nlte?: ITimeSpan;
}
export interface Imultiquoter_ListFilterInputTypeOfProposalFilterInput {
    all?: Imultiquoter_ProposalFilterInput;
    none?: Imultiquoter_ProposalFilterInput;
    some?: Imultiquoter_ProposalFilterInput;
    any?: boolean;
}
export interface Imultiquoter_ProposalFilterInput {
    and?: Array<Imultiquoter_ProposalFilterInput>;
    or?: Array<Imultiquoter_ProposalFilterInput>;
    staffQuoteId?: IComparableGuidOperationFilterInput;
    methodology?: IStringOperationFilterInput;
    status?: INullableOfEnumQuoteStatusOperationFilterInput;
    staffQuote?: IStaffQuoteFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IStaffQuoteSortInput {
    solicitorId?: ISortEnumType;
    serviceId?: ISortEnumType;
    projectId?: ISortEnumType;
    status?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IStaffQuote {
    proposals: Array<Imultiquoter_Proposal>;
    collaborators: Array<Imultiquoter_Collaborator>;
    solicitorId: IUUID;
    serviceId: IUUID;
    projectId: IUUID;
    status?: IEnumQuoteStatus;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface Imultiquoter_Proposal {
    staffQuote: IStaffQuote;
    staffQuoteId: IUUID;
    methodology?: string;
    status?: IEnumQuoteStatus;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface Imultiquoter_Collaborator {
    staffQuote: IStaffQuote;
    memberId: IUUID;
    projectRoleId: IUUID;
    staffQuoteId: IUUID;
    estimatedTime?: ITimeSpan;
    amount?: IDecimal;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerCoverageProject {
    projectId: IUUID;
    insurerServiceId: IUUID;
    insurerService?: IInsurerService;
    insurerCoverageId: IUUID;
    insurerCoverage?: IInsurerCoverage;
    insurerPackages?: Array<IInsurerPackageStatus>;
    sumAssured?: string;
    sumType?: string;
    deductible?: string;
    prima?: string;
    deductibleOptions?: Array<string>;
    sumAssuredOptions?: Array<string>;
    isActive: boolean;
    visible: boolean;
    priority: number;
    ampliaAvailable: boolean;
    limitadaAvailable: boolean;
    rCAvailable: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerCoverage {
    code?: string;
    name: string;
    description?: string;
    insurerServiceId: IUUID;
    insurerService?: IInsurerService;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICotizacionPackage {
    id: number;
    sumassured?: string;
    deductible?: string;
    isbase: boolean;
    isactive: boolean;
    peroccupant: boolean;
    coverageId?: number;
    packageId?: number;
    serviceId: number;
    deductibleoptions?: Array<string>;
    sumassuredoptions?: Array<string>;
    priority: number;
    coverage?: ICoveragesCoverage;
    package?: ICoveragesPackagesList;
    service: IGenericsService;
}
export interface ICoveragesCoverage {
    id: number;
    code?: string;
    name: string;
    description?: string;
    insuranceId?: number;
    abbreviation?: string;
    insurance?: IGenericsService;
    cotizacionPackages: Array<ICotizacionPackage>;
}
export interface IGenericsService {
    registerUser: IServiceProcessPayload;
    runEmision: IServiceProcessPayload;
    printPolice: IServiceProcessPayload;
    id: number;
    name: string;
    script: string;
    template?: string;
    autos: boolean;
    type: string;
    module?: string;
    priority: number;
    color?: string;
    logo?: string;
    cotizacionCredentials: Array<ICotizacionCredential>;
    cotizacionPackages: Array<ICotizacionPackage>;
    cotizacionQuotes: Array<ICotizacionQuote>;
    coveragesCoverages: Array<ICoveragesCoverage>;
}
export interface IServiceProcessPayload {
    name: string;
    error: string;
    success: boolean;
    result: string;
}
export interface ICotizacionCredential {
    id: number;
    conduit?: string;
    username?: string;
    password?: string;
    rate?: string;
    agent?: string;
    group?: string;
    deal?: string;
    office?: string;
    cprogram?: string;
    default: boolean;
    active: boolean;
    extra?: string;
    serviceId?: number;
    discount?: number;
    owner?: string;
    production: boolean;
    service?: IGenericsService;
}
export interface ICotizacionQuote {
    issued: boolean;
    id: number;
    createdAt?: IDateTime;
    updatedAt?: IDateTime;
    paymentfrequency: string;
    startvigency?: IDate;
    endvigency?: IDate;
    cardescription?: string;
    totalamount?: IDecimal;
    surcharge?: IDecimal;
    folioquote?: string;
    police?: string;
    derecho?: IDecimal;
    pdf?: string;
    receiptpdf?: string;
    package?: string;
    iva?: IDecimal;
    netAmount?: IDecimal;
    selected: boolean;
    carCompanyCode?: string;
    carFormId?: number;
    serviceId?: number;
    status: number;
    extra?: string;
    carForm?: ICotizacionCarForm;
    service?: IGenericsService;
    cotizacionQuoteCoverages: Array<ICotizacionQuoteCoverage>;
    cotizacionQuotePayForms: Array<ICotizacionQuotePayForm>;
}
/**
 * The `Date` scalar represents an ISO-8601 compliant date type.
 */
export declare type IDate = any;
export interface ICotizacionCarForm {
    id: number;
    createdAt?: IDateTime;
    updatedAt?: IDateTime;
    cardescription: string;
    carId: string;
    year?: number;
    code?: string;
    serialNumber: string;
    engineNumber: string;
    paymentMethod: string;
    plates: string;
    owner?: number;
    clientId?: number;
    origin: string;
    client?: IClientsClient;
    cotizacionQuotes: Array<ICotizacionQuote>;
}
export interface IClientsClient {
    id: number;
    createdAt?: IDateTime;
    updatedAt?: IDateTime;
    firstname: string;
    lastname: string;
    age?: number;
    email?: string;
    phone: string;
    taxpayerid: string;
    secondlastname: string;
    birthdate?: IDate;
    civilStatus: string;
    gender: string;
    clientsAddresses: Array<IClientsAddress>;
    cotizacionCarForms: Array<ICotizacionCarForm>;
}
export interface IClientsAddress {
    id: number;
    city: string;
    state: string;
    zipcode: string;
    clientId?: number;
    suburb: string;
    internalnumber?: string;
    number: string;
    street: string;
    country: string;
    client?: IClientsClient;
}
export interface ICotizacionQuoteCoverage {
    id: number;
    createdAt?: IDateTime;
    updatedAt?: IDateTime;
    name?: string;
    cobId?: string;
    sumassured?: string;
    deductible?: string;
    total?: string;
    neto?: string;
    quoteId?: number;
    priority: number;
    quote?: ICotizacionQuote;
}
export interface ICotizacionQuotePayForm {
    id: number;
    netamount?: IDecimal;
    firstinstalment?: IDecimal;
    model: string;
    iva?: string;
    subsecuentinstalments?: IDecimal;
    rpf?: IDecimal;
    totalamount?: IDecimal;
    startvigency?: string;
    endvigency?: string;
    quoteId?: number;
    quantity: number;
    quote?: ICotizacionQuote;
}
export interface ICoveragesPackagesList {
    id: number;
    name: string;
    description?: string;
    ramo: number;
    active: boolean;
    cotizacionPackages: Array<ICotizacionPackage>;
}
export interface IQuoterRequestInput {
    quoteId: IUUID;
    serviceId: IUUID;
    discount?: string;
    coverageRequests?: Array<ICoverageRequestInput>;
    packageName: string;
    frecuency: number;
    makeCoverages?: boolean;
}
export interface ICoverageRequestInput {
    code: string;
    sumAssured?: string;
    sumType?: string;
    prima?: string;
    deductible?: string;
}
export interface IRunServicePayload {
    quoterResponse: IQuoterResponse;
}
export interface IQuoterResponse {
    primaTotal?: string;
    coverages?: Array<ICoverageService>;
    quoteId: IUUID;
    package?: string;
    product?: string;
    quoteFolio?: string;
    beginDate?: string;
    endDate?: string;
    carCompanyCode?: string;
    parentId?: string;
    responseQuoter?: IResponseApiInsurer;
}
export interface ICoverageService {
    coverageName?: string;
    cobId?: string;
    coverageSum?: string;
    coverageDeductible?: string;
    total?: string;
}
export interface IResponseApiInsurer {
    id?: number;
    parent_car_form?: string;
    prima_total?: string;
    quote_selected: boolean;
    emitido: boolean;
    url?: string;
    paquete?: string;
    frecuencia_pago?: string;
    dER?: string;
    cVE?: string;
    iVA?: string;
    rEC?: string;
    car_descr?: string;
    folio_quote?: string;
    fecha_inicio?: string;
    fecha_fin?: string;
    car_company_code?: string;
    parent_id?: number;
    service?: IService;
    quote_coverages?: Array<IQuoteCoverage>;
    quote_pay_frecuency?: Array<IQuotePayFrecuency>;
    discount_services?: Array<IDiscountService>;
}
export interface IService {
    url: string;
    name: string;
    id: number;
}
export interface IQuoteCoverage {
    coverage_name?: string;
    cob_id?: string;
    sum_coverage?: string;
    deductible_coverage?: string;
    total?: string;
}
export interface IQuotePayFrecuency {
    id?: number;
    first_pay?: string;
    tipe?: string;
    second_pay?: string;
    total_amount?: string;
    fecha_inicio?: string;
    fecha_fin?: string;
}
export interface IDiscountService {
    percentage?: IDecimal;
}
export interface IStadisticsResult {
    name: string;
    hg: string;
    percentaje: string;
    color?: string;
}
export interface IQuoterProfileFilterInput {
    and?: Array<IQuoterProfileFilterInput>;
    or?: Array<IQuoterProfileFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    officeId?: IComparableGuidOperationFilterInput;
    office?: IOfficeFilterInput;
    quoterProfileInsurers?: IListFilterInputTypeOfQuoterProfileInsurerFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IOfficeFilterInput {
    and?: Array<IOfficeFilterInput>;
    or?: Array<IOfficeFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfQuoterProfileInsurerFilterInput {
    all?: IQuoterProfileInsurerFilterInput;
    none?: IQuoterProfileInsurerFilterInput;
    some?: IQuoterProfileInsurerFilterInput;
    any?: boolean;
}
export interface IQuoterProfileInsurerFilterInput {
    and?: Array<IQuoterProfileInsurerFilterInput>;
    or?: Array<IQuoterProfileInsurerFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    quoterProfileId?: IComparableGuidOperationFilterInput;
    quoterProfile?: IQuoterProfileFilterInput;
    insurerId?: IComparableGuidOperationFilterInput;
    insurer?: IInsurerFilterInput;
    percentageBase?: IComparableDecimalOperationFilterInput;
    percentageMax?: IComparableDecimalOperationFilterInput;
    portalAgentQuote?: IBooleanOperationFilterInput;
    portalAgentEmits?: IBooleanOperationFilterInput;
    portalPublicQuote?: IBooleanOperationFilterInput;
    portalPublicEmits?: IBooleanOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IQuoterProfileSortInput {
    projectId?: ISortEnumType;
    name?: ISortEnumType;
    officeId?: ISortEnumType;
    office?: IOfficeSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IOfficeSortInput {
    projectId?: ISortEnumType;
    name?: ISortEnumType;
    description?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
/**
 * A connection to a list of items.
 */
export interface IListRQuoterProfilesByProjectIdConnection {
    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;
    /**
     * A list of edges.
     */
    edges?: Array<IListRQuoterProfilesByProjectIdEdge>;
    /**
     * A flattened list of the nodes.
     */
    nodes?: Array<IQuoterProfile>;
    totalCount: number;
}
/**
 * An edge in a connection.
 */
export interface IListRQuoterProfilesByProjectIdEdge {
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    /**
     * The item at the end of the edge.
     */
    node: IQuoterProfile;
}
export interface IQuoterProfile {
    projectId: IUUID;
    name: string;
    officeId: IUUID;
    office?: IOffice;
    quoterProfileInsurers?: Array<IQuoterProfileInsurer>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IOffice {
    projectId: IUUID;
    name?: string;
    description?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuoterProfileInsurer {
    projectId: IUUID;
    quoterProfileId: IUUID;
    quoterProfile?: IQuoterProfile;
    insurerId: IUUID;
    insurer?: IInsurer;
    percentageBase: IDecimal;
    percentageMax: IDecimal;
    portalAgentQuote: boolean;
    portalAgentEmits: boolean;
    portalPublicQuote: boolean;
    portalPublicEmits: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuoterProfileInsurerSortInput {
    projectId?: ISortEnumType;
    quoterProfileId?: ISortEnumType;
    quoterProfile?: IQuoterProfileSortInput;
    insurerId?: ISortEnumType;
    insurer?: IInsurerSortInput;
    percentageBase?: ISortEnumType;
    percentageMax?: ISortEnumType;
    portalAgentQuote?: ISortEnumType;
    portalAgentEmits?: ISortEnumType;
    portalPublicQuote?: ISortEnumType;
    portalPublicEmits?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerSortInput {
    projectId?: ISortEnumType;
    insurerServiceId?: ISortEnumType;
    insurerService?: IInsurerServiceSortInput;
    name?: ISortEnumType;
    percentageMax?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
/**
 * A connection to a list of items.
 */
export interface IListRQuoterProfilesInsurerByProjectIdConnection {
    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;
    /**
     * A list of edges.
     */
    edges?: Array<IListRQuoterProfilesInsurerByProjectIdEdge>;
    /**
     * A flattened list of the nodes.
     */
    nodes?: Array<IQuoterProfileInsurer>;
    totalCount: number;
}
/**
 * An edge in a connection.
 */
export interface IListRQuoterProfilesInsurerByProjectIdEdge {
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    /**
     * The item at the end of the edge.
     */
    node: IQuoterProfileInsurer;
}
export interface IHomologator {
    abaCodeId?: string;
    afirmeCodeId?: string;
    aigCodeId?: string;
    anaCodeId?: string;
    atlasCodeId?: string;
    axaCodeId?: string;
    banorteCodeId?: string;
    gnpCodeId?: string;
    hdiCodeId?: string;
    potosiCodeId?: string;
    psCodeId?: string;
    qualitasCodeId?: string;
    zurichCodeId?: string;
    mapfreCodeId?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuoteCollectionSegment {
    items?: Array<IQuote>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IQuoteCount {
    count: number;
}
export interface IRegistrationFilterInput {
    and?: Array<IRegistrationFilterInput>;
    or?: Array<IRegistrationFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    email?: IStringOperationFilterInput;
    state?: IStringOperationFilterInput;
    city?: IStringOperationFilterInput;
    tradename?: IStringOperationFilterInput;
    company?: IStringOperationFilterInput;
    interests?: IListBooleanOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListBooleanOperationFilterInput {
    all?: IBooleanOperationFilterInput;
    none?: IBooleanOperationFilterInput;
    some?: IBooleanOperationFilterInput;
    any?: boolean;
}
export interface IRegistrationSortInput {
    projectId?: ISortEnumType;
    name?: ISortEnumType;
    email?: ISortEnumType;
    state?: ISortEnumType;
    city?: ISortEnumType;
    tradename?: ISortEnumType;
    company?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IRegistration {
    projectId: IUUID;
    name: string;
    email: string;
    state?: string;
    city?: string;
    tradename?: string;
    company?: string;
    interests?: Array<boolean>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuoter {
    quote?: IQuote;
    services?: Array<IInsurerService>;
}
export interface IGenderDTO {
    name: string;
}
export interface ICarTypeDTO {
    name: string;
}
export interface IListBrandDTO {
    name: string;
    insurer: string;
}
export interface IListSubBrandDTO {
    name: string;
    insurer: string;
}
export interface IListYearDTO {
    year: ILong;
    insurer: string;
}
export interface IListVersionDTO {
    carId: string;
    version: string;
    cveveh: string;
    insurer: string;
}
export interface IHomologationService {
    homologated: boolean;
    name: string;
    codeName: string;
    homologateDescription?: string;
    color: string;
    logo: string;
}
export interface IColoniaDTO {
    colonias?: Array<string>;
    estado?: IEstadoDTO;
    municipio?: string;
    munid?: string;
}
export interface IEstadoDTO {
    name?: string;
    value?: number;
}
export interface ICoverageDTO {
    servicename: string;
    type: string;
    obligatory: Array<ICotizacionPackage>;
    optional: Array<ICotizacionPackage>;
}
export interface ICatalogFilterInput {
    and?: Array<ICatalogFilterInput>;
    or?: Array<ICatalogFilterInput>;
    brand?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    subBrand?: IStringOperationFilterInput;
    catalogType?: IStringOperationFilterInput;
    oldId?: IComparableInt32OperationFilterInput;
    years?: IListFilterInputTypeOfCatalogByYearFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfCatalogByYearFilterInput {
    all?: ICatalogByYearFilterInput;
    none?: ICatalogByYearFilterInput;
    some?: ICatalogByYearFilterInput;
    any?: boolean;
}
export interface ICatalogByYearFilterInput {
    and?: Array<ICatalogByYearFilterInput>;
    or?: Array<ICatalogByYearFilterInput>;
    year?: IComparableInt32OperationFilterInput;
    cveveh?: IStringOperationFilterInput;
    catalogId?: IComparableGuidOperationFilterInput;
    catalog?: ICatalogFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ICatalogSortInput {
    brand?: ISortEnumType;
    description?: ISortEnumType;
    subBrand?: ISortEnumType;
    catalogType?: ISortEnumType;
    oldId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ICatalogCollectionSegment {
    items?: Array<Imultiquoter_Catalog>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface Imultiquoter_Catalog {
    brand: string;
    description: string;
    subBrand: string;
    catalogType: string;
    oldId: number;
    years: Array<ICatalogByYear>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICatalogByYear {
    year: number;
    cveveh: string;
    catalogId: IUUID;
    catalog?: Imultiquoter_Catalog;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerCollectionSegment {
    items?: Array<IInsurer>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IOfficeCollectionSegment {
    items?: Array<IOffice>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IQuoterProfileCollectionSegment {
    items?: Array<IQuoterProfile>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IVehiclesCarCatalogAbaSortInput {
    id?: ISortEnumType;
    brand?: ISortEnumType;
    description?: ISortEnumType;
    subbrand?: ISortEnumType;
    occupants?: ISortEnumType;
    type?: ISortEnumType;
}
export interface IVehiclesCarCatalogAfirmeSortInput {
    id?: ISortEnumType;
    brand?: ISortEnumType;
    subbrand?: ISortEnumType;
    description?: ISortEnumType;
}
export interface IVehiclesCarCatalogAigSortInput {
    id?: ISortEnumType;
    brand?: ISortEnumType;
    year?: ISortEnumType;
    description?: ISortEnumType;
    subbrand?: ISortEnumType;
}
export interface IVehiclesCarCatalogAnaSortInput {
    id?: ISortEnumType;
    subbrand?: ISortEnumType;
    description?: ISortEnumType;
    brand?: ISortEnumType;
}
export interface IVehiclesCarCatalogAtlaSortInput {
    id?: ISortEnumType;
    brand?: ISortEnumType;
    subbrand?: ISortEnumType;
    description?: ISortEnumType;
}
export interface IVehiclesCarCatalogAxaSortInput {
    id?: ISortEnumType;
    brand?: ISortEnumType;
    subbrand?: ISortEnumType;
    descriptionLinea?: ISortEnumType;
    description?: ISortEnumType;
    camis?: ISortEnumType;
    categoria?: ISortEnumType;
    segmento?: ISortEnumType;
    brandId?: ISortEnumType;
    versionId?: ISortEnumType;
    versionIdSec?: ISortEnumType;
    categoriaId?: ISortEnumType;
    lineaId?: ISortEnumType;
}
export interface IVehiclesCarCatalogBanorteSortInput {
    id?: ISortEnumType;
    brand?: ISortEnumType;
    subbrand?: ISortEnumType;
    description?: ISortEnumType;
}
export interface IVehiclesCarCatalogGnpSortInput {
    id?: ISortEnumType;
    brand?: ISortEnumType;
    subbrand?: ISortEnumType;
    description?: ISortEnumType;
}
export interface IVehiclesCarCatalogPSortInput {
    id?: ISortEnumType;
    brand?: ISortEnumType;
    subbrand?: ISortEnumType;
    description?: ISortEnumType;
    cPs?: ISortEnumType;
}
export interface IVehiclesCarCatalogPotosiSortInput {
    id?: ISortEnumType;
    brand?: ISortEnumType;
    subbrand?: ISortEnumType;
    description?: ISortEnumType;
    cPotosi?: ISortEnumType;
}
export interface IVehiclesCarCatalogAbaCodeYearSortInput {
    id?: ISortEnumType;
    year?: ISortEnumType;
    cveveh?: ISortEnumType;
    carId?: ISortEnumType;
    car?: IVehiclesCarCatalogAbaSortInput;
}
export interface IVehiclesCarCatalogAfirmeCodeYearSortInput {
    id?: ISortEnumType;
    year?: ISortEnumType;
    cAfirme?: ISortEnumType;
    carId?: ISortEnumType;
    car?: IVehiclesCarCatalogAfirmeSortInput;
}
export interface IVehiclesCarCatalogAxaCodeYearSortInput {
    id?: ISortEnumType;
    year?: ISortEnumType;
    cAxa?: ISortEnumType;
    carId?: ISortEnumType;
    car?: IVehiclesCarCatalogAxaSortInput;
}
export interface IVehiclesCarCatalogAtlasCodeYearSortInput {
    id?: ISortEnumType;
    year?: ISortEnumType;
    cAtlas?: ISortEnumType;
    carId?: ISortEnumType;
    car?: IVehiclesCarCatalogAtlaSortInput;
}
export interface IVehiclesCarCatalogBanorteCodeYearSortInput {
    id?: ISortEnumType;
    year?: ISortEnumType;
    cBanorte?: ISortEnumType;
    carId?: ISortEnumType;
    car?: IVehiclesCarCatalogBanorteSortInput;
}
export interface IVehiclesCarCatalogGnpCodeYearSortInput {
    id?: ISortEnumType;
    year?: ISortEnumType;
    cGnp?: ISortEnumType;
    carId?: ISortEnumType;
    car?: IVehiclesCarCatalogGnpSortInput;
}
export interface IApiService {
    projectId: IUUID;
    label: string;
    serviceCode: string;
    secretKey: string;
    expiration: IDateTime;
    url?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDynamicPageFilterInput {
    and?: Array<IDynamicPageFilterInput>;
    or?: Array<IDynamicPageFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    label?: IStringOperationFilterInput;
    dynamicSections?: IListFilterInputTypeOfDynamicSectionFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfDynamicSectionFilterInput {
    all?: IDynamicSectionFilterInput;
    none?: IDynamicSectionFilterInput;
    some?: IDynamicSectionFilterInput;
    any?: boolean;
}
export interface IDynamicSectionFilterInput {
    and?: Array<IDynamicSectionFilterInput>;
    or?: Array<IDynamicSectionFilterInput>;
    position?: IComparableInt32OperationFilterInput;
    isPrimary?: IBooleanOperationFilterInput;
    dynamicPageId?: IComparableGuidOperationFilterInput;
    dynamicPage?: IDynamicPageFilterInput;
    dynamicTabs?: IListFilterInputTypeOfDynamicTabFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfDynamicTabFilterInput {
    all?: IDynamicTabFilterInput;
    none?: IDynamicTabFilterInput;
    some?: IDynamicTabFilterInput;
    any?: boolean;
}
export interface IDynamicTabFilterInput {
    and?: Array<IDynamicTabFilterInput>;
    or?: Array<IDynamicTabFilterInput>;
    name?: IStringOperationFilterInput;
    position?: IComparableInt32OperationFilterInput;
    dynamicSectionId?: IComparableGuidOperationFilterInput;
    dynamicSection?: IDynamicSectionFilterInput;
    dynamicSectionBlocks?: IListFilterInputTypeOfDynamicSectionBlockFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfDynamicSectionBlockFilterInput {
    all?: IDynamicSectionBlockFilterInput;
    none?: IDynamicSectionBlockFilterInput;
    some?: IDynamicSectionBlockFilterInput;
    any?: boolean;
}
export interface IDynamicSectionBlockFilterInput {
    and?: Array<IDynamicSectionBlockFilterInput>;
    or?: Array<IDynamicSectionBlockFilterInput>;
    label?: IStringOperationFilterInput;
    position?: IComparableInt32OperationFilterInput;
    style?: IStringOperationFilterInput;
    dynamicBlockId?: IComparableGuidOperationFilterInput;
    dynamicTabId?: IComparableGuidOperationFilterInput;
    dynamicTab?: IDynamicTabFilterInput;
    dynamicBlock?: IDynamicBlockFilterInput;
    dynamicCustomMetas?: IListFilterInputTypeOfDynamicCustomMetaFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IDynamicBlockFilterInput {
    and?: Array<IDynamicBlockFilterInput>;
    or?: Array<IDynamicBlockFilterInput>;
    codeName?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    services?: IStringOperationFilterInput;
    components?: IStringOperationFilterInput;
    style?: IStringOperationFilterInput;
    dynamicSectionBlocks?: IListFilterInputTypeOfDynamicSectionBlockFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfDynamicCustomMetaFilterInput {
    all?: IDynamicCustomMetaFilterInput;
    none?: IDynamicCustomMetaFilterInput;
    some?: IDynamicCustomMetaFilterInput;
    any?: boolean;
}
export interface IDynamicCustomMetaFilterInput {
    and?: Array<IDynamicCustomMetaFilterInput>;
    or?: Array<IDynamicCustomMetaFilterInput>;
    metaKey?: IStringOperationFilterInput;
    metaType?: IMetaTypeOperationFilterInput;
    label?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    position?: IComparableInt32OperationFilterInput;
    dynamicSectionBlockId?: IComparableGuidOperationFilterInput;
    dynamicSectionBlocks?: IDynamicSectionBlockFilterInput;
    dynamicCustomValues?: IListFilterInputTypeOfDynamicCustomValueFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IMetaTypeOperationFilterInput {
    eq?: IMetaType;
    neq?: IMetaType;
    in?: Array<IMetaType>;
    nin?: Array<IMetaType>;
}
export declare const enum IMetaType {
    INT = "INT",
    STRING = "STRING",
    FLOAT = "FLOAT",
    BOOLEAN = "BOOLEAN"
}
export interface IListFilterInputTypeOfDynamicCustomValueFilterInput {
    all?: IDynamicCustomValueFilterInput;
    none?: IDynamicCustomValueFilterInput;
    some?: IDynamicCustomValueFilterInput;
    any?: boolean;
}
export interface IDynamicCustomValueFilterInput {
    and?: Array<IDynamicCustomValueFilterInput>;
    or?: Array<IDynamicCustomValueFilterInput>;
    memberId?: IComparableGuidOperationFilterInput;
    dynamicCustomMetaId?: IComparableGuidOperationFilterInput;
    dynamicCustomMetas?: IDynamicCustomMetaFilterInput;
    value?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IDynamicPageSortInput {
    projectId?: ISortEnumType;
    name?: ISortEnumType;
    label?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IDynamicPage {
    dynamicSections: Array<IDynamicSection>;
    projectId: IUUID;
    name: string;
    label: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDynamicSection {
    dynamicPage: IDynamicPage;
    dynamicTabs: Array<IDynamicTab>;
    position: number;
    isPrimary: boolean;
    dynamicPageId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDynamicTab {
    dynamicSection: IDynamicSection;
    dynamicSectionBlocks: Array<IDynamicSectionBlock>;
    name: string;
    position: number;
    dynamicSectionId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDynamicSectionBlock {
    dynamicTab: IDynamicTab;
    dynamicBlock: IDynamicBlock;
    dynamicCustomMetas: Array<IDynamicCustomMeta>;
    label: string;
    position: number;
    style?: string;
    dynamicBlockId: IUUID;
    dynamicTabId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDynamicBlock {
    dynamicSectionBlocks: Array<IDynamicSectionBlock>;
    codeName: string;
    description?: string;
    services?: string;
    components?: string;
    style?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDynamicCustomMeta {
    dynamicSectionBlocks: IDynamicSectionBlock;
    dynamicCustomValues: Array<IDynamicCustomValue>;
    metaKey: string;
    metaType: IMetaType;
    label: string;
    description?: string;
    position: number;
    dynamicSectionBlockId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDynamicCustomValue {
    dynamicCustomMetas: IDynamicCustomMeta;
    memberId: IUUID;
    dynamicCustomMetaId: IUUID;
    value: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDynamicBlockSortInput {
    codeName?: ISortEnumType;
    description?: ISortEnumType;
    services?: ISortEnumType;
    components?: ISortEnumType;
    style?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IDynamicBlockCollectionSegment {
    items?: Array<IDynamicBlock>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
}
export interface IDynamicSectionSortInput {
    position?: ISortEnumType;
    isPrimary?: ISortEnumType;
    dynamicPageId?: ISortEnumType;
    dynamicPage?: IDynamicPageSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IDynamicSectionCollectionSegment {
    items?: Array<IDynamicSection>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
}
export interface IDynamicTabSortInput {
    name?: ISortEnumType;
    position?: ISortEnumType;
    dynamicSectionId?: ISortEnumType;
    dynamicSection?: IDynamicSectionSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IDynamicTabCollectionSegment {
    items?: Array<IDynamicTab>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
}
export interface IDynamicSectionBlockSortInput {
    label?: ISortEnumType;
    position?: ISortEnumType;
    style?: ISortEnumType;
    dynamicBlockId?: ISortEnumType;
    dynamicTabId?: ISortEnumType;
    dynamicTab?: IDynamicTabSortInput;
    dynamicBlock?: IDynamicBlockSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IDynamicSectionBlockCollectionSegment {
    items?: Array<IDynamicSectionBlock>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
}
export interface IDynamicCustomMetaSortInput {
    metaKey?: ISortEnumType;
    metaType?: ISortEnumType;
    label?: ISortEnumType;
    description?: ISortEnumType;
    position?: ISortEnumType;
    dynamicSectionBlockId?: ISortEnumType;
    dynamicSectionBlocks?: IDynamicSectionBlockSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IDynamicCustomMetaCollectionSegment {
    items?: Array<IDynamicCustomMeta>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
}
export interface IDynamicCustomValueSortInput {
    memberId?: ISortEnumType;
    dynamicCustomMetaId?: ISortEnumType;
    dynamicCustomMetas?: IDynamicCustomMetaSortInput;
    value?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IDynamicCustomValueCollectionSegment {
    items?: Array<IDynamicCustomValue>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
}
export interface IChargeFilterInput {
    and?: Array<IChargeFilterInput>;
    or?: Array<IChargeFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    eventId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    total?: IComparableDecimalOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IChargeSortInput {
    projectId?: ISortEnumType;
    eventId?: ISortEnumType;
    memberId?: ISortEnumType;
    total?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IChargeCollectionSegment {
    items?: Array<ICharge>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ICharge {
    projectId: IUUID;
    eventId: IUUID;
    memberId: IUUID;
    total: IDecimal;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IClinicHistoryFilterInput {
    and?: Array<IClinicHistoryFilterInput>;
    or?: Array<IClinicHistoryFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    eventId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    notes?: IStringOperationFilterInput;
    isVisible?: IBooleanOperationFilterInput;
    position?: IComparableNullableOfInt32OperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IClinicHistorySortInput {
    projectId?: ISortEnumType;
    eventId?: ISortEnumType;
    memberId?: ISortEnumType;
    notes?: ISortEnumType;
    isVisible?: ISortEnumType;
    position?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IClinicHistory {
    projectId: IUUID;
    eventId: IUUID;
    memberId: IUUID;
    notes: string;
    isVisible?: boolean;
    position?: number;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IEventDetailFilterInput {
    and?: Array<IEventDetailFilterInput>;
    or?: Array<IEventDetailFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    eventId?: IComparableGuidOperationFilterInput;
    subTotal?: IComparableDecimalOperationFilterInput;
    descuento?: IComparableDecimalOperationFilterInput;
    tax?: IComparableDecimalOperationFilterInput;
    total?: IComparableDecimalOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IEventDetailSortInput {
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    eventId?: ISortEnumType;
    subTotal?: ISortEnumType;
    descuento?: ISortEnumType;
    tax?: ISortEnumType;
    total?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IEventDetailCollectionSegment {
    items?: Array<IEventDetail>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IFisicExamFilterInput {
    and?: Array<IFisicExamFilterInput>;
    or?: Array<IFisicExamFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    eventId?: IComparableGuidOperationFilterInput;
    title?: IStringOperationFilterInput;
    content?: IStringOperationFilterInput;
    isVisible?: IBooleanOperationFilterInput;
    position?: IComparableNullableOfInt32OperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IFisicExamSortInput {
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    eventId?: ISortEnumType;
    title?: ISortEnumType;
    content?: ISortEnumType;
    isVisible?: ISortEnumType;
    position?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMedicalBackgroundSortInput {
    projectId?: ISortEnumType;
    formatId?: ISortEnumType;
    format?: IFormatSortInput;
    label?: ISortEnumType;
    isVisible?: ISortEnumType;
    position?: ISortEnumType;
    pacientMedicalBackground?: IPacientMedicalBackgroundSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IFormatSortInput {
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    eventTypeId?: ISortEnumType;
    nameFormat?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPacientMedicalBackgroundSortInput {
    medicalBackgroundDetailId?: ISortEnumType;
    medicalBackgroundDetail?: IMedicalBackgroundDetailSortInput;
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    eventId?: ISortEnumType;
    text?: ISortEnumType;
    isResponse?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMedicalBackgroundDetailSortInput {
    projectId?: ISortEnumType;
    medicalBackgroundId?: ISortEnumType;
    medicalBackground?: IMedicalBackgroundSortInput;
    label?: ISortEnumType;
    backgroundTypeOption?: ISortEnumType;
    isOption?: ISortEnumType;
    isVisible?: ISortEnumType;
    position?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IClinicHistoryMedicalBackgroundDetailSortInput {
    medicalBackgroundDetailId?: ISortEnumType;
    medicalBackgroundDetail?: IMedicalBackgroundDetailSortInput;
    backgroundType?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMedicineFilterInput {
    and?: Array<IMedicineFilterInput>;
    or?: Array<IMedicineFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    eventId?: IComparableGuidOperationFilterInput;
    medicineName?: IStringOperationFilterInput;
    take?: IStringOperationFilterInput;
    frecuency?: IStringOperationFilterInput;
    duration?: IStringOperationFilterInput;
    isVisible?: IBooleanOperationFilterInput;
    position?: IComparableInt32OperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IMedicineSortInput {
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    eventId?: ISortEnumType;
    medicineName?: ISortEnumType;
    take?: ISortEnumType;
    frecuency?: ISortEnumType;
    duration?: ISortEnumType;
    isVisible?: ISortEnumType;
    position?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMedicalServiceFilterInput {
    and?: Array<IMedicalServiceFilterInput>;
    or?: Array<IMedicalServiceFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    state?: IBooleanOperationFilterInput;
    name?: IStringOperationFilterInput;
    mode?: IServiceOptionOperationFilterInput;
    cost?: IComparableDecimalOperationFilterInput;
    imgRoute?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IServiceOptionOperationFilterInput {
    eq?: IServiceOption;
    neq?: IServiceOption;
    in?: Array<IServiceOption>;
    nin?: Array<IServiceOption>;
}
export declare const enum IServiceOption {
    PRESENCIAL = "PRESENCIAL",
    ONLINE = "ONLINE"
}
export interface IMedicalServiceSortInput {
    projectId?: ISortEnumType;
    state?: ISortEnumType;
    name?: ISortEnumType;
    mode?: ISortEnumType;
    cost?: ISortEnumType;
    imgRoute?: ISortEnumType;
    description?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMedicalService {
    projectId: IUUID;
    state: boolean;
    name: string;
    mode: IServiceOption;
    cost: IDecimal;
    imgRoute: string;
    description: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IVaccineFilterInput {
    and?: Array<IVaccineFilterInput>;
    or?: Array<IVaccineFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    nameVac?: IStringOperationFilterInput;
    dateAplicationVac?: IComparableDateTimeOperationFilterInput;
    nextVac?: IComparableNullableOfDateTimeOperationFilterInput;
    notesVac?: IStringOperationFilterInput;
    position?: IComparableNullableOfInt32OperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IVaccineSortInput {
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    nameVac?: ISortEnumType;
    dateAplicationVac?: ISortEnumType;
    nextVac?: ISortEnumType;
    notesVac?: ISortEnumType;
    position?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IVitalSignFilterInput {
    and?: Array<IVitalSignFilterInput>;
    or?: Array<IVitalSignFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    labelNameVt?: IStringOperationFilterInput;
    isVisible?: IBooleanOperationFilterInput;
    position?: IComparableNullableOfInt32OperationFilterInput;
    patientVitalSignsResponse?: IPatientVitalSignsResponseFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IPatientVitalSignsResponseFilterInput {
    and?: Array<IPatientVitalSignsResponseFilterInput>;
    or?: Array<IPatientVitalSignsResponseFilterInput>;
    vitalSignId?: IComparableGuidOperationFilterInput;
    vitalSign?: IVitalSignFilterInput;
    eventId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    value?: IComparableNullableOfDecimalOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IVitalSignSortInput {
    projectId?: ISortEnumType;
    labelNameVt?: ISortEnumType;
    isVisible?: ISortEnumType;
    position?: ISortEnumType;
    patientVitalSignsResponse?: IPatientVitalSignsResponseSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPatientVitalSignsResponseSortInput {
    vitalSignId?: ISortEnumType;
    vitalSign?: IVitalSignSortInput;
    eventId?: ISortEnumType;
    memberId?: ISortEnumType;
    value?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMedicalConfigFilterInput {
    and?: Array<IMedicalConfigFilterInput>;
    or?: Array<IMedicalConfigFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    patologis?: IBooleanOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IMedicalConfigSortInput {
    projectId?: ISortEnumType;
    patologis?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMedicalConfig {
    projectId: IUUID;
    patologis: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IRegistSesionFilterInput {
    and?: Array<IRegistSesionFilterInput>;
    or?: Array<IRegistSesionFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    therapyId?: IComparableGuidOperationFilterInput;
    therapy?: ITherapyFilterInput;
    title?: IStringOperationFilterInput;
    namePacient?: IStringOperationFilterInput;
    terapist?: IStringOperationFilterInput;
    dateSesion?: IComparableDateTimeOperationFilterInput;
    comments?: IStringOperationFilterInput;
    electronicsign?: IStringOperationFilterInput;
    legalType?: IBooleanOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ITherapyFilterInput {
    and?: Array<ITherapyFilterInput>;
    or?: Array<ITherapyFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    eventId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    numSesion?: IComparableDecimalOperationFilterInput;
    content?: IStringOperationFilterInput;
    isVisible?: IBooleanOperationFilterInput;
    position?: IComparableNullableOfInt32OperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IRegistSesionSortInput {
    projectId?: ISortEnumType;
    therapyId?: ISortEnumType;
    therapy?: ITherapySortInput;
    title?: ISortEnumType;
    namePacient?: ISortEnumType;
    terapist?: ISortEnumType;
    dateSesion?: ISortEnumType;
    comments?: ISortEnumType;
    electronicsign?: ISortEnumType;
    legalType?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ITherapySortInput {
    projectId?: ISortEnumType;
    eventId?: ISortEnumType;
    memberId?: ISortEnumType;
    numSesion?: ISortEnumType;
    content?: ISortEnumType;
    isVisible?: ISortEnumType;
    position?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IRegistSesion {
    projectId: IUUID;
    therapyId: IUUID;
    therapy: ITherapy;
    title: string;
    namePacient: string;
    terapist: string;
    dateSesion: IDateTime;
    comments: string;
    electronicsign: string;
    legalType: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ITherapy {
    projectId: IUUID;
    eventId: IUUID;
    memberId: IUUID;
    numSesion: IDecimal;
    content: string;
    isVisible?: boolean;
    position?: number;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ITherapyCollectionSegment {
    items?: Array<ITherapy>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IRecipeConfigFilterInput {
    and?: Array<IRecipeConfigFilterInput>;
    or?: Array<IRecipeConfigFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    medicRecipeId?: IComparableGuidOperationFilterInput;
    medicRecipe?: IMedicRecipeFilterInput;
    isActiveAllPacients?: IBooleanOperationFilterInput;
    isAccessDataPacient?: IBooleanOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IMedicRecipeFilterInput {
    and?: Array<IMedicRecipeFilterInput>;
    or?: Array<IMedicRecipeFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    profesionalCell?: IStringOperationFilterInput;
    speciality?: IStringOperationFilterInput;
    institute?: IStringOperationFilterInput;
    electronicSing?: IStringOperationFilterInput;
    isCorrect?: IBooleanOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IRecipeConfigSortInput {
    projectId?: ISortEnumType;
    medicRecipeId?: ISortEnumType;
    medicRecipe?: IMedicRecipeSortInput;
    isActiveAllPacients?: ISortEnumType;
    isAccessDataPacient?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMedicRecipeSortInput {
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    profesionalCell?: ISortEnumType;
    speciality?: ISortEnumType;
    institute?: ISortEnumType;
    electronicSing?: ISortEnumType;
    isCorrect?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IRecipeConfig {
    projectId: IUUID;
    medicRecipeId: IUUID;
    medicRecipe: IMedicRecipe;
    isActiveAllPacients: boolean;
    isAccessDataPacient: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IConsultNoteFilterInput {
    and?: Array<IConsultNoteFilterInput>;
    or?: Array<IConsultNoteFilterInput>;
    eventId?: IComparableGuidOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    note?: IStringOperationFilterInput;
    isVisible?: IBooleanOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IConsultNoteSortInput {
    eventId?: ISortEnumType;
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    note?: ISortEnumType;
    isVisible?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IConsultNote {
    eventId: IUUID;
    projectId: IUUID;
    memberId: IUUID;
    note?: string;
    isVisible: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPacientNoteFilterInput {
    and?: Array<IPacientNoteFilterInput>;
    or?: Array<IPacientNoteFilterInput>;
    memberId?: IComparableGuidOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    eventId?: IComparableGuidOperationFilterInput;
    note?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IPacientNoteSortInput {
    memberId?: ISortEnumType;
    projectId?: ISortEnumType;
    eventId?: ISortEnumType;
    note?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IDiagnosticFilterInput {
    and?: Array<IDiagnosticFilterInput>;
    or?: Array<IDiagnosticFilterInput>;
    eventId?: IComparableGuidOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    content?: IStringOperationFilterInput;
    isVisible?: IBooleanOperationFilterInput;
    medicines?: IListFilterInputTypeOfMedicineFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfMedicineFilterInput {
    all?: IMedicineFilterInput;
    none?: IMedicineFilterInput;
    some?: IMedicineFilterInput;
    any?: boolean;
}
export interface IDiagnosticSortInput {
    eventId?: ISortEnumType;
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    content?: ISortEnumType;
    isVisible?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IBillingRequest {
    projectId: IUUID;
    memberId: IUUID;
    eventId: IUUID;
    socialReason?: string;
    rfc?: string;
    cFDI?: string;
    socialRegiment?: string;
    cP?: string;
    email?: string;
    status?: boolean;
    billingUrl?: string;
    emailContent?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IConsultDto {
    consultNote?: IConsultNote;
    fisicExam?: IFisicExam;
    diagnostic?: IDiagnostic;
    therapy?: ITherapy;
    patientVitalSignsResponse?: Array<IPatientVitalSignsResponse>;
    medicine?: Array<IMedicine>;
    pacientNote?: IPacientNote;
}
export interface ISpaceFilterInput {
    and?: Array<ISpaceFilterInput>;
    or?: Array<ISpaceFilterInput>;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    image?: IStringOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    areaId?: IComparableNullableOfGuidOperationFilterInput;
    visibility?: INullableOfEnumVisibilityOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    boards?: IListFilterInputTypeOfBoardFilterInput;
    memberSpaces?: IListFilterInputTypeOfMemberSpaceFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumVisibilityOperationFilterInput {
    eq?: IEnumVisibility;
    neq?: IEnumVisibility;
    in?: Array<IEnumVisibility | null>;
    nin?: Array<IEnumVisibility | null>;
}
export interface IListFilterInputTypeOfBoardFilterInput {
    all?: IBoardFilterInput;
    none?: IBoardFilterInput;
    some?: IBoardFilterInput;
    any?: boolean;
}
export interface IBoardFilterInput {
    and?: Array<IBoardFilterInput>;
    or?: Array<IBoardFilterInput>;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    order?: IComparableInt32OperationFilterInput;
    color?: IStringOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    serviceId?: IComparableNullableOfGuidOperationFilterInput;
    spaceId?: IComparableGuidOperationFilterInput;
    space?: ISpaceFilterInput;
    boardStatus?: IListFilterInputTypeOfBoardStatusFilterInput;
    boardLists?: IListFilterInputTypeOfBoardListFilterInput;
    memberBoards?: IListFilterInputTypeOfMemberBoardFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfBoardStatusFilterInput {
    all?: IBoardStatusFilterInput;
    none?: IBoardStatusFilterInput;
    some?: IBoardStatusFilterInput;
    any?: boolean;
}
export interface IBoardStatusFilterInput {
    and?: Array<IBoardStatusFilterInput>;
    or?: Array<IBoardStatusFilterInput>;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    color?: IStringOperationFilterInput;
    code?: IStringOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    boardId?: IComparableNullableOfGuidOperationFilterInput;
    board?: IBoardFilterInput;
    cards?: IListFilterInputTypeOfCardFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfCardFilterInput {
    all?: ICardFilterInput;
    none?: ICardFilterInput;
    some?: ICardFilterInput;
    any?: boolean;
}
export interface ICardFilterInput {
    and?: Array<ICardFilterInput>;
    or?: Array<ICardFilterInput>;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    progress?: IProgressOperationFilterInput;
    priority?: IPriorityOperationFilterInput;
    startDate?: IComparableNullableOfDateTimeOperationFilterInput;
    endDate?: IComparableNullableOfDateTimeOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    boardStatusId?: IComparableNullableOfGuidOperationFilterInput;
    boardListId?: IComparableNullableOfGuidOperationFilterInput;
    boardList?: IBoardListFilterInput;
    boardStatus?: IBoardStatusFilterInput;
    nestedFiles?: IListFilterInputTypeOfNestedFileFilterInput;
    memberCards?: IListFilterInputTypeOfMemberCardFilterInput;
    cardReplies?: IListFilterInputTypeOfCardReplyFilterInput;
    cardChecklists?: IListFilterInputTypeOfCardChecklistFilterInput;
    cardColumnValues?: IListFilterInputTypeOfCardColumnValueFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IProgressOperationFilterInput {
    eq?: IProgress;
    neq?: IProgress;
    in?: Array<IProgress>;
    nin?: Array<IProgress>;
}
export interface IPriorityOperationFilterInput {
    eq?: IPriority;
    neq?: IPriority;
    in?: Array<IPriority>;
    nin?: Array<IPriority>;
}
export interface IBoardListFilterInput {
    and?: Array<IBoardListFilterInput>;
    or?: Array<IBoardListFilterInput>;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    order?: IComparableInt32OperationFilterInput;
    color?: IStringOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    boardId?: IComparableGuidOperationFilterInput;
    boards?: IBoardFilterInput;
    cards?: IListFilterInputTypeOfCardFilterInput;
    boardGroupColumn?: IListFilterInputTypeOfBoardGroupColumnFilterInput;
    boardRows?: IListFilterInputTypeOfBoardRowFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfBoardGroupColumnFilterInput {
    all?: IBoardGroupColumnFilterInput;
    none?: IBoardGroupColumnFilterInput;
    some?: IBoardGroupColumnFilterInput;
    any?: boolean;
}
export interface IBoardGroupColumnFilterInput {
    and?: Array<IBoardGroupColumnFilterInput>;
    or?: Array<IBoardGroupColumnFilterInput>;
    name?: IStringOperationFilterInput;
    order?: IComparableInt32OperationFilterInput;
    boardListId?: IComparableGuidOperationFilterInput;
    boardColumnTypeId?: IComparableNullableOfGuidOperationFilterInput;
    boardList?: IBoardListFilterInput;
    boardColumnType?: IBoardColumnTypeFilterInput;
    boardColumnValues?: IListFilterInputTypeOfBoardColumnValueFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IBoardColumnTypeFilterInput {
    and?: Array<IBoardColumnTypeFilterInput>;
    or?: Array<IBoardColumnTypeFilterInput>;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    dataType?: IStringOperationFilterInput;
    insideType?: IEnumInsideTypeOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    boardGroupColumns?: IListFilterInputTypeOfBoardGroupColumnFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IEnumInsideTypeOperationFilterInput {
    eq?: IEnumInsideType;
    neq?: IEnumInsideType;
    in?: Array<IEnumInsideType>;
    nin?: Array<IEnumInsideType>;
}
export interface IListFilterInputTypeOfBoardColumnValueFilterInput {
    all?: IBoardColumnValueFilterInput;
    none?: IBoardColumnValueFilterInput;
    some?: IBoardColumnValueFilterInput;
    any?: boolean;
}
export interface IBoardColumnValueFilterInput {
    and?: Array<IBoardColumnValueFilterInput>;
    or?: Array<IBoardColumnValueFilterInput>;
    value?: IStringOperationFilterInput;
    boardGroupColumnId?: IComparableNullableOfGuidOperationFilterInput;
    boardRowId?: IComparableNullableOfGuidOperationFilterInput;
    boardGroupColumn?: IBoardGroupColumnFilterInput;
    boardRow?: IBoardRowFilterInput;
    boardMemberReferece?: IListFilterInputTypeOfBoardMemberReferenceFilterInput;
    cardColumnValues?: IListFilterInputTypeOfCardColumnValueFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IBoardRowFilterInput {
    and?: Array<IBoardRowFilterInput>;
    or?: Array<IBoardRowFilterInput>;
    title?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    order?: IComparableInt32OperationFilterInput;
    active?: IBooleanOperationFilterInput;
    boardListId?: IComparableGuidOperationFilterInput;
    boardList?: IBoardListFilterInput;
    boardColumnValues?: IListFilterInputTypeOfBoardColumnValueFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfBoardMemberReferenceFilterInput {
    all?: IBoardMemberReferenceFilterInput;
    none?: IBoardMemberReferenceFilterInput;
    some?: IBoardMemberReferenceFilterInput;
    any?: boolean;
}
export interface IBoardMemberReferenceFilterInput {
    and?: Array<IBoardMemberReferenceFilterInput>;
    or?: Array<IBoardMemberReferenceFilterInput>;
    memberId?: IComparableNullableOfGuidOperationFilterInput;
    description?: IStringOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    boardColumnValueId?: IComparableNullableOfGuidOperationFilterInput;
    boardColumnValue?: IBoardColumnValueFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfCardColumnValueFilterInput {
    all?: ICardColumnValueFilterInput;
    none?: ICardColumnValueFilterInput;
    some?: ICardColumnValueFilterInput;
    any?: boolean;
}
export interface ICardColumnValueFilterInput {
    and?: Array<ICardColumnValueFilterInput>;
    or?: Array<ICardColumnValueFilterInput>;
    cardId?: IComparableGuidOperationFilterInput;
    boardColumnValueId?: IComparableGuidOperationFilterInput;
    boardColumnValue?: IBoardColumnValueFilterInput;
    card?: ICardFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfBoardRowFilterInput {
    all?: IBoardRowFilterInput;
    none?: IBoardRowFilterInput;
    some?: IBoardRowFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfNestedFileFilterInput {
    all?: INestedFileFilterInput;
    none?: INestedFileFilterInput;
    some?: INestedFileFilterInput;
    any?: boolean;
}
export interface INestedFileFilterInput {
    and?: Array<INestedFileFilterInput>;
    or?: Array<INestedFileFilterInput>;
    name?: IStringOperationFilterInput;
    show?: IBooleanOperationFilterInput;
    url?: IStringOperationFilterInput;
    cardId?: IComparableGuidOperationFilterInput;
    card?: ICardFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfMemberCardFilterInput {
    all?: IMemberCardFilterInput;
    none?: IMemberCardFilterInput;
    some?: IMemberCardFilterInput;
    any?: boolean;
}
export interface IMemberCardFilterInput {
    and?: Array<IMemberCardFilterInput>;
    or?: Array<IMemberCardFilterInput>;
    cardId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    card?: ICardFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfCardReplyFilterInput {
    all?: ICardReplyFilterInput;
    none?: ICardReplyFilterInput;
    some?: ICardReplyFilterInput;
    any?: boolean;
}
export interface ICardReplyFilterInput {
    and?: Array<ICardReplyFilterInput>;
    or?: Array<ICardReplyFilterInput>;
    cardId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    description?: IStringOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    card?: ICardFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfCardChecklistFilterInput {
    all?: ICardChecklistFilterInput;
    none?: ICardChecklistFilterInput;
    some?: ICardChecklistFilterInput;
    any?: boolean;
}
export interface ICardChecklistFilterInput {
    and?: Array<ICardChecklistFilterInput>;
    or?: Array<ICardChecklistFilterInput>;
    name?: IStringOperationFilterInput;
    cardId?: IComparableNullableOfGuidOperationFilterInput;
    card?: ICardFilterInput;
    cardCheckComponents?: IListFilterInputTypeOfCardCheckComponentFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfCardCheckComponentFilterInput {
    all?: ICardCheckComponentFilterInput;
    none?: ICardCheckComponentFilterInput;
    some?: ICardCheckComponentFilterInput;
    any?: boolean;
}
export interface ICardCheckComponentFilterInput {
    and?: Array<ICardCheckComponentFilterInput>;
    or?: Array<ICardCheckComponentFilterInput>;
    description?: IStringOperationFilterInput;
    selected?: IBooleanOperationFilterInput;
    order?: IComparableInt32OperationFilterInput;
    cardChecklistId?: IComparableNullableOfGuidOperationFilterInput;
    cardChecklist?: ICardChecklistFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfBoardListFilterInput {
    all?: IBoardListFilterInput;
    none?: IBoardListFilterInput;
    some?: IBoardListFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfMemberBoardFilterInput {
    all?: IMemberBoardFilterInput;
    none?: IMemberBoardFilterInput;
    some?: IMemberBoardFilterInput;
    any?: boolean;
}
export interface IMemberBoardFilterInput {
    and?: Array<IMemberBoardFilterInput>;
    or?: Array<IMemberBoardFilterInput>;
    memberId?: IComparableGuidOperationFilterInput;
    boardId?: IComparableGuidOperationFilterInput;
    outstading?: IBooleanOperationFilterInput;
    order?: IComparableInt32OperationFilterInput;
    active?: IBooleanOperationFilterInput;
    board?: IBoardFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfMemberSpaceFilterInput {
    all?: IMemberSpaceFilterInput;
    none?: IMemberSpaceFilterInput;
    some?: IMemberSpaceFilterInput;
    any?: boolean;
}
export interface IMemberSpaceFilterInput {
    and?: Array<IMemberSpaceFilterInput>;
    or?: Array<IMemberSpaceFilterInput>;
    memberId?: IComparableGuidOperationFilterInput;
    spaceId?: IComparableGuidOperationFilterInput;
    order?: IComparableNullableOfInt32OperationFilterInput;
    outstading?: IBooleanOperationFilterInput;
    access?: IEnumSpaceAccessOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    space?: ISpaceFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IEnumSpaceAccessOperationFilterInput {
    eq?: IEnumSpaceAccess;
    neq?: IEnumSpaceAccess;
    in?: Array<IEnumSpaceAccess>;
    nin?: Array<IEnumSpaceAccess>;
}
export interface ISpaceSortInput {
    name?: ISortEnumType;
    description?: ISortEnumType;
    image?: ISortEnumType;
    projectId?: ISortEnumType;
    areaId?: ISortEnumType;
    visibility?: ISortEnumType;
    active?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ISpaceCollectionSegment {
    items?: Array<ISpace>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IBoardStatusSortInput {
    name?: ISortEnumType;
    description?: ISortEnumType;
    color?: ISortEnumType;
    code?: ISortEnumType;
    active?: ISortEnumType;
    projectId?: ISortEnumType;
    boardId?: ISortEnumType;
    board?: IBoardSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IBoardSortInput {
    name?: ISortEnumType;
    description?: ISortEnumType;
    memberId?: ISortEnumType;
    order?: ISortEnumType;
    color?: ISortEnumType;
    active?: ISortEnumType;
    serviceId?: ISortEnumType;
    spaceId?: ISortEnumType;
    space?: ISpaceSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IBoardStatusCollectionSegment {
    items?: Array<IBoardStatus>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IBoardCollectionSegment {
    items?: Array<IBoard>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IBoardListSortInput {
    name?: ISortEnumType;
    description?: ISortEnumType;
    order?: ISortEnumType;
    color?: ISortEnumType;
    active?: ISortEnumType;
    boardId?: ISortEnumType;
    boards?: IBoardSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IBoardListCollectionSegment {
    items?: Array<IBoardList>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ICardReplySortInput {
    cardId?: ISortEnumType;
    memberId?: ISortEnumType;
    description?: ISortEnumType;
    active?: ISortEnumType;
    card?: ICardSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ICardSortInput {
    name?: ISortEnumType;
    description?: ISortEnumType;
    active?: ISortEnumType;
    progress?: ISortEnumType;
    priority?: ISortEnumType;
    startDate?: ISortEnumType;
    endDate?: ISortEnumType;
    projectId?: ISortEnumType;
    boardStatusId?: ISortEnumType;
    boardListId?: ISortEnumType;
    boardList?: IBoardListSortInput;
    boardStatus?: IBoardStatusSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ICardReplyCollectionSegment {
    items?: Array<ICardReply>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ICardCollectionSegment {
    items?: Array<ICard>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface INestedFileSortInput {
    name?: ISortEnumType;
    show?: ISortEnumType;
    url?: ISortEnumType;
    cardId?: ISortEnumType;
    card?: ICardSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface INestedFileCollectionSegment {
    items?: Array<INestedFile>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IMemberCardSortInput {
    cardId?: ISortEnumType;
    memberId?: ISortEnumType;
    active?: ISortEnumType;
    card?: ICardSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMemberCardCollectionSegment {
    items?: Array<IMemberCard>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IMemberBoardSortInput {
    memberId?: ISortEnumType;
    boardId?: ISortEnumType;
    outstading?: ISortEnumType;
    order?: ISortEnumType;
    active?: ISortEnumType;
    board?: IBoardSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMemberBoardCollectionSegment {
    items?: Array<IMemberBoard>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IMemberSpaceSortInput {
    memberId?: ISortEnumType;
    spaceId?: ISortEnumType;
    order?: ISortEnumType;
    outstading?: ISortEnumType;
    access?: ISortEnumType;
    active?: ISortEnumType;
    space?: ISpaceSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMemberSpaceCollectionSegment {
    items?: Array<IMemberSpace>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
/**
 * A connection to a list of items.
 */
export interface IListMemberSpaceOnValueConnection {
    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;
    /**
     * A list of edges.
     */
    edges?: Array<IListMemberSpaceOnValueEdge>;
    /**
     * A flattened list of the nodes.
     */
    nodes?: Array<IMemberSpace>;
    totalCount: number;
}
/**
 * An edge in a connection.
 */
export interface IListMemberSpaceOnValueEdge {
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    /**
     * The item at the end of the edge.
     */
    node: IMemberSpace;
}
/**
 * A connection to a list of items.
 */
export interface IListMemberSpaceOnCardConnection {
    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;
    /**
     * A list of edges.
     */
    edges?: Array<IListMemberSpaceOnCardEdge>;
    /**
     * A flattened list of the nodes.
     */
    nodes?: Array<IMemberSpace>;
    totalCount: number;
}
/**
 * An edge in a connection.
 */
export interface IListMemberSpaceOnCardEdge {
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    /**
     * The item at the end of the edge.
     */
    node: IMemberSpace;
}
/**
 * A connection to a list of items.
 */
export interface IListMemberBoardOnValueConnection {
    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;
    /**
     * A list of edges.
     */
    edges?: Array<IListMemberBoardOnValueEdge>;
    /**
     * A flattened list of the nodes.
     */
    nodes?: Array<IMemberBoard>;
    totalCount: number;
}
/**
 * An edge in a connection.
 */
export interface IListMemberBoardOnValueEdge {
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    /**
     * The item at the end of the edge.
     */
    node: IMemberBoard;
}
/**
 * A connection to a list of items.
 */
export interface IListMemberBoardOnCardConnection {
    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;
    /**
     * A list of edges.
     */
    edges?: Array<IListMemberBoardOnCardEdge>;
    /**
     * A flattened list of the nodes.
     */
    nodes?: Array<IMemberBoard>;
    totalCount: number;
}
/**
 * An edge in a connection.
 */
export interface IListMemberBoardOnCardEdge {
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    /**
     * The item at the end of the edge.
     */
    node: IMemberBoard;
}
export interface IBoardColumnTypeSortInput {
    name?: ISortEnumType;
    description?: ISortEnumType;
    dataType?: ISortEnumType;
    insideType?: ISortEnumType;
    active?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IBoardColumnTypeCollectionSegment {
    items?: Array<IBoardColumnType>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IMemberBoardDTO {
    memberSpace: IMemberSpace;
    memberBoards: Array<IMemberBoard>;
}
export interface ICardColumnValueSortInput {
    cardId?: ISortEnumType;
    boardColumnValueId?: ISortEnumType;
    boardColumnValue?: IBoardColumnValueSortInput;
    card?: ICardSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IBoardColumnValueSortInput {
    value?: ISortEnumType;
    boardGroupColumnId?: ISortEnumType;
    boardRowId?: ISortEnumType;
    boardGroupColumn?: IBoardGroupColumnSortInput;
    boardRow?: IBoardRowSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IBoardGroupColumnSortInput {
    name?: ISortEnumType;
    order?: ISortEnumType;
    boardListId?: ISortEnumType;
    boardColumnTypeId?: ISortEnumType;
    boardList?: IBoardListSortInput;
    boardColumnType?: IBoardColumnTypeSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IBoardRowSortInput {
    title?: ISortEnumType;
    description?: ISortEnumType;
    order?: ISortEnumType;
    active?: ISortEnumType;
    boardListId?: ISortEnumType;
    boardList?: IBoardListSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ICardColumnValueCollectionSegment {
    items?: Array<ICardColumnValue>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IBoardMemberReferenceSortInput {
    memberId?: ISortEnumType;
    description?: ISortEnumType;
    active?: ISortEnumType;
    boardColumnValueId?: ISortEnumType;
    boardColumnValue?: IBoardColumnValueSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IBoardMemberReferenceCollectionSegment {
    items?: Array<IBoardMemberReference>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IAttribute {
    value: string;
    projectId?: IUUID;
    attributesValues?: Array<IAttributeValue>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IAttributeValue {
    value: string;
    projectId?: IUUID;
    attributeId: IUUID;
    attribute?: IAttribute;
    materialCombinationAttributes?: Array<IMaterialCombinationAttribute>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMaterialCombinationAttribute {
    projectId?: IUUID;
    materialCombinationId: IUUID;
    attributeValueId: IUUID;
    materialCombination?: IMaterialCombination;
    attributeValue?: IAttributeValue;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMaterialCombination {
    projectId?: IUUID;
    materialId: IUUID;
    provCode: string;
    intCode: string;
    price: number;
    material?: IMaterial;
    materialCombinationAttributes?: Array<IMaterialCombinationAttribute>;
    materialStocks?: Array<IMaterialStock>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMaterial {
    projectId?: IUUID;
    measureUnityId: IUUID;
    materialCategoryId: IUUID;
    materialCategory?: IMaterialCategory;
    measureUnity?: IMeasureUnity;
    measureValues?: Array<IMeasureValue>;
    materialModules?: Array<IMaterialModule>;
    materialCombinations?: Array<IMaterialCombination>;
    materialStocks?: Array<IMaterialStock>;
    name: string;
    provCode: string;
    intCode: string;
    descMaterial: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMaterialCategory {
    projectId?: IUUID;
    nombreCategoria: string;
    materials?: Array<IMaterial>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMeasureUnity {
    projectId?: IUUID;
    name: string;
    abbreviation: string;
    materials?: Array<IMaterial>;
    measureUnitiesTwo?: Array<IMeasureUnityTwo>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMeasureUnityTwo {
    projectId?: IUUID;
    measureUnityId: IUUID;
    measureId: IUUID;
    measure?: IMeasure;
    measureUnity?: IMeasureUnity;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMeasure {
    projectId?: IUUID;
    name: string;
    abbreviation: string;
    measureUnityTwo?: Array<IMeasureUnityTwo>;
    measureValue?: Array<IMeasureValue>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMeasureValue {
    projectId?: IUUID;
    measureId: IUUID;
    materialId: IUUID;
    measure?: IMeasure;
    material?: IMaterial;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMaterialModule {
    projectId?: IUUID;
    moduleId: IUUID;
    materialCategoryId: IUUID;
    materialId: IUUID;
    formule: string;
    formuleOpe: string;
    variables: string;
    module?: IModule;
    material?: IMaterial;
    materialVariableModules?: Array<IMaterialVariableModule>;
    materialCategory?: IMaterialCategory;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IModule {
    projectId?: IUUID;
    moduleCategoryId: IUUID;
    name: string;
    descModule: string;
    formule?: string;
    materialModules?: Array<IMaterialModule>;
    quotationModules?: Array<IQuotationModule>;
    moduleCategory?: IModuleCategory;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuotationModule {
    projectId?: IUUID;
    quotationId: IUUID;
    moduleCategoryId: IUUID;
    moduleId: IUUID;
    quantity: number;
    price: number;
    image: string;
    materialQuotations?: Array<IMaterialQuotation>;
    quotation?: IQuotation;
    module?: IModule;
    moduleCategory?: IModuleCategory;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMaterialQuotation {
    projectId?: IUUID;
    moduleQuotationId: IUUID;
    materialId: IUUID;
    materialModuleId: IUUID;
    materialCombinationId: IUUID;
    materialVariableQuotations?: Array<IMaterialVariableQuotation>;
    quotationModule?: IQuotationModule;
    material?: IMaterial;
    materialCombination?: IMaterialCombination;
    materialModules?: Array<IMaterialModule>;
    measureValue?: Array<IMeasureValue>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMaterialVariableQuotation {
    projectId?: IUUID;
    materialQuotationId: IUUID;
    variableId: IUUID;
    value: string;
    materialQuotation?: IMaterialQuotation;
    variable?: IVariable;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IVariable {
    projectId?: IUUID;
    value: string;
    materialVariableModules?: Array<IMaterialVariableModule>;
    materialVariableQuotations?: Array<IMaterialVariableQuotation>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMaterialVariableModule {
    projectId?: IUUID;
    materialModuleId: IUUID;
    variableId: IUUID;
    variable?: IVariable;
    materialModule?: IMaterialModule;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuotation {
    projectId?: IUUID;
    madreQuotationId: IUUID;
    memberId: IUUID;
    buildingSiteName: string;
    folio: string;
    isOptimized: boolean;
    quotationModules?: Array<IQuotationModule>;
    madreQuotation?: IMadreQuotation;
    buildingSiteAddress?: IBuildingSiteAddress;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMadreQuotation {
    projectId?: IUUID;
    memberId: IUUID;
    userCustomerId: IUUID;
    folio: string;
    userCustomer?: IUserCustomer;
    quotations?: Array<IQuotation>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IUserCustomer {
    projectId?: IUUID;
    memberId: IUUID;
    madreQuotations?: Array<IMadreQuotation>;
    customers?: Array<ICustomer>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICustomer {
    projectId?: IUUID;
    name: string;
    firstName: string;
    lastName: string;
    email: string;
    company: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IBuildingSiteAddress {
    projectId?: IUUID;
    quotationId: IUUID;
    countryId: IUUID;
    stateId: IUUID;
    street: string;
    externalNumber: string;
    internalNumber: string;
    colony: string;
    municipality: string;
    quotation?: IQuotation;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IModuleCategory {
    projectId?: IUUID;
    name: string;
    descCategory: string;
    modules?: Array<IModule>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMaterialStock {
    projectId?: IUUID;
    materialId: IUUID;
    materialCombinationId: IUUID;
    material?: IMaterial;
    materialCombination?: IMaterialCombination;
    materialStockMeasures?: Array<IMaterialStockMeasure>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMaterialStockMeasure {
    projectId?: IUUID;
    materialStockId: IUUID;
    quotationId: IUUID;
    value: number;
    formule: string;
    isActive: boolean;
    quotationIdUsed: IUUID;
    materialStock?: IMaterialStock;
    materialStockQuotation?: IQuotation;
    quotationStockUsed?: IQuotation;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
/**
 * A connection to a list of items.
 */
export interface IMaterialCategoriesConnection {
    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;
    /**
     * A list of edges.
     */
    edges?: Array<IMaterialCategoriesEdge>;
    /**
     * A flattened list of the nodes.
     */
    nodes?: Array<IMaterialCategory>;
}
/**
 * An edge in a connection.
 */
export interface IMaterialCategoriesEdge {
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    /**
     * The item at the end of the edge.
     */
    node: IMaterialCategory;
}
export interface IBrandsHermer {
    brands?: Array<string>;
}
export interface IModelsHermer {
    carModels?: Array<string>;
}
export interface IYearsHermer {
    carYears?: Array<number>;
}
export interface IModelLobatoHermer {
    id?: number;
    idLobato?: number;
    brand?: string;
    newUsed?: string;
    yearModel?: number;
    subBrand?: string;
    version?: string;
    salePrice?: number;
    buyingPrice?: number;
    newListPrice?: string;
    type?: string;
    intermeditePrice?: number;
    priceCertificateAgency?: number;
    brandCatalog?: string;
}
export interface IModelMercadoLibreResultHermer {
    consultId?: number;
    results?: Array<IModelMercadoLibreHermer>;
    compared?: Array<IComparedMercadoLibreHermer>;
}
export interface IModelMercadoLibreHermer {
    id?: number;
    idMercadoLibre?: string;
    siteId?: string;
    title?: string;
    price?: number;
    salePrice?: string;
    currencyId?: string;
    availableQuantity?: number;
    soldQuantity?: number;
    buyingMode?: string;
    listingTypeId?: string;
    stopTime?: string;
    condition?: string;
    permaLink?: string;
    thumbnail?: string;
    thumbnailId?: string;
    acceptsMercadopago?: boolean;
    installments?: string;
    originalPrice?: string;
    categoryId?: string;
    officialStoreId?: number;
    domainId?: string;
    catalogProductId?: string;
    orderBackend?: number;
    useThumbnailId?: boolean;
    offerScore?: string;
    offerShare?: string;
    matchScore?: string;
    winnerItemId?: string;
    melicoin?: string;
    discounts?: string;
    ano?: number;
    marca?: string;
    modelo?: string;
    version?: string;
    kilometraje?: string;
    ultimaActualizacionDePrecio?: string;
    idVendedor?: number;
    primeraAparicion?: string;
    ultimaActualizacion?: string;
    publicadoHace?: number;
    marcaCatalogo?: string;
    year?: number;
}
export interface IComparedMercadoLibreHermer {
    comparedId?: number;
    results?: Array<IModelMercadoLibreHermer>;
}
export interface IResultConsultHermer {
    count?: number;
    next?: string;
    previous?: string;
    results?: Array<IConsultShortHermer>;
}
export interface IConsultShortHermer {
    vinNum?: string;
    milage?: number;
    valuador?: string;
    brand?: string;
    model?: string;
    year?: number;
    properties?: Array<string>;
    lobatoId?: number;
    client?: number;
    carmercadoConsult?: ICarMercadoHermerShort;
    id: number;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICarMercadoHermerShort {
    id: number;
    analysisCarmercado?: IAnalysisCarMercadoHermerShort;
}
export interface IAnalysisCarMercadoHermerShort {
    lobatoBuyingPrice?: number;
    lobatoSalePrice?: number;
    estimatedEarning?: number;
    damage?: number;
    advisedSalePriceWithKmRounded?: number;
    advisedBuyingPriceWithKmRounded?: number;
    id: number;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IResultConsultAllHermer {
    count?: number;
    next?: string;
    previous?: string;
    results?: Array<IConsultHermer>;
}
export interface IConsultHermer {
    vinNum?: string;
    milage?: number;
    valuador?: string;
    brand?: string;
    model?: string;
    year?: number;
    properties?: Array<string>;
    lobatoId?: number;
    lobatoIdData?: IlobatoHermerData;
    client?: IClientHermer;
    comparedConsult?: Array<IComparedHermer>;
    carmercadoConsult?: ICarMercadoHermer;
    id: number;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IlobatoHermerData {
    idLobato?: number;
    marca?: string;
    nuevoUsado?: string;
    anoModelo?: number;
    submarca?: string;
    version?: string;
    precioVenta?: number;
    precioCompra?: number;
    precioDeListaNuevo?: number;
    tipo?: string;
    precioIntermedio?: number;
    precioAgenciaCertificados?: number;
    id: number;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IClientHermer {
    firstName?: string;
    lastName?: string;
    phone?: string;
    email?: string;
    id: number;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IComparedHermer {
    brand?: string;
    model?: string;
    year?: number;
    properties?: Array<string>;
    lobatoId?: number;
    lobatoIdData?: IlobatoHermerData;
    consult?: number;
    carmercadoCompared?: ICarMercadoHermer;
    id: number;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICarMercadoHermer {
    analysisCarmercado?: IAnalysisCarMercadoHermer;
    mercadolibreIds?: Array<string>;
    mercadolibreIdsData?: Array<IModelMercadoLibreHermer>;
    manualDevaluation?: number;
    consult?: number;
    compared?: number;
    id: number;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IAnalysisCarMercadoHermer {
    carMercado?: number;
    meanSalePrice?: number;
    lobatoSalePrice?: number;
    meanPriceKm?: number;
    meanPublishedTime?: number;
    maxPublishedTime?: number;
    minPublishedTime?: number;
    estimatedEarning?: number;
    salePriceWithoutKm?: number;
    advisedBuyingPriceWithoutKm?: number;
    lobatoBuyingPrice?: number;
    meanKm?: number;
    advisedSalePriceWithKm?: number;
    advisedBuyingPriceWithKm?: number;
    slopeOfPredictiveLine?: number;
    pointOfPredictiveLine?: string;
    meanSalePriceCarToCompare?: number;
    lobatoSalePriceCarToCompare?: number;
    meanPriceKmCarToCompare?: number;
    meanPublishedTimeCarToCompare?: number;
    maxPublishedTimeCarToCompare?: number;
    minPublishedTimeCarToCompare?: number;
    estimatedEarningCarToCompare?: number;
    salePriceWithoutKmCarToCompare?: number;
    lobatoBuyingPriceCarToCompare?: number;
    meanKmCarToCompare?: number;
    advisedSalePriceWithKmCarToCompare?: number;
    advisedBuyingPriceWithKmCarToCompare?: number;
    slopeOfPredictiveLineCarToCompare?: number;
    pointOfPredictiveLineCarToCompare?: string;
    priceDiferenceByLobato?: number;
    meanSalePriceCarToCompareMinusPriceDiference?: number;
    salePriceWithoutKmCarToCompareMinusPriceDiference?: number;
    advisedSalePriceWithKmCarToCompareMinusPriceDiference?: number;
    advisedBuyingPriceWithKmCarToCompareMinusPriceDiference?: number;
    damage?: number;
    advisedSalePriceWithKmRounded?: number;
    advisedBuyingPriceWithKmRounded?: number;
    advisedSalePriceWithKmCarToCompareRounded?: number;
    advisedBuyingPriceWithKmCarToCompareRounded?: number;
    advisedSalePriceWithKmCarToCompareMinusPriceDiferenceRounded?: number;
    advisedBuyingPriceWithKmCarToCompareMinusPriceDiferenceRounded?: number;
    id: number;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IResultConsultLastAnalysisHermer {
    count?: number;
    next?: string;
    previous?: string;
    results?: Array<IConsultLastAnalysisHermer>;
}
export interface IConsultLastAnalysisHermer {
    vinNum?: string;
    milage?: number;
    valuador?: string;
    brand?: string;
    model?: string;
    year?: number;
    properties?: Array<string>;
    lobatoId?: number;
    appraisal?: string;
    lobatoIdData?: IlobatoHermerData;
    client?: IClientHermer;
    lastAnalysis?: ILastAnalysisCarMercadoHermer;
    id: number;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ILastAnalysisCarMercadoHermer {
    carmercado?: ILastCarMercadoHermer;
    meanSalePrice?: number;
    lobatoSalePrice?: number;
    meanPriceKm?: number;
    meanPublishedTime?: number;
    maxPublishedTime?: number;
    minPublishedTime?: number;
    estimatedEarning?: number;
    salePriceWithoutKm?: number;
    advisedBuyingPriceWithoutKm?: number;
    lobatoBuyingPrice?: number;
    meanKm?: number;
    advisedSalePriceWithKm?: number;
    advisedBuyingPriceWithKm?: number;
    slopeOfPredictiveLine?: number;
    pointOfPredictiveLine?: string;
    meanSalePriceCarToCompare?: number;
    lobatoSalePriceCarToCompare?: number;
    meanPriceKmCarToCompare?: number;
    meanPublishedTimeCarToCompare?: number;
    maxPublishedTimeCarToCompare?: number;
    minPublishedTimeCarToCompare?: number;
    estimatedEarningCarToCompare?: number;
    salePriceWithoutKmCarToCompare?: number;
    lobatoBuyingPriceCarToCompare?: number;
    meanKmCarToCompare?: number;
    advisedSalePriceWithKmCarToCompare?: number;
    advisedBuyingPriceWithKmCarToCompare?: number;
    slopeOfPredictiveLineCarToCompare?: number;
    pointOfPredictiveLineCarToCompare?: string;
    priceDiferenceByLobato?: number;
    meanSalePriceCarToCompareMinusPriceDiference?: number;
    salePriceWithoutKmCarToCompareMinusPriceDiference?: number;
    advisedSalePriceWithKmCarToCompareMinusPriceDiference?: number;
    advisedBuyingPriceWithKmCarToCompareMinusPriceDiference?: number;
    damage?: number;
    advisedSalePriceWithKmRounded?: number;
    advisedBuyingPriceWithKmRounded?: number;
    advisedSalePriceWithKmCarToCompareRounded?: number;
    advisedBuyingPriceWithKmCarToCompareRounded?: number;
    advisedSalePriceWithKmCarToCompareMinusPriceDiferenceRounded?: number;
    advisedBuyingPriceWithKmCarToCompareMinusPriceDiferenceRounded?: number;
    id: number;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ILastCarMercadoHermer {
    mercadolibreIds?: Array<string>;
    manualDevaluation?: number;
    consult?: number;
    compared?: IComparedHermer;
    id: number;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDownloadFile {
    url: string;
}
export interface IFolderFilterInput {
    and?: Array<IFolderFilterInput>;
    or?: Array<IFolderFilterInput>;
    isActive?: IBooleanOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    label?: IStringOperationFilterInput;
    background?: IStringOperationFilterInput;
    parentId?: IComparableNullableOfGuidOperationFilterInput;
    path?: IStringOperationFilterInput;
    folderType?: IStringOperationFilterInput;
    isPersonal?: IBooleanOperationFilterInput;
    isOutstanding?: IBooleanOperationFilterInput;
    parent?: IFolderFilterInput;
    subFolders?: IListFilterInputTypeOfFolderFilterInput;
    files?: IListFilterInputTypeOfFileFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfFolderFilterInput {
    all?: IFolderFilterInput;
    none?: IFolderFilterInput;
    some?: IFolderFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfFileFilterInput {
    all?: IFileFilterInput;
    none?: IFileFilterInput;
    some?: IFileFilterInput;
    any?: boolean;
}
export interface IFileFilterInput {
    and?: Array<IFileFilterInput>;
    or?: Array<IFileFilterInput>;
    folderId?: IComparableGuidOperationFilterInput;
    folder?: IFolderFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    isProfile?: IBooleanOperationFilterInput;
    token?: IStringOperationFilterInput;
    name?: IStringOperationFilterInput;
    url?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    isActive?: IBooleanOperationFilterInput;
    isOutstanding?: IBooleanOperationFilterInput;
    partialUrl?: IStringOperationFilterInput;
    sharedFiles?: IListFilterInputTypeOfSharedFileFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfSharedFileFilterInput {
    all?: ISharedFileFilterInput;
    none?: ISharedFileFilterInput;
    some?: ISharedFileFilterInput;
    any?: boolean;
}
export interface ISharedFileFilterInput {
    and?: Array<ISharedFileFilterInput>;
    or?: Array<ISharedFileFilterInput>;
    fileId?: IComparableGuidOperationFilterInput;
    file?: IFileFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IFolderSortInput {
    isActive?: ISortEnumType;
    projectId?: ISortEnumType;
    memberId?: ISortEnumType;
    label?: ISortEnumType;
    background?: ISortEnumType;
    parentId?: ISortEnumType;
    path?: ISortEnumType;
    folderType?: ISortEnumType;
    isPersonal?: ISortEnumType;
    isOutstanding?: ISortEnumType;
    parent?: IFolderSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
/**
 * A connection to a list of items.
 */
export interface IListFoldersConnection {
    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;
    /**
     * A list of edges.
     */
    edges?: Array<IListFoldersEdge>;
    /**
     * A flattened list of the nodes.
     */
    nodes?: Array<IFolder>;
}
/**
 * An edge in a connection.
 */
export interface IListFoldersEdge {
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    /**
     * The item at the end of the edge.
     */
    node: IFolder;
}
/**
 * A connection to a list of items.
 */
export interface IFoldersListConnection {
    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;
    /**
     * A list of edges.
     */
    edges?: Array<IFoldersListEdge>;
    /**
     * A flattened list of the nodes.
     */
    nodes?: Array<IFolder>;
}
/**
 * An edge in a connection.
 */
export interface IFoldersListEdge {
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    /**
     * The item at the end of the edge.
     */
    node: IFolder;
}
export interface ISharedFilesFromFolderDto {
    totalCount: number;
    files: Array<ISharedFile>;
}
export interface IFileSortInput {
    folderId?: ISortEnumType;
    folder?: IFolderSortInput;
    memberId?: ISortEnumType;
    isProfile?: ISortEnumType;
    token?: ISortEnumType;
    name?: ISortEnumType;
    url?: ISortEnumType;
    description?: ISortEnumType;
    isActive?: ISortEnumType;
    isOutstanding?: ISortEnumType;
    partialUrl?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IFileCollectionSegment {
    items?: Array<IFile>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IFolderCollectionSegment {
    items?: Array<IFolder>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ISharedFolderFilterInput {
    and?: Array<ISharedFolderFilterInput>;
    or?: Array<ISharedFolderFilterInput>;
    folderId?: IComparableGuidOperationFilterInput;
    folder?: IFolderFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IOutstandingFiles {
    files: Array<IFile>;
    folders: Array<IFolder>;
}
export interface IConversationReply {
    memberId: IUUID;
    reply: string;
    registerDate: IDateTime;
    status: string;
    conversationId: IUUID;
    conversation: IConversation;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    member?: IMemberChat;
}
export interface IConversation {
    projectId: IUUID;
    memberOne: IUUID;
    memberTwo: IUUID;
    registerDate: IDateTime;
    status: string;
    replies: Array<IConversationReply>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMemberConversation {
    memberId: IUUID;
    conversationId: IUUID;
    member?: IMemberChat;
}
export interface IEWalletFilterInput {
    and?: Array<IEWalletFilterInput>;
    or?: Array<IEWalletFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    principal?: IBooleanOperationFilterInput;
    balance?: IComparableDecimalOperationFilterInput;
    detained?: IComparableDecimalOperationFilterInput;
    detainedManual?: IComparableDecimalOperationFilterInput;
    automaticPayment?: IBooleanOperationFilterInput;
    memberWallets?: IListFilterInputTypeOfMemberWalletFilterInput;
    eWalletTransactions?: IListFilterInputTypeOfWalletTransactionFilterInput;
    eWalletRetrieves?: IListFilterInputTypeOfWalletTransactionFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfMemberWalletFilterInput {
    all?: IMemberWalletFilterInput;
    none?: IMemberWalletFilterInput;
    some?: IMemberWalletFilterInput;
    any?: boolean;
}
export interface IMemberWalletFilterInput {
    and?: Array<IMemberWalletFilterInput>;
    or?: Array<IMemberWalletFilterInput>;
    memberId?: IComparableNullableOfGuidOperationFilterInput;
    eWalletId?: IComparableGuidOperationFilterInput;
    eWallet?: IEWalletFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfWalletTransactionFilterInput {
    all?: IWalletTransactionFilterInput;
    none?: IWalletTransactionFilterInput;
    some?: IWalletTransactionFilterInput;
    any?: boolean;
}
export interface IWalletTransactionFilterInput {
    and?: Array<IWalletTransactionFilterInput>;
    or?: Array<IWalletTransactionFilterInput>;
    service?: INullableOfEnumTransactionServiceOperationFilterInput;
    paymentServiceId?: IStringOperationFilterInput;
    paymentServiceToken?: IStringOperationFilterInput;
    amount?: IComparableDecimalOperationFilterInput;
    detainedAmount?: IComparableDecimalOperationFilterInput;
    concept?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    projectWalletKeyId?: IComparableNullableOfGuidOperationFilterInput;
    memberId?: IComparableNullableOfGuidOperationFilterInput;
    eWalletId?: IComparableNullableOfGuidOperationFilterInput;
    receptorId?: IComparableNullableOfGuidOperationFilterInput;
    type?: IEnumTransactionTypeOperationFilterInput;
    eWallet?: IEWalletFilterInput;
    receptor?: IEWalletFilterInput;
    walletTransactionStatus?: IListFilterInputTypeOfWalletTransactionStatusFilterInput;
    walletTransactionMember?: IWalletTransactionMemberRelationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumTransactionServiceOperationFilterInput {
    eq?: IEnumTransactionService;
    neq?: IEnumTransactionService;
    in?: Array<IEnumTransactionService | null>;
    nin?: Array<IEnumTransactionService | null>;
}
export interface IEnumTransactionTypeOperationFilterInput {
    eq?: IEnumTransactionType;
    neq?: IEnumTransactionType;
    in?: Array<IEnumTransactionType>;
    nin?: Array<IEnumTransactionType>;
}
export interface IListFilterInputTypeOfWalletTransactionStatusFilterInput {
    all?: IWalletTransactionStatusFilterInput;
    none?: IWalletTransactionStatusFilterInput;
    some?: IWalletTransactionStatusFilterInput;
    any?: boolean;
}
export interface IWalletTransactionStatusFilterInput {
    and?: Array<IWalletTransactionStatusFilterInput>;
    or?: Array<IWalletTransactionStatusFilterInput>;
    status?: INullableOfEnumTransactionStatusOperationFilterInput;
    description?: IStringOperationFilterInput;
    walletTransactionId?: IComparableNullableOfGuidOperationFilterInput;
    walletTransaction?: IWalletTransactionFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumTransactionStatusOperationFilterInput {
    eq?: IEnumTransactionStatus;
    neq?: IEnumTransactionStatus;
    in?: Array<IEnumTransactionStatus | null>;
    nin?: Array<IEnumTransactionStatus | null>;
}
export interface IWalletTransactionMemberRelationFilterInput {
    and?: Array<IWalletTransactionMemberRelationFilterInput>;
    or?: Array<IWalletTransactionMemberRelationFilterInput>;
    memberRelationId?: IComparableGuidOperationFilterInput;
    walletTransactionId?: IComparableNullableOfGuidOperationFilterInput;
    walletTransaction?: IWalletTransactionFilterInput;
    walletTransactionMemberDetails?: IListFilterInputTypeOfWalletTransactionMemberDetailFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfWalletTransactionMemberDetailFilterInput {
    all?: IWalletTransactionMemberDetailFilterInput;
    none?: IWalletTransactionMemberDetailFilterInput;
    some?: IWalletTransactionMemberDetailFilterInput;
    any?: boolean;
}
export interface IWalletTransactionMemberDetailFilterInput {
    and?: Array<IWalletTransactionMemberDetailFilterInput>;
    or?: Array<IWalletTransactionMemberDetailFilterInput>;
    amount?: IComparableDecimalOperationFilterInput;
    description?: IStringOperationFilterInput;
    walletTransactionMemberId?: IComparableGuidOperationFilterInput;
    walletTransactionMember?: IWalletTransactionMemberRelationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IEWalletSortInput {
    projectId?: ISortEnumType;
    principal?: ISortEnumType;
    balance?: ISortEnumType;
    detained?: ISortEnumType;
    detainedManual?: ISortEnumType;
    automaticPayment?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IEWalletCollectionSegment {
    items?: Array<IEWallet>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IMemberWalletSortInput {
    memberId?: ISortEnumType;
    eWalletId?: ISortEnumType;
    eWallet?: IEWalletSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMemberWalletCollectionSegment {
    items?: Array<IMemberWallet>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IWalletTransactionSortInput {
    service?: ISortEnumType;
    paymentServiceId?: ISortEnumType;
    paymentServiceToken?: ISortEnumType;
    amount?: ISortEnumType;
    detainedAmount?: ISortEnumType;
    concept?: ISortEnumType;
    description?: ISortEnumType;
    projectWalletKeyId?: ISortEnumType;
    memberId?: ISortEnumType;
    eWalletId?: ISortEnumType;
    receptorId?: ISortEnumType;
    type?: ISortEnumType;
    eWallet?: IEWalletSortInput;
    receptor?: IEWalletSortInput;
    walletTransactionMember?: IWalletTransactionMemberRelationSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IWalletTransactionMemberRelationSortInput {
    memberRelationId?: ISortEnumType;
    walletTransactionId?: ISortEnumType;
    walletTransaction?: IWalletTransactionSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IWalletTransactionCollectionSegment {
    items?: Array<IWalletTransaction>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IWalletTransactionStatusSortInput {
    status?: ISortEnumType;
    description?: ISortEnumType;
    walletTransactionId?: ISortEnumType;
    walletTransaction?: IWalletTransactionSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IWalletTransactionStatusCollectionSegment {
    items?: Array<IWalletTransactionStatus>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IWalletTransactionMemberRelationCollectionSegment {
    items?: Array<IWalletTransactionMemberRelation>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IWalletTransactionMemberDetailSortInput {
    amount?: ISortEnumType;
    description?: ISortEnumType;
    walletTransactionMemberId?: ISortEnumType;
    walletTransactionMember?: IWalletTransactionMemberRelationSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IWalletTransactionMemberDetailCollectionSegment {
    items?: Array<IWalletTransactionMemberDetail>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IWalletTransactionSummary {
    walletId?: IUUID;
    walletMemberId?: IUUID;
    receptorId?: IUUID;
    receptorMemberId?: IUUID;
    amount: IDecimal;
    transactions: Array<IWalletTransaction>;
    memberRelationSummary?: Array<IWalletTransactionSummaryMemberRelation>;
    amountSummary: IDecimal;
    receptorMember?: IMember;
    walletMember?: IMember;
}
export interface IWalletTransactionSummaryMemberRelation {
    transactions: Array<IWalletTransaction>;
    memberRelationId?: IUUID;
    amount: IDecimal;
    transactionToPrincipal: IWalletTransactionSumaryPrincipal;
    memberRelation?: IMemberRelation;
}
export interface IWalletTransactionSumaryPrincipal {
    transactions: Array<IWalletTransaction>;
    amount: IDecimal;
    createdAt?: IDateTime;
}
export interface ICertificateMovementFilterInput {
    and?: Array<ICertificateMovementFilterInput>;
    or?: Array<ICertificateMovementFilterInput>;
    certificateId?: IComparableGuidOperationFilterInput;
    certificate?: ICertificateFilterInput;
    certificateMovementType?: ICertificateMovementTypeOperationFilterInput;
    reasons?: IListFilterInputTypeOfCertificateMovementReasonFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ICertificateFilterInput {
    and?: Array<ICertificateFilterInput>;
    or?: Array<ICertificateFilterInput>;
    insurerId?: IComparableNullableOfGuidOperationFilterInput;
    insurer?: IInsurerModuleFilterInput;
    contractorId?: IComparableNullableOfGuidOperationFilterInput;
    branchOfficeId?: IComparableNullableOfGuidOperationFilterInput;
    merchandiseDetailId?: IComparableGuidOperationFilterInput;
    trafficDetailId?: IComparableGuidOperationFilterInput;
    merchandiseDetail?: IMerchandiseDetailFilterInput;
    trafficDetail?: ITrafficDetailFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    additionalComments?: IStringOperationFilterInput;
    createdBy?: IComparableGuidOperationFilterInput;
    isActive?: IBooleanOperationFilterInput;
    cancellationReason?: IStringOperationFilterInput;
    insurerFeeId?: IComparableNullableOfGuidOperationFilterInput;
    insurerFee?: IInsurerFeeFilterInput;
    issueStatus?: IIssueStatusOperationFilterInput;
    files?: IListFilterInputTypeOfCertificateFileFilterInput;
    policyModuleId?: IComparableNullableOfGuidOperationFilterInput;
    policyModule?: IPolicyModuleFilterInput;
    statusFrom?: ICertificateStatusFromOperationFilterInput;
    beneficiaries?: IListFilterInputTypeOfCertificateBeneficiaryFilterInput;
    shipmentDate?: IComparableNullableOfDateTimeOperationFilterInput;
    shippingTransport?: IStringOperationFilterInput;
    estimatedArrivingDate?: IComparableNullableOfDateTimeOperationFilterInput;
    history?: IListFilterInputTypeOfCertificateMovementFilterInput;
    externalIdentifier?: IStringOperationFilterInput;
    internalIdentifier?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IInsurerModuleFilterInput {
    and?: Array<IInsurerModuleFilterInput>;
    or?: Array<IInsurerModuleFilterInput>;
    insurerSinisterContactId?: IComparableNullableOfGuidOperationFilterInput;
    insurerSinisterContact?: IInsurerSinisterContactFilterInput;
    insurerAdjusterContactId?: IComparableNullableOfGuidOperationFilterInput;
    insurerAdjusterContact?: IInsurerAdjusterContactFilterInput;
    logo?: IStringOperationFilterInput;
    content?: IStringOperationFilterInput;
    descriptionCoverages?: IStringOperationFilterInput;
    certificateType?: ICertificateTypeOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    placeInsurer?: IStringOperationFilterInput;
    insurerType?: IInsurerTypeOperationFilterInput;
    originCountryId?: IComparableNullableOfGuidOperationFilterInput;
    countries?: IListComparableGuidOperationFilterInput;
    isActive?: IBooleanOperationFilterInput;
    insurerCompanyModules?: IListFilterInputTypeOfInsurerCompanyModuleFilterInput;
    insurerContacts?: IListFilterInputTypeOfInsurerContactFilterInput;
    insurerBranchId?: IComparableNullableOfGuidOperationFilterInput;
    insurerBranch?: IInsurerBranchFilterInput;
    insurerAddresses?: IListFilterInputTypeOfInsurerAddressFilterInput;
    servicesToShow?: IListStringOperationFilterInput;
    merchandiseLegalTermsHTML?: IStringOperationFilterInput;
    merchandiseLegalTermsJSON?: IStringOperationFilterInput;
    containerLegalTermsHTML?: IStringOperationFilterInput;
    containerLegalTermsJSON?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IInsurerSinisterContactFilterInput {
    and?: Array<IInsurerSinisterContactFilterInput>;
    or?: Array<IInsurerSinisterContactFilterInput>;
    insurerModuleId?: IComparableGuidOperationFilterInput;
    contactName?: IStringOperationFilterInput;
    officePhoneNumber?: IStringOperationFilterInput;
    afterHoursPhoneNumber?: IStringOperationFilterInput;
    emailOne?: IStringOperationFilterInput;
    emailTwo?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IInsurerAdjusterContactFilterInput {
    and?: Array<IInsurerAdjusterContactFilterInput>;
    or?: Array<IInsurerAdjusterContactFilterInput>;
    name?: IStringOperationFilterInput;
    emailOne?: IStringOperationFilterInput;
    emailTwo?: IStringOperationFilterInput;
    phoneNumber?: IStringOperationFilterInput;
    insurerModuleId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ICertificateTypeOperationFilterInput {
    eq?: ICertificateType;
    neq?: ICertificateType;
    in?: Array<ICertificateType>;
    nin?: Array<ICertificateType>;
}
export declare const enum ICertificateType {
    GENERATE_DOCUMENT = "GENERATE_DOCUMENT",
    UPLOAD_DOCUMENT = "UPLOAD_DOCUMENT"
}
export interface IInsurerTypeOperationFilterInput {
    eq?: IInsurerType;
    neq?: IInsurerType;
    in?: Array<IInsurerType>;
    nin?: Array<IInsurerType>;
}
export declare const enum IInsurerType {
    NATIONAL = "NATIONAL",
    INTERNATIONAL = "INTERNATIONAL",
    MIXED = "MIXED"
}
export interface IListFilterInputTypeOfInsurerCompanyModuleFilterInput {
    all?: IInsurerCompanyModuleFilterInput;
    none?: IInsurerCompanyModuleFilterInput;
    some?: IInsurerCompanyModuleFilterInput;
    any?: boolean;
}
export interface IInsurerCompanyModuleFilterInput {
    and?: Array<IInsurerCompanyModuleFilterInput>;
    or?: Array<IInsurerCompanyModuleFilterInput>;
    insurerModuleId?: IComparableGuidOperationFilterInput;
    insurerModule?: IInsurerModuleFilterInput;
    key?: IStringOperationFilterInput;
    name?: IStringOperationFilterInput;
    typeValue?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfInsurerContactFilterInput {
    all?: IInsurerContactFilterInput;
    none?: IInsurerContactFilterInput;
    some?: IInsurerContactFilterInput;
    any?: boolean;
}
export interface IInsurerContactFilterInput {
    and?: Array<IInsurerContactFilterInput>;
    or?: Array<IInsurerContactFilterInput>;
    insurerModuleId?: IComparableGuidOperationFilterInput;
    insurerModule?: IInsurerModuleFilterInput;
    name?: IStringOperationFilterInput;
    email?: IStringOperationFilterInput;
    department?: IStringOperationFilterInput;
    phone?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IInsurerBranchFilterInput {
    and?: Array<IInsurerBranchFilterInput>;
    or?: Array<IInsurerBranchFilterInput>;
    insurerModuleId?: IComparableGuidOperationFilterInput;
    insurerModule?: IInsurerModuleFilterInput;
    life?: IBooleanOperationFilterInput;
    accidentAndDisease?: IBooleanOperationFilterInput;
    cars?: IBooleanOperationFilterInput;
    damages?: IBooleanOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfInsurerAddressFilterInput {
    all?: IInsurerAddressFilterInput;
    none?: IInsurerAddressFilterInput;
    some?: IInsurerAddressFilterInput;
    any?: boolean;
}
export interface IInsurerAddressFilterInput {
    and?: Array<IInsurerAddressFilterInput>;
    or?: Array<IInsurerAddressFilterInput>;
    insurerModuleId?: IComparableGuidOperationFilterInput;
    insurerModule?: IInsurerModuleFilterInput;
    stateName?: IStringOperationFilterInput;
    municipality?: IStringOperationFilterInput;
    streetName?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IMerchandiseDetailFilterInput {
    and?: Array<IMerchandiseDetailFilterInput>;
    or?: Array<IMerchandiseDetailFilterInput>;
    contractorId?: IComparableGuidOperationFilterInput;
    officeId?: IComparableGuidOperationFilterInput;
    merchandiseCategoryId?: IComparableNullableOfGuidOperationFilterInput;
    merchandiseId?: IComparableGuidOperationFilterInput;
    merchandise?: IMerchandiseFilterInput;
    countryOrigin?: IComparableNullableOfGuidOperationFilterInput;
    countryDestiny?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IMerchandiseFilterInput {
    and?: Array<IMerchandiseFilterInput>;
    or?: Array<IMerchandiseFilterInput>;
    name?: IStringOperationFilterInput;
    merchandiseType?: IStringOperationFilterInput;
    categoryId?: IComparableGuidOperationFilterInput;
    insurerId?: IComparableNullableOfGuidOperationFilterInput;
    insurer?: IInsurerModuleFilterInput;
    merchandiseStatus?: IMerchandiseStatusOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IMerchandiseStatusOperationFilterInput {
    eq?: IMerchandiseStatus;
    neq?: IMerchandiseStatus;
    in?: Array<IMerchandiseStatus>;
    nin?: Array<IMerchandiseStatus>;
}
export declare const enum IMerchandiseStatus {
    DISABLED = "DISABLED",
    EXCLUDED = "EXCLUDED",
    WAITING_FOR_APPROVAL = "WAITING_FOR_APPROVAL",
    ENABLED = "ENABLED"
}
export interface ITrafficDetailFilterInput {
    and?: Array<ITrafficDetailFilterInput>;
    or?: Array<ITrafficDetailFilterInput>;
    currencyId?: IComparableGuidOperationFilterInput;
    beneficiaryId?: IComparableGuidOperationFilterInput;
    activityDescription?: IStringOperationFilterInput;
    origin?: IStringOperationFilterInput;
    destiny?: IStringOperationFilterInput;
    sumAssured?: IComparableDoubleOperationFilterInput;
    transportMode?: ITransportModeOperationFilterInput;
    number?: IStringOperationFilterInput;
    showPrice?: IBooleanOperationFilterInput;
    minimumSell?: IComparableNullableOfDecimalOperationFilterInput;
    priceToShow?: IComparableDecimalOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    typeCoverage?: INullableOfCoverageTypeOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ITransportModeOperationFilterInput {
    eq?: ITransportMode;
    neq?: ITransportMode;
    in?: Array<ITransportMode>;
    nin?: Array<ITransportMode>;
}
export declare const enum ITransportMode {
    SEA = "SEA",
    AERIAL = "AERIAL",
    TERRESTRIAL = "TERRESTRIAL",
    INTERMODAL = "INTERMODAL"
}
export interface INullableOfCoverageTypeOperationFilterInput {
    eq?: ICoverageType;
    neq?: ICoverageType;
    in?: Array<ICoverageType | null>;
    nin?: Array<ICoverageType | null>;
}
export declare const enum ICoverageType {
    WAREHOUSE_TO_WAREHOUSE = "WAREHOUSE_TO_WAREHOUSE",
    HARBOR_TO_HARBOR = "HARBOR_TO_HARBOR",
    HARBOR_TO_WAREHOUSE = "HARBOR_TO_WAREHOUSE",
    WAREHOUSE_TO_HARBOR = "WAREHOUSE_TO_HARBOR"
}
export interface IInsurerFeeFilterInput {
    and?: Array<IInsurerFeeFilterInput>;
    or?: Array<IInsurerFeeFilterInput>;
    isActive?: IBooleanOperationFilterInput;
    contractorId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    insurerModuleId?: IComparableNullableOfGuidOperationFilterInput;
    merchandises?: IListComparableGuidOperationFilterInput;
    insurerModule?: IInsurerModuleFilterInput;
    policyModuleId?: IComparableNullableOfGuidOperationFilterInput;
    policyModule?: IPolicyModuleFilterInput;
    originCountries?: IListComparableGuidOperationFilterInput;
    destinyConutries?: IListComparableGuidOperationFilterInput;
    feeId?: IComparableGuidOperationFilterInput;
    fee?: IFeeFilterInput;
    files?: IListFilterInputTypeOfInsurerFeeFileFilterInput;
    startVigency?: IComparableNullableOfDateTimeOperationFilterInput;
    vigencyLimit?: IComparableNullableOfDateTimeOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IPolicyModuleFilterInput {
    and?: Array<IPolicyModuleFilterInput>;
    or?: Array<IPolicyModuleFilterInput>;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    policyNumber?: IStringOperationFilterInput;
    insurerModuleId?: IComparableNullableOfGuidOperationFilterInput;
    insurer?: IInsurerModuleFilterInput;
    policyType?: IPolicyTypeOperationFilterInput;
    address?: IStringOperationFilterInput;
    paymentResponsable?: INullableOfPaymentResponsableOperationFilterInput;
    phoneNumber?: IStringOperationFilterInput;
    startDateVigency?: IComparableDateTimeOperationFilterInput;
    endDatevigency?: IComparableDateTimeOperationFilterInput;
    moneySymbols?: IListFilterInputTypeOfMoneySymbolFilterInput;
    dateLimitVigency?: IComparableDateTimeOperationFilterInput;
    description?: IStringOperationFilterInput;
    hasRateByPolicy?: IBooleanOperationFilterInput;
    policyDeductibleId?: IComparableNullableOfGuidOperationFilterInput;
    deductibles?: IPolicyDeductibleFilterInput;
    declarations?: IListFilterInputTypeOfPolicyDeclarationFilterInput;
    policyPrimaId?: IComparableNullableOfGuidOperationFilterInput;
    policyPrima?: IPolicyPrimaFilterInput;
    policyFrequencyPaymentId?: IComparableNullableOfGuidOperationFilterInput;
    policyFrequencyPayment?: IPolicyFrequencyPaymentFilterInput;
    products?: IListFilterInputTypeOfPolicyProductFilterInput;
    modules?: IListFilterInputTypeOfModuleFilterInput;
    policyFiles?: IListFilterInputTypeOfPolicyFileFilterInput;
    policyCoverageId?: IComparableNullableOfGuidOperationFilterInput;
    policyCoverage?: IPolicyCoverageFilterInput;
    contracts?: IListComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IPolicyTypeOperationFilterInput {
    eq?: IPolicyType;
    neq?: IPolicyType;
    in?: Array<IPolicyType>;
    nin?: Array<IPolicyType>;
}
export declare const enum IPolicyType {
    UNIQUE_CLIENT = "UNIQUE_CLIENT",
    MULTICLIENT = "MULTICLIENT"
}
export interface INullableOfPaymentResponsableOperationFilterInput {
    eq?: IPaymentResponsable;
    neq?: IPaymentResponsable;
    in?: Array<IPaymentResponsable | null>;
    nin?: Array<IPaymentResponsable | null>;
}
export declare const enum IPaymentResponsable {
    CLIENT = "CLIENT",
    INSURER = "INSURER"
}
export interface IListFilterInputTypeOfMoneySymbolFilterInput {
    all?: IMoneySymbolFilterInput;
    none?: IMoneySymbolFilterInput;
    some?: IMoneySymbolFilterInput;
    any?: boolean;
}
export interface IMoneySymbolFilterInput {
    and?: Array<IMoneySymbolFilterInput>;
    or?: Array<IMoneySymbolFilterInput>;
    policyModuleId?: IComparableGuidOperationFilterInput;
    policyModule?: IPolicyModuleFilterInput;
    keyName?: IStringOperationFilterInput;
    value?: IStringOperationFilterInput;
    label?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IPolicyDeductibleFilterInput {
    and?: Array<IPolicyDeductibleFilterInput>;
    or?: Array<IPolicyDeductibleFilterInput>;
    policyModuleId?: IComparableNullableOfGuidOperationFilterInput;
    policyModule?: IPolicyModuleFilterInput;
    deductibleTheft?: IComparableNullableOfDecimalOperationFilterInput;
    deductibleMerchandiseSensibility?: IComparableNullableOfDecimalOperationFilterInput;
    deductibleRefrigeratedMerchandise?: IComparableNullableOfDecimalOperationFilterInput;
    minimumDeductible?: IComparableNullableOfDecimalOperationFilterInput;
    damageDeductible?: IComparableNullableOfDecimalOperationFilterInput;
    minimumPurchase?: IComparableNullableOfDecimalOperationFilterInput;
    purchaseRate?: IComparableNullableOfDecimalOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfPolicyDeclarationFilterInput {
    all?: IPolicyDeclarationFilterInput;
    none?: IPolicyDeclarationFilterInput;
    some?: IPolicyDeclarationFilterInput;
    any?: boolean;
}
export interface IPolicyDeclarationFilterInput {
    and?: Array<IPolicyDeclarationFilterInput>;
    or?: Array<IPolicyDeclarationFilterInput>;
    policyModuleId?: IComparableGuidOperationFilterInput;
    policyModule?: IPolicyModuleFilterInput;
    email?: IStringOperationFilterInput;
    name?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IPolicyPrimaFilterInput {
    and?: Array<IPolicyPrimaFilterInput>;
    or?: Array<IPolicyPrimaFilterInput>;
    policyModuleId?: IComparableNullableOfGuidOperationFilterInput;
    policyModule?: IPolicyModuleFilterInput;
    primaNeta?: IComparableDecimalOperationFilterInput;
    discounts?: IComparableDecimalOperationFilterInput;
    surchargerPayments?: IStringOperationFilterInput;
    policyRights?: IStringOperationFilterInput;
    subTotal?: IComparableDecimalOperationFilterInput;
    iva?: IComparableDecimalOperationFilterInput;
    primaTotal?: IComparableDecimalOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IPolicyFrequencyPaymentFilterInput {
    and?: Array<IPolicyFrequencyPaymentFilterInput>;
    or?: Array<IPolicyFrequencyPaymentFilterInput>;
    policyModuleId?: IComparableNullableOfGuidOperationFilterInput;
    policyModule?: IPolicyModuleFilterInput;
    monthly?: IBooleanOperationFilterInput;
    bimonthly?: IBooleanOperationFilterInput;
    quarterly?: IBooleanOperationFilterInput;
    halfYearly?: IBooleanOperationFilterInput;
    annual?: IBooleanOperationFilterInput;
    cash?: IBooleanOperationFilterInput;
    buyRate?: IComparableNullableOfDecimalOperationFilterInput;
    minimumBuys?: IComparableNullableOfDecimalOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfPolicyProductFilterInput {
    all?: IPolicyProductFilterInput;
    none?: IPolicyProductFilterInput;
    some?: IPolicyProductFilterInput;
    any?: boolean;
}
export interface IPolicyProductFilterInput {
    and?: Array<IPolicyProductFilterInput>;
    or?: Array<IPolicyProductFilterInput>;
    policyModuleId?: IComparableGuidOperationFilterInput;
    policyModule?: IPolicyModuleFilterInput;
    name?: IStringOperationFilterInput;
    category?: IStringOperationFilterInput;
    insurerBuy?: IComparableDecimalOperationFilterInput;
    insurerMinimum?: IComparableDecimalOperationFilterInput;
    policySell?: IComparableDecimalOperationFilterInput;
    policyMinimumSell?: IComparableDecimalOperationFilterInput;
    productId?: IComparableNullableOfGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfModuleFilterInput {
    all?: IModuleFilterInput;
    none?: IModuleFilterInput;
    some?: IModuleFilterInput;
    any?: boolean;
}
export interface IModuleFilterInput {
    and?: Array<IModuleFilterInput>;
    or?: Array<IModuleFilterInput>;
    policyModuleId?: IComparableNullableOfGuidOperationFilterInput;
    insurerModule?: IPolicyModuleFilterInput;
    key?: IStringOperationFilterInput;
    typeValue?: IStringOperationFilterInput;
    name?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfPolicyFileFilterInput {
    all?: IPolicyFileFilterInput;
    none?: IPolicyFileFilterInput;
    some?: IPolicyFileFilterInput;
    any?: boolean;
}
export interface IPolicyFileFilterInput {
    and?: Array<IPolicyFileFilterInput>;
    or?: Array<IPolicyFileFilterInput>;
    policyModuleId?: IComparableGuidOperationFilterInput;
    policyModule?: IPolicyModuleFilterInput;
    fileId?: IComparableGuidOperationFilterInput;
    url?: IStringOperationFilterInput;
    message?: IStringOperationFilterInput;
    token?: IStringOperationFilterInput;
    partialUrl?: IStringOperationFilterInput;
    name?: IStringOperationFilterInput;
    fileName?: IStringOperationFilterInput;
    size?: IStringOperationFilterInput;
    type?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IPolicyCoverageFilterInput {
    and?: Array<IPolicyCoverageFilterInput>;
    or?: Array<IPolicyCoverageFilterInput>;
    policyModuleId?: IComparableGuidOperationFilterInput;
    policyModule?: IPolicyModuleFilterInput;
    originCountries?: IListComparableGuidOperationFilterInput;
    destinyCountries?: IListComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IFeeFilterInput {
    and?: Array<IFeeFilterInput>;
    or?: Array<IFeeFilterInput>;
    insurerId?: IComparableNullableOfGuidOperationFilterInput;
    insurer?: IInsurerModuleFilterInput;
    purchaseRates?: IComparableNullableOfDoubleOperationFilterInput;
    minimumPurchase?: IComparableDoubleOperationFilterInput;
    sellRates?: IComparableNullableOfDoubleOperationFilterInput;
    maximumSells?: IComparableDoubleOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    minimumSells?: IComparableNullableOfDoubleOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfInsurerFeeFileFilterInput {
    all?: IInsurerFeeFileFilterInput;
    none?: IInsurerFeeFileFilterInput;
    some?: IInsurerFeeFileFilterInput;
    any?: boolean;
}
export interface IInsurerFeeFileFilterInput {
    and?: Array<IInsurerFeeFileFilterInput>;
    or?: Array<IInsurerFeeFileFilterInput>;
    insurerFeeId?: IComparableGuidOperationFilterInput;
    insurerFee?: IInsurerFeeFilterInput;
    fileId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IIssueStatusOperationFilterInput {
    eq?: IIssueStatus;
    neq?: IIssueStatus;
    in?: Array<IIssueStatus>;
    nin?: Array<IIssueStatus>;
}
export declare const enum IIssueStatus {
    REMESADO = "REMESADO",
    POR_REMESAR = "POR_REMESAR",
    RECHAZADO = "RECHAZADO",
    AUDITAR = "AUDITAR"
}
export interface IListFilterInputTypeOfCertificateFileFilterInput {
    all?: ICertificateFileFilterInput;
    none?: ICertificateFileFilterInput;
    some?: ICertificateFileFilterInput;
    any?: boolean;
}
export interface ICertificateFileFilterInput {
    and?: Array<ICertificateFileFilterInput>;
    or?: Array<ICertificateFileFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    certificateId?: IComparableGuidOperationFilterInput;
    certificate?: ICertificateFilterInput;
    fileId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ICertificateStatusFromOperationFilterInput {
    eq?: ICertificateStatusFrom;
    neq?: ICertificateStatusFrom;
    in?: Array<ICertificateStatusFrom>;
    nin?: Array<ICertificateStatusFrom>;
}
export declare const enum ICertificateStatusFrom {
    ADMINISTRATOR = "ADMINISTRATOR",
    PUBLIC_USER = "PUBLIC_USER"
}
export interface IListFilterInputTypeOfCertificateBeneficiaryFilterInput {
    all?: ICertificateBeneficiaryFilterInput;
    none?: ICertificateBeneficiaryFilterInput;
    some?: ICertificateBeneficiaryFilterInput;
    any?: boolean;
}
export interface ICertificateBeneficiaryFilterInput {
    and?: Array<ICertificateBeneficiaryFilterInput>;
    or?: Array<ICertificateBeneficiaryFilterInput>;
    certificateId?: IComparableGuidOperationFilterInput;
    certificate?: ICertificateFilterInput;
    beneficiaryId?: IComparableGuidOperationFilterInput;
    beneficiary?: IBeneficiaryFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IBeneficiaryFilterInput {
    and?: Array<IBeneficiaryFilterInput>;
    or?: Array<IBeneficiaryFilterInput>;
    name?: IStringOperationFilterInput;
    rfc?: IStringOperationFilterInput;
    countryId?: IComparableGuidOperationFilterInput;
    isActive?: IBooleanOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    contractId?: IComparableNullableOfGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfCertificateMovementFilterInput {
    all?: ICertificateMovementFilterInput;
    none?: ICertificateMovementFilterInput;
    some?: ICertificateMovementFilterInput;
    any?: boolean;
}
export interface ICertificateMovementTypeOperationFilterInput {
    eq?: ICertificateMovementType;
    neq?: ICertificateMovementType;
    in?: Array<ICertificateMovementType>;
    nin?: Array<ICertificateMovementType>;
}
export declare const enum ICertificateMovementType {
    REJECTION = "REJECTION",
    APPROVAL = "APPROVAL"
}
export interface IListFilterInputTypeOfCertificateMovementReasonFilterInput {
    all?: ICertificateMovementReasonFilterInput;
    none?: ICertificateMovementReasonFilterInput;
    some?: ICertificateMovementReasonFilterInput;
    any?: boolean;
}
export interface ICertificateMovementReasonFilterInput {
    and?: Array<ICertificateMovementReasonFilterInput>;
    or?: Array<ICertificateMovementReasonFilterInput>;
    certificateMovementId?: IComparableGuidOperationFilterInput;
    certificateMovement?: ICertificateMovementFilterInput;
    reason?: IStringOperationFilterInput;
    reasonDescription?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ICertificateMovement {
    certificateId: IUUID;
    certificate?: ICertificate;
    certificateMovementType: ICertificateMovementType;
    reasons?: Array<ICertificateMovementReason>;
    memberId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICertificate {
    insurerId?: IUUID;
    insurer?: IInsurerModule;
    contractorId?: IUUID;
    branchOfficeId?: IUUID;
    merchandiseDetailId: IUUID;
    trafficDetailId: IUUID;
    merchandiseDetail?: IMerchandiseDetail;
    trafficDetail?: ITrafficDetail;
    projectId: IUUID;
    additionalComments?: string;
    createdBy: IUUID;
    isActive: boolean;
    cancellationReason?: string;
    insurerFeeId?: IUUID;
    insurerFee?: IInsurerFee;
    issueStatus: IIssueStatus;
    files?: Array<ICertificateFile>;
    policyModuleId?: IUUID;
    policyModule?: IPolicyModule;
    statusFrom: ICertificateStatusFrom;
    beneficiaries?: Array<ICertificateBeneficiary>;
    shipmentDate?: IDateTime;
    shippingTransport?: string;
    estimatedArrivingDate?: IDateTime;
    history?: Array<ICertificateMovement>;
    externalIdentifier?: string;
    internalIdentifier?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    contractor?: IMember;
}
export interface IInsurerModule {
    insurerSinisterContactId?: IUUID;
    insurerSinisterContact?: IInsurerSinisterContact;
    insurerAdjusterContactId?: IUUID;
    insurerAdjusterContact?: IInsurerAdjusterContact;
    logo?: string;
    content?: string;
    descriptionCoverages?: string;
    certificateType: ICertificateType;
    projectId: IUUID;
    name?: string;
    placeInsurer?: string;
    insurerType: IInsurerType;
    originCountryId?: IUUID;
    countries?: Array<IUUID>;
    isActive: boolean;
    insurerCompanyModules?: Array<IInsurerCompanyModule>;
    insurerContacts?: Array<IInsurerContact>;
    insurerBranchId?: IUUID;
    insurerBranch?: IInsurerBranch;
    insurerAddresses?: Array<IInsurerAddress>;
    servicesToShow?: Array<string>;
    merchandiseLegalTermsHTML?: string;
    merchandiseLegalTermsJSON?: string;
    containerLegalTermsHTML?: string;
    containerLegalTermsJSON?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerSinisterContact {
    insurerModuleId: IUUID;
    contactName: string;
    officePhoneNumber: string;
    afterHoursPhoneNumber: string;
    emailOne: string;
    emailTwo: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerAdjusterContact {
    name: string;
    emailOne: string;
    emailTwo: string;
    phoneNumber: string;
    insurerModuleId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerCompanyModule {
    insurerModuleId: IUUID;
    insurerModule?: IInsurerModule;
    key: string;
    name: string;
    typeValue?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerContact {
    insurerModuleId: IUUID;
    insurerModule?: IInsurerModule;
    name: string;
    email: string;
    department: string;
    phone: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerBranch {
    insurerModuleId: IUUID;
    insurerModule?: IInsurerModule;
    life: boolean;
    accidentAndDisease: boolean;
    cars: boolean;
    damages: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerAddress {
    insurerModuleId: IUUID;
    insurerModule?: IInsurerModule;
    stateName: string;
    municipality: string;
    streetName: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMerchandiseDetail {
    contractorId: IUUID;
    officeId: IUUID;
    merchandiseCategoryId?: IUUID;
    merchandiseId: IUUID;
    merchandise?: IMerchandise;
    countryOrigin?: IUUID;
    countryDestiny?: IUUID;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMerchandise {
    name?: string;
    merchandiseType?: string;
    categoryId: IUUID;
    insurerId?: IUUID;
    insurer?: IInsurerModule;
    merchandiseStatus: IMerchandiseStatus;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    category?: ITaxonomy;
}
export interface ITrafficDetail {
    currencyId: IUUID;
    beneficiaryId: IUUID;
    activityDescription: string;
    origin: string;
    destiny: string;
    sumAssured: number;
    transportMode: ITransportMode;
    number: string;
    showPrice: boolean;
    minimumSell?: IDecimal;
    priceToShow: IDecimal;
    projectId: IUUID;
    typeCoverage?: ICoverageType;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    currency?: ICurrency;
}
export interface IInsurerFee {
    isActive?: boolean;
    contractorId?: IUUID;
    projectId: IUUID;
    insurerModuleId?: IUUID;
    merchandises?: Array<IUUID>;
    insurerModule?: IInsurerModule;
    policyModuleId?: IUUID;
    policyModule?: IPolicyModule;
    originCountries: Array<IUUID>;
    destinyConutries: Array<IUUID>;
    feeId: IUUID;
    fee?: IFee;
    files?: Array<IInsurerFeeFile>;
    startVigency?: IDateTime;
    vigencyLimit?: IDateTime;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPolicyModule {
    projectId?: IUUID;
    policyNumber?: string;
    insurerModuleId?: IUUID;
    insurer?: IInsurerModule;
    policyType: IPolicyType;
    address?: string;
    paymentResponsable?: IPaymentResponsable;
    phoneNumber?: string;
    startDateVigency: IDateTime;
    endDatevigency: IDateTime;
    moneySymbols?: Array<IMoneySymbol>;
    dateLimitVigency: IDateTime;
    description?: string;
    hasRateByPolicy?: boolean;
    policyDeductibleId?: IUUID;
    deductibles?: IPolicyDeductible;
    declarations?: Array<IPolicyDeclaration>;
    policyPrimaId?: IUUID;
    policyPrima?: IPolicyPrima;
    policyFrequencyPaymentId?: IUUID;
    policyFrequencyPayment?: IPolicyFrequencyPayment;
    products?: Array<IPolicyProduct>;
    modules?: Array<Iitus_Module>;
    policyFiles: Array<IPolicyFile>;
    policyCoverageId?: IUUID;
    policyCoverage?: IPolicyCoverage;
    contracts?: Array<IUUID>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMoneySymbol {
    policyModuleId: IUUID;
    policyModule?: IPolicyModule;
    keyName: string;
    value: string;
    label: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPolicyDeductible {
    policyModuleId?: IUUID;
    policyModule?: IPolicyModule;
    deductibleTheft?: IDecimal;
    deductibleMerchandiseSensibility?: IDecimal;
    deductibleRefrigeratedMerchandise?: IDecimal;
    minimumDeductible?: IDecimal;
    damageDeductible?: IDecimal;
    minimumPurchase?: IDecimal;
    purchaseRate?: IDecimal;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPolicyDeclaration {
    policyModuleId: IUUID;
    policyModule?: IPolicyModule;
    email: string;
    name?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPolicyPrima {
    policyModuleId?: IUUID;
    policyModule?: IPolicyModule;
    primaNeta: IDecimal;
    discounts: IDecimal;
    surchargerPayments?: string;
    policyRights?: string;
    subTotal: IDecimal;
    iva: IDecimal;
    primaTotal: IDecimal;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPolicyFrequencyPayment {
    policyModuleId?: IUUID;
    policyModule?: IPolicyModule;
    monthly: boolean;
    bimonthly: boolean;
    quarterly: boolean;
    halfYearly: boolean;
    annual: boolean;
    cash: boolean;
    buyRate?: IDecimal;
    minimumBuys?: IDecimal;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPolicyProduct {
    policyModuleId: IUUID;
    policyModule?: IPolicyModule;
    name: string;
    category: string;
    insurerBuy: IDecimal;
    insurerMinimum: IDecimal;
    policySell: IDecimal;
    policyMinimumSell: IDecimal;
    productId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface Iitus_Module {
    policyModuleId?: IUUID;
    insurerModule?: IPolicyModule;
    key: string;
    typeValue: string;
    name: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPolicyFile {
    policyModuleId: IUUID;
    policyModule?: IPolicyModule;
    fileId: IUUID;
    url: string;
    message: string;
    token: string;
    partialUrl: string;
    name: string;
    fileName: string;
    size: string;
    type: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPolicyCoverage {
    policyModuleId: IUUID;
    policyModule?: IPolicyModule;
    originCountries: Array<IUUID>;
    destinyCountries: Array<IUUID>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IFee {
    insurerId?: IUUID;
    insurer?: IInsurerModule;
    purchaseRates?: number;
    minimumPurchase: number;
    sellRates?: number;
    maximumSells: number;
    projectId: IUUID;
    minimumSells?: number;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerFeeFile {
    insurerFeeId: IUUID;
    insurerFee?: IInsurerFee;
    fileId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICertificateFile {
    projectId: IUUID;
    certificateId: IUUID;
    certificate?: ICertificate;
    fileId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICertificateBeneficiary {
    certificateId: IUUID;
    certificate?: ICertificate;
    beneficiaryId: IUUID;
    beneficiary?: IBeneficiary;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IBeneficiary {
    name: string;
    rfc: string;
    countryId: IUUID;
    isActive: boolean;
    projectId: IUUID;
    contractId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICertificateMovementReason {
    certificateMovementId: IUUID;
    certificateMovement?: ICertificateMovement;
    reason?: string;
    reasonDescription?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICountryRequestFilterInput {
    and?: Array<ICountryRequestFilterInput>;
    or?: Array<ICountryRequestFilterInput>;
    insurerCompanyId?: IComparableGuidOperationFilterInput;
    insurerCompany?: IInsurerCompanyFilterInput;
    countryId?: IComparableGuidOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IInsurerCompanyFilterInput {
    and?: Array<IInsurerCompanyFilterInput>;
    or?: Array<IInsurerCompanyFilterInput>;
    name?: IStringOperationFilterInput;
    countries?: IListComparableGuidOperationFilterInput;
    contractorId?: IComparableGuidOperationFilterInput;
    contractor?: IContractorFilterInput;
    isActive?: IBooleanOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IContractorFilterInput {
    and?: Array<IContractorFilterInput>;
    or?: Array<IContractorFilterInput>;
    name?: IStringOperationFilterInput;
    countryId?: IComparableGuidOperationFilterInput;
    company?: IStringOperationFilterInput;
    postalCode?: IStringOperationFilterInput;
    location?: IStringOperationFilterInput;
    city?: IStringOperationFilterInput;
    colony?: IStringOperationFilterInput;
    extNumber?: IStringOperationFilterInput;
    phone?: IStringOperationFilterInput;
    typeOfBusiness?: IStringOperationFilterInput;
    webSite?: IStringOperationFilterInput;
    rfc?: IStringOperationFilterInput;
    auxiliaryCode?: IStringOperationFilterInput;
    paymentMethod?: IStringOperationFilterInput;
    usesCFDI?: IBooleanOperationFilterInput;
    paymentTerm?: IPaymentTermOperationFilterInput;
    invoicingMethod?: IInvoicingMethodOperationFilterInput;
    creditDays?: IComparableInt32OperationFilterInput;
    creditAmount?: IComparableDoubleOperationFilterInput;
    invoicingPeriod?: IInvoicingPeriodOperationFilterInput;
    companysRfc?: IComparableGuidOperationFilterInput;
    registration?: IComparableGuidOperationFilterInput;
    constitutiveAct?: IComparableGuidOperationFilterInput;
    powerOfAttorney?: IComparableGuidOperationFilterInput;
    idCopy?: IComparableGuidOperationFilterInput;
    proofOfAddress?: IComparableGuidOperationFilterInput;
    positiveOpinionSat?: IComparableGuidOperationFilterInput;
    taxSituationCertificate?: IComparableGuidOperationFilterInput;
    isActive?: IBooleanOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    officeId?: IComparableGuidOperationFilterInput;
    office?: Iitus_OfficeFilterInput;
    beneficiaries?: IListFilterInputTypeOfBeneficiaryFilterInput;
    contractorPolicies?: IListFilterInputTypeOfContractorPolicyFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IPaymentTermOperationFilterInput {
    eq?: Iitus_PaymentTerm;
    neq?: Iitus_PaymentTerm;
    in?: Array<Iitus_PaymentTerm>;
    nin?: Array<Iitus_PaymentTerm>;
}
export declare const enum Iitus_PaymentTerm {
    CASH = "CASH",
    CREDIT = "CREDIT"
}
export interface IInvoicingMethodOperationFilterInput {
    eq?: IInvoicingMethod;
    neq?: IInvoicingMethod;
    in?: Array<IInvoicingMethod>;
    nin?: Array<IInvoicingMethod>;
}
export declare const enum IInvoicingMethod {
    BY_CERTIFICATE = "BY_CERTIFICATE",
    GLOBAL = "GLOBAL"
}
export interface IInvoicingPeriodOperationFilterInput {
    eq?: IInvoicingPeriod;
    neq?: IInvoicingPeriod;
    in?: Array<IInvoicingPeriod>;
    nin?: Array<IInvoicingPeriod>;
}
export declare const enum IInvoicingPeriod {
    INMEDIATE = "INMEDIATE",
    WEEKLY = "WEEKLY",
    FORTNIGHT = "FORTNIGHT",
    MONTHLY = "MONTHLY"
}
export interface Iitus_OfficeFilterInput {
    and?: Array<Iitus_OfficeFilterInput>;
    or?: Array<Iitus_OfficeFilterInput>;
    name?: IStringOperationFilterInput;
    contractorId?: IComparableGuidOperationFilterInput;
    contractor?: IContractorFilterInput;
    countryId?: IComparableGuidOperationFilterInput;
    state?: IStringOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfBeneficiaryFilterInput {
    all?: IBeneficiaryFilterInput;
    none?: IBeneficiaryFilterInput;
    some?: IBeneficiaryFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfContractorPolicyFilterInput {
    all?: IContractorPolicyFilterInput;
    none?: IContractorPolicyFilterInput;
    some?: IContractorPolicyFilterInput;
    any?: boolean;
}
export interface IContractorPolicyFilterInput {
    and?: Array<IContractorPolicyFilterInput>;
    or?: Array<IContractorPolicyFilterInput>;
    contractorId?: IComparableGuidOperationFilterInput;
    policyId?: IComparableGuidOperationFilterInput;
    contractor?: IContractorFilterInput;
    policy?: IPolicyFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IPolicyFilterInput {
    and?: Array<IPolicyFilterInput>;
    or?: Array<IPolicyFilterInput>;
    countryId?: IComparableGuidOperationFilterInput;
    insurerId?: IComparableGuidOperationFilterInput;
    document?: IStringOperationFilterInput;
    number?: IStringOperationFilterInput;
    policyType?: IPolicyTypeOperationFilterInput;
    description?: IStringOperationFilterInput;
    startValidityDate?: IComparableDateTimeOperationFilterInput;
    expirationDate?: IComparableDateTimeOperationFilterInput;
    limitDeclarationDate?: IComparableDateTimeOperationFilterInput;
    damageDeductible?: IStringOperationFilterInput;
    robberyDeductible?: IStringOperationFilterInput;
    crackDeductible?: IStringOperationFilterInput;
    merchandiseDeductible?: IStringOperationFilterInput;
    declarationResponsible?: IStringOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    clientPaysItus?: IBooleanOperationFilterInput;
    contractorType?: IContractorTypeOperationFilterInput;
    insurerPaysItus?: IBooleanOperationFilterInput;
    currencies?: IListComparableGuidOperationFilterInput;
    policyStatus?: IPolicyStatusOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IContractorTypeOperationFilterInput {
    eq?: IContractorType;
    neq?: IContractorType;
    in?: Array<IContractorType>;
    nin?: Array<IContractorType>;
}
export declare const enum IContractorType {
    MULTICLIENT = "MULTICLIENT",
    ONECLIENT = "ONECLIENT"
}
export interface IPolicyStatusOperationFilterInput {
    eq?: IPolicyStatus;
    neq?: IPolicyStatus;
    in?: Array<IPolicyStatus>;
    nin?: Array<IPolicyStatus>;
}
export declare const enum IPolicyStatus {
    REMESADO = "REMESADO",
    POR_REMESAR = "POR_REMESAR"
}
export interface ICountryRequest {
    insurerCompanyId: IUUID;
    insurerCompany?: IInsurerCompany;
    countryId: IUUID;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerCompany {
    name: string;
    countries: Array<IUUID>;
    contractorId: IUUID;
    contractor?: IContractor;
    isActive: boolean;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IContractor {
    name: string;
    countryId: IUUID;
    company: string;
    postalCode: string;
    location: string;
    city: string;
    colony: string;
    extNumber: string;
    phone: string;
    typeOfBusiness: string;
    webSite: string;
    rfc: string;
    auxiliaryCode: string;
    paymentMethod: string;
    usesCFDI: boolean;
    paymentTerm: Iitus_PaymentTerm;
    invoicingMethod: IInvoicingMethod;
    creditDays: number;
    creditAmount: number;
    invoicingPeriod: IInvoicingPeriod;
    companysRfc: IUUID;
    registration: IUUID;
    constitutiveAct: IUUID;
    powerOfAttorney: IUUID;
    idCopy: IUUID;
    proofOfAddress: IUUID;
    positiveOpinionSat: IUUID;
    taxSituationCertificate: IUUID;
    isActive: boolean;
    projectId: IUUID;
    officeId: IUUID;
    office?: Iitus_Office;
    beneficiaries: Array<IBeneficiary>;
    contractorPolicies: Array<IContractorPolicy>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface Iitus_Office {
    name: string;
    contractorId: IUUID;
    contractor?: IContractor;
    countryId: IUUID;
    state: string;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IContractorPolicy {
    contractorId: IUUID;
    policyId: IUUID;
    contractor?: IContractor;
    policy?: Iitus_Policy;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface Iitus_Policy {
    countryId: IUUID;
    insurerId: IUUID;
    document: string;
    number: string;
    policyType: IPolicyType;
    description: string;
    startValidityDate: IDateTime;
    expirationDate: IDateTime;
    limitDeclarationDate: IDateTime;
    damageDeductible: string;
    robberyDeductible: string;
    crackDeductible: string;
    merchandiseDeductible: string;
    declarationResponsible: string;
    projectId: IUUID;
    clientPaysItus: boolean;
    contractorType: IContractorType;
    insurerPaysItus: boolean;
    currencies: Array<IUUID>;
    policyStatus: IPolicyStatus;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICertificateCollectionSegment {
    items?: Array<ICertificate>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IBeneficiaryCollectionSegment {
    items?: Array<IBeneficiary>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerCompanyCollectionSegment {
    items?: Array<IInsurerCompany>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IMerchandiseCollectionSegment {
    items?: Array<IMerchandise>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IMerchandiseCategoryFilterInput {
    and?: Array<IMerchandiseCategoryFilterInput>;
    or?: Array<IMerchandiseCategoryFilterInput>;
    name?: IStringOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IMerchandiseCategory {
    name: string;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IContactFilterInput {
    and?: Array<IContactFilterInput>;
    or?: Array<IContactFilterInput>;
    contractorId?: IComparableGuidOperationFilterInput;
    fullName?: IStringOperationFilterInput;
    jobPosition?: IStringOperationFilterInput;
    email?: IStringOperationFilterInput;
    phone?: IStringOperationFilterInput;
    contactType?: IContactTypeOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IContactTypeOperationFilterInput {
    eq?: IContactType;
    neq?: IContactType;
    in?: Array<IContactType>;
    nin?: Array<IContactType>;
}
export declare const enum IContactType {
    COLLECTION = "COLLECTION",
    GENERAL = "GENERAL",
    EMAILINVOICING = "EMAILINVOICING",
    INVOICINGMODALITY = "INVOICINGMODALITY"
}
export interface IContact {
    contractorId: IUUID;
    fullName: string;
    jobPosition: string;
    email: string;
    phone: string;
    contactType: IContactType;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMoneyFilterInput {
    and?: Array<IMoneyFilterInput>;
    or?: Array<IMoneyFilterInput>;
    name?: IStringOperationFilterInput;
    code?: IStringOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IMoney {
    name: string;
    code: string;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPolicy {
    user?: string;
    device?: string;
    token?: string;
    sNumeroPoliza?: string;
    idCotizacion?: number;
    idAseguradoraSubRamo?: number;
    idSubramo?: number;
    agente?: string;
    telefono?: string;
    email?: string;
    subramo?: string;
    detallesPorAseguradora?: Array<IDetailsInsurer>;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IContractorOfficeFilterInput {
    and?: Array<IContractorOfficeFilterInput>;
    or?: Array<IContractorOfficeFilterInput>;
    contractorId?: IComparableGuidOperationFilterInput;
    officeId?: IComparableGuidOperationFilterInput;
    contractor?: IContractorFilterInput;
    office?: Iitus_OfficeFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IContractorOffice {
    contractorId: IUUID;
    officeId: IUUID;
    contractor?: IContractor;
    office?: Iitus_Office;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IContractorContactFilterInput {
    and?: Array<IContractorContactFilterInput>;
    or?: Array<IContractorContactFilterInput>;
    contractorId?: IComparableGuidOperationFilterInput;
    contactId?: IComparableGuidOperationFilterInput;
    contractor?: IContractorFilterInput;
    contact?: IContactFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IContractorContact {
    contractorId: IUUID;
    contactId: IUUID;
    contractor?: IContractor;
    contact?: IContact;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPolicyModuleCollectionSegment {
    items?: Array<IPolicyModule>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerModuleCollectionSegment {
    items?: Array<IInsurerModule>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerFeeCollectionSegment {
    items?: Array<IInsurerFee>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ISchoolFilterInput {
    and?: Array<ISchoolFilterInput>;
    or?: Array<ISchoolFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    photo?: IStringOperationFilterInput;
    name?: IStringOperationFilterInput;
    email?: IStringOperationFilterInput;
    phone?: IStringOperationFilterInput;
    daysServices?: IListFilterInputTypeOfDayServiceFilterInput;
    levels?: IListFilterInputTypeOfLevelFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfDayServiceFilterInput {
    all?: IDayServiceFilterInput;
    none?: IDayServiceFilterInput;
    some?: IDayServiceFilterInput;
    any?: boolean;
}
export interface IDayServiceFilterInput {
    and?: Array<IDayServiceFilterInput>;
    or?: Array<IDayServiceFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    day?: IStringOperationFilterInput;
    isActive?: IBooleanOperationFilterInput;
    schoolId?: IComparableNullableOfGuidOperationFilterInput;
    school?: ISchoolFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfLevelFilterInput {
    all?: ILevelFilterInput;
    none?: ILevelFilterInput;
    some?: ILevelFilterInput;
    any?: boolean;
}
export interface ILevelFilterInput {
    and?: Array<ILevelFilterInput>;
    or?: Array<ILevelFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    isActive?: IBooleanOperationFilterInput;
    schoolId?: IComparableGuidOperationFilterInput;
    school?: ISchoolFilterInput;
    grade?: IListFilterInputTypeOfGradeFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfGradeFilterInput {
    all?: IGradeFilterInput;
    none?: IGradeFilterInput;
    some?: IGradeFilterInput;
    any?: boolean;
}
export interface IGradeFilterInput {
    and?: Array<IGradeFilterInput>;
    or?: Array<IGradeFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    isActive?: IBooleanOperationFilterInput;
    levelId?: IComparableGuidOperationFilterInput;
    level?: ILevelFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ISchoolSortInput {
    projectId?: ISortEnumType;
    photo?: ISortEnumType;
    name?: ISortEnumType;
    email?: ISortEnumType;
    phone?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ISchoolCollectionSegment {
    items?: Array<ISchool>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ISchool {
    projectId: IUUID;
    photo?: string;
    name?: string;
    email?: string;
    phone?: string;
    daysServices?: Array<IDayService>;
    levels?: Array<ILevel>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDayService {
    projectId: IUUID;
    day?: string;
    isActive?: boolean;
    schoolId?: IUUID;
    school?: ISchool;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ILevel {
    projectId: IUUID;
    name?: string;
    isActive: boolean;
    schoolId: IUUID;
    school?: ISchool;
    grade?: Array<IGrade>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IGrade {
    projectId: IUUID;
    name?: string;
    isActive: boolean;
    levelId: IUUID;
    level?: ILevel;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IClassroomFilterInput {
    and?: Array<IClassroomFilterInput>;
    or?: Array<IClassroomFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    schoolId?: IComparableGuidOperationFilterInput;
    school?: ISchoolFilterInput;
    gradeId?: IComparableGuidOperationFilterInput;
    grade?: IGradeFilterInput;
    levelId?: IComparableGuidOperationFilterInput;
    level?: ILevelFilterInput;
    group?: IStringOperationFilterInput;
    isActive?: IBooleanOperationFilterInput;
    teacherMemberId?: IComparableNullableOfGuidOperationFilterInput;
    students?: IListFilterInputTypeOfStudentFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfStudentFilterInput {
    all?: IStudentFilterInput;
    none?: IStudentFilterInput;
    some?: IStudentFilterInput;
    any?: boolean;
}
export interface IStudentFilterInput {
    and?: Array<IStudentFilterInput>;
    or?: Array<IStudentFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    classroomId?: IComparableGuidOperationFilterInput;
    classroom?: IClassroomFilterInput;
    name?: IStringOperationFilterInput;
    lastName?: IStringOperationFilterInput;
    photo?: IStringOperationFilterInput;
    isActive?: IBooleanOperationFilterInput;
    verify?: INullableOfEnumStudenteVerifyOperationFilterInput;
    attendances?: IListFilterInputTypeOfAttendanceFilterInput;
    studentTutors?: IListFilterInputTypeOfStudentTutorFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumStudenteVerifyOperationFilterInput {
    eq?: IEnumStudenteVerify;
    neq?: IEnumStudenteVerify;
    in?: Array<IEnumStudenteVerify | null>;
    nin?: Array<IEnumStudenteVerify | null>;
}
export declare const enum IEnumStudenteVerify {
    VERIFIED = "VERIFIED",
    INCORRECT = "INCORRECT",
    TO_BE_CHECKED = "TO_BE_CHECKED"
}
export interface IListFilterInputTypeOfAttendanceFilterInput {
    all?: IAttendanceFilterInput;
    none?: IAttendanceFilterInput;
    some?: IAttendanceFilterInput;
    any?: boolean;
}
export interface IAttendanceFilterInput {
    and?: Array<IAttendanceFilterInput>;
    or?: Array<IAttendanceFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    status?: IEnumAttendanceStatusOperationFilterInput;
    studentId?: IComparableGuidOperationFilterInput;
    student?: IStudentFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IEnumAttendanceStatusOperationFilterInput {
    eq?: IEnumAttendanceStatus;
    neq?: IEnumAttendanceStatus;
    in?: Array<IEnumAttendanceStatus>;
    nin?: Array<IEnumAttendanceStatus>;
}
export declare const enum IEnumAttendanceStatus {
    ON_SCHOOL = "ON_SCHOOL",
    TUTOR_ARRIVED = "TUTOR_ARRIVED",
    COMING_OUT = "COMING_OUT",
    ON_HOME = "ON_HOME",
    ABSENT = "ABSENT"
}
export interface IListFilterInputTypeOfStudentTutorFilterInput {
    all?: IStudentTutorFilterInput;
    none?: IStudentTutorFilterInput;
    some?: IStudentTutorFilterInput;
    any?: boolean;
}
export interface IStudentTutorFilterInput {
    and?: Array<IStudentTutorFilterInput>;
    or?: Array<IStudentTutorFilterInput>;
    tutorMemberId?: IComparableGuidOperationFilterInput;
    studentId?: IComparableGuidOperationFilterInput;
    student?: IStudentFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IClassroomSortInput {
    projectId?: ISortEnumType;
    schoolId?: ISortEnumType;
    school?: ISchoolSortInput;
    gradeId?: ISortEnumType;
    grade?: IGradeSortInput;
    levelId?: ISortEnumType;
    level?: ILevelSortInput;
    group?: ISortEnumType;
    isActive?: ISortEnumType;
    teacherMemberId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IGradeSortInput {
    projectId?: ISortEnumType;
    name?: ISortEnumType;
    isActive?: ISortEnumType;
    levelId?: ISortEnumType;
    level?: ILevelSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ILevelSortInput {
    projectId?: ISortEnumType;
    name?: ISortEnumType;
    isActive?: ISortEnumType;
    schoolId?: ISortEnumType;
    school?: ISchoolSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IClassroomCollectionSegment {
    items?: Array<IClassroom>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IClassroom {
    projectId: IUUID;
    schoolId: IUUID;
    school?: ISchool;
    gradeId: IUUID;
    grade?: IGrade;
    levelId: IUUID;
    level?: ILevel;
    group?: string;
    isActive?: boolean;
    teacherMemberId?: IUUID;
    students?: Array<IStudent>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    teacherMember?: IMember;
}
export interface IStudent {
    projectId: IUUID;
    classroomId: IUUID;
    classroom?: IClassroom;
    name?: string;
    lastName?: string;
    photo?: string;
    isActive?: boolean;
    verify?: IEnumStudenteVerify;
    attendances?: Array<Ischool_Attendance>;
    studentTutors?: Array<IStudentTutor>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface Ischool_Attendance {
    projectId: IUUID;
    status: IEnumAttendanceStatus;
    studentId: IUUID;
    student?: IStudent;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IStudentTutor {
    tutorMemberId: IUUID;
    studentId: IUUID;
    student: IStudent;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
    tutorMember?: IMember;
}
export interface ILevelCollectionSegment {
    items?: Array<ILevel>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IGradeCollectionSegment {
    items?: Array<IGrade>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IStudentSortInput {
    projectId?: ISortEnumType;
    classroomId?: ISortEnumType;
    classroom?: IClassroomSortInput;
    name?: ISortEnumType;
    lastName?: ISortEnumType;
    photo?: ISortEnumType;
    isActive?: ISortEnumType;
    verify?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IStudentCollectionSegment {
    items?: Array<IStudent>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IAttendanceSortInput {
    projectId?: ISortEnumType;
    status?: ISortEnumType;
    studentId?: ISortEnumType;
    student?: IStudentSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IAttendanceCollectionSegment {
    items?: Array<Ischool_Attendance>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IAttendance {
    conferenceId: number;
    memberId: IUUID;
    member?: IMember;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMyConversationFilterInput {
    and?: Array<IMyConversationFilterInput>;
    or?: Array<IMyConversationFilterInput>;
    username?: IStringOperationFilterInput;
    phone?: IStringOperationFilterInput;
    updated_at?: IStringOperationFilterInput;
    messages?: IListFilterInputTypeOfMyMessageFilterInput;
    key?: IStringOperationFilterInput;
    value?: IStringOperationFilterInput;
}
export interface IListFilterInputTypeOfMyMessageFilterInput {
    all?: IMyMessageFilterInput;
    none?: IMyMessageFilterInput;
    some?: IMyMessageFilterInput;
    any?: boolean;
}
export interface IMyMessageFilterInput {
    and?: Array<IMyMessageFilterInput>;
    or?: Array<IMyMessageFilterInput>;
    message?: IStringOperationFilterInput;
    sender?: IStringOperationFilterInput;
    createdAt?: IStringOperationFilterInput;
}
export interface IMyConversationSortInput {
    username?: ISortEnumType;
    phone?: ISortEnumType;
    updated_at?: ISortEnumType;
    key?: ISortEnumType;
    value?: ISortEnumType;
}
export interface IMyConversationCollectionSegment {
    items?: Array<IMyConversation>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IMyConversation {
    username?: string;
    phone?: string;
    updated_at?: string;
    messages?: Array<IMyMessage>;
    key?: string;
    value?: string;
}
export interface IMyMessage {
    message?: string;
    sender?: string;
    createdAt?: string;
}
export interface IAgentProviderBonoFilterInput {
    and?: Array<IAgentProviderBonoFilterInput>;
    or?: Array<IAgentProviderBonoFilterInput>;
    agentKeyId?: IComparableNullableOfGuidOperationFilterInput;
    startValidity?: IComparableNullableOfDateTimeOperationFilterInput;
    endValidity?: IComparableNullableOfDateTimeOperationFilterInput;
    quantity?: IComparableNullableOfInt32OperationFilterInput;
    exchangeRate?: INullableOfEnumFCurrencyOperationFilterInput;
    bono?: INullableOfEnumBonoTypeOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    factureNumber?: IStringOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    referrerId?: IComparableNullableOfGuidOperationFilterInput;
    agentKey?: IAgentKeyFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumFCurrencyOperationFilterInput {
    eq?: IEnumFCurrency;
    neq?: IEnumFCurrency;
    in?: Array<IEnumFCurrency | null>;
    nin?: Array<IEnumFCurrency | null>;
}
export declare const enum IEnumFCurrency {
    PESO = "PESO",
    DOLLAR = "DOLLAR",
    UDI = "UDI",
    EURO = "EURO"
}
export interface INullableOfEnumBonoTypeOperationFilterInput {
    eq?: IEnumBonoType;
    neq?: IEnumBonoType;
    in?: Array<IEnumBonoType | null>;
    nin?: Array<IEnumBonoType | null>;
}
export declare const enum IEnumBonoType {
    EMISSION = "EMISSION",
    CANCEL = "CANCEL",
    PRODUCTION = "PRODUCTION",
    ANOTHER = "ANOTHER"
}
export interface IAgentKeyFilterInput {
    and?: Array<IAgentKeyFilterInput>;
    or?: Array<IAgentKeyFilterInput>;
    ownerId?: IComparableGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    key?: IStringOperationFilterInput;
    isActive?: IBooleanOperationFilterInput;
    projectAgentProviderId?: IComparableGuidOperationFilterInput;
    projectAgentProvider?: IProjectAgentProviderFilterInput;
    comissions?: IListFilterInputTypeOfComissionFilterInput;
    polices?: IListFilterInputTypeOfPoliceFilterInput;
    agentProviderBono?: IListFilterInputTypeOfAgentProviderBonoFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IProjectAgentProviderFilterInput {
    and?: Array<IProjectAgentProviderFilterInput>;
    or?: Array<IProjectAgentProviderFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    agentProviderId?: IComparableGuidOperationFilterInput;
    agentProvider?: IAgentProviderFilterInput;
    observations?: IStringOperationFilterInput;
    coveragePackages?: IListFilterInputTypeOfCoveragePackageFilterInput;
    agentProviderContact?: IListFilterInputTypeOfAgentProviderContactFilterInput;
    insurerReminderProjectAgentProvider?: IListFilterInputTypeOfInsurerReminderProjectAgentProviderFilterInput;
    projectAgentProviderEmailReminders?: IListFilterInputTypeOfProjectAgentProviderEmailReminderFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IAgentProviderFilterInput {
    and?: Array<IAgentProviderFilterInput>;
    or?: Array<IAgentProviderFilterInput>;
    companyName?: IStringOperationFilterInput;
    alias?: IStringOperationFilterInput;
    rFC?: IStringOperationFilterInput;
    phone?: IStringOperationFilterInput;
    website?: IStringOperationFilterInput;
    ownerId?: IComparableGuidOperationFilterInput;
    typeAgentProvider?: ITypeAgentProviderOperationFilterInput;
    projectAgentProviders?: IListFilterInputTypeOfProjectAgentProviderFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ITypeAgentProviderOperationFilterInput {
    eq?: ITypeAgentProvider;
    neq?: ITypeAgentProvider;
    in?: Array<ITypeAgentProvider>;
    nin?: Array<ITypeAgentProvider>;
}
export declare const enum ITypeAgentProvider {
    SURETY = "SURETY",
    INSURANCE_CARRIER = "INSURANCE_CARRIER"
}
export interface IListFilterInputTypeOfProjectAgentProviderFilterInput {
    all?: IProjectAgentProviderFilterInput;
    none?: IProjectAgentProviderFilterInput;
    some?: IProjectAgentProviderFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfCoveragePackageFilterInput {
    all?: ICoveragePackageFilterInput;
    none?: ICoveragePackageFilterInput;
    some?: ICoveragePackageFilterInput;
    any?: boolean;
}
export interface ICoveragePackageFilterInput {
    and?: Array<ICoveragePackageFilterInput>;
    or?: Array<ICoveragePackageFilterInput>;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    projectAgentProviderBranchId?: IComparableGuidOperationFilterInput;
    typePackage?: IComparableInt32OperationFilterInput;
    policy?: IComparableInt32OperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    projectAgentProviderId?: IComparableNullableOfGuidOperationFilterInput;
    projectAgentProvider?: IProjectAgentProviderFilterInput;
    projectAgentProviderBranch?: IProjectAgentProviderBranchFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IProjectAgentProviderBranchFilterInput {
    and?: Array<IProjectAgentProviderBranchFilterInput>;
    or?: Array<IProjectAgentProviderBranchFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    projectAgentProviderId?: IComparableGuidOperationFilterInput;
    projectAgentProvider?: IProjectAgentProviderFilterInput;
    branchId?: IComparableGuidOperationFilterInput;
    branch?: IBranchFilterInput;
    subBranchId?: IComparableNullableOfGuidOperationFilterInput;
    subBranch?: ISubBranchFilterInput;
    projectAgentProviderBranches?: IListFilterInputTypeOfProjectAgentProviderBranchFilterInput;
    polices?: IListFilterInputTypeOfPoliceFilterInput;
    comissions?: IListFilterInputTypeOfComissionFilterInput;
    agentProviderContacts?: IListFilterInputTypeOfAgentProviderContactFilterInput;
    referrerBranchs?: IListFilterInputTypeOfReferrerBranchFilterInput;
    coveragePackages?: IListFilterInputTypeOfCoveragePackageFilterInput;
    policeQuotes?: IListFilterInputTypeOfPoliceQuoteFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IBranchFilterInput {
    and?: Array<IBranchFilterInput>;
    or?: Array<IBranchFilterInput>;
    branchName?: IStringOperationFilterInput;
    branchCode?: IComparableNullableOfInt32OperationFilterInput;
    typeAgentProviders?: IListTypeAgentProviderOperationFilterInput;
    subBranches?: IListFilterInputTypeOfSubBranchFilterInput;
    projectAgentProviderBranches?: IListFilterInputTypeOfProjectAgentProviderBranchFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListTypeAgentProviderOperationFilterInput {
    all?: ITypeAgentProviderOperationFilterInput;
    none?: ITypeAgentProviderOperationFilterInput;
    some?: ITypeAgentProviderOperationFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfSubBranchFilterInput {
    all?: ISubBranchFilterInput;
    none?: ISubBranchFilterInput;
    some?: ISubBranchFilterInput;
    any?: boolean;
}
export interface ISubBranchFilterInput {
    and?: Array<ISubBranchFilterInput>;
    or?: Array<ISubBranchFilterInput>;
    subBranchName?: IStringOperationFilterInput;
    subBranchCode?: IComparableNullableOfInt32OperationFilterInput;
    branchId?: IComparableGuidOperationFilterInput;
    branch?: IBranchFilterInput;
    projectAgentProviderBranches?: IListFilterInputTypeOfProjectAgentProviderBranchFilterInput;
    insurerBailTypes?: IListFilterInputTypeOfInsurerBailTypeFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfProjectAgentProviderBranchFilterInput {
    all?: IProjectAgentProviderBranchFilterInput;
    none?: IProjectAgentProviderBranchFilterInput;
    some?: IProjectAgentProviderBranchFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfInsurerBailTypeFilterInput {
    all?: IInsurerBailTypeFilterInput;
    none?: IInsurerBailTypeFilterInput;
    some?: IInsurerBailTypeFilterInput;
    any?: boolean;
}
export interface IInsurerBailTypeFilterInput {
    and?: Array<IInsurerBailTypeFilterInput>;
    or?: Array<IInsurerBailTypeFilterInput>;
    name?: IStringOperationFilterInput;
    code?: IComparableNullableOfInt32OperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    subBranchId?: IComparableNullableOfGuidOperationFilterInput;
    subBranch?: ISubBranchFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfPoliceFilterInput {
    all?: IPoliceFilterInput;
    none?: IPoliceFilterInput;
    some?: IPoliceFilterInput;
    any?: boolean;
}
export interface IPoliceFilterInput {
    and?: Array<IPoliceFilterInput>;
    or?: Array<IPoliceFilterInput>;
    number?: IStringOperationFilterInput;
    startValidity?: IComparableNullableOfDateTimeOperationFilterInput;
    endValidity?: IComparableNullableOfDateTimeOperationFilterInput;
    formaDePago?: INullableOfEnumPolicePaymentTypeOperationFilterInput;
    status?: INullableOfEnumPoliceStatusOperationFilterInput;
    observations?: IStringOperationFilterInput;
    folio?: IStringOperationFilterInput;
    internalNumber?: IStringOperationFilterInput;
    documentType?: INullableOfEnumPoliceDocumentTypeOperationFilterInput;
    addressId?: IComparableNullableOfInt32OperationFilterInput;
    aseguradoraId?: IComparableNullableOfInt32OperationFilterInput;
    claveId?: IComparableNullableOfGuidOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    packageId?: IComparableNullableOfInt32OperationFilterInput;
    projectAgentProviderBranchId?: IComparableNullableOfGuidOperationFilterInput;
    fCurrency?: INullableOfEnumFCurrencyOperationFilterInput;
    identifier?: IStringOperationFilterInput;
    rigth?: IComparableNullableOfDecimalOperationFilterInput;
    iVA?: IComparableNullableOfDecimalOperationFilterInput;
    pNeta?: IComparableNullableOfDecimalOperationFilterInput;
    pTotal?: IComparableNullableOfDecimalOperationFilterInput;
    rPF?: IComparableNullableOfDecimalOperationFilterInput;
    comision?: IComparableNullableOfDecimalOperationFilterInput;
    administrationType?: INullableOfEnumPoliceAdministrationTypeOperationFilterInput;
    caratule?: IStringOperationFilterInput;
    certificadoIncisoActivo?: IBooleanOperationFilterInput;
    certificateNumber?: IStringOperationFilterInput;
    comisionPercent?: IComparableNullableOfDoubleOperationFilterInput;
    hospitalLevel?: IStringOperationFilterInput;
    name?: IStringOperationFilterInput;
    parentId?: IComparableNullableOfGuidOperationFilterInput;
    discount?: IComparableNullableOfDecimalOperationFilterInput;
    isRenewable?: INullableOfEnumPoliceRenewOperationFilterInput;
    reasonRen?: IStringOperationFilterInput;
    renewedStatus?: INullableOfEnumPoliceRenewalStatusOperationFilterInput;
    contact?: IStringOperationFilterInput;
    fechaBajaInciso?: IComparableNullableOfDateTimeOperationFilterInput;
    reasonCancel?: IStringOperationFilterInput;
    receiptsBy?: INullableOfEnumPoliceReceiptsOperationFilterInput;
    responsableId?: IComparableNullableOfGuidOperationFilterInput;
    comisionGiven?: IComparableNullableOfDecimalOperationFilterInput;
    recAntiquity?: IComparableNullableOfDateTimeOperationFilterInput;
    collectionExecutiveId?: IComparableNullableOfInt32OperationFilterInput;
    sucursalId?: IComparableNullableOfGuidOperationFilterInput;
    subTotal?: IComparableNullableOfDecimalOperationFilterInput;
    trackBitacora?: IBooleanOperationFilterInput;
    accidentRate?: IComparableNullableOfDecimalOperationFilterInput;
    scheme?: INullableOfEnumPaySchemeOperationFilterInput;
    steps?: IStringOperationFilterInput;
    totalReceipts?: IComparableNullableOfInt32OperationFilterInput;
    conceptAnnulment?: INullableOfEnumPoliceConceptOperationFilterInput;
    deductible?: IStringOperationFilterInput;
    emisionDate?: IComparableNullableOfDateTimeOperationFilterInput;
    emisionStatus?: INullableOfEnumPoliceEmisionStatusOperationFilterInput;
    fechaAnuencia?: IComparableNullableOfDateTimeOperationFilterInput;
    fianzaTypeId?: IComparableNullableOfInt32OperationFilterInput;
    gastoInvestigacion?: IComparableNullableOfDecimalOperationFilterInput;
    reasonRehabbilitate?: IStringOperationFilterInput;
    bussinessLine?: INullableOfEnumPoliceBussinessLineOperationFilterInput;
    contratanteSubGroup?: IComparableNullableOfInt32OperationFilterInput;
    celulaId?: IComparableNullableOfInt32OperationFilterInput;
    groupingLevelId?: IComparableNullableOfInt32OperationFilterInput;
    typePolicy?: INullableOfEnumPolicyTypeOperationFilterInput;
    conductoDePago?: INullableOfEnumConductChoiseOperationFilterInput;
    tabulator?: IStringOperationFilterInput;
    bonoVariable?: IComparableNullableOfDecimalOperationFilterInput;
    hasProgramaDeProveedores?: IBooleanOperationFilterInput;
    contractorId?: IComparableNullableOfGuidOperationFilterInput;
    programaDeProveedoresContractorId?: IComparableNullableOfInt32OperationFilterInput;
    chargeDate?: IComparableNullableOfDateTimeOperationFilterInput;
    comisionEarned?: IComparableNullableOfDecimalOperationFilterInput;
    comisionPercentEarned?: IComparableNullableOfDecimalOperationFilterInput;
    rigthEarned?: IComparableNullableOfDecimalOperationFilterInput;
    discountEarned?: IComparableNullableOfDecimalOperationFilterInput;
    ivaEarned?: IComparableNullableOfDecimalOperationFilterInput;
    pNetaEarned?: IComparableNullableOfDecimalOperationFilterInput;
    pTotalEarned?: IComparableNullableOfDecimalOperationFilterInput;
    rPFEarned?: IComparableNullableOfDecimalOperationFilterInput;
    subTotalEarned?: IComparableNullableOfDecimalOperationFilterInput;
    dateCancel?: IComparableNullableOfDateTimeOperationFilterInput;
    amountCanceled?: IComparableNullableOfDecimalOperationFilterInput;
    stateCirculation?: IStringOperationFilterInput;
    fechaPagoComision?: IComparableNullableOfDateTimeOperationFilterInput;
    dateEmitionFactura?: IComparableNullableOfDateTimeOperationFilterInput;
    folioFactura?: IStringOperationFilterInput;
    monthFactura?: IComparableNullableOfInt32OperationFilterInput;
    exchangeRate?: IComparableNullableOfDecimalOperationFilterInput;
    projectAgentProviderBranch?: IProjectAgentProviderBranchFilterInput;
    agentKey?: IAgentKeyFilterInput;
    sucursal?: ISucursalFilterInput;
    parent?: IPoliceFilterInput;
    contractor?: Isaam_ContractorFilterInput;
    polices?: IListFilterInputTypeOfPoliceFilterInput;
    policeAssign?: IPoliceAssignFilterInput;
    policePendient?: IPolicePendientFilterInput;
    formAccidentDisease?: IFormAccidentDiseaseFilterInput;
    formAutomobileDamage?: IFormAutomobileDamageFilterInput;
    formDamage?: IFormDamageFilterInput;
    formLife?: IFormLifeFilterInput;
    personalInformation?: IPersonalInformationFilterInput;
    involvedReferrer?: IInvolvedReferrerFilterInput;
    oldPolices?: IListFilterInputTypeOfOldPoliceFilterInput;
    newPolices?: IListFilterInputTypeOfOldPoliceFilterInput;
    coverageInPolicies?: IListFilterInputTypeOfCoverageInPolicyFilterInput;
    endorsements?: IListFilterInputTypeOfEndorsementFilterInput;
    sinisters?: IListFilterInputTypeOfSinisterFilterInput;
    policeReceipts?: IListFilterInputTypeOfPoliceReceiptFilterInput;
    policeFiles?: IListFilterInputTypeOfPoliceFileFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumPolicePaymentTypeOperationFilterInput {
    eq?: IEnumPolicePaymentType;
    neq?: IEnumPolicePaymentType;
    in?: Array<IEnumPolicePaymentType | null>;
    nin?: Array<IEnumPolicePaymentType | null>;
}
export declare const enum IEnumPolicePaymentType {
    MONTHLY = "MONTHLY",
    BIMONTHLY = "BIMONTHLY",
    QUARTERLY = "QUARTERLY",
    CASH_PAYMENT = "CASH_PAYMENT",
    BIANNUAL = "BIANNUAL",
    ANNUAL = "ANNUAL",
    FORTNIGTHLY = "FORTNIGTHLY",
    WEEKLLY = "WEEKLLY",
    FOURTEEN = "FOURTEEN"
}
export interface INullableOfEnumPoliceStatusOperationFilterInput {
    eq?: IEnumPoliceStatus;
    neq?: IEnumPoliceStatus;
    in?: Array<IEnumPoliceStatus | null>;
    nin?: Array<IEnumPoliceStatus | null>;
}
export declare const enum IEnumPoliceStatus {
    DISABLED = "DISABLED",
    N_OR_A = "N_OR_A",
    IN_PROCESS = "IN_PROCESS",
    OT_CANCELED = "OT_CANCELED",
    TO_START = "TO_START",
    VALID = "VALID",
    CANCALED = "CANCALED",
    EXPIRED = "EXPIRED",
    RENEWED = "RENEWED",
    UNRENEWED = "UNRENEWED",
    PRE_CANCELED = "PRE_CANCELED",
    ACTIVE_BY_A_ENDORSEMENT = "ACTIVE_BY_A_ENDORSEMENT",
    INACTIVE_BY_D_ENDORSEMENT = "INACTIVE_BY_D_ENDORSEMENT",
    INACTIVE_INITIAL_BY_CANCELATION = "INACTIVE_INITIAL_BY_CANCELATION",
    INACTIVE_A_ENDORSEMENT_BY_CANCELATION = "INACTIVE_A_ENDORSEMENT_BY_CANCELATION",
    INACTIVE_BY_EXPIRED_POLICY = "INACTIVE_BY_EXPIRED_POLICY",
    INACTIVE_BY_RENEWED_POLICY = "INACTIVE_BY_RENEWED_POLICY"
}
export interface INullableOfEnumPoliceDocumentTypeOperationFilterInput {
    eq?: IEnumPoliceDocumentType;
    neq?: IEnumPoliceDocumentType;
    in?: Array<IEnumPoliceDocumentType | null>;
    nin?: Array<IEnumPoliceDocumentType | null>;
}
export declare const enum IEnumPoliceDocumentType {
    POLICY = "POLICY",
    POLICY_GROUP = "POLICY_GROUP",
    SUBGROUP = "SUBGROUP",
    CATEGORY = "CATEGORY",
    CERTIFICATE = "CERTIFICATE",
    BAIL = "BAIL",
    BAIL_COVER = "BAIL_COVER",
    BAIL_CATEGORY = "BAIL_CATEGORY",
    BAIL_CERTIFICATE = "BAIL_CERTIFICATE",
    COLLECTIVITIES = "COLLECTIVITIES",
    COLLECTIVITIES_POLICY = "COLLECTIVITIES_POLICY"
}
export interface INullableOfEnumPoliceAdministrationTypeOperationFilterInput {
    eq?: IEnumPoliceAdministrationType;
    neq?: IEnumPoliceAdministrationType;
    in?: Array<IEnumPoliceAdministrationType | null>;
    nin?: Array<IEnumPoliceAdministrationType | null>;
}
export declare const enum IEnumPoliceAdministrationType {
    SIMPLIFIED = "SIMPLIFIED",
    SELFMANAGED = "SELFMANAGED",
    DETAILED = "DETAILED"
}
export interface INullableOfEnumPoliceRenewOperationFilterInput {
    eq?: IEnumPoliceRenew;
    neq?: IEnumPoliceRenew;
    in?: Array<IEnumPoliceRenew | null>;
    nin?: Array<IEnumPoliceRenew | null>;
}
export declare const enum IEnumPoliceRenew {
    RENEWABLE = "RENEWABLE",
    UNRENEWABLE = "UNRENEWABLE"
}
export interface INullableOfEnumPoliceRenewalStatusOperationFilterInput {
    eq?: IEnumPoliceRenewalStatus;
    neq?: IEnumPoliceRenewalStatus;
    in?: Array<IEnumPoliceRenewalStatus | null>;
    nin?: Array<IEnumPoliceRenewalStatus | null>;
}
export declare const enum IEnumPoliceRenewalStatus {
    THERE_IS_NO_SUBSEQUENT_RENEWAL = "THERE_IS_NO_SUBSEQUENT_RENEWAL",
    RENEW_IN_PROCESS = "RENEW_IN_PROCESS",
    COMPLETEW_RENOVATION = "COMPLETEW_RENOVATION",
    ERROR_THERE_ARE_MULTIPLE_RENOVATIONS = "ERROR_THERE_ARE_MULTIPLE_RENOVATIONS"
}
export interface INullableOfEnumPoliceReceiptsOperationFilterInput {
    eq?: IEnumPoliceReceipts;
    neq?: IEnumPoliceReceipts;
    in?: Array<IEnumPoliceReceipts | null>;
    nin?: Array<IEnumPoliceReceipts | null>;
}
export declare const enum IEnumPoliceReceipts {
    POLICY = "POLICY",
    SUBGROUP = "SUBGROUP",
    CATEGORY = "CATEGORY"
}
export interface INullableOfEnumPaySchemeOperationFilterInput {
    eq?: IEnumPayScheme;
    neq?: IEnumPayScheme;
    in?: Array<IEnumPayScheme | null>;
    nin?: Array<IEnumPayScheme | null>;
}
export declare const enum IEnumPayScheme {
    TRADITIONAL = "TRADITIONAL",
    MINIMUM_PRIMA = "MINIMUM_PRIMA"
}
export interface INullableOfEnumPoliceConceptOperationFilterInput {
    eq?: IEnumPoliceConcept;
    neq?: IEnumPoliceConcept;
    in?: Array<IEnumPoliceConcept | null>;
    nin?: Array<IEnumPoliceConcept | null>;
}
export declare const enum IEnumPoliceConcept {
    PRECANCELED = "PRECANCELED",
    CAPTURE_ERROR = "CAPTURE_ERROR",
    REISSUE = "REISSUE",
    NON_PAYMENT = "NON_PAYMENT",
    ANOTHER = "ANOTHER",
    NOT_APPLY = "NOT_APPLY"
}
export interface INullableOfEnumPoliceEmisionStatusOperationFilterInput {
    eq?: IEnumPoliceEmisionStatus;
    neq?: IEnumPoliceEmisionStatus;
    in?: Array<IEnumPoliceEmisionStatus | null>;
    nin?: Array<IEnumPoliceEmisionStatus | null>;
}
export declare const enum IEnumPoliceEmisionStatus {
    DOCUMENTS_RECEIVED = "DOCUMENTS_RECEIVED",
    DOCUMENT_PENDING = "DOCUMENT_PENDING",
    DOCUMENT_UPLODAD = "DOCUMENT_UPLODAD",
    IN_AUTHORIZATION = "IN_AUTHORIZATION",
    EMMITED = "EMMITED"
}
export interface INullableOfEnumPoliceBussinessLineOperationFilterInput {
    eq?: IEnumPoliceBussinessLine;
    neq?: IEnumPoliceBussinessLine;
    in?: Array<IEnumPoliceBussinessLine | null>;
    nin?: Array<IEnumPoliceBussinessLine | null>;
}
export declare const enum IEnumPoliceBussinessLine {
    COMERTIAL = "COMERTIAL",
    PERSONAL = "PERSONAL",
    ANOTHER = "ANOTHER"
}
export interface INullableOfEnumPolicyTypeOperationFilterInput {
    eq?: IEnumPolicyType;
    neq?: IEnumPolicyType;
    in?: Array<IEnumPolicyType | null>;
    nin?: Array<IEnumPolicyType | null>;
}
export declare const enum IEnumPolicyType {
    OPEN = "OPEN",
    CLOSED = "CLOSED"
}
export interface INullableOfEnumConductChoiseOperationFilterInput {
    eq?: IEnumConductChoise;
    neq?: IEnumConductChoise;
    in?: Array<IEnumConductChoise | null>;
    nin?: Array<IEnumConductChoise | null>;
}
export declare const enum IEnumConductChoise {
    UNDOMICILED = "UNDOMICILED",
    AGENT = "AGENT",
    CAC = "CAC",
    CAT_OR_DOMICILED = "CAT_OR_DOMICILED",
    PAYROLL = "PAYROLL",
    CUT = "CUT"
}
export interface ISucursalFilterInput {
    and?: Array<ISucursalFilterInput>;
    or?: Array<ISucursalFilterInput>;
    name?: IStringOperationFilterInput;
    details?: IStringOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    police?: IListFilterInputTypeOfPoliceFilterInput;
    contractors?: IListFilterInputTypeOfContractorFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfContractorFilterInput {
    all?: Isaam_ContractorFilterInput;
    none?: Isaam_ContractorFilterInput;
    some?: Isaam_ContractorFilterInput;
    any?: boolean;
}
export interface Isaam_ContractorFilterInput {
    and?: Array<Isaam_ContractorFilterInput>;
    or?: Array<Isaam_ContractorFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    firstName?: IStringOperationFilterInput;
    lastName?: IStringOperationFilterInput;
    secondLastName?: IStringOperationFilterInput;
    socialReason?: IStringOperationFilterInput;
    fullName?: IStringOperationFilterInput;
    gender?: IEnumGenderOperationFilterInput;
    birthDate?: IComparableNullableOfDateTimeOperationFilterInput;
    phoneNumber?: IStringOperationFilterInput;
    rFC?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    email?: IStringOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    contractorType?: IEnumContractorTypeOperationFilterInput;
    sucursalId?: IComparableNullableOfGuidOperationFilterInput;
    contractorClassificationId?: IComparableGuidOperationFilterInput;
    contractorClassification?: IContractorClassificationFilterInput;
    contractorGroupId?: IComparableGuidOperationFilterInput;
    contractorGroup?: IContractorGroupFilterInput;
    contractorGroupingLevelId?: IComparableGuidOperationFilterInput;
    contractorGroupingLevel?: IContractorGroupingLevelFilterInput;
    contractorCelulaId?: IComparableGuidOperationFilterInput;
    contractorCelula?: IContractorCelulaFilterInput;
    ownerId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    responsableId?: IComparableGuidOperationFilterInput;
    referrerId?: IComparableGuidOperationFilterInput;
    referrer?: IReferrerFilterInput;
    sucursal?: ISucursalFilterInput;
    contractorProcessDocuments?: IListFilterInputTypeOfContractorProcessDocumentFilterInput;
    agentProviderContact?: IListFilterInputTypeOfAgentProviderContactFilterInput;
    policeQuotes?: IListFilterInputTypeOfPoliceQuoteFilterInput;
    polices?: IListFilterInputTypeOfPoliceFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IEnumGenderOperationFilterInput {
    eq?: Isaam_EnumGender;
    neq?: Isaam_EnumGender;
    in?: Array<Isaam_EnumGender>;
    nin?: Array<Isaam_EnumGender>;
}
export declare const enum Isaam_EnumGender {
    MALE = "MALE",
    FEMALE = "FEMALE",
    UNKNOWN = "UNKNOWN"
}
export interface IEnumContractorTypeOperationFilterInput {
    eq?: IEnumContractorType;
    neq?: IEnumContractorType;
    in?: Array<IEnumContractorType>;
    nin?: Array<IEnumContractorType>;
}
export declare const enum IEnumContractorType {
    PHYSICAL = "PHYSICAL",
    MORAL = "MORAL"
}
export interface IContractorClassificationFilterInput {
    and?: Array<IContractorClassificationFilterInput>;
    or?: Array<IContractorClassificationFilterInput>;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    contractors?: IListFilterInputTypeOfContractorFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IContractorGroupFilterInput {
    and?: Array<IContractorGroupFilterInput>;
    or?: Array<IContractorGroupFilterInput>;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    ownerId?: IComparableGuidOperationFilterInput;
    parentId?: IComparableNullableOfGuidOperationFilterInput;
    responsableId?: IComparableGuidOperationFilterInput;
    groupType?: INullableOfEnumContractorGroupTypeOperationFilterInput;
    parent?: IContractorGroupFilterInput;
    contractorGroups?: IListFilterInputTypeOfContractorGroupFilterInput;
    agentProviderContact?: IListFilterInputTypeOfAgentProviderContactFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumContractorGroupTypeOperationFilterInput {
    eq?: IEnumContractorGroupType;
    neq?: IEnumContractorGroupType;
    in?: Array<IEnumContractorGroupType | null>;
    nin?: Array<IEnumContractorGroupType | null>;
}
export declare const enum IEnumContractorGroupType {
    GROUP = "GROUP",
    SUBGROUP = "SUBGROUP",
    SUBSUBGROUP = "SUBSUBGROUP"
}
export interface IListFilterInputTypeOfContractorGroupFilterInput {
    all?: IContractorGroupFilterInput;
    none?: IContractorGroupFilterInput;
    some?: IContractorGroupFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfAgentProviderContactFilterInput {
    all?: IAgentProviderContactFilterInput;
    none?: IAgentProviderContactFilterInput;
    some?: IAgentProviderContactFilterInput;
    any?: boolean;
}
export interface IAgentProviderContactFilterInput {
    and?: Array<IAgentProviderContactFilterInput>;
    or?: Array<IAgentProviderContactFilterInput>;
    projectAgentProviderBranchId?: IComparableGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    email?: IStringOperationFilterInput;
    phone?: IStringOperationFilterInput;
    department?: IStringOperationFilterInput;
    sinisterAccidentId?: IComparableNullableOfGuidOperationFilterInput;
    ownerId?: IComparableGuidOperationFilterInput;
    contractorGroupId?: IComparableGuidOperationFilterInput;
    contractorGroup?: IContractorGroupFilterInput;
    projectAgentProviderBranch?: IProjectAgentProviderBranchFilterInput;
    contractorId?: IComparableGuidOperationFilterInput;
    contractor?: Isaam_ContractorFilterInput;
    projectAgentProviderId?: IComparableGuidOperationFilterInput;
    projectAgentProvider?: IProjectAgentProviderFilterInput;
    sinisterAccident?: ISinisterAccidentFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ISinisterAccidentFilterInput {
    and?: Array<ISinisterAccidentFilterInput>;
    or?: Array<ISinisterAccidentFilterInput>;
    relationShip?: INullableOfEnumSinisterRelationOperationFilterInput;
    kindSinister?: INullableOfEnumSinisterKindOperationFilterInput;
    sinisterReason?: INullableOfEnumSinisterReasonOperationFilterInput;
    sinisterComplement?: IStringOperationFilterInput;
    sinisterType?: INullableOfEnumSinisterTypeOperationFilterInput;
    paymentType?: INullableOfEnumSinisterPaymentTypeOperationFilterInput;
    totalPayment?: IComparableNullableOfDecimalOperationFilterInput;
    totalProcedent?: IComparableNullableOfDecimalOperationFilterInput;
    totalCoaseguro?: IComparableNullableOfDecimalOperationFilterInput;
    totalDeductible?: IComparableNullableOfDecimalOperationFilterInput;
    totalFinal?: IComparableNullableOfDecimalOperationFilterInput;
    initial?: IBooleanOperationFilterInput;
    receiptStatus?: IStringOperationFilterInput;
    dependientId?: IComparableNullableOfGuidOperationFilterInput;
    sinisterAilingId?: IComparableNullableOfGuidOperationFilterInput;
    sinisterId?: IComparableNullableOfGuidOperationFilterInput;
    titularId?: IComparableNullableOfGuidOperationFilterInput;
    ailment?: IStringOperationFilterInput;
    anesthesiologist?: IComparableNullableOfDecimalOperationFilterInput;
    helper?: IComparableNullableOfDecimalOperationFilterInput;
    surgeon?: IComparableNullableOfDecimalOperationFilterInput;
    coasHonorarios?: IComparableNullableOfDecimalOperationFilterInput;
    coasHospital?: IComparableNullableOfDecimalOperationFilterInput;
    dedHonorarios?: IComparableNullableOfDecimalOperationFilterInput;
    dedHospital?: IComparableNullableOfDecimalOperationFilterInput;
    montoHonorarios?: IComparableNullableOfDecimalOperationFilterInput;
    montoHospital?: IComparableNullableOfDecimalOperationFilterInput;
    others?: IComparableNullableOfDecimalOperationFilterInput;
    surgeryDate?: IComparableNullableOfDateTimeOperationFilterInput;
    hospital?: IStringOperationFilterInput;
    affectedFullName?: IStringOperationFilterInput;
    complementConsecutiveNumber?: IComparableNullableOfInt32OperationFilterInput;
    initialAccidentId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    sinister?: ISinisterFilterInput;
    personalInformation?: IPersonalInformationFilterInput;
    dependient?: IRelationShipFilterInput;
    initialAccident?: ISinisterAccidentFilterInput;
    sinisterAiling?: ISinisterAilingFilterInput;
    sinisterAccidents?: IListFilterInputTypeOfSinisterAccidentFilterInput;
    agentProviderContacts?: IListFilterInputTypeOfAgentProviderContactFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumSinisterRelationOperationFilterInput {
    eq?: IEnumSinisterRelation;
    neq?: IEnumSinisterRelation;
    in?: Array<IEnumSinisterRelation | null>;
    nin?: Array<IEnumSinisterRelation | null>;
}
export declare const enum IEnumSinisterRelation {
    TITULAR = "TITULAR",
    SPOUSE = "SPOUSE",
    FIRSTBORN = "FIRSTBORN",
    ANOTHER = "ANOTHER"
}
export interface INullableOfEnumSinisterKindOperationFilterInput {
    eq?: IEnumSinisterKind;
    neq?: IEnumSinisterKind;
    in?: Array<IEnumSinisterKind | null>;
    nin?: Array<IEnumSinisterKind | null>;
}
export declare const enum IEnumSinisterKind {
    PERSONAL_ACCIDENTS = "PERSONAL_ACCIDENTS",
    MEDICAL_EXPENSES = "MEDICAL_EXPENSES",
    HEALTH = "HEALTH",
    LIFE = "LIFE",
    CIVIL_LIABILITY_AND_PROFESSIONAL_RISKS = "CIVIL_LIABILITY_AND_PROFESSIONAL_RISKS",
    MARITIME_AND_TRANSPORT = "MARITIME_AND_TRANSPORT",
    FIRE = "FIRE",
    AGRICULTURALAND_ANIMALS = "AGRICULTURALAND_ANIMALS",
    AUTOMOBILES = "AUTOMOBILES",
    CREDIT = "CREDIT",
    HOME_CREDIT = "HOME_CREDIT",
    FINANCIAL_GUARANTEE = "FINANCIAL_GUARANTEE",
    DIVERSE = "DIVERSE",
    EARTHQUAKE_AND_CATASTROPHIC_RISKS = "EARTHQUAKE_AND_CATASTROPHIC_RISKS"
}
export interface INullableOfEnumSinisterReasonOperationFilterInput {
    eq?: IEnumSinisterReason;
    neq?: IEnumSinisterReason;
    in?: Array<IEnumSinisterReason | null>;
    nin?: Array<IEnumSinisterReason | null>;
}
export declare const enum IEnumSinisterReason {
    ACCIDENT = "ACCIDENT",
    DISEASE = "DISEASE",
    BIRTH = "BIRTH"
}
export interface INullableOfEnumSinisterTypeOperationFilterInput {
    eq?: IEnumSinisterType;
    neq?: IEnumSinisterType;
    in?: Array<IEnumSinisterType | null>;
    nin?: Array<IEnumSinisterType | null>;
}
export declare const enum IEnumSinisterType {
    INITIAL = "INITIAL",
    COMPLEMENT = "COMPLEMENT"
}
export interface INullableOfEnumSinisterPaymentTypeOperationFilterInput {
    eq?: IEnumSinisterPaymentType;
    neq?: IEnumSinisterPaymentType;
    in?: Array<IEnumSinisterPaymentType | null>;
    nin?: Array<IEnumSinisterPaymentType | null>;
}
export declare const enum IEnumSinisterPaymentType {
    CHECK = "CHECK",
    TRANSFER = "TRANSFER"
}
export interface ISinisterFilterInput {
    and?: Array<ISinisterFilterInput>;
    or?: Array<ISinisterFilterInput>;
    companyFolio?: IStringOperationFilterInput;
    internFolio?: IStringOperationFilterInput;
    status?: INullableOfEnumSinisterStatusOperationFilterInput;
    promiseDate?: IComparableNullableOfDateTimeOperationFilterInput;
    affectedItem?: IStringOperationFilterInput;
    sinisterNumber?: IStringOperationFilterInput;
    sinisterDate?: IComparableNullableOfDateTimeOperationFilterInput;
    typeSinisterGeneral?: INullableOfEnumTypeSinisterGeneralOperationFilterInput;
    reason?: IStringOperationFilterInput;
    observations?: IStringOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    policeId?: IComparableNullableOfGuidOperationFilterInput;
    ingressDate?: IComparableNullableOfDateTimeOperationFilterInput;
    affectedAux?: IStringOperationFilterInput;
    compromiseDate?: IComparableNullableOfDateTimeOperationFilterInput;
    affectedAuxRelationShip?: INullableOfEnumSinisterRelationOperationFilterInput;
    insurerZipCodeSepomexId?: IComparableNullableOfGuidOperationFilterInput;
    date?: IComparableNullableOfDateTimeOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    terminationDate?: IComparableNullableOfDateTimeOperationFilterInput;
    fileLoadedDate?: IComparableNullableOfDateTimeOperationFilterInput;
    police?: IPoliceFilterInput;
    sinisterCars?: IListFilterInputTypeOfSinisterCarFilterInput;
    sinisterDamages?: IListFilterInputTypeOfSinisterDamageFilterInput;
    sinisterFacturas?: IListFilterInputTypeOfSinisterFacturaFilterInput;
    sinisterLifes?: IListFilterInputTypeOfSinisterLifeFilterInput;
    sinisterAccidents?: IListFilterInputTypeOfSinisterAccidentFilterInput;
    insurerZipCodeSepomex?: IInsurerZipCodeSepomexFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumSinisterStatusOperationFilterInput {
    eq?: IEnumSinisterStatus;
    neq?: IEnumSinisterStatus;
    in?: Array<IEnumSinisterStatus | null>;
    nin?: Array<IEnumSinisterStatus | null>;
}
export declare const enum IEnumSinisterStatus {
    PENDING = "PENDING",
    IN_PROCESS = "IN_PROCESS",
    COMPLETED = "COMPLETED",
    CANCELED = "CANCELED",
    REJECTED = "REJECTED",
    ON_WAITING = "ON_WAITING",
    REPROCESS = "REPROCESS",
    DISCONFORMITY = "DISCONFORMITY"
}
export interface INullableOfEnumTypeSinisterGeneralOperationFilterInput {
    eq?: IEnumTypeSinisterGeneral;
    neq?: IEnumTypeSinisterGeneral;
    in?: Array<IEnumTypeSinisterGeneral | null>;
    nin?: Array<IEnumTypeSinisterGeneral | null>;
}
export declare const enum IEnumTypeSinisterGeneral {
    ACCIDENTS_AND_DISEASES = "ACCIDENTS_AND_DISEASES",
    CAR_DAMAGES = "CAR_DAMAGES",
    NON_CARS_DAMAGE = "NON_CARS_DAMAGE",
    LIFE = "LIFE"
}
export interface IListFilterInputTypeOfSinisterCarFilterInput {
    all?: ISinisterCarFilterInput;
    none?: ISinisterCarFilterInput;
    some?: ISinisterCarFilterInput;
    any?: boolean;
}
export interface ISinisterCarFilterInput {
    and?: Array<ISinisterCarFilterInput>;
    or?: Array<ISinisterCarFilterInput>;
    typeSinister?: INullableOfEnumSinisterCarTypeOperationFilterInput;
    explication?: IStringOperationFilterInput;
    third?: IStringOperationFilterInput;
    imdemnization?: IComparableNullableOfDecimalOperationFilterInput;
    sinisterId?: IComparableNullableOfGuidOperationFilterInput;
    driver?: IStringOperationFilterInput;
    coaseguro?: IComparableNullableOfDecimalOperationFilterInput;
    deductible?: IComparableNullableOfDecimalOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    firstSubTypeSinister?: INullableOfEnumSinisterCarSubTypeOperationFilterInput;
    secondSubTypeSinister?: INullableOfEnumSinisterCarSubSubTypeOperationFilterInput;
    sinister?: ISinisterFilterInput;
    sinisterCarContacts?: IListFilterInputTypeOfSinisterCarContactFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumSinisterCarTypeOperationFilterInput {
    eq?: IEnumSinisterCarType;
    neq?: IEnumSinisterCarType;
    in?: Array<IEnumSinisterCarType | null>;
    nin?: Array<IEnumSinisterCarType | null>;
}
export declare const enum IEnumSinisterCarType {
    COLLISION = "COLLISION",
    FIRE = "FIRE",
    OVERTURN = "OVERTURN",
    TOTAL_THEFT = "TOTAL_THEFT",
    PARTIAL_THIEF = "PARTIAL_THIEF",
    GLASS = "GLASS",
    FLOODS = "FLOODS",
    CRANE_SERVICE = "CRANE_SERVICE",
    TOTAL_LOSS = "TOTAL_LOSS",
    VANDALISM = "VANDALISM",
    SCOPE_AND_PROOJECTION = "SCOPE_AND_PROOJECTION",
    DAMAGES = "DAMAGES",
    NATUAL_PHENOMENA = "NATUAL_PHENOMENA",
    AFFECTED_BY_COLISION = "AFFECTED_BY_COLISION",
    TIRE_DAMAGE = "TIRE_DAMAGE",
    ROADSIDE_ASSISTANCE = "ROADSIDE_ASSISTANCE",
    RUN_OVER = "RUN_OVER",
    ADMINISTRATIVE_TRANSACTIONS = "ADMINISTRATIVE_TRANSACTIONS",
    PARTIAL_LOSS = "PARTIAL_LOSS"
}
export interface INullableOfEnumSinisterCarSubTypeOperationFilterInput {
    eq?: IEnumSinisterCarSubType;
    neq?: IEnumSinisterCarSubType;
    in?: Array<IEnumSinisterCarSubType | null>;
    nin?: Array<IEnumSinisterCarSubType | null>;
}
export declare const enum IEnumSinisterCarSubType {
    CONCLUSION_DE_AJUSTE_O_PETICIONES_EN_GENERAL = "CONCLUSION_DE_AJUSTE_O_PETICIONES_EN_GENERAL",
    LEGAL = "LEGAL",
    VALUATION = "VALUATION",
    RERAIR = "RERAIR",
    MATERIAL_DAMAGE = "MATERIAL_DAMAGE",
    THEFT = "THEFT",
    THEFT_LOCATED = "THEFT_LOCATED",
    REIMBURSEMENT_OF_MEDICAL_EXPENSES = "REIMBURSEMENT_OF_MEDICAL_EXPENSES",
    REIMBURSEMENT_OF_FUNERAL_EXPENSES = "REIMBURSEMENT_OF_FUNERAL_EXPENSES",
    CRANE_REINBURSEMENT = "CRANE_REINBURSEMENT",
    CRANE_REIMBURSEMENT_FOR_ASSISTANCE = "CRANE_REIMBURSEMENT_FOR_ASSISTANCE",
    GLASS_REINBURSEMENT = "GLASS_REINBURSEMENT",
    REFUND_OR_DEDUCTIBLE_OR_DAMAGES_TO_THIRD_PARTIES = "REFUND_OR_DEDUCTIBLE_OR_DAMAGES_TO_THIRD_PARTIES",
    PAYMENT_OF_DAMAGES = "PAYMENT_OF_DAMAGES",
    PT_LETTER_AND_AMOUTS = "PT_LETTER_AND_AMOUTS",
    REJECTION_LETTER = "REJECTION_LETTER",
    DEDUCTIBLE_BILL = "DEDUCTIBLE_BILL"
}
export interface INullableOfEnumSinisterCarSubSubTypeOperationFilterInput {
    eq?: IEnumSinisterCarSubSubType;
    neq?: IEnumSinisterCarSubSubType;
    in?: Array<IEnumSinisterCarSubSubType | null>;
    nin?: Array<IEnumSinisterCarSubSubType | null>;
}
export declare const enum IEnumSinisterCarSubSubType {
    DOCUMENT_REVIEW = "DOCUMENT_REVIEW",
    COMPENSATION = "COMPENSATION"
}
export interface IListFilterInputTypeOfSinisterCarContactFilterInput {
    all?: ISinisterCarContactFilterInput;
    none?: ISinisterCarContactFilterInput;
    some?: ISinisterCarContactFilterInput;
    any?: boolean;
}
export interface ISinisterCarContactFilterInput {
    and?: Array<ISinisterCarContactFilterInput>;
    or?: Array<ISinisterCarContactFilterInput>;
    firstName?: IStringOperationFilterInput;
    lastName?: IStringOperationFilterInput;
    secondLastName?: IStringOperationFilterInput;
    phone?: IStringOperationFilterInput;
    email?: IStringOperationFilterInput;
    references?: IStringOperationFilterInput;
    sinisterCarId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    sinisterCar?: ISinisterCarFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfSinisterDamageFilterInput {
    all?: ISinisterDamageFilterInput;
    none?: ISinisterDamageFilterInput;
    some?: ISinisterDamageFilterInput;
    any?: boolean;
}
export interface ISinisterDamageFilterInput {
    and?: Array<ISinisterDamageFilterInput>;
    or?: Array<ISinisterDamageFilterInput>;
    insuredProperty?: IStringOperationFilterInput;
    lossEstimate?: IStringOperationFilterInput;
    claimCause?: IStringOperationFilterInput;
    affectedCoverage?: IStringOperationFilterInput;
    indemnization?: IComparableNullableOfDecimalOperationFilterInput;
    totalClaim?: IComparableNullableOfDecimalOperationFilterInput;
    sinisterId?: IComparableNullableOfGuidOperationFilterInput;
    currency?: INullableOfEnumFCurrencyOperationFilterInput;
    exchangeRate?: INullableOfEnumFCurrencyOperationFilterInput;
    totalCoaseguro?: IComparableNullableOfDecimalOperationFilterInput;
    totalDeductible?: IComparableNullableOfDecimalOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    sinister?: ISinisterFilterInput;
    sinisterDamageContacts?: IListFilterInputTypeOfSinisterDamageContactFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfSinisterDamageContactFilterInput {
    all?: ISinisterDamageContactFilterInput;
    none?: ISinisterDamageContactFilterInput;
    some?: ISinisterDamageContactFilterInput;
    any?: boolean;
}
export interface ISinisterDamageContactFilterInput {
    and?: Array<ISinisterDamageContactFilterInput>;
    or?: Array<ISinisterDamageContactFilterInput>;
    firstName?: IStringOperationFilterInput;
    lastName?: IStringOperationFilterInput;
    secondLastName?: IStringOperationFilterInput;
    phone?: IStringOperationFilterInput;
    email?: IStringOperationFilterInput;
    references?: IStringOperationFilterInput;
    sinisterDamageId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    sinisterDamage?: ISinisterDamageFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfSinisterFacturaFilterInput {
    all?: ISinisterFacturaFilterInput;
    none?: ISinisterFacturaFilterInput;
    some?: ISinisterFacturaFilterInput;
    any?: boolean;
}
export interface ISinisterFacturaFilterInput {
    and?: Array<ISinisterFacturaFilterInput>;
    or?: Array<ISinisterFacturaFilterInput>;
    facturaNumber?: IStringOperationFilterInput;
    provider?: IStringOperationFilterInput;
    facturaDate?: IComparableNullableOfDateTimeOperationFilterInput;
    import?: IComparableNullableOfDecimalOperationFilterInput;
    iVA?: IComparableNullableOfDecimalOperationFilterInput;
    total?: IComparableNullableOfDecimalOperationFilterInput;
    procedent?: IComparableNullableOfDecimalOperationFilterInput;
    observations?: IStringOperationFilterInput;
    sinisterId?: IComparableNullableOfGuidOperationFilterInput;
    concept?: IStringOperationFilterInput;
    serie?: IStringOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    sinister?: ISinisterFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfSinisterLifeFilterInput {
    all?: ISinisterLifeFilterInput;
    none?: ISinisterLifeFilterInput;
    some?: ISinisterLifeFilterInput;
    any?: boolean;
}
export interface ISinisterLifeFilterInput {
    and?: Array<ISinisterLifeFilterInput>;
    or?: Array<ISinisterLifeFilterInput>;
    sinisterReason?: INullableOfEnumSinisterLifeReasonOperationFilterInput;
    paymentType?: INullableOfEnumSinisterPaymentTypeOperationFilterInput;
    sinisterId?: IComparableNullableOfGuidOperationFilterInput;
    affectedName?: IStringOperationFilterInput;
    relationAffected?: INullableOfEnumSinisterRelationOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    sinister?: ISinisterFilterInput;
    sinisterLifes?: IListFilterInputTypeOfSinisterLifeFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumSinisterLifeReasonOperationFilterInput {
    eq?: IEnumSinisterLifeReason;
    neq?: IEnumSinisterLifeReason;
    in?: Array<IEnumSinisterLifeReason | null>;
    nin?: Array<IEnumSinisterLifeReason | null>;
}
export declare const enum IEnumSinisterLifeReason {
    NATURAL = "NATURAL",
    ACCIDENTAL = "ACCIDENTAL",
    ORGANIC_LOSSES = "ORGANIC_LOSSES",
    DISABILITY = "DISABILITY",
    FUNERALS = "FUNERALS"
}
export interface IListFilterInputTypeOfSinisterAccidentFilterInput {
    all?: ISinisterAccidentFilterInput;
    none?: ISinisterAccidentFilterInput;
    some?: ISinisterAccidentFilterInput;
    any?: boolean;
}
export interface IInsurerZipCodeSepomexFilterInput {
    and?: Array<IInsurerZipCodeSepomexFilterInput>;
    or?: Array<IInsurerZipCodeSepomexFilterInput>;
    zipCode?: IComparableNullableOfInt32OperationFilterInput;
    colony?: IStringOperationFilterInput;
    city?: IStringOperationFilterInput;
    state?: IStringOperationFilterInput;
    code?: IStringOperationFilterInput;
    cityId?: IStringOperationFilterInput;
    sinisters?: IListFilterInputTypeOfSinisterFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfSinisterFilterInput {
    all?: ISinisterFilterInput;
    none?: ISinisterFilterInput;
    some?: ISinisterFilterInput;
    any?: boolean;
}
export interface IPersonalInformationFilterInput {
    and?: Array<IPersonalInformationFilterInput>;
    or?: Array<IPersonalInformationFilterInput>;
    firstName?: IStringOperationFilterInput;
    lastName?: IStringOperationFilterInput;
    secondLastName?: IStringOperationFilterInput;
    birthDate?: IComparableNullableOfDateTimeOperationFilterInput;
    sex?: IStringOperationFilterInput;
    ownerId?: IStringOperationFilterInput;
    fullName?: IStringOperationFilterInput;
    email?: IStringOperationFilterInput;
    salary?: IComparableNullableOfDecimalOperationFilterInput;
    sumAssured?: IComparableNullableOfDecimalOperationFilterInput;
    memberId?: IComparableNullableOfGuidOperationFilterInput;
    antiquity?: IComparableNullableOfDateTimeOperationFilterInput;
    policeId?: IComparableNullableOfGuidOperationFilterInput;
    policyType?: IComparableNullableOfInt32OperationFilterInput;
    typeSA?: INullableOfEnumSATypeOperationFilterInput;
    certificate?: IStringOperationFilterInput;
    comision?: IComparableNullableOfDecimalOperationFilterInput;
    rigth?: IComparableNullableOfDecimalOperationFilterInput;
    iVA?: IComparableNullableOfDecimalOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    pNeta?: IComparableNullableOfDecimalOperationFilterInput;
    pTotal?: IComparableNullableOfDecimalOperationFilterInput;
    rPF?: IComparableNullableOfDecimalOperationFilterInput;
    discount?: IComparableNullableOfDecimalOperationFilterInput;
    gastosInvestigacion?: IComparableNullableOfDecimalOperationFilterInput;
    subTotal?: IComparableNullableOfDecimalOperationFilterInput;
    chargeDate?: IComparableNullableOfDateTimeOperationFilterInput;
    comisionEarned?: IComparableNullableOfDecimalOperationFilterInput;
    comisionPercentEarned?: IComparableNullableOfDecimalOperationFilterInput;
    rigthEarned?: IComparableNullableOfDecimalOperationFilterInput;
    discountEarned?: IComparableNullableOfDecimalOperationFilterInput;
    dischargeDate?: IComparableNullableOfDateTimeOperationFilterInput;
    iVAEarned?: IComparableNullableOfDecimalOperationFilterInput;
    pNetaEarned?: IComparableNullableOfDecimalOperationFilterInput;
    pTotalEarned?: IComparableNullableOfDecimalOperationFilterInput;
    rPFEarned?: IComparableNullableOfDecimalOperationFilterInput;
    subTotalEarned?: IComparableNullableOfDecimalOperationFilterInput;
    endDate?: IComparableNullableOfDateTimeOperationFilterInput;
    initDate?: IComparableNullableOfDateTimeOperationFilterInput;
    comisionPaymentDate?: IComparableNullableOfDateTimeOperationFilterInput;
    exchangeRate?: IComparableNullableOfDecimalOperationFilterInput;
    maquila?: IComparableNullableOfDecimalOperationFilterInput;
    bonoDdate?: IComparableNullableOfDateTimeOperationFilterInput;
    maquilaDate?: IComparableNullableOfDateTimeOperationFilterInput;
    facturaYear?: IComparableNullableOfInt32OperationFilterInput;
    formAccidentDisease?: IFormAccidentDiseaseFilterInput;
    formAutomobileDamage?: IFormAutomobileDamageFilterInput;
    formDamage?: IFormDamageFilterInput;
    formLife?: IFormLifeFilterInput;
    police?: IPoliceFilterInput;
    sinisterAccidents?: IListFilterInputTypeOfSinisterAccidentFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumSATypeOperationFilterInput {
    eq?: IEnumSAType;
    neq?: IEnumSAType;
    in?: Array<IEnumSAType | null>;
    nin?: Array<IEnumSAType | null>;
}
export declare const enum IEnumSAType {
    PERMANENT = "PERMANENT",
    RULE_IN_MONTHS = "RULE_IN_MONTHS",
    ANOTHER = "ANOTHER"
}
export interface IFormAccidentDiseaseFilterInput {
    and?: Array<IFormAccidentDiseaseFilterInput>;
    or?: Array<IFormAccidentDiseaseFilterInput>;
    diseaseType?: IComparableNullableOfInt32OperationFilterInput;
    coinsurance?: IStringOperationFilterInput;
    documentType?: INullableOfEnumPoliceDocumentTypeOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    personalId?: IComparableNullableOfGuidOperationFilterInput;
    policeId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    personalInformation?: IPersonalInformationFilterInput;
    police?: IPoliceFilterInput;
    relationShips?: IListFilterInputTypeOfRelationShipFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfRelationShipFilterInput {
    all?: IRelationShipFilterInput;
    none?: IRelationShipFilterInput;
    some?: IRelationShipFilterInput;
    any?: boolean;
}
export interface IRelationShipFilterInput {
    and?: Array<IRelationShipFilterInput>;
    or?: Array<IRelationShipFilterInput>;
    firstName?: IStringOperationFilterInput;
    lastName?: IStringOperationFilterInput;
    secondLastName?: IStringOperationFilterInput;
    birthDate?: IComparableNullableOfDateTimeOperationFilterInput;
    sex?: IStringOperationFilterInput;
    relationship?: IComparableNullableOfInt32OperationFilterInput;
    accidentId?: IComparableNullableOfGuidOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    fullName?: IStringOperationFilterInput;
    isActive?: IBooleanOperationFilterInput;
    endorsementId?: IComparableNullableOfGuidOperationFilterInput;
    antiquity?: IComparableNullableOfDateTimeOperationFilterInput;
    certificate?: IStringOperationFilterInput;
    comision?: IComparableNullableOfDecimalOperationFilterInput;
    rigth?: IComparableNullableOfDecimalOperationFilterInput;
    iVA?: IComparableNullableOfDecimalOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    pNeta?: IComparableNullableOfDecimalOperationFilterInput;
    pTotal?: IComparableNullableOfDecimalOperationFilterInput;
    rPF?: IComparableNullableOfDecimalOperationFilterInput;
    discount?: IComparableNullableOfDecimalOperationFilterInput;
    gastosInvestigacion?: IComparableNullableOfDecimalOperationFilterInput;
    subTotal?: IComparableNullableOfDecimalOperationFilterInput;
    chargeDate?: IComparableNullableOfDateTimeOperationFilterInput;
    comisionEarned?: IComparableNullableOfDecimalOperationFilterInput;
    comisionPercentEarned?: IComparableNullableOfDecimalOperationFilterInput;
    rigthEarned?: IComparableNullableOfDecimalOperationFilterInput;
    discountEarned?: IComparableNullableOfDecimalOperationFilterInput;
    dischangeDate?: IComparableNullableOfDateTimeOperationFilterInput;
    iVAEarned?: IComparableNullableOfDecimalOperationFilterInput;
    pNetaEarned?: IComparableNullableOfDecimalOperationFilterInput;
    pTotalEarned?: IComparableNullableOfDecimalOperationFilterInput;
    rPFEarned?: IComparableNullableOfDecimalOperationFilterInput;
    subTotalEarned?: IComparableNullableOfDecimalOperationFilterInput;
    comisionPaymentDate?: IComparableNullableOfDateTimeOperationFilterInput;
    exchangeRate?: IComparableNullableOfDecimalOperationFilterInput;
    maquila?: IComparableNullableOfDecimalOperationFilterInput;
    bonoDate?: IComparableNullableOfDateTimeOperationFilterInput;
    maquilaDate?: IComparableNullableOfDateTimeOperationFilterInput;
    facturaYear?: IComparableNullableOfInt32OperationFilterInput;
    formAccidentDisease?: IFormAccidentDiseaseFilterInput;
    endorsement?: IEndorsementFilterInput;
    endorsementCerts?: IListFilterInputTypeOfEndorsementCertFilterInput;
    sinisterAccidents?: IListFilterInputTypeOfSinisterAccidentFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IEndorsementFilterInput {
    and?: Array<IEndorsementFilterInput>;
    or?: Array<IEndorsementFilterInput>;
    type?: INullableOfEnumEntorsementTypeOperationFilterInput;
    status?: IComparableNullableOfInt32OperationFilterInput;
    initDate?: IComparableNullableOfDateTimeOperationFilterInput;
    endDate?: IComparableNullableOfDateTimeOperationFilterInput;
    numberEndorsement?: IStringOperationFilterInput;
    internalNumber?: IStringOperationFilterInput;
    concept?: IComparableNullableOfInt32OperationFilterInput;
    otherDesc?: IStringOperationFilterInput;
    original?: IStringOperationFilterInput;
    change?: IStringOperationFilterInput;
    observations?: IStringOperationFilterInput;
    pNeta?: IComparableNullableOfDecimalOperationFilterInput;
    rPF?: IComparableNullableOfDecimalOperationFilterInput;
    rigth?: IComparableNullableOfDecimalOperationFilterInput;
    iVA?: IComparableNullableOfDecimalOperationFilterInput;
    pTotal?: IComparableNullableOfDecimalOperationFilterInput;
    comision?: IComparableNullableOfDecimalOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    policeId?: IComparableNullableOfGuidOperationFilterInput;
    comisionPercent?: IComparableNullableOfDecimalOperationFilterInput;
    anuency?: IComparableNullableOfDateTimeOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    discount?: IComparableNullableOfDecimalOperationFilterInput;
    researchCost?: IComparableNullableOfDecimalOperationFilterInput;
    comisionPercentEarned?: IComparableNullableOfDecimalOperationFilterInput;
    discoutnEarned?: IComparableNullableOfDecimalOperationFilterInput;
    iVaEarned?: IComparableNullableOfDecimalOperationFilterInput;
    pNETAEarned?: IComparableNullableOfDecimalOperationFilterInput;
    pTotalEarned?: IComparableNullableOfDecimalOperationFilterInput;
    rPFEarned?: IComparableNullableOfDecimalOperationFilterInput;
    subTotalEarned?: IComparableNullableOfDecimalOperationFilterInput;
    insuranceFolio?: IStringOperationFilterInput;
    comitionPatmentDate?: IComparableNullableOfDateTimeOperationFilterInput;
    exchangeRate?: IComparableNullableOfDecimalOperationFilterInput;
    maquila?: IComparableNullableOfDecimalOperationFilterInput;
    bonoDate?: IComparableNullableOfDateTimeOperationFilterInput;
    variableBono?: IComparableNullableOfDecimalOperationFilterInput;
    emisionFacturaDate?: IComparableNullableOfDateTimeOperationFilterInput;
    maquilaDate?: IComparableNullableOfDateTimeOperationFilterInput;
    folioFactura?: IStringOperationFilterInput;
    monthFactura?: IComparableNullableOfInt32OperationFilterInput;
    fechaEntrega?: IComparableNullableOfDateTimeOperationFilterInput;
    police?: IPoliceFilterInput;
    beneficiaries?: IListFilterInputTypeOfBeneficiarieFilterInput;
    relationShips?: IListFilterInputTypeOfRelationShipFilterInput;
    endorsementCerts?: IListFilterInputTypeOfEndorsementCertFilterInput;
    policeReceipts?: IListFilterInputTypeOfPoliceReceiptFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumEntorsementTypeOperationFilterInput {
    eq?: IEnumEntorsementType;
    neq?: IEnumEntorsementType;
    in?: Array<IEnumEntorsementType | null>;
    nin?: Array<IEnumEntorsementType | null>;
}
export declare const enum IEnumEntorsementType {
    A = "A",
    B = "B",
    D = "D"
}
export interface IListFilterInputTypeOfBeneficiarieFilterInput {
    all?: IBeneficiarieFilterInput;
    none?: IBeneficiarieFilterInput;
    some?: IBeneficiarieFilterInput;
    any?: boolean;
}
export interface IBeneficiarieFilterInput {
    and?: Array<IBeneficiarieFilterInput>;
    or?: Array<IBeneficiarieFilterInput>;
    firstName?: IStringOperationFilterInput;
    lastName?: IStringOperationFilterInput;
    secondLastName?: IStringOperationFilterInput;
    birthDate?: IComparableNullableOfDateTimeOperationFilterInput;
    sex?: IStringOperationFilterInput;
    percentage?: IComparableNullableOfDoubleOperationFilterInput;
    optionalRelation?: IStringOperationFilterInput;
    lifeId?: IComparableNullableOfGuidOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    fullName?: IStringOperationFilterInput;
    iSR?: IComparableNullableOfDecimalOperationFilterInput;
    procedente?: IStringOperationFilterInput;
    clause?: IStringOperationFilterInput;
    jName?: IStringOperationFilterInput;
    rFC?: IStringOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    endorsementId?: IComparableNullableOfGuidOperationFilterInput;
    antiquity?: IComparableNullableOfDateTimeOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    chargeDate?: IComparableNullableOfDateTimeOperationFilterInput;
    dishargeDate?: IComparableNullableOfDateTimeOperationFilterInput;
    formLife?: IFormLifeFilterInput;
    endorsement?: IEndorsementFilterInput;
    endorsementCerts?: IListFilterInputTypeOfEndorsementCertFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IFormLifeFilterInput {
    and?: Array<IFormLifeFilterInput>;
    or?: Array<IFormLifeFilterInput>;
    smoker?: IBooleanOperationFilterInput;
    documentType?: INullableOfEnumPoliceDocumentTypeOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    personalId?: IComparableNullableOfGuidOperationFilterInput;
    policeId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    beneficiarie?: IBeneficiarieFilterInput;
    personalInformation?: IPersonalInformationFilterInput;
    police?: IPoliceFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfEndorsementCertFilterInput {
    all?: IEndorsementCertFilterInput;
    none?: IEndorsementCertFilterInput;
    some?: IEndorsementCertFilterInput;
    any?: boolean;
}
export interface IEndorsementCertFilterInput {
    and?: Array<IEndorsementCertFilterInput>;
    or?: Array<IEndorsementCertFilterInput>;
    proceed?: IBooleanOperationFilterInput;
    certificate?: IStringOperationFilterInput;
    endorsementId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    beneficiarieId?: IComparableNullableOfGuidOperationFilterInput;
    relationShipId?: IComparableNullableOfGuidOperationFilterInput;
    endorsement?: IEndorsementFilterInput;
    beneficiarie?: IBeneficiarieFilterInput;
    relationShip?: IRelationShipFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfPoliceReceiptFilterInput {
    all?: IPoliceReceiptFilterInput;
    none?: IPoliceReceiptFilterInput;
    some?: IPoliceReceiptFilterInput;
    any?: boolean;
}
export interface IPoliceReceiptFilterInput {
    and?: Array<IPoliceReceiptFilterInput>;
    or?: Array<IPoliceReceiptFilterInput>;
    number?: IComparableNullableOfInt32OperationFilterInput;
    primaNeta?: IComparableNullableOfDecimalOperationFilterInput;
    rPF?: IComparableNullableOfDecimalOperationFilterInput;
    right?: IComparableNullableOfDecimalOperationFilterInput;
    iVA?: IComparableNullableOfDecimalOperationFilterInput;
    subTotal?: IComparableNullableOfDecimalOperationFilterInput;
    primaTotal?: IComparableNullableOfDecimalOperationFilterInput;
    status?: INullableOfEnumPoliceReceiptStatusOperationFilterInput;
    startDate?: IComparableNullableOfDateTimeOperationFilterInput;
    endDate?: IComparableNullableOfDateTimeOperationFilterInput;
    description?: IStringOperationFilterInput;
    folio?: IStringOperationFilterInput;
    type?: INullableOfEnumPoliceReceiptTypeOperationFilterInput;
    payForm?: IComparableNullableOfInt32OperationFilterInput;
    paymentDocument?: IStringOperationFilterInput;
    isCopy?: IBooleanOperationFilterInput;
    isActive?: IBooleanOperationFilterInput;
    bank?: INullableOfEnumBankOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    policeId?: IComparableNullableOfGuidOperationFilterInput;
    comision?: IComparableNullableOfDecimalOperationFilterInput;
    validityDate?: IComparableNullableOfDateTimeOperationFilterInput;
    reconciledComision?: IStringOperationFilterInput;
    reconciledDate?: IComparableNullableOfDateTimeOperationFilterInput;
    reconciledObservation?: IStringOperationFilterInput;
    settlementFolio?: IStringOperationFilterInput;
    reconciledFolio?: IStringOperationFilterInput;
    settlementDate?: IComparableNullableOfDateTimeOperationFilterInput;
    reconcilationAccountId?: IComparableNullableOfGuidOperationFilterInput;
    paymentDate?: IComparableNullableOfDateTimeOperationFilterInput;
    endorsementId?: IComparableNullableOfGuidOperationFilterInput;
    delivered?: IBooleanOperationFilterInput;
    paymentFolio?: IStringOperationFilterInput;
    settlementBank?: INullableOfEnumBankOperationFilterInput;
    settlementCurrRate?: IComparableNullableOfInt32OperationFilterInput;
    settlementDoc?: IStringOperationFilterInput;
    settlementForm?: IComparableNullableOfInt32OperationFilterInput;
    excedent?: IComparableNullableOfDecimalOperationFilterInput;
    agentProviderBonoId?: IComparableNullableOfGuidOperationFilterInput;
    changeReferrerComision?: IBooleanOperationFilterInput;
    referrerComosion?: IComparableNullableOfDecimalOperationFilterInput;
    binnacleTrack?: IBooleanOperationFilterInput;
    emailTrack?: IBooleanOperationFilterInput;
    phoneTrack?: IBooleanOperationFilterInput;
    referrerClosedNew?: INullableOfEnumReferrerClosedOperationFilterInput;
    memberPaymentId?: IComparableNullableOfGuidOperationFilterInput;
    paymentPromise?: IComparableNullableOfDateTimeOperationFilterInput;
    researchCost?: IComparableNullableOfDecimalOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    conductPayment?: INullableOfEnumConductChoiseOperationFilterInput;
    exchangeRate?: IComparableNullableOfDecimalOperationFilterInput;
    manualSerie?: IComparableNullableOfInt32OperationFilterInput;
    settlementMethod?: IStringOperationFilterInput;
    memberSettlementId?: IComparableNullableOfInt32OperationFilterInput;
    police?: IPoliceFilterInput;
    endorsement?: IEndorsementFilterInput;
    policeReceiptAccount?: IPoliceReceiptAccountFilterInput;
    agentProviderbono?: IAgentProviderBonoFilterInput;
    policeReceiptAccountStates?: IListFilterInputTypeOfPoliceReceiptAccountStateFilterInput;
    policeReceiptPayments?: IListFilterInputTypeOfPoliceReceiptPaymentFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumPoliceReceiptStatusOperationFilterInput {
    eq?: IEnumPoliceReceiptStatus;
    neq?: IEnumPoliceReceiptStatus;
    in?: Array<IEnumPoliceReceiptStatus | null>;
    nin?: Array<IEnumPoliceReceiptStatus | null>;
}
export declare const enum IEnumPoliceReceiptStatus {
    PAID = "PAID",
    CANCELED = "CANCELED",
    EXTENDED = "EXTENDED",
    PAY_PENDING = "PAY_PENDING",
    LIQUIDATE = "LIQUIDATE",
    RECONCILED = "RECONCILED",
    CLOSED = "CLOSED",
    DISABLED = "DISABLED",
    PRECANCELED = "PRECANCELED",
    PRTIAL_PAYMENT = "PRTIAL_PAYMENT",
    PRE_CANCELED = "PRE_CANCELED"
}
export interface INullableOfEnumPoliceReceiptTypeOperationFilterInput {
    eq?: IEnumPoliceReceiptType;
    neq?: IEnumPoliceReceiptType;
    in?: Array<IEnumPoliceReceiptType | null>;
    nin?: Array<IEnumPoliceReceiptType | null>;
}
export declare const enum IEnumPoliceReceiptType {
    POLICY = "POLICY",
    A_ENDORSEMENT = "A_ENDORSEMENT",
    D_ENDORSEMENT_CREDIT_NOTE = "D_ENDORSEMENT_CREDIT_NOTE",
    BOND = "BOND",
    CERTIFICATE = "CERTIFICATE"
}
export interface INullableOfEnumBankOperationFilterInput {
    eq?: IEnumBank;
    neq?: IEnumBank;
    in?: Array<IEnumBank | null>;
    nin?: Array<IEnumBank | null>;
}
export declare const enum IEnumBank {
    ABC_CAPITAL = "ABC_CAPITAL",
    ACCIVAL = "ACCIVAL",
    ACTINVER = "ACTINVER",
    AFIRME = "AFIRME",
    AKALA = "AKALA",
    AMERICAN_EXPRESS = "AMERICAN_EXPRESS",
    AUTOFIN = "AUTOFIN",
    AXA = "AXA",
    AZTECA = "AZTECA",
    BAJIO = "BAJIO",
    BAMSA = "BAMSA",
    BANCO_FAMSA = "BANCO_FAMSA",
    BANCO_INBURSA = "BANCO_INBURSA",
    BANCOMEXT = "BANCOMEXT",
    BANCOPPEL = "BANCOPPEL",
    BANJERCITO = "BANJERCITO",
    BANK_OF_AMERICA = "BANK_OF_AMERICA",
    BANOBRAS = "BANOBRAS",
    BANORTE = "BANORTE",
    BANREGIO = "BANREGIO",
    BANSEFI = "BANSEFI",
    BANSI = "BANSI",
    BARCLAYS = "BARCLAYS",
    B_AND_B = "B_AND_B",
    BBASE = "BBASE",
    BBVA = "BBVA",
    BITAL = "BITAL",
    BMONEX = "BMONEX",
    BMULTIVA = "BMULTIVA",
    BULLTICK_CB = "BULLTICK_CB",
    BX = "BX",
    BXM = "BXM",
    CA = "CA",
    CB_ACTINVER = "CB_ACTINVER",
    CBDEUTSCHE = "CBDEUTSCHE",
    CB_INTERCAM = "CB_INTERCAM",
    CB_JPMORGAN = "CB_JPMORGAN",
    CIBANCO = "CIBANCO",
    CI_BOLSA = "CI_BOLSA",
    CITI_BANAMEX = "CITI_BANAMEX",
    CLS = "CLS",
    COMPARTAMOS = "COMPARTAMOS",
    CONSUBANCO = "CONSUBANCO",
    CREDIT_SUISSE = "CREDIT_SUISSE",
    DEUTSCHE = "DEUTSCHE",
    DS = "DS",
    CASH = "CASH",
    ESTRUCTURADORES = "ESTRUCTURADORES",
    EVERCORE = "EVERCORE",
    FAMSA = "FAMSA",
    FIESTA_REWARDS_PLATINUM = "FIESTA_REWARDS_PLATINUM",
    FINAMEX = "FINAMEX",
    FINCOMUN = "FINCOMUN",
    GBM = "GBM",
    HDI_SEGUROS = "HDI_SEGUROS",
    HIPOTECARIAFEDERAL = "HIPOTECARIAFEDERAL",
    HSBC = "HSBC",
    INBURSA = "INBURSA",
    INDEVAL = "INDEVAL",
    ING = "ING",
    INTERACCIONES = "INTERACCIONES",
    INTERBANCO = "INTERBANCO",
    INTERNATIONAL_BANK_OF_COMERCE = "INTERNATIONAL_BANK_OF_COMERCE",
    INVERLAT = "INVERLAT",
    INVEX = "INVEX",
    IXE = "IXE",
    JP_MORGAN = "JP_MORGAN",
    KUSPIT = "KUSPIT",
    LAREDO_NATIONAL_BANK = "LAREDO_NATIONAL_BANK",
    LB = "LB",
    LIBERTAD = "LIBERTAD",
    LIVERPOOL = "LIVERPOOL",
    MAPFRE = "MAPFRE",
    MASARI = "MASARI",
    MASTER_CARD = "MASTER_CARD",
    MERRILL_LYNCH = "MERRILL_LYNCH",
    MSI = "MSI",
    MIFEL = "MIFEL",
    MONEXCB = "MONEXCB",
    NAFIN = "NAFIN",
    OACTIN = "OACTIN",
    OPCIONES_EMPRESARIALES_DEL_NOROESTE = "OPCIONES_EMPRESARIALES_DEL_NOROESTE",
    ORDER = "ORDER",
    OTROS = "OTROS",
    PROFUTURO = "PROFUTURO",
    REFORMA = "REFORMA",
    SANTANDER = "SANTANDER",
    SCOTIABANK = "SCOTIABANK",
    SEGMTY = "SEGMTY",
    SKANDIA = "SKANDIA",
    SOFIEXPRESS = "SOFIEXPRESS",
    STERLING = "STERLING",
    STP = "STP",
    SU_CASITA = "SU_CASITA",
    TC = "TC",
    TELECOMM = "TELECOMM",
    THE_ROYAL_BANK = "THE_ROYAL_BANK",
    TIBER = "TIBER",
    TOKYO = "TOKYO",
    TRANSFER = "TRANSFER",
    UBS_BANK = "UBS_BANK",
    UNAGRA = "UNAGRA",
    UNICA = "UNICA",
    VALMEX = "VALMEX",
    VALUE = "VALUE",
    VECTOR = "VECTOR",
    VE_POR_MAS = "VE_POR_MAS",
    VISA = "VISA",
    VOLKSWAGEN = "VOLKSWAGEN",
    WAL_MART = "WAL_MART",
    ZURICH = "ZURICH"
}
export interface INullableOfEnumReferrerClosedOperationFilterInput {
    eq?: IEnumReferrerClosed;
    neq?: IEnumReferrerClosed;
    in?: Array<IEnumReferrerClosed | null>;
    nin?: Array<IEnumReferrerClosed | null>;
}
export declare const enum IEnumReferrerClosed {
    NON_PAYMENT = "NON_PAYMENT",
    IN_ACCOUNT = "IN_ACCOUNT",
    CLOSED = "CLOSED"
}
export interface IPoliceReceiptAccountFilterInput {
    and?: Array<IPoliceReceiptAccountFilterInput>;
    or?: Array<IPoliceReceiptAccountFilterInput>;
    name?: IStringOperationFilterInput;
    account?: IStringOperationFilterInput;
    observations?: IStringOperationFilterInput;
    bank?: INullableOfEnumBankOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    policeReceiptAccountStates?: IListFilterInputTypeOfPoliceReceiptAccountStateFilterInput;
    policeReceipts?: IListFilterInputTypeOfPoliceReceiptFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfPoliceReceiptAccountStateFilterInput {
    all?: IPoliceReceiptAccountStateFilterInput;
    none?: IPoliceReceiptAccountStateFilterInput;
    some?: IPoliceReceiptAccountStateFilterInput;
    any?: boolean;
}
export interface IPoliceReceiptAccountStateFilterInput {
    and?: Array<IPoliceReceiptAccountStateFilterInput>;
    or?: Array<IPoliceReceiptAccountStateFilterInput>;
    policeReceiptAccountId?: IComparableNullableOfGuidOperationFilterInput;
    policeReceiptId?: IComparableNullableOfGuidOperationFilterInput;
    policeReceipt?: IPoliceReceiptFilterInput;
    policeReceiptAccount?: IPoliceReceiptAccountFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfPoliceReceiptPaymentFilterInput {
    all?: IPoliceReceiptPaymentFilterInput;
    none?: IPoliceReceiptPaymentFilterInput;
    some?: IPoliceReceiptPaymentFilterInput;
    any?: boolean;
}
export interface IPoliceReceiptPaymentFilterInput {
    and?: Array<IPoliceReceiptPaymentFilterInput>;
    or?: Array<IPoliceReceiptPaymentFilterInput>;
    paymentMethod?: INullableOfEnumPoliceReceiptPaymentMethodOperationFilterInput;
    paymentDocument?: IStringOperationFilterInput;
    amount?: IComparableNullableOfDecimalOperationFilterInput;
    paymentDate?: IComparableNullableOfDateTimeOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    policeReceiptId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    policeReceipt?: IPoliceReceiptFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumPoliceReceiptPaymentMethodOperationFilterInput {
    eq?: IEnumPoliceReceiptPaymentMethod;
    neq?: IEnumPoliceReceiptPaymentMethod;
    in?: Array<IEnumPoliceReceiptPaymentMethod | null>;
    nin?: Array<IEnumPoliceReceiptPaymentMethod | null>;
}
export declare const enum IEnumPoliceReceiptPaymentMethod {
    UNKNOWN = "UNKNOWN",
    CHECK = "CHECK",
    CASH = "CASH",
    TRANSFER = "TRANSFER",
    CREDIT_NOTE = "CREDIT_NOTE",
    DEPOSIT_PRIMA = "DEPOSIT_PRIMA",
    BANK_DEPOSIT = "BANK_DEPOSIT",
    CREDIT_CARD = "CREDIT_CARD",
    DEBIT_CARD = "DEBIT_CARD",
    ACCOUNT_STATUS = "ACCOUNT_STATUS",
    COMPANY = "COMPANY"
}
export interface IFormAutomobileDamageFilterInput {
    and?: Array<IFormAutomobileDamageFilterInput>;
    or?: Array<IFormAutomobileDamageFilterInput>;
    brand?: IStringOperationFilterInput;
    model?: IStringOperationFilterInput;
    year?: IComparableNullableOfInt32OperationFilterInput;
    version?: IStringOperationFilterInput;
    serial?: IStringOperationFilterInput;
    engine?: IStringOperationFilterInput;
    color?: IStringOperationFilterInput;
    licensePlates?: IStringOperationFilterInput;
    documentType?: INullableOfEnumPoliceDocumentTypeOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    policeId?: IComparableNullableOfGuidOperationFilterInput;
    usage?: IStringOperationFilterInput;
    email?: IStringOperationFilterInput;
    beneficiaryAddress?: IStringOperationFilterInput;
    beneficiaryName?: IStringOperationFilterInput;
    beneficiaryRFC?: IStringOperationFilterInput;
    adjusment?: IStringOperationFilterInput;
    drive?: IStringOperationFilterInput;
    montAdjustment?: IStringOperationFilterInput;
    montSpecialTeam?: IStringOperationFilterInput;
    specialTeam?: IStringOperationFilterInput;
    service?: IStringOperationFilterInput;
    policyType?: INullableOfEnumAutoTypeOperationFilterInput;
    chargeType?: INullableOfEnumChargeTypeOperationFilterInput;
    procedencia?: INullableOfEnumProcedentOperationFilterInput;
    personalId?: IComparableNullableOfGuidOperationFilterInput;
    preferencialBeneficiary?: IStringOperationFilterInput;
    sumInsured?: IStringOperationFilterInput;
    carOwner?: IStringOperationFilterInput;
    noEmployee?: IStringOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    personalInformation?: IPersonalInformationFilterInput;
    police?: IPoliceFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumAutoTypeOperationFilterInput {
    eq?: IEnumAutoType;
    neq?: IEnumAutoType;
    in?: Array<IEnumAutoType | null>;
    nin?: Array<IEnumAutoType | null>;
}
export declare const enum IEnumAutoType {
    CAR = "CAR",
    MOTORCYCLE = "MOTORCYCLE",
    TRACT = "TRACT",
    BUS = "BUS",
    PICK_UP = "PICK_UP",
    TRUCK_1_5_TON = "TRUCK_1_5_TON",
    DRIVER_APP = "DRIVER_APP",
    TRAILER = "TRAILER",
    TRUCK_PLUS_1_5_TON = "TRUCK_PLUS_1_5_TON"
}
export interface INullableOfEnumChargeTypeOperationFilterInput {
    eq?: IEnumChargeType;
    neq?: IEnumChargeType;
    in?: Array<IEnumChargeType | null>;
    nin?: Array<IEnumChargeType | null>;
}
export declare const enum IEnumChargeType {
    A = "A",
    B = "B",
    C = "C",
    UNKNOWN = "UNKNOWN"
}
export interface INullableOfEnumProcedentOperationFilterInput {
    eq?: IEnumProcedent;
    neq?: IEnumProcedent;
    in?: Array<IEnumProcedent | null>;
    nin?: Array<IEnumProcedent | null>;
}
export declare const enum IEnumProcedent {
    RESICENCE = "RESICENCE",
    TOURIST = "TOURIST",
    LEGALIZED = "LEGALIZED",
    FRONTIER = "FRONTIER",
    UNSPECIFIED = "UNSPECIFIED"
}
export interface IFormDamageFilterInput {
    and?: Array<IFormDamageFilterInput>;
    or?: Array<IFormDamageFilterInput>;
    damageType?: INullableOfEnumFormDamageTypeOperationFilterInput;
    insuredItem?: IStringOperationFilterInput;
    itemAddress?: IStringOperationFilterInput;
    itemDetails?: IStringOperationFilterInput;
    coinsurance?: IStringOperationFilterInput;
    documentType?: INullableOfEnumPoliceDocumentTypeOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    policeId?: IComparableNullableOfGuidOperationFilterInput;
    personalId?: IComparableNullableOfGuidOperationFilterInput;
    brand?: IStringOperationFilterInput;
    color?: IStringOperationFilterInput;
    constructionYear?: IComparableNullableOfInt32OperationFilterInput;
    damOwner?: IStringOperationFilterInput;
    email?: IStringOperationFilterInput;
    engine?: IStringOperationFilterInput;
    fHMZone?: IStringOperationFilterInput;
    girp?: IStringOperationFilterInput;
    matricula?: IStringOperationFilterInput;
    model?: IStringOperationFilterInput;
    noEmployee?: IStringOperationFilterInput;
    noLevels?: IComparableNullableOfInt32OperationFilterInput;
    permiso?: IStringOperationFilterInput;
    purchaseValue?: IStringOperationFilterInput;
    reconstructionYear?: IComparableNullableOfInt32OperationFilterInput;
    serial?: IStringOperationFilterInput;
    sucursal?: IStringOperationFilterInput;
    tYEVZone?: IStringOperationFilterInput;
    typeConstruction?: INullableOfEnumConstructionTypeOperationFilterInput;
    usage?: IStringOperationFilterInput;
    version?: IStringOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    personalInformation?: IPersonalInformationFilterInput;
    police?: IPoliceFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumFormDamageTypeOperationFilterInput {
    eq?: IEnumFormDamageType;
    neq?: IEnumFormDamageType;
    in?: Array<IEnumFormDamageType | null>;
    nin?: Array<IEnumFormDamageType | null>;
}
export declare const enum IEnumFormDamageType {
    N_A = "N_A",
    ANOTHER = "ANOTHER",
    FAMILIAR = "FAMILIAR",
    HOUSE_ROOM = "HOUSE_ROOM",
    CONDOMINIUM = "CONDOMINIUM",
    BUILDING = "BUILDING",
    MULTIPLE_BUSSINESS = "MULTIPLE_BUSSINESS",
    ONLY_FIRE = "ONLY_FIRE",
    PLANE = "PLANE",
    SHIP = "SHIP",
    STATEMENT = "STATEMENT",
    DRONE = "DRONE",
    PLEASURE_BOATS = "PLEASURE_BOATS",
    SPECIFY = "SPECIFY",
    HELICOPTER = "HELICOPTER",
    PROGNOSIS = "PROGNOSIS",
    ANIMALS = "ANIMALS",
    CROPS = "CROPS",
    GENERAL_CREDIT = "GENERAL_CREDIT",
    HOME_CREDIT = "HOME_CREDIT",
    DOCUMENTOS_QUE_SEAN_OBJETO_DE_OFERTA_PUBLICA_O_DE_INTERMEDIACION_EN_MERCADOS_DE_VALORES = "DOCUMENTOS_QUE_SEAN_OBJETO_DE_OFERTA_PUBLICA_O_DE_INTERMEDIACION_EN_MERCADOS_DE_VALORES",
    SECURITIES_EMISSIONS = "SECURITIES_EMISSIONS",
    CREDIT_TITLES = "CREDIT_TITLES",
    ADMINISTRATION = "ADMINISTRATION",
    ARCHITECTS = "ARCHITECTS",
    CONTRACTOR = "CONTRACTOR",
    CRIME = "CRIME",
    ATOS = "ATOS",
    OFFICERS = "OFFICERS",
    MISCELLANEOUS_E_AND_O = "MISCELLANEOUS_E_AND_O",
    BUSSINESS = "BUSSINESS",
    EVENT = "EVENT",
    FAMILIAR_AND_CONDOMINIUM = "FAMILIAR_AND_CONDOMINIUM",
    HOLE_IN_ONE = "HOLE_IN_ONE",
    ENGINEERING = "ENGINEERING",
    FINANCIAL_INSTITUTIONS = "FINANCIAL_INSTITUTIONS",
    FINANCIAL_LINES = "FINANCIAL_LINES",
    DOCTORS = "DOCTORS",
    CATASTRHOPHIC_RISKS = "CATASTRHOPHIC_RISKS",
    BOILERS_AND_PRESSURE_VESSELS = "BOILERS_AND_PRESSURE_VESSELS",
    MONEY_AND_VALUES = "MONEY_AND_VALUES",
    EQ_CONTRACTORS_AND_HEAVY_MACHINE = "EQ_CONTRACTORS_AND_HEAVY_MACHINE",
    EQ_ELLECTRONIC = "EQ_ELLECTRONIC",
    MACHINERY_ASSEMBLY = "MACHINERY_ASSEMBLY",
    CIVIL_WORKS_UNDER_CONSTRUCCION = "CIVIL_WORKS_UNDER_CONSTRUCCION",
    FINISHED_CIVIL_WORKS = "FINISHED_CIVIL_WORKS",
    GLASS_BREAK = "GLASS_BREAK",
    MACHINERY_BREAK = "MACHINERY_BREAK",
    CRIME_OR_BBB = "CRIME_OR_BBB",
    D_AND_O = "D_AND_O",
    FIPI = "FIPI",
    CYBER = "CYBER",
    VCAPS = "VCAPS",
    MEDICAL_RCP = "MEDICAL_RCP",
    POLITICAL_RISK = "POLITICAL_RISK",
    RC_PUBLIC_SERVERS = "RC_PUBLIC_SERVERS",
    RCP = "RCP"
}
export interface INullableOfEnumConstructionTypeOperationFilterInput {
    eq?: IEnumConstructionType;
    neq?: IEnumConstructionType;
    in?: Array<IEnumConstructionType | null>;
    nin?: Array<IEnumConstructionType | null>;
}
export declare const enum IEnumConstructionType {
    SOLID = "SOLID",
    WOOD = "WOOD",
    LEAF = "LEAF",
    ANOTHER = "ANOTHER"
}
export interface ISinisterAilingFilterInput {
    and?: Array<ISinisterAilingFilterInput>;
    or?: Array<ISinisterAilingFilterInput>;
    code?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    sinisterAccidents?: IListFilterInputTypeOfSinisterAccidentFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IContractorGroupingLevelFilterInput {
    and?: Array<IContractorGroupingLevelFilterInput>;
    or?: Array<IContractorGroupingLevelFilterInput>;
    levelGrouping?: IComparableInt32OperationFilterInput;
    description?: IStringOperationFilterInput;
    ownerId?: IComparableGuidOperationFilterInput;
    parentId?: IComparableNullableOfGuidOperationFilterInput;
    responsableId?: IComparableGuidOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    groupingType?: INullableOfEnumContractorGroupingTypeOperationFilterInput;
    contractors?: IListFilterInputTypeOfContractorFilterInput;
    parent?: IContractorGroupingLevelFilterInput;
    contractorGroupingLevels?: IListFilterInputTypeOfContractorGroupingLevelFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumContractorGroupingTypeOperationFilterInput {
    eq?: IEnumContractorGroupingType;
    neq?: IEnumContractorGroupingType;
    in?: Array<IEnumContractorGroupingType | null>;
    nin?: Array<IEnumContractorGroupingType | null>;
}
export declare const enum IEnumContractorGroupingType {
    ENTERPRISE = "ENTERPRISE",
    COLLEGE = "COLLEGE",
    INDIVIDUAL = "INDIVIDUAL"
}
export interface IListFilterInputTypeOfContractorGroupingLevelFilterInput {
    all?: IContractorGroupingLevelFilterInput;
    none?: IContractorGroupingLevelFilterInput;
    some?: IContractorGroupingLevelFilterInput;
    any?: boolean;
}
export interface IContractorCelulaFilterInput {
    and?: Array<IContractorCelulaFilterInput>;
    or?: Array<IContractorCelulaFilterInput>;
    celulaName?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    contractors?: IListFilterInputTypeOfContractorFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IReferrerFilterInput {
    and?: Array<IReferrerFilterInput>;
    or?: Array<IReferrerFilterInput>;
    memberId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    hiredDate?: IComparableDateTimeOperationFilterInput;
    email?: IStringOperationFilterInput;
    address?: IStringOperationFilterInput;
    operationFactures?: IStringOperationFilterInput;
    paymentType?: INullableOfEnumReferrerPaymentTypeOperationFilterInput;
    paymentFrequency?: INullableOfEnumReferrerFrequencyOperationFilterInput;
    referenceNumber?: IStringOperationFilterInput;
    bank?: INullableOfEnumBankOperationFilterInput;
    phones?: IListStringOperationFilterInput;
    referrerAccountStates?: IListFilterInputTypeOfReferrerAccountStateFilterInput;
    referrerBranches?: IListFilterInputTypeOfReferrerBranchFilterInput;
    contractors?: IListFilterInputTypeOfContractorFilterInput;
    involvedReferrer?: IInvolvedReferrerFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumReferrerPaymentTypeOperationFilterInput {
    eq?: IEnumReferrerPaymentType;
    neq?: IEnumReferrerPaymentType;
    in?: Array<IEnumReferrerPaymentType | null>;
    nin?: Array<IEnumReferrerPaymentType | null>;
}
export declare const enum IEnumReferrerPaymentType {
    CLABE = "CLABE",
    ACCOUNT_NUMBER = "ACCOUNT_NUMBER",
    CARD_NUMBER = "CARD_NUMBER",
    CASH = "CASH"
}
export interface INullableOfEnumReferrerFrequencyOperationFilterInput {
    eq?: IEnumReferrerFrequency;
    neq?: IEnumReferrerFrequency;
    in?: Array<IEnumReferrerFrequency | null>;
    nin?: Array<IEnumReferrerFrequency | null>;
}
export declare const enum IEnumReferrerFrequency {
    WEEKLY = "WEEKLY",
    FORTNIGHTLY = "FORTNIGHTLY",
    MONTHLY = "MONTHLY"
}
export interface IListFilterInputTypeOfReferrerAccountStateFilterInput {
    all?: IReferrerAccountStateFilterInput;
    none?: IReferrerAccountStateFilterInput;
    some?: IReferrerAccountStateFilterInput;
    any?: boolean;
}
export interface IReferrerAccountStateFilterInput {
    and?: Array<IReferrerAccountStateFilterInput>;
    or?: Array<IReferrerAccountStateFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    folio?: IStringOperationFilterInput;
    total?: IComparableNullableOfDecimalOperationFilterInput;
    printDate?: IComparableDateTimeOperationFilterInput;
    status?: INullableOfEnumReferrerAccountStateOperationFilterInput;
    transactionNumber?: IStringOperationFilterInput;
    reasonReject?: IStringOperationFilterInput;
    observation?: IStringOperationFilterInput;
    referrerId?: IComparableGuidOperationFilterInput;
    referrer?: IReferrerFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumReferrerAccountStateOperationFilterInput {
    eq?: IEnumReferrerAccountState;
    neq?: IEnumReferrerAccountState;
    in?: Array<IEnumReferrerAccountState | null>;
    nin?: Array<IEnumReferrerAccountState | null>;
}
export declare const enum IEnumReferrerAccountState {
    PRE_APPROVED = "PRE_APPROVED",
    CLOSED = "CLOSED",
    REJECTED = "REJECTED"
}
export interface IListFilterInputTypeOfReferrerBranchFilterInput {
    all?: IReferrerBranchFilterInput;
    none?: IReferrerBranchFilterInput;
    some?: IReferrerBranchFilterInput;
    any?: boolean;
}
export interface IReferrerBranchFilterInput {
    and?: Array<IReferrerBranchFilterInput>;
    or?: Array<IReferrerBranchFilterInput>;
    projectAgentProviderId?: IComparableGuidOperationFilterInput;
    projectAgentProviderBranchId?: IComparableGuidOperationFilterInput;
    referrerId?: IComparableGuidOperationFilterInput;
    comition?: IComparableNullableOfDecimalOperationFilterInput;
    referrer?: IReferrerFilterInput;
    projectAgentProvider?: IProjectAgentProviderFilterInput;
    projectAgentProviderBranch?: IProjectAgentProviderBranchFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IInvolvedReferrerFilterInput {
    and?: Array<IInvolvedReferrerFilterInput>;
    or?: Array<IInvolvedReferrerFilterInput>;
    comisionVendedor?: IComparableNullableOfDecimalOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    policeId?: IComparableNullableOfGuidOperationFilterInput;
    referrerId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    referrer?: IReferrerFilterInput;
    police?: IPoliceFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfContractorProcessDocumentFilterInput {
    all?: IContractorProcessDocumentFilterInput;
    none?: IContractorProcessDocumentFilterInput;
    some?: IContractorProcessDocumentFilterInput;
    any?: boolean;
}
export interface IContractorProcessDocumentFilterInput {
    and?: Array<IContractorProcessDocumentFilterInput>;
    or?: Array<IContractorProcessDocumentFilterInput>;
    delivered?: IBooleanOperationFilterInput;
    validated?: IBooleanOperationFilterInput;
    processDocumentId?: IComparableGuidOperationFilterInput;
    contractorId?: IComparableGuidOperationFilterInput;
    contractor?: Isaam_ContractorFilterInput;
    processDocument?: IProcessDocumentFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IProcessDocumentFilterInput {
    and?: Array<IProcessDocumentFilterInput>;
    or?: Array<IProcessDocumentFilterInput>;
    name?: IStringOperationFilterInput;
    slug?: IStringOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    typeAgentProvider?: IListTypeAgentProviderOperationFilterInput;
    contractorProcessDocuments?: IListFilterInputTypeOfContractorProcessDocumentFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfPoliceQuoteFilterInput {
    all?: IPoliceQuoteFilterInput;
    none?: IPoliceQuoteFilterInput;
    some?: IPoliceQuoteFilterInput;
    any?: boolean;
}
export interface IPoliceQuoteFilterInput {
    and?: Array<IPoliceQuoteFilterInput>;
    or?: Array<IPoliceQuoteFilterInput>;
    projectAgentProviderBranchId?: IComparableNullableOfGuidOperationFilterInput;
    ramoCode?: IStringOperationFilterInput;
    subRamoCode?: IStringOperationFilterInput;
    status?: INullableOfEnumPoliceQuoteStatusOperationFilterInput;
    firstName?: IStringOperationFilterInput;
    lastName?: IStringOperationFilterInput;
    secondLastName?: IStringOperationFilterInput;
    email?: IStringOperationFilterInput;
    phone?: IStringOperationFilterInput;
    car?: IStringOperationFilterInput;
    observations?: IStringOperationFilterInput;
    accidents?: IStringOperationFilterInput;
    damages?: IStringOperationFilterInput;
    life?: IStringOperationFilterInput;
    isComplete?: IBooleanOperationFilterInput;
    type?: IStringOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    mainParent?: IComparableInt32OperationFilterInput;
    active?: IBooleanOperationFilterInput;
    prospectId?: IComparableNullableOfGuidOperationFilterInput;
    agentProviders?: IListComparableGuidOperationFilterInput;
    selectedAgentProvider?: IListComparableGuidOperationFilterInput;
    contractorId?: IComparableNullableOfGuidOperationFilterInput;
    contractor?: Isaam_ContractorFilterInput;
    projectAgentProviderBranch?: IProjectAgentProviderBranchFilterInput;
    policeQuotePrimas?: IListFilterInputTypeOfPoliceQuotePrimaFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumPoliceQuoteStatusOperationFilterInput {
    eq?: IEnumPoliceQuoteStatus;
    neq?: IEnumPoliceQuoteStatus;
    in?: Array<IEnumPoliceQuoteStatus | null>;
    nin?: Array<IEnumPoliceQuoteStatus | null>;
}
export declare const enum IEnumPoliceQuoteStatus {
    DISABLED = "DISABLED",
    IN_PROCESS = "IN_PROCESS",
    EMITTED = "EMITTED",
    BATTED = "BATTED"
}
export interface IListFilterInputTypeOfPoliceQuotePrimaFilterInput {
    all?: IPoliceQuotePrimaFilterInput;
    none?: IPoliceQuotePrimaFilterInput;
    some?: IPoliceQuotePrimaFilterInput;
    any?: boolean;
}
export interface IPoliceQuotePrimaFilterInput {
    and?: Array<IPoliceQuotePrimaFilterInput>;
    or?: Array<IPoliceQuotePrimaFilterInput>;
    aseguradora?: IStringOperationFilterInput;
    prima?: IStringOperationFilterInput;
    checked?: IBooleanOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    policeQuoteId?: IComparableGuidOperationFilterInput;
    policeQuote?: IPoliceQuoteFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IPoliceAssignFilterInput {
    and?: Array<IPoliceAssignFilterInput>;
    or?: Array<IPoliceAssignFilterInput>;
    isOwner?: IBooleanOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    policeId?: IComparableGuidOperationFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    police?: IPoliceFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IPolicePendientFilterInput {
    and?: Array<IPolicePendientFilterInput>;
    or?: Array<IPolicePendientFilterInput>;
    email?: IStringOperationFilterInput;
    isOwner?: IBooleanOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    policeId?: IComparableGuidOperationFilterInput;
    police?: IPoliceFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfOldPoliceFilterInput {
    all?: IOldPoliceFilterInput;
    none?: IOldPoliceFilterInput;
    some?: IOldPoliceFilterInput;
    any?: boolean;
}
export interface IOldPoliceFilterInput {
    and?: Array<IOldPoliceFilterInput>;
    or?: Array<IOldPoliceFilterInput>;
    basePolicyId?: IComparableNullableOfGuidOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    newPolicyId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    basePolice?: IPoliceFilterInput;
    newPolice?: IPoliceFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfCoverageInPolicyFilterInput {
    all?: ICoverageInPolicyFilterInput;
    none?: ICoverageInPolicyFilterInput;
    some?: ICoverageInPolicyFilterInput;
    any?: boolean;
}
export interface ICoverageInPolicyFilterInput {
    and?: Array<ICoverageInPolicyFilterInput>;
    or?: Array<ICoverageInPolicyFilterInput>;
    name?: IStringOperationFilterInput;
    sumInsured?: IStringOperationFilterInput;
    deductible?: IStringOperationFilterInput;
    prima?: IStringOperationFilterInput;
    coinsurance?: IStringOperationFilterInput;
    topecoinsurance?: IStringOperationFilterInput;
    priority?: IComparableNullableOfInt32OperationFilterInput;
    ownerId?: IComparableGuidOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    policyId?: IComparableGuidOperationFilterInput;
    packageId?: IComparableGuidOperationFilterInput;
    coveragePackage?: ICoveragePackageFilterInput;
    police?: IPoliceFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfEndorsementFilterInput {
    all?: IEndorsementFilterInput;
    none?: IEndorsementFilterInput;
    some?: IEndorsementFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfPoliceFileFilterInput {
    all?: IPoliceFileFilterInput;
    none?: IPoliceFileFilterInput;
    some?: IPoliceFileFilterInput;
    any?: boolean;
}
export interface IPoliceFileFilterInput {
    and?: Array<IPoliceFileFilterInput>;
    or?: Array<IPoliceFileFilterInput>;
    url?: IStringOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    sensible?: IBooleanOperationFilterInput;
    shared?: IBooleanOperationFilterInput;
    documentType?: IBooleanOperationFilterInput;
    checked?: IBooleanOperationFilterInput;
    active?: IBooleanOperationFilterInput;
    folio?: IStringOperationFilterInput;
    baseModel?: IStringOperationFilterInput;
    height?: IStringOperationFilterInput;
    width?: IStringOperationFilterInput;
    policeId?: IComparableNullableOfGuidOperationFilterInput;
    police?: IPoliceFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfComissionFilterInput {
    all?: IComissionFilterInput;
    none?: IComissionFilterInput;
    some?: IComissionFilterInput;
    any?: boolean;
}
export interface IComissionFilterInput {
    and?: Array<IComissionFilterInput>;
    or?: Array<IComissionFilterInput>;
    projectAgentProviderBranchId?: IComparableGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    amount?: IComparableDecimalOperationFilterInput;
    uDI?: IComparableDecimalOperationFilterInput;
    other?: IComparableDecimalOperationFilterInput;
    observations?: IStringOperationFilterInput;
    efectiveDate?: IComparableDateTimeOperationFilterInput;
    expireDate?: IComparableDateTimeOperationFilterInput;
    commisionRPF?: IComparableDecimalOperationFilterInput;
    otherRPF?: IComparableDecimalOperationFilterInput;
    rigth?: IComparableDecimalOperationFilterInput;
    otherRigths?: IComparableDecimalOperationFilterInput;
    initialPeriod?: IComparableInt32OperationFilterInput;
    subSequentPeriod?: IComparableInt32OperationFilterInput;
    anualRPF?: IComparableDecimalOperationFilterInput;
    bimestralRPF?: IComparableDecimalOperationFilterInput;
    mensualRPF?: IComparableDecimalOperationFilterInput;
    trimestralRPF?: IComparableDecimalOperationFilterInput;
    rigthUDI?: IComparableDecimalOperationFilterInput;
    rigthComission?: IComparableDecimalOperationFilterInput;
    keyId?: IComparableGuidOperationFilterInput;
    projectAgentProviderBranch?: IProjectAgentProviderBranchFilterInput;
    agentKey?: IAgentKeyFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfInsurerReminderProjectAgentProviderFilterInput {
    all?: IInsurerReminderProjectAgentProviderFilterInput;
    none?: IInsurerReminderProjectAgentProviderFilterInput;
    some?: IInsurerReminderProjectAgentProviderFilterInput;
    any?: boolean;
}
export interface IInsurerReminderProjectAgentProviderFilterInput {
    and?: Array<IInsurerReminderProjectAgentProviderFilterInput>;
    or?: Array<IInsurerReminderProjectAgentProviderFilterInput>;
    insurerReminderId?: IComparableNullableOfGuidOperationFilterInput;
    projectAgentProviderId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    insurerReminder?: IInsurerReminderFilterInput;
    projectAgentProvider?: IProjectAgentProviderFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IInsurerReminderFilterInput {
    and?: Array<IInsurerReminderFilterInput>;
    or?: Array<IInsurerReminderFilterInput>;
    name?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    sended?: IBooleanOperationFilterInput;
    type?: INullableOfEnumInsurerReminderTypeOperationFilterInput;
    instanceType?: INullableOfEnumInsurerReminderInstanceTypeOperationFilterInput;
    reminderDate?: IComparableNullableOfDateTimeOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    insurerReminderRecords?: IListFilterInputTypeOfInsurerReminderRecordFilterInput;
    insurerReminderSubBranchs?: IListFilterInputTypeOfInsurerReminderSubBranchFilterInput;
    insurerReminderProjectAgentProviders?: IListFilterInputTypeOfInsurerReminderProjectAgentProviderFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumInsurerReminderTypeOperationFilterInput {
    eq?: IEnumInsurerReminderType;
    neq?: IEnumInsurerReminderType;
    in?: Array<IEnumInsurerReminderType | null>;
    nin?: Array<IEnumInsurerReminderType | null>;
}
export declare const enum IEnumInsurerReminderType {
    AUTOMATIC = "AUTOMATIC",
    FREE = "FREE",
    FROM_RECORD = "FROM_RECORD"
}
export interface INullableOfEnumInsurerReminderInstanceTypeOperationFilterInput {
    eq?: IEnumInsurerReminderInstanceType;
    neq?: IEnumInsurerReminderInstanceType;
    in?: Array<IEnumInsurerReminderInstanceType | null>;
    nin?: Array<IEnumInsurerReminderInstanceType | null>;
}
export declare const enum IEnumInsurerReminderInstanceType {
    POLICY_NOT_RENEWED_VALIDITY_DATE = "POLICY_NOT_RENEWED_VALIDITY_DATE",
    PAY_PENDING_RECEIPTS_START_VALIDITY_DATE = "PAY_PENDING_RECEIPTS_START_VALIDITY_DATE",
    PAY_PENDING_RECEIPTS_END_VALIDITY_DATE = "PAY_PENDING_RECEIPTS_END_VALIDITY_DATE",
    PAY_PENDING_RECEIPTS_PROMISE_DATE = "PAY_PENDING_RECEIPTS_PROMISE_DATE",
    SINISTER_COMPROMISE_DATE = "SINISTER_COMPROMISE_DATE"
}
export interface IListFilterInputTypeOfInsurerReminderRecordFilterInput {
    all?: IInsurerReminderRecordFilterInput;
    none?: IInsurerReminderRecordFilterInput;
    some?: IInsurerReminderRecordFilterInput;
    any?: boolean;
}
export interface IInsurerReminderRecordFilterInput {
    and?: Array<IInsurerReminderRecordFilterInput>;
    or?: Array<IInsurerReminderRecordFilterInput>;
    insurerReminderId?: IComparableNullableOfGuidOperationFilterInput;
    seen?: IBooleanOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    recordId?: IComparableNullableOfGuidOperationFilterInput;
    recordModel?: INullableOfEnumInsurerCommentModelOperationFilterInput;
    insurerReminder?: IInsurerReminderFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumInsurerCommentModelOperationFilterInput {
    eq?: IEnumInsurerCommentModel;
    neq?: IEnumInsurerCommentModel;
    in?: Array<IEnumInsurerCommentModel | null>;
    nin?: Array<IEnumInsurerCommentModel | null>;
}
export declare const enum IEnumInsurerCommentModel {
    POLICE = "POLICE",
    CONTRACTOR = "CONTRACTOR",
    RECEIPTS = "RECEIPTS",
    SINISTER = "SINISTER",
    RENOVATIONS = "RENOVATIONS",
    COMMISSIONS_RECEIPTS = "COMMISSIONS_RECEIPTS",
    GROUPS = "GROUPS",
    PACKAGE = "PACKAGE",
    ENDORSEMENT = "ENDORSEMENT",
    AGENTPROVIDER = "AGENTPROVIDER",
    ACCOUNT_STATUS = "ACCOUNT_STATUS",
    BAIL = "BAIL",
    BONDS = "BONDS",
    COMMENTS = "COMMENTS",
    LOG = "LOG",
    LETTERS = "LETTERS",
    COLLECTIVITIES = "COLLECTIVITIES",
    GRAPHS = "GRAPHS",
    NOTES = "NOTES",
    BAIL_CLAIM = "BAIL_CLAIM",
    TASKS = "TASKS",
    FINISHED_TASKS = "FINISHED_TASKS",
    EVENTS = "EVENTS",
    CERTIFICATE = "CERTIFICATE",
    REPORTS = "REPORTS",
    APP_MNOTIFICATIONS = "APP_MNOTIFICATIONS",
    FLOTILLAS = "FLOTILLAS",
    MAILING_TEMPLATE = "MAILING_TEMPLATE",
    REMINDERS = "REMINDERS"
}
export interface IListFilterInputTypeOfInsurerReminderSubBranchFilterInput {
    all?: IInsurerReminderSubBranchFilterInput;
    none?: IInsurerReminderSubBranchFilterInput;
    some?: IInsurerReminderSubBranchFilterInput;
    any?: boolean;
}
export interface IInsurerReminderSubBranchFilterInput {
    and?: Array<IInsurerReminderSubBranchFilterInput>;
    or?: Array<IInsurerReminderSubBranchFilterInput>;
    insurerReminderId?: IComparableNullableOfGuidOperationFilterInput;
    subBranch?: IComparableNullableOfInt32OperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    insurerReminder?: IInsurerReminderFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfProjectAgentProviderEmailReminderFilterInput {
    all?: IProjectAgentProviderEmailReminderFilterInput;
    none?: IProjectAgentProviderEmailReminderFilterInput;
    some?: IProjectAgentProviderEmailReminderFilterInput;
    any?: boolean;
}
export interface IProjectAgentProviderEmailReminderFilterInput {
    and?: Array<IProjectAgentProviderEmailReminderFilterInput>;
    or?: Array<IProjectAgentProviderEmailReminderFilterInput>;
    model?: INullableOfEnumEmaiModelOperationFilterInput;
    text?: IStringOperationFilterInput;
    footer?: IStringOperationFilterInput;
    ownerId?: IComparableGuidOperationFilterInput;
    frequency?: INullableOfEnumEmailFrequencyOperationFilterInput;
    ramoCode?: INullableOfEnumEmailRamoOperationFilterInput;
    policyType?: INullableOfEnumEmailTypeOperationFilterInput;
    chargeType?: INullableOfEnumEmailChargeTypeOperationFilterInput;
    dateType?: INullableOfEnumEmailDateTypeOperationFilterInput;
    projectAgentProviders?: IListComparableGuidOperationFilterInput;
    subbranches?: IListComparableGuidOperationFilterInput;
    projectAgentProviderId?: IComparableGuidOperationFilterInput;
    projectAgentProvider?: IProjectAgentProviderFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumEmaiModelOperationFilterInput {
    eq?: IEnumEmaiModel;
    neq?: IEnumEmaiModel;
    in?: Array<IEnumEmaiModel | null>;
    nin?: Array<IEnumEmaiModel | null>;
}
export declare const enum IEnumEmaiModel {
    OT_REQUEST = "OT_REQUEST",
    OT_REGISTER = "OT_REGISTER",
    ACCIDENT_REQUEST = "ACCIDENT_REQUEST",
    ACCIDENT_END = "ACCIDENT_END",
    REMINDER = "REMINDER",
    PAYMENT = "PAYMENT",
    CREATED_NOTE = "CREATED_NOTE",
    APPLIED_NOTE = "APPLIED_NOTE",
    POLICE_RENEW = "POLICE_RENEW",
    REMINDER_POLICE_RENEW = "REMINDER_POLICE_RENEW",
    ACCIDENT_IN_PROCESS = "ACCIDENT_IN_PROCESS",
    ACCIDENT_CANCELED = "ACCIDENT_CANCELED",
    ACCIDENT_REJECTED = "ACCIDENT_REJECTED",
    ACCIDENT_ON_QUEUE = "ACCIDENT_ON_QUEUE"
}
export interface INullableOfEnumEmailFrequencyOperationFilterInput {
    eq?: IEnumEmailFrequency;
    neq?: IEnumEmailFrequency;
    in?: Array<IEnumEmailFrequency | null>;
    nin?: Array<IEnumEmailFrequency | null>;
}
export declare const enum IEnumEmailFrequency {
    MONTHLY = "MONTHLY",
    FORTNIGTHLY = "FORTNIGTHLY",
    WEEKLY = "WEEKLY",
    OVERDUE = "OVERDUE",
    LATER_WEEK = "LATER_WEEK",
    LATER_FORTNIGTH = "LATER_FORTNIGTH",
    LATER_MONTH = "LATER_MONTH",
    OVERDUE_POLICE_TO_RENEW = "OVERDUE_POLICE_TO_RENEW",
    TWENTY_DATYS_AFTER = "TWENTY_DATYS_AFTER",
    TWENTY_DATYS_BEFORE = "TWENTY_DATYS_BEFORE"
}
export interface INullableOfEnumEmailRamoOperationFilterInput {
    eq?: IEnumEmailRamo;
    neq?: IEnumEmailRamo;
    in?: Array<IEnumEmailRamo | null>;
    nin?: Array<IEnumEmailRamo | null>;
}
export declare const enum IEnumEmailRamo {
    LIFE = "LIFE",
    ACIDENTS_AND_DISEASES = "ACIDENTS_AND_DISEASES",
    DAMAGES = "DAMAGES",
    ALL = "ALL"
}
export interface INullableOfEnumEmailTypeOperationFilterInput {
    eq?: IEnumEmailType;
    neq?: IEnumEmailType;
    in?: Array<IEnumEmailType | null>;
    nin?: Array<IEnumEmailType | null>;
}
export declare const enum IEnumEmailType {
    POLICE = "POLICE",
    IND_POLICE_OF_COLECTIVITY = "IND_POLICE_OF_COLECTIVITY",
    GROUP_POLICE = "GROUP_POLICE",
    ALL = "ALL"
}
export interface INullableOfEnumEmailChargeTypeOperationFilterInput {
    eq?: IEnumEmailChargeType;
    neq?: IEnumEmailChargeType;
    in?: Array<IEnumEmailChargeType | null>;
    nin?: Array<IEnumEmailChargeType | null>;
}
export declare const enum IEnumEmailChargeType {
    DOMICILED = "DOMICILED",
    UNDOMICILED = "UNDOMICILED",
    ALL = "ALL",
    UNDOMICILIED_AND_AGENT = "UNDOMICILIED_AND_AGENT"
}
export interface INullableOfEnumEmailDateTypeOperationFilterInput {
    eq?: IEnumEmailDateType;
    neq?: IEnumEmailDateType;
    in?: Array<IEnumEmailDateType | null>;
    nin?: Array<IEnumEmailDateType | null>;
}
export declare const enum IEnumEmailDateType {
    VALIDITY_BEGIN = "VALIDITY_BEGIN",
    OVERDUE = "OVERDUE"
}
export interface IListFilterInputTypeOfAgentProviderBonoFilterInput {
    all?: IAgentProviderBonoFilterInput;
    none?: IAgentProviderBonoFilterInput;
    some?: IAgentProviderBonoFilterInput;
    any?: boolean;
}
export interface IAgentProviderBonoSortInput {
    agentKeyId?: ISortEnumType;
    startValidity?: ISortEnumType;
    endValidity?: ISortEnumType;
    quantity?: ISortEnumType;
    exchangeRate?: ISortEnumType;
    bono?: ISortEnumType;
    projectId?: ISortEnumType;
    factureNumber?: ISortEnumType;
    ownerId?: ISortEnumType;
    referrerId?: ISortEnumType;
    agentKey?: IAgentKeySortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IAgentKeySortInput {
    ownerId?: ISortEnumType;
    name?: ISortEnumType;
    key?: ISortEnumType;
    isActive?: ISortEnumType;
    projectAgentProviderId?: ISortEnumType;
    projectAgentProvider?: IProjectAgentProviderSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IProjectAgentProviderSortInput {
    projectId?: ISortEnumType;
    agentProviderId?: ISortEnumType;
    agentProvider?: IAgentProviderSortInput;
    observations?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IAgentProviderSortInput {
    companyName?: ISortEnumType;
    alias?: ISortEnumType;
    rFC?: ISortEnumType;
    phone?: ISortEnumType;
    website?: ISortEnumType;
    ownerId?: ISortEnumType;
    typeAgentProvider?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IAgentProviderBonoCollectionSegment {
    items?: Array<IAgentProviderBono>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IAgentProviderBono {
    agentKeyId?: IUUID;
    startValidity?: IDateTime;
    endValidity?: IDateTime;
    quantity?: number;
    exchangeRate?: IEnumFCurrency;
    bono?: IEnumBonoType;
    projectId?: IUUID;
    factureNumber?: string;
    ownerId?: IUUID;
    referrerId?: IUUID;
    agentKey?: IAgentKey;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IAgentKey {
    ownerId: IUUID;
    name: string;
    key: string;
    isActive: boolean;
    projectAgentProviderId: IUUID;
    projectAgentProvider?: IProjectAgentProvider;
    comissions: Array<IComission>;
    polices: Array<IPolice>;
    agentProviderBono: Array<IAgentProviderBono>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProjectAgentProvider {
    projectId: IUUID;
    agentProviderId: IUUID;
    agentProvider?: IAgentProvider;
    observations?: string;
    coveragePackages: Array<ICoveragePackage>;
    agentProviderContact: Array<IAgentProviderContact>;
    insurerReminderProjectAgentProvider: Array<IInsurerReminderProjectAgentProvider>;
    projectAgentProviderEmailReminders: Array<IProjectAgentProviderEmailReminder>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IAgentProvider {
    companyName: string;
    alias?: string;
    rFC?: string;
    phone?: string;
    website?: string;
    ownerId: IUUID;
    typeAgentProvider: ITypeAgentProvider;
    projectAgentProviders: Array<IProjectAgentProvider>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICoveragePackage {
    name?: string;
    description?: string;
    projectAgentProviderBranchId: IUUID;
    typePackage: number;
    policy: number;
    ownerId?: IUUID;
    projectAgentProviderId?: IUUID;
    projectAgentProvider?: IProjectAgentProvider;
    projectAgentProviderBranch?: IProjectAgentProviderBranch;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProjectAgentProviderBranch {
    projectId: IUUID;
    projectAgentProviderId: IUUID;
    projectAgentProvider?: IProjectAgentProvider;
    branchId: IUUID;
    branch?: IBranch;
    subBranchId?: IUUID;
    subBranch?: ISubBranch;
    projectAgentProviderBranches: Array<IProjectAgentProviderBranch>;
    polices: Array<IPolice>;
    comissions: Array<IComission>;
    agentProviderContacts: Array<IAgentProviderContact>;
    referrerBranchs: Array<IReferrerBranch>;
    coveragePackages: Array<ICoveragePackage>;
    policeQuotes: Array<IPoliceQuote>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IBranch {
    branchName: string;
    branchCode?: number;
    typeAgentProviders: Array<ITypeAgentProvider>;
    subBranches: Array<ISubBranch>;
    projectAgentProviderBranches: Array<IProjectAgentProviderBranch>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ISubBranch {
    subBranchName: string;
    subBranchCode?: number;
    branchId: IUUID;
    branch?: IBranch;
    projectAgentProviderBranches: Array<IProjectAgentProviderBranch>;
    insurerBailTypes: Array<IInsurerBailType>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerBailType {
    name?: string;
    code?: number;
    ownerId?: IUUID;
    projectId?: IUUID;
    subBranchId?: IUUID;
    subBranch?: ISubBranch;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPolice {
    number?: string;
    startValidity?: IDateTime;
    endValidity?: IDateTime;
    formaDePago?: IEnumPolicePaymentType;
    status?: IEnumPoliceStatus;
    observations?: string;
    folio?: string;
    internalNumber?: string;
    documentType?: IEnumPoliceDocumentType;
    addressId?: number;
    aseguradoraId?: number;
    claveId?: IUUID;
    ownerId?: IUUID;
    packageId?: number;
    projectAgentProviderBranchId?: IUUID;
    fCurrency?: IEnumFCurrency;
    identifier?: string;
    rigth?: IDecimal;
    iVA?: IDecimal;
    pNeta?: IDecimal;
    pTotal?: IDecimal;
    rPF?: IDecimal;
    comision?: IDecimal;
    administrationType?: IEnumPoliceAdministrationType;
    caratule?: string;
    certificadoIncisoActivo?: boolean;
    certificateNumber?: string;
    comisionPercent?: number;
    hospitalLevel?: string;
    name?: string;
    parentId?: IUUID;
    discount?: IDecimal;
    isRenewable?: IEnumPoliceRenew;
    reasonRen?: string;
    renewedStatus?: IEnumPoliceRenewalStatus;
    contact?: string;
    fechaBajaInciso?: IDateTime;
    reasonCancel?: string;
    receiptsBy?: IEnumPoliceReceipts;
    responsableId?: IUUID;
    comisionGiven?: IDecimal;
    recAntiquity?: IDateTime;
    collectionExecutiveId?: number;
    sucursalId?: IUUID;
    subTotal?: IDecimal;
    trackBitacora?: boolean;
    accidentRate?: IDecimal;
    scheme?: IEnumPayScheme;
    steps?: string;
    totalReceipts?: number;
    conceptAnnulment?: IEnumPoliceConcept;
    deductible?: string;
    emisionDate?: IDateTime;
    emisionStatus?: IEnumPoliceEmisionStatus;
    fechaAnuencia?: IDateTime;
    fianzaTypeId?: number;
    gastoInvestigacion?: IDecimal;
    reasonRehabbilitate?: string;
    bussinessLine?: IEnumPoliceBussinessLine;
    contratanteSubGroup?: number;
    celulaId?: number;
    groupingLevelId?: number;
    typePolicy?: IEnumPolicyType;
    conductoDePago?: IEnumConductChoise;
    tabulator?: string;
    bonoVariable?: IDecimal;
    hasProgramaDeProveedores?: boolean;
    contractorId?: IUUID;
    programaDeProveedoresContractorId?: number;
    chargeDate?: IDateTime;
    comisionEarned?: IDecimal;
    comisionPercentEarned?: IDecimal;
    rigthEarned?: IDecimal;
    discountEarned?: IDecimal;
    ivaEarned?: IDecimal;
    pNetaEarned?: IDecimal;
    pTotalEarned?: IDecimal;
    rPFEarned?: IDecimal;
    subTotalEarned?: IDecimal;
    dateCancel?: IDateTime;
    amountCanceled?: IDecimal;
    stateCirculation?: string;
    fechaPagoComision?: IDateTime;
    dateEmitionFactura?: IDateTime;
    folioFactura?: string;
    monthFactura?: number;
    exchangeRate?: IDecimal;
    projectAgentProviderBranch?: IProjectAgentProviderBranch;
    agentKey?: IAgentKey;
    sucursal?: ISucursal;
    parent?: IPolice;
    contractor?: Isaam_Contractor;
    polices?: Array<IPolice>;
    policeAssign?: IPoliceAssign;
    policePendient?: IPolicePendient;
    formAccidentDisease?: IFormAccidentDisease;
    formAutomobileDamage?: IFormAutomobileDamage;
    formDamage?: IFormDamage;
    formLife?: IFormLife;
    personalInformation?: IPersonalInformation;
    involvedReferrer?: IInvolvedReferrer;
    oldPolices?: Array<IOldPolice>;
    newPolices?: Array<IOldPolice>;
    coverageInPolicies?: Array<ICoverageInPolicy>;
    endorsements?: Array<IEndorsement>;
    sinisters?: Array<ISinister>;
    policeReceipts?: Array<IPoliceReceipt>;
    policeFiles?: Array<IPoliceFile>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ISucursal {
    name?: string;
    details?: string;
    ownerId?: IUUID;
    projectId?: IUUID;
    police?: Array<IPolice>;
    contractors?: Array<Isaam_Contractor>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface Isaam_Contractor {
    projectId: IUUID;
    firstName?: string;
    lastName?: string;
    secondLastName?: string;
    socialReason?: string;
    fullName: string;
    gender: Isaam_EnumGender;
    birthDate?: IDateTime;
    phoneNumber?: string;
    rFC?: string;
    description?: string;
    email?: string;
    active: boolean;
    contractorType: IEnumContractorType;
    sucursalId?: IUUID;
    contractorClassificationId: IUUID;
    contractorClassification?: IContractorClassification;
    contractorGroupId: IUUID;
    contractorGroup?: IContractorGroup;
    contractorGroupingLevelId: IUUID;
    contractorGroupingLevel?: IContractorGroupingLevel;
    contractorCelulaId: IUUID;
    contractorCelula?: IContractorCelula;
    ownerId: IUUID;
    memberId: IUUID;
    responsableId: IUUID;
    referrerId: IUUID;
    referrer?: IReferrer;
    sucursal?: ISucursal;
    contractorProcessDocuments: Array<IContractorProcessDocument>;
    agentProviderContact: Array<IAgentProviderContact>;
    policeQuotes?: Array<IPoliceQuote>;
    polices?: Array<IPolice>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IContractorClassification {
    name?: string;
    description?: string;
    projectId: IUUID;
    ownerId?: IUUID;
    contractors: Array<Isaam_Contractor>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IContractorGroup {
    name?: string;
    description?: string;
    ownerId: IUUID;
    parentId?: IUUID;
    responsableId: IUUID;
    groupType?: IEnumContractorGroupType;
    parent?: IContractorGroup;
    contractorGroups: Array<IContractorGroup>;
    agentProviderContact: Array<IAgentProviderContact>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IAgentProviderContact {
    projectAgentProviderBranchId: IUUID;
    name: string;
    email?: string;
    phone?: string;
    department?: string;
    sinisterAccidentId?: IUUID;
    ownerId: IUUID;
    contractorGroupId: IUUID;
    contractorGroup?: IContractorGroup;
    projectAgentProviderBranch?: IProjectAgentProviderBranch;
    contractorId: IUUID;
    contractor?: Isaam_Contractor;
    projectAgentProviderId: IUUID;
    projectAgentProvider?: IProjectAgentProvider;
    sinisterAccident?: ISinisterAccident;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ISinisterAccident {
    relationShip?: IEnumSinisterRelation;
    kindSinister?: IEnumSinisterKind;
    sinisterReason?: IEnumSinisterReason;
    sinisterComplement?: string;
    sinisterType?: IEnumSinisterType;
    paymentType?: IEnumSinisterPaymentType;
    totalPayment?: IDecimal;
    totalProcedent?: IDecimal;
    totalCoaseguro?: IDecimal;
    totalDeductible?: IDecimal;
    totalFinal?: IDecimal;
    initial?: boolean;
    receiptStatus?: string;
    dependientId?: IUUID;
    sinisterAilingId?: IUUID;
    sinisterId?: IUUID;
    titularId?: IUUID;
    ailment?: string;
    anesthesiologist?: IDecimal;
    helper?: IDecimal;
    surgeon?: IDecimal;
    coasHonorarios?: IDecimal;
    coasHospital?: IDecimal;
    dedHonorarios?: IDecimal;
    dedHospital?: IDecimal;
    montoHonorarios?: IDecimal;
    montoHospital?: IDecimal;
    others?: IDecimal;
    surgeryDate?: IDateTime;
    hospital?: string;
    affectedFullName?: string;
    complementConsecutiveNumber?: number;
    initialAccidentId?: IUUID;
    projectId?: IUUID;
    sinister?: ISinister;
    personalInformation?: IPersonalInformation;
    dependient?: IRelationShip;
    initialAccident?: ISinisterAccident;
    sinisterAiling?: ISinisterAiling;
    sinisterAccidents: Array<ISinisterAccident>;
    agentProviderContacts: Array<IAgentProviderContact>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ISinister {
    companyFolio?: string;
    internFolio?: string;
    status?: IEnumSinisterStatus;
    promiseDate?: IDateTime;
    affectedItem?: string;
    sinisterNumber?: string;
    sinisterDate?: IDateTime;
    typeSinisterGeneral?: IEnumTypeSinisterGeneral;
    reason?: string;
    observations?: string;
    ownerId?: IUUID;
    policeId?: IUUID;
    ingressDate?: IDateTime;
    affectedAux?: string;
    compromiseDate?: IDateTime;
    affectedAuxRelationShip?: IEnumSinisterRelation;
    insurerZipCodeSepomexId?: IUUID;
    date?: IDateTime;
    projectId?: IUUID;
    terminationDate?: IDateTime;
    fileLoadedDate?: IDateTime;
    police?: IPolice;
    sinisterCars?: Array<ISinisterCar>;
    sinisterDamages?: Array<ISinisterDamage>;
    sinisterFacturas?: Array<ISinisterFactura>;
    sinisterLifes: Array<ISinisterLife>;
    sinisterAccidents: Array<ISinisterAccident>;
    insurerZipCodeSepomex?: IInsurerZipCodeSepomex;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ISinisterCar {
    typeSinister?: IEnumSinisterCarType;
    explication?: string;
    third?: string;
    imdemnization?: IDecimal;
    sinisterId?: IUUID;
    driver?: string;
    coaseguro?: IDecimal;
    deductible?: IDecimal;
    projectId?: IUUID;
    firstSubTypeSinister?: IEnumSinisterCarSubType;
    secondSubTypeSinister?: IEnumSinisterCarSubSubType;
    sinister?: ISinister;
    sinisterCarContacts?: Array<ISinisterCarContact>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ISinisterCarContact {
    firstName?: string;
    lastName?: string;
    secondLastName?: string;
    phone?: string;
    email?: string;
    references?: string;
    sinisterCarId?: IUUID;
    projectId?: IUUID;
    sinisterCar?: ISinisterCar;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ISinisterDamage {
    insuredProperty?: string;
    lossEstimate?: string;
    claimCause?: string;
    affectedCoverage?: string;
    indemnization?: IDecimal;
    totalClaim?: IDecimal;
    sinisterId?: IUUID;
    currency?: IEnumFCurrency;
    exchangeRate?: IEnumFCurrency;
    totalCoaseguro?: IDecimal;
    totalDeductible?: IDecimal;
    projectId?: IUUID;
    sinister?: ISinister;
    sinisterDamageContacts: Array<ISinisterDamageContact>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ISinisterDamageContact {
    firstName?: string;
    lastName?: string;
    secondLastName?: string;
    phone?: string;
    email?: string;
    references?: string;
    sinisterDamageId?: IUUID;
    projectId?: IUUID;
    sinisterDamage?: ISinisterDamage;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ISinisterFactura {
    facturaNumber?: string;
    provider?: string;
    facturaDate?: IDateTime;
    import?: IDecimal;
    iVA?: IDecimal;
    total?: IDecimal;
    procedent?: IDecimal;
    observations?: string;
    sinisterId?: IUUID;
    concept?: string;
    serie?: string;
    projectId?: IUUID;
    sinister?: ISinister;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ISinisterLife {
    sinisterReason?: IEnumSinisterLifeReason;
    paymentType?: IEnumSinisterPaymentType;
    sinisterId?: IUUID;
    affectedName?: string;
    relationAffected?: IEnumSinisterRelation;
    projectId?: IUUID;
    sinister?: ISinister;
    sinisterLifes: Array<ISinisterLife>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerZipCodeSepomex {
    zipCode?: number;
    colony?: string;
    city?: string;
    state?: string;
    code?: string;
    cityId?: string;
    sinisters: Array<ISinister>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPersonalInformation {
    firstName?: string;
    lastName?: string;
    secondLastName?: string;
    birthDate?: IDateTime;
    sex?: string;
    ownerId?: string;
    fullName?: string;
    email?: string;
    salary?: IDecimal;
    sumAssured?: IDecimal;
    memberId?: IUUID;
    antiquity?: IDateTime;
    policeId?: IUUID;
    policyType?: number;
    typeSA?: IEnumSAType;
    certificate?: string;
    comision?: IDecimal;
    rigth?: IDecimal;
    iVA?: IDecimal;
    projectId?: IUUID;
    pNeta?: IDecimal;
    pTotal?: IDecimal;
    rPF?: IDecimal;
    discount?: IDecimal;
    gastosInvestigacion?: IDecimal;
    subTotal?: IDecimal;
    chargeDate?: IDateTime;
    comisionEarned?: IDecimal;
    comisionPercentEarned?: IDecimal;
    rigthEarned?: IDecimal;
    discountEarned?: IDecimal;
    dischargeDate?: IDateTime;
    iVAEarned?: IDecimal;
    pNetaEarned?: IDecimal;
    pTotalEarned?: IDecimal;
    rPFEarned?: IDecimal;
    subTotalEarned?: IDecimal;
    endDate?: IDateTime;
    initDate?: IDateTime;
    comisionPaymentDate?: IDateTime;
    exchangeRate?: IDecimal;
    maquila?: IDecimal;
    bonoDdate?: IDateTime;
    maquilaDate?: IDateTime;
    facturaYear?: number;
    formAccidentDisease?: IFormAccidentDisease;
    formAutomobileDamage?: IFormAutomobileDamage;
    formDamage?: IFormDamage;
    formLife?: IFormLife;
    police?: IPolice;
    sinisterAccidents: Array<ISinisterAccident>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IFormAccidentDisease {
    diseaseType?: number;
    coinsurance?: string;
    documentType?: IEnumPoliceDocumentType;
    ownerId?: IUUID;
    personalId?: IUUID;
    policeId?: IUUID;
    projectId?: IUUID;
    personalInformation?: IPersonalInformation;
    police?: IPolice;
    relationShips: Array<IRelationShip>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IRelationShip {
    firstName?: string;
    lastName?: string;
    secondLastName?: string;
    birthDate?: IDateTime;
    sex?: string;
    relationship?: number;
    accidentId?: IUUID;
    ownerId?: IUUID;
    fullName?: string;
    isActive?: boolean;
    endorsementId?: IUUID;
    antiquity?: IDateTime;
    certificate?: string;
    comision?: IDecimal;
    rigth?: IDecimal;
    iVA?: IDecimal;
    projectId: IUUID;
    pNeta?: IDecimal;
    pTotal?: IDecimal;
    rPF?: IDecimal;
    discount?: IDecimal;
    gastosInvestigacion?: IDecimal;
    subTotal?: IDecimal;
    chargeDate?: IDateTime;
    comisionEarned?: IDecimal;
    comisionPercentEarned?: IDecimal;
    rigthEarned?: IDecimal;
    discountEarned?: IDecimal;
    dischangeDate?: IDateTime;
    iVAEarned?: IDecimal;
    pNetaEarned?: IDecimal;
    pTotalEarned?: IDecimal;
    rPFEarned?: IDecimal;
    subTotalEarned?: IDecimal;
    comisionPaymentDate?: IDateTime;
    exchangeRate?: IDecimal;
    maquila?: IDecimal;
    bonoDate?: IDateTime;
    maquilaDate?: IDateTime;
    facturaYear?: number;
    formAccidentDisease?: IFormAccidentDisease;
    endorsement?: IEndorsement;
    endorsementCerts: Array<IEndorsementCert>;
    sinisterAccidents: Array<ISinisterAccident>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IEndorsement {
    type?: IEnumEntorsementType;
    status?: number;
    initDate?: IDateTime;
    endDate?: IDateTime;
    numberEndorsement?: string;
    internalNumber?: string;
    concept?: number;
    otherDesc?: string;
    original?: string;
    change?: string;
    observations?: string;
    pNeta?: IDecimal;
    rPF?: IDecimal;
    rigth?: IDecimal;
    iVA?: IDecimal;
    pTotal?: IDecimal;
    comision?: IDecimal;
    ownerId?: IUUID;
    policeId?: IUUID;
    comisionPercent?: IDecimal;
    anuency?: IDateTime;
    projectId?: IUUID;
    discount?: IDecimal;
    researchCost?: IDecimal;
    comisionPercentEarned?: IDecimal;
    discoutnEarned?: IDecimal;
    iVaEarned?: IDecimal;
    pNETAEarned?: IDecimal;
    pTotalEarned?: IDecimal;
    rPFEarned?: IDecimal;
    subTotalEarned?: IDecimal;
    insuranceFolio?: string;
    comitionPatmentDate?: IDateTime;
    exchangeRate?: IDecimal;
    maquila?: IDecimal;
    bonoDate?: IDateTime;
    variableBono?: IDecimal;
    emisionFacturaDate?: IDateTime;
    maquilaDate?: IDateTime;
    folioFactura?: string;
    monthFactura?: number;
    fechaEntrega?: IDateTime;
    police?: IPolice;
    beneficiaries: Array<IBeneficiarie>;
    relationShips: Array<IRelationShip>;
    endorsementCerts: Array<IEndorsementCert>;
    policeReceipts: Array<IPoliceReceipt>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IBeneficiarie {
    firstName?: string;
    lastName?: string;
    secondLastName?: string;
    birthDate?: IDateTime;
    sex?: string;
    percentage?: number;
    optionalRelation?: string;
    lifeId?: IUUID;
    ownerId?: IUUID;
    fullName?: string;
    iSR?: IDecimal;
    procedente?: string;
    clause?: string;
    jName?: string;
    rFC?: string;
    active?: boolean;
    endorsementId?: IUUID;
    antiquity?: IDateTime;
    projectId?: IUUID;
    chargeDate?: IDateTime;
    dishargeDate?: IDateTime;
    formLife?: IFormLife;
    endorsement?: IEndorsement;
    endorsementCerts: Array<IEndorsementCert>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IFormLife {
    smoker?: boolean;
    documentType?: IEnumPoliceDocumentType;
    ownerId?: IUUID;
    personalId?: IUUID;
    policeId?: IUUID;
    projectId?: IUUID;
    beneficiarie?: IBeneficiarie;
    personalInformation?: IPersonalInformation;
    police?: IPolice;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IEndorsementCert {
    proceed?: boolean;
    certificate?: string;
    endorsementId?: IUUID;
    projectId?: IUUID;
    beneficiarieId?: IUUID;
    relationShipId?: IUUID;
    endorsement?: IEndorsement;
    beneficiarie?: IBeneficiarie;
    relationShip?: IRelationShip;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPoliceReceipt {
    number?: number;
    primaNeta?: IDecimal;
    rPF?: IDecimal;
    right?: IDecimal;
    iVA?: IDecimal;
    subTotal?: IDecimal;
    primaTotal?: IDecimal;
    status?: IEnumPoliceReceiptStatus;
    startDate?: IDateTime;
    endDate?: IDateTime;
    description?: string;
    folio?: string;
    type?: IEnumPoliceReceiptType;
    payForm?: number;
    paymentDocument?: string;
    isCopy?: boolean;
    isActive?: boolean;
    bank?: IEnumBank;
    ownerId?: IUUID;
    policeId?: IUUID;
    comision?: IDecimal;
    validityDate?: IDateTime;
    reconciledComision?: string;
    reconciledDate?: IDateTime;
    reconciledObservation?: string;
    settlementFolio?: string;
    reconciledFolio?: string;
    settlementDate?: IDateTime;
    reconcilationAccountId?: IUUID;
    paymentDate?: IDateTime;
    endorsementId?: IUUID;
    delivered?: boolean;
    paymentFolio?: string;
    settlementBank?: IEnumBank;
    settlementCurrRate?: number;
    settlementDoc?: string;
    settlementForm?: number;
    excedent?: IDecimal;
    agentProviderBonoId?: IUUID;
    changeReferrerComision?: boolean;
    referrerComosion?: IDecimal;
    binnacleTrack?: boolean;
    emailTrack?: boolean;
    phoneTrack?: boolean;
    referrerClosedNew?: IEnumReferrerClosed;
    memberPaymentId?: IUUID;
    paymentPromise?: IDateTime;
    researchCost?: IDecimal;
    projectId?: IUUID;
    conductPayment?: IEnumConductChoise;
    exchangeRate?: IDecimal;
    manualSerie?: number;
    settlementMethod?: string;
    memberSettlementId?: number;
    police?: IPolice;
    endorsement?: IEndorsement;
    policeReceiptAccount?: IPoliceReceiptAccount;
    agentProviderbono?: IAgentProviderBono;
    policeReceiptAccountStates: Array<IPoliceReceiptAccountState>;
    policeReceiptPayments: Array<IPoliceReceiptPayment>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPoliceReceiptAccount {
    name?: string;
    account?: string;
    observations?: string;
    bank?: IEnumBank;
    ownerId?: IUUID;
    projectId?: IUUID;
    policeReceiptAccountStates: Array<IPoliceReceiptAccountState>;
    policeReceipts: Array<IPoliceReceipt>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPoliceReceiptAccountState {
    policeReceiptAccountId?: IUUID;
    policeReceiptId?: IUUID;
    policeReceipt?: IPoliceReceipt;
    policeReceiptAccount?: IPoliceReceiptAccount;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPoliceReceiptPayment {
    paymentMethod?: IEnumPoliceReceiptPaymentMethod;
    paymentDocument?: string;
    amount?: IDecimal;
    paymentDate?: IDateTime;
    ownerId?: IUUID;
    policeReceiptId?: IUUID;
    projectId?: IUUID;
    policeReceipt?: IPoliceReceipt;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IFormAutomobileDamage {
    brand?: string;
    model?: string;
    year?: number;
    version?: string;
    serial?: string;
    engine?: string;
    color?: string;
    licensePlates?: string;
    documentType?: IEnumPoliceDocumentType;
    ownerId?: IUUID;
    policeId?: IUUID;
    usage?: string;
    email?: string;
    beneficiaryAddress?: string;
    beneficiaryName?: string;
    beneficiaryRFC?: string;
    adjusment?: string;
    drive?: string;
    montAdjustment?: string;
    montSpecialTeam?: string;
    specialTeam?: string;
    service?: string;
    policyType?: IEnumAutoType;
    chargeType?: IEnumChargeType;
    procedencia?: IEnumProcedent;
    personalId?: IUUID;
    preferencialBeneficiary?: string;
    sumInsured?: string;
    carOwner?: string;
    noEmployee?: string;
    projectId?: IUUID;
    personalInformation?: IPersonalInformation;
    police?: IPolice;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IFormDamage {
    damageType?: IEnumFormDamageType;
    insuredItem?: string;
    itemAddress?: string;
    itemDetails?: string;
    coinsurance?: string;
    documentType?: IEnumPoliceDocumentType;
    ownerId?: IUUID;
    policeId?: IUUID;
    personalId?: IUUID;
    brand?: string;
    color?: string;
    constructionYear?: number;
    damOwner?: string;
    email?: string;
    engine?: string;
    fHMZone?: string;
    girp?: string;
    matricula?: string;
    model?: string;
    noEmployee?: string;
    noLevels?: number;
    permiso?: string;
    purchaseValue?: string;
    reconstructionYear?: number;
    serial?: string;
    sucursal?: string;
    tYEVZone?: string;
    typeConstruction?: IEnumConstructionType;
    usage?: string;
    version?: string;
    projectId?: IUUID;
    personalInformation?: IPersonalInformation;
    police?: IPolice;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ISinisterAiling {
    code?: string;
    description?: string;
    sinisterAccidents: Array<ISinisterAccident>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IContractorGroupingLevel {
    levelGrouping: number;
    description?: string;
    ownerId: IUUID;
    parentId?: IUUID;
    responsableId: IUUID;
    projectId: IUUID;
    groupingType?: IEnumContractorGroupingType;
    contractors: Array<Isaam_Contractor>;
    parent?: IContractorGroupingLevel;
    contractorGroupingLevels: Array<IContractorGroupingLevel>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IContractorCelula {
    celulaName?: string;
    description?: string;
    active?: boolean;
    projectId: IUUID;
    ownerId?: IUUID;
    contractors: Array<Isaam_Contractor>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IReferrer {
    memberId?: IUUID;
    projectId: IUUID;
    hiredDate: IDateTime;
    email?: string;
    address?: string;
    operationFactures?: string;
    paymentType?: IEnumReferrerPaymentType;
    paymentFrequency?: IEnumReferrerFrequency;
    referenceNumber?: string;
    bank?: IEnumBank;
    phones: Array<string>;
    referrerAccountStates: Array<IReferrerAccountState>;
    referrerBranches: Array<IReferrerBranch>;
    contractors: Array<Isaam_Contractor>;
    involvedReferrer?: IInvolvedReferrer;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IReferrerAccountState {
    projectId: IUUID;
    ownerId?: IUUID;
    folio?: string;
    total?: IDecimal;
    printDate: IDateTime;
    status?: IEnumReferrerAccountState;
    transactionNumber?: string;
    reasonReject?: string;
    observation?: string;
    referrerId: IUUID;
    referrer?: IReferrer;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IReferrerBranch {
    projectAgentProviderId: IUUID;
    projectAgentProviderBranchId: IUUID;
    referrerId: IUUID;
    comition?: IDecimal;
    referrer?: IReferrer;
    projectAgentProvider?: IProjectAgentProvider;
    projectAgentProviderBranch?: IProjectAgentProviderBranch;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInvolvedReferrer {
    comisionVendedor?: IDecimal;
    ownerId?: IUUID;
    policeId?: IUUID;
    referrerId?: IUUID;
    projectId?: IUUID;
    referrer?: IReferrer;
    police?: IPolice;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IContractorProcessDocument {
    delivered: boolean;
    validated: boolean;
    processDocumentId: IUUID;
    contractorId: IUUID;
    contractor?: Isaam_Contractor;
    processDocument?: IProcessDocument;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProcessDocument {
    name?: string;
    slug?: string;
    active: boolean;
    typeAgentProvider: Array<ITypeAgentProvider>;
    contractorProcessDocuments: Array<IContractorProcessDocument>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPoliceQuote {
    projectAgentProviderBranchId?: IUUID;
    ramoCode?: string;
    subRamoCode?: string;
    status?: IEnumPoliceQuoteStatus;
    firstName?: string;
    lastName?: string;
    secondLastName?: string;
    email?: string;
    phone?: string;
    car?: string;
    observations?: string;
    accidents?: string;
    damages?: string;
    life?: string;
    isComplete?: boolean;
    type?: string;
    ownerId?: IUUID;
    projectId: IUUID;
    mainParent: number;
    active: boolean;
    prospectId?: IUUID;
    agentProviders: Array<IUUID>;
    selectedAgentProvider: Array<IUUID>;
    contractorId?: IUUID;
    contractor?: Isaam_Contractor;
    projectAgentProviderBranch?: IProjectAgentProviderBranch;
    policeQuotePrimas?: Array<IPoliceQuotePrima>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPoliceQuotePrima {
    aseguradora?: string;
    prima?: string;
    checked: boolean;
    projectId: IUUID;
    policeQuoteId: IUUID;
    policeQuote?: IPoliceQuote;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPoliceAssign {
    isOwner?: boolean;
    active?: boolean;
    policeId: IUUID;
    memberId: IUUID;
    police?: IPolice;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPolicePendient {
    email?: string;
    isOwner?: boolean;
    active: boolean;
    policeId: IUUID;
    police?: IPolice;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IOldPolice {
    basePolicyId?: IUUID;
    ownerId?: IUUID;
    newPolicyId?: IUUID;
    projectId?: IUUID;
    basePolice?: IPolice;
    newPolice?: IPolice;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICoverageInPolicy {
    name?: string;
    sumInsured?: string;
    deductible?: string;
    prima?: string;
    coinsurance?: string;
    topecoinsurance?: string;
    priority?: number;
    ownerId: IUUID;
    projectId: IUUID;
    policyId: IUUID;
    packageId: IUUID;
    coveragePackage?: ICoveragePackage;
    police?: IPolice;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPoliceFile {
    url?: string;
    ownerId?: IUUID;
    projectId?: IUUID;
    name?: string;
    sensible?: boolean;
    shared?: boolean;
    documentType?: boolean;
    checked?: boolean;
    active?: boolean;
    folio?: string;
    baseModel?: string;
    height?: string;
    width?: string;
    policeId?: IUUID;
    police?: IPolice;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IComission {
    projectAgentProviderBranchId: IUUID;
    name?: string;
    amount: IDecimal;
    uDI: IDecimal;
    other: IDecimal;
    observations?: string;
    efectiveDate: IDateTime;
    expireDate: IDateTime;
    commisionRPF: IDecimal;
    otherRPF: IDecimal;
    rigth: IDecimal;
    otherRigths: IDecimal;
    initialPeriod: number;
    subSequentPeriod: number;
    anualRPF: IDecimal;
    bimestralRPF: IDecimal;
    mensualRPF: IDecimal;
    trimestralRPF: IDecimal;
    rigthUDI: IDecimal;
    rigthComission: IDecimal;
    keyId: IUUID;
    projectAgentProviderBranch?: IProjectAgentProviderBranch;
    agentKey?: IAgentKey;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerReminderProjectAgentProvider {
    insurerReminderId?: IUUID;
    projectAgentProviderId?: IUUID;
    projectId?: IUUID;
    insurerReminder?: IInsurerReminder;
    projectAgentProvider?: IProjectAgentProvider;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerReminder {
    name?: string;
    description?: string;
    sended: boolean;
    type?: IEnumInsurerReminderType;
    instanceType?: IEnumInsurerReminderInstanceType;
    reminderDate?: IDateTime;
    projectId?: IUUID;
    insurerReminderRecords: Array<IInsurerReminderRecord>;
    insurerReminderSubBranchs: Array<IInsurerReminderSubBranch>;
    insurerReminderProjectAgentProviders: Array<IInsurerReminderProjectAgentProvider>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerReminderRecord {
    insurerReminderId?: IUUID;
    seen?: boolean;
    projectId?: IUUID;
    recordId?: IUUID;
    recordModel?: IEnumInsurerCommentModel;
    insurerReminder?: IInsurerReminder;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerReminderSubBranch {
    insurerReminderId?: IUUID;
    subBranch?: number;
    projectId?: IUUID;
    insurerReminder?: IInsurerReminder;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProjectAgentProviderEmailReminder {
    model?: IEnumEmaiModel;
    text?: string;
    footer?: string;
    ownerId: IUUID;
    frequency?: IEnumEmailFrequency;
    ramoCode?: IEnumEmailRamo;
    policyType?: IEnumEmailType;
    chargeType?: IEnumEmailChargeType;
    dateType?: IEnumEmailDateType;
    projectAgentProviders: Array<IUUID>;
    subbranches: Array<IUUID>;
    projectAgentProviderId: IUUID;
    projectAgentProvider?: IProjectAgentProvider;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IBeneficiarieSortInput {
    firstName?: ISortEnumType;
    lastName?: ISortEnumType;
    secondLastName?: ISortEnumType;
    birthDate?: ISortEnumType;
    sex?: ISortEnumType;
    percentage?: ISortEnumType;
    optionalRelation?: ISortEnumType;
    lifeId?: ISortEnumType;
    ownerId?: ISortEnumType;
    fullName?: ISortEnumType;
    iSR?: ISortEnumType;
    procedente?: ISortEnumType;
    clause?: ISortEnumType;
    jName?: ISortEnumType;
    rFC?: ISortEnumType;
    active?: ISortEnumType;
    endorsementId?: ISortEnumType;
    antiquity?: ISortEnumType;
    projectId?: ISortEnumType;
    chargeDate?: ISortEnumType;
    dishargeDate?: ISortEnumType;
    formLife?: IFormLifeSortInput;
    endorsement?: IEndorsementSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IFormLifeSortInput {
    smoker?: ISortEnumType;
    documentType?: ISortEnumType;
    ownerId?: ISortEnumType;
    personalId?: ISortEnumType;
    policeId?: ISortEnumType;
    projectId?: ISortEnumType;
    beneficiarie?: IBeneficiarieSortInput;
    personalInformation?: IPersonalInformationSortInput;
    police?: IPoliceSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPersonalInformationSortInput {
    firstName?: ISortEnumType;
    lastName?: ISortEnumType;
    secondLastName?: ISortEnumType;
    birthDate?: ISortEnumType;
    sex?: ISortEnumType;
    ownerId?: ISortEnumType;
    fullName?: ISortEnumType;
    email?: ISortEnumType;
    salary?: ISortEnumType;
    sumAssured?: ISortEnumType;
    memberId?: ISortEnumType;
    antiquity?: ISortEnumType;
    policeId?: ISortEnumType;
    policyType?: ISortEnumType;
    typeSA?: ISortEnumType;
    certificate?: ISortEnumType;
    comision?: ISortEnumType;
    rigth?: ISortEnumType;
    iVA?: ISortEnumType;
    projectId?: ISortEnumType;
    pNeta?: ISortEnumType;
    pTotal?: ISortEnumType;
    rPF?: ISortEnumType;
    discount?: ISortEnumType;
    gastosInvestigacion?: ISortEnumType;
    subTotal?: ISortEnumType;
    chargeDate?: ISortEnumType;
    comisionEarned?: ISortEnumType;
    comisionPercentEarned?: ISortEnumType;
    rigthEarned?: ISortEnumType;
    discountEarned?: ISortEnumType;
    dischargeDate?: ISortEnumType;
    iVAEarned?: ISortEnumType;
    pNetaEarned?: ISortEnumType;
    pTotalEarned?: ISortEnumType;
    rPFEarned?: ISortEnumType;
    subTotalEarned?: ISortEnumType;
    endDate?: ISortEnumType;
    initDate?: ISortEnumType;
    comisionPaymentDate?: ISortEnumType;
    exchangeRate?: ISortEnumType;
    maquila?: ISortEnumType;
    bonoDdate?: ISortEnumType;
    maquilaDate?: ISortEnumType;
    facturaYear?: ISortEnumType;
    formAccidentDisease?: IFormAccidentDiseaseSortInput;
    formAutomobileDamage?: IFormAutomobileDamageSortInput;
    formDamage?: IFormDamageSortInput;
    formLife?: IFormLifeSortInput;
    police?: IPoliceSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IFormAccidentDiseaseSortInput {
    diseaseType?: ISortEnumType;
    coinsurance?: ISortEnumType;
    documentType?: ISortEnumType;
    ownerId?: ISortEnumType;
    personalId?: ISortEnumType;
    policeId?: ISortEnumType;
    projectId?: ISortEnumType;
    personalInformation?: IPersonalInformationSortInput;
    police?: IPoliceSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPoliceSortInput {
    number?: ISortEnumType;
    startValidity?: ISortEnumType;
    endValidity?: ISortEnumType;
    formaDePago?: ISortEnumType;
    status?: ISortEnumType;
    observations?: ISortEnumType;
    folio?: ISortEnumType;
    internalNumber?: ISortEnumType;
    documentType?: ISortEnumType;
    addressId?: ISortEnumType;
    aseguradoraId?: ISortEnumType;
    claveId?: ISortEnumType;
    ownerId?: ISortEnumType;
    packageId?: ISortEnumType;
    projectAgentProviderBranchId?: ISortEnumType;
    fCurrency?: ISortEnumType;
    identifier?: ISortEnumType;
    rigth?: ISortEnumType;
    iVA?: ISortEnumType;
    pNeta?: ISortEnumType;
    pTotal?: ISortEnumType;
    rPF?: ISortEnumType;
    comision?: ISortEnumType;
    administrationType?: ISortEnumType;
    caratule?: ISortEnumType;
    certificadoIncisoActivo?: ISortEnumType;
    certificateNumber?: ISortEnumType;
    comisionPercent?: ISortEnumType;
    hospitalLevel?: ISortEnumType;
    name?: ISortEnumType;
    parentId?: ISortEnumType;
    discount?: ISortEnumType;
    isRenewable?: ISortEnumType;
    reasonRen?: ISortEnumType;
    renewedStatus?: ISortEnumType;
    contact?: ISortEnumType;
    fechaBajaInciso?: ISortEnumType;
    reasonCancel?: ISortEnumType;
    receiptsBy?: ISortEnumType;
    responsableId?: ISortEnumType;
    comisionGiven?: ISortEnumType;
    recAntiquity?: ISortEnumType;
    collectionExecutiveId?: ISortEnumType;
    sucursalId?: ISortEnumType;
    subTotal?: ISortEnumType;
    trackBitacora?: ISortEnumType;
    accidentRate?: ISortEnumType;
    scheme?: ISortEnumType;
    steps?: ISortEnumType;
    totalReceipts?: ISortEnumType;
    conceptAnnulment?: ISortEnumType;
    deductible?: ISortEnumType;
    emisionDate?: ISortEnumType;
    emisionStatus?: ISortEnumType;
    fechaAnuencia?: ISortEnumType;
    fianzaTypeId?: ISortEnumType;
    gastoInvestigacion?: ISortEnumType;
    reasonRehabbilitate?: ISortEnumType;
    bussinessLine?: ISortEnumType;
    contratanteSubGroup?: ISortEnumType;
    celulaId?: ISortEnumType;
    groupingLevelId?: ISortEnumType;
    typePolicy?: ISortEnumType;
    conductoDePago?: ISortEnumType;
    tabulator?: ISortEnumType;
    bonoVariable?: ISortEnumType;
    hasProgramaDeProveedores?: ISortEnumType;
    contractorId?: ISortEnumType;
    programaDeProveedoresContractorId?: ISortEnumType;
    chargeDate?: ISortEnumType;
    comisionEarned?: ISortEnumType;
    comisionPercentEarned?: ISortEnumType;
    rigthEarned?: ISortEnumType;
    discountEarned?: ISortEnumType;
    ivaEarned?: ISortEnumType;
    pNetaEarned?: ISortEnumType;
    pTotalEarned?: ISortEnumType;
    rPFEarned?: ISortEnumType;
    subTotalEarned?: ISortEnumType;
    dateCancel?: ISortEnumType;
    amountCanceled?: ISortEnumType;
    stateCirculation?: ISortEnumType;
    fechaPagoComision?: ISortEnumType;
    dateEmitionFactura?: ISortEnumType;
    folioFactura?: ISortEnumType;
    monthFactura?: ISortEnumType;
    exchangeRate?: ISortEnumType;
    projectAgentProviderBranch?: IProjectAgentProviderBranchSortInput;
    agentKey?: IAgentKeySortInput;
    sucursal?: ISucursalSortInput;
    parent?: IPoliceSortInput;
    contractor?: IContractorSortInput;
    policeAssign?: IPoliceAssignSortInput;
    policePendient?: IPolicePendientSortInput;
    formAccidentDisease?: IFormAccidentDiseaseSortInput;
    formAutomobileDamage?: IFormAutomobileDamageSortInput;
    formDamage?: IFormDamageSortInput;
    formLife?: IFormLifeSortInput;
    personalInformation?: IPersonalInformationSortInput;
    involvedReferrer?: IInvolvedReferrerSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IProjectAgentProviderBranchSortInput {
    projectId?: ISortEnumType;
    projectAgentProviderId?: ISortEnumType;
    projectAgentProvider?: IProjectAgentProviderSortInput;
    branchId?: ISortEnumType;
    branch?: IBranchSortInput;
    subBranchId?: ISortEnumType;
    subBranch?: ISubBranchSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IBranchSortInput {
    branchName?: ISortEnumType;
    branchCode?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ISubBranchSortInput {
    subBranchName?: ISortEnumType;
    subBranchCode?: ISortEnumType;
    branchId?: ISortEnumType;
    branch?: IBranchSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ISucursalSortInput {
    name?: ISortEnumType;
    details?: ISortEnumType;
    ownerId?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IContractorSortInput {
    projectId?: ISortEnumType;
    firstName?: ISortEnumType;
    lastName?: ISortEnumType;
    secondLastName?: ISortEnumType;
    socialReason?: ISortEnumType;
    fullName?: ISortEnumType;
    gender?: ISortEnumType;
    birthDate?: ISortEnumType;
    phoneNumber?: ISortEnumType;
    rFC?: ISortEnumType;
    description?: ISortEnumType;
    email?: ISortEnumType;
    active?: ISortEnumType;
    contractorType?: ISortEnumType;
    sucursalId?: ISortEnumType;
    contractorClassificationId?: ISortEnumType;
    contractorClassification?: IContractorClassificationSortInput;
    contractorGroupId?: ISortEnumType;
    contractorGroup?: IContractorGroupSortInput;
    contractorGroupingLevelId?: ISortEnumType;
    contractorGroupingLevel?: IContractorGroupingLevelSortInput;
    contractorCelulaId?: ISortEnumType;
    contractorCelula?: IContractorCelulaSortInput;
    ownerId?: ISortEnumType;
    memberId?: ISortEnumType;
    responsableId?: ISortEnumType;
    referrerId?: ISortEnumType;
    referrer?: IReferrerSortInput;
    sucursal?: ISucursalSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IContractorClassificationSortInput {
    name?: ISortEnumType;
    description?: ISortEnumType;
    projectId?: ISortEnumType;
    ownerId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IContractorGroupSortInput {
    name?: ISortEnumType;
    description?: ISortEnumType;
    ownerId?: ISortEnumType;
    parentId?: ISortEnumType;
    responsableId?: ISortEnumType;
    groupType?: ISortEnumType;
    parent?: IContractorGroupSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IContractorGroupingLevelSortInput {
    levelGrouping?: ISortEnumType;
    description?: ISortEnumType;
    ownerId?: ISortEnumType;
    parentId?: ISortEnumType;
    responsableId?: ISortEnumType;
    projectId?: ISortEnumType;
    groupingType?: ISortEnumType;
    parent?: IContractorGroupingLevelSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IContractorCelulaSortInput {
    celulaName?: ISortEnumType;
    description?: ISortEnumType;
    active?: ISortEnumType;
    projectId?: ISortEnumType;
    ownerId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IReferrerSortInput {
    memberId?: ISortEnumType;
    projectId?: ISortEnumType;
    hiredDate?: ISortEnumType;
    email?: ISortEnumType;
    address?: ISortEnumType;
    operationFactures?: ISortEnumType;
    paymentType?: ISortEnumType;
    paymentFrequency?: ISortEnumType;
    referenceNumber?: ISortEnumType;
    bank?: ISortEnumType;
    involvedReferrer?: IInvolvedReferrerSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInvolvedReferrerSortInput {
    comisionVendedor?: ISortEnumType;
    ownerId?: ISortEnumType;
    policeId?: ISortEnumType;
    referrerId?: ISortEnumType;
    projectId?: ISortEnumType;
    referrer?: IReferrerSortInput;
    police?: IPoliceSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPoliceAssignSortInput {
    isOwner?: ISortEnumType;
    active?: ISortEnumType;
    policeId?: ISortEnumType;
    memberId?: ISortEnumType;
    police?: IPoliceSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPolicePendientSortInput {
    email?: ISortEnumType;
    isOwner?: ISortEnumType;
    active?: ISortEnumType;
    policeId?: ISortEnumType;
    police?: IPoliceSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IFormAutomobileDamageSortInput {
    brand?: ISortEnumType;
    model?: ISortEnumType;
    year?: ISortEnumType;
    version?: ISortEnumType;
    serial?: ISortEnumType;
    engine?: ISortEnumType;
    color?: ISortEnumType;
    licensePlates?: ISortEnumType;
    documentType?: ISortEnumType;
    ownerId?: ISortEnumType;
    policeId?: ISortEnumType;
    usage?: ISortEnumType;
    email?: ISortEnumType;
    beneficiaryAddress?: ISortEnumType;
    beneficiaryName?: ISortEnumType;
    beneficiaryRFC?: ISortEnumType;
    adjusment?: ISortEnumType;
    drive?: ISortEnumType;
    montAdjustment?: ISortEnumType;
    montSpecialTeam?: ISortEnumType;
    specialTeam?: ISortEnumType;
    service?: ISortEnumType;
    policyType?: ISortEnumType;
    chargeType?: ISortEnumType;
    procedencia?: ISortEnumType;
    personalId?: ISortEnumType;
    preferencialBeneficiary?: ISortEnumType;
    sumInsured?: ISortEnumType;
    carOwner?: ISortEnumType;
    noEmployee?: ISortEnumType;
    projectId?: ISortEnumType;
    personalInformation?: IPersonalInformationSortInput;
    police?: IPoliceSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IFormDamageSortInput {
    damageType?: ISortEnumType;
    insuredItem?: ISortEnumType;
    itemAddress?: ISortEnumType;
    itemDetails?: ISortEnumType;
    coinsurance?: ISortEnumType;
    documentType?: ISortEnumType;
    ownerId?: ISortEnumType;
    policeId?: ISortEnumType;
    personalId?: ISortEnumType;
    brand?: ISortEnumType;
    color?: ISortEnumType;
    constructionYear?: ISortEnumType;
    damOwner?: ISortEnumType;
    email?: ISortEnumType;
    engine?: ISortEnumType;
    fHMZone?: ISortEnumType;
    girp?: ISortEnumType;
    matricula?: ISortEnumType;
    model?: ISortEnumType;
    noEmployee?: ISortEnumType;
    noLevels?: ISortEnumType;
    permiso?: ISortEnumType;
    purchaseValue?: ISortEnumType;
    reconstructionYear?: ISortEnumType;
    serial?: ISortEnumType;
    sucursal?: ISortEnumType;
    tYEVZone?: ISortEnumType;
    typeConstruction?: ISortEnumType;
    usage?: ISortEnumType;
    version?: ISortEnumType;
    projectId?: ISortEnumType;
    personalInformation?: IPersonalInformationSortInput;
    police?: IPoliceSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IEndorsementSortInput {
    type?: ISortEnumType;
    status?: ISortEnumType;
    initDate?: ISortEnumType;
    endDate?: ISortEnumType;
    numberEndorsement?: ISortEnumType;
    internalNumber?: ISortEnumType;
    concept?: ISortEnumType;
    otherDesc?: ISortEnumType;
    original?: ISortEnumType;
    change?: ISortEnumType;
    observations?: ISortEnumType;
    pNeta?: ISortEnumType;
    rPF?: ISortEnumType;
    rigth?: ISortEnumType;
    iVA?: ISortEnumType;
    pTotal?: ISortEnumType;
    comision?: ISortEnumType;
    ownerId?: ISortEnumType;
    policeId?: ISortEnumType;
    comisionPercent?: ISortEnumType;
    anuency?: ISortEnumType;
    projectId?: ISortEnumType;
    discount?: ISortEnumType;
    researchCost?: ISortEnumType;
    comisionPercentEarned?: ISortEnumType;
    discoutnEarned?: ISortEnumType;
    iVaEarned?: ISortEnumType;
    pNETAEarned?: ISortEnumType;
    pTotalEarned?: ISortEnumType;
    rPFEarned?: ISortEnumType;
    subTotalEarned?: ISortEnumType;
    insuranceFolio?: ISortEnumType;
    comitionPatmentDate?: ISortEnumType;
    exchangeRate?: ISortEnumType;
    maquila?: ISortEnumType;
    bonoDate?: ISortEnumType;
    variableBono?: ISortEnumType;
    emisionFacturaDate?: ISortEnumType;
    maquilaDate?: ISortEnumType;
    folioFactura?: ISortEnumType;
    monthFactura?: ISortEnumType;
    fechaEntrega?: ISortEnumType;
    police?: IPoliceSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IBeneficiarieCollectionSegment {
    items?: Array<IBeneficiarie>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IFormAccidentDiseaseCollectionSegment {
    items?: Array<IFormAccidentDisease>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IFormAutomobileDamageCollectionSegment {
    items?: Array<IFormAutomobileDamage>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IFormCarCatalogFilterInput {
    and?: Array<IFormCarCatalogFilterInput>;
    or?: Array<IFormCarCatalogFilterInput>;
    carModel?: IStringOperationFilterInput;
    carBrand?: IStringOperationFilterInput;
    carYear?: IComparableNullableOfInt32OperationFilterInput;
    description?: IStringOperationFilterInput;
    carSubbrand?: IStringOperationFilterInput;
    shortDescription?: IStringOperationFilterInput;
    carType?: IStringOperationFilterInput;
    carOccupants?: IComparableNullableOfInt32OperationFilterInput;
    carClass?: IComparableNullableOfInt32OperationFilterInput;
    carSearch?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IFormCarCatalogSortInput {
    carModel?: ISortEnumType;
    carBrand?: ISortEnumType;
    carYear?: ISortEnumType;
    description?: ISortEnumType;
    carSubbrand?: ISortEnumType;
    shortDescription?: ISortEnumType;
    carType?: ISortEnumType;
    carOccupants?: ISortEnumType;
    carClass?: ISortEnumType;
    carSearch?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IFormCarCatalogCollectionSegment {
    items?: Array<IFormCarCatalog>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IFormCarCatalog {
    carModel?: string;
    carBrand?: string;
    carYear?: number;
    description?: string;
    carSubbrand?: string;
    shortDescription?: string;
    carType?: string;
    carOccupants?: number;
    carClass?: number;
    carSearch?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IFormDamageCollectionSegment {
    items?: Array<IFormDamage>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IFormLifeCollectionSegment {
    items?: Array<IFormLife>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInvolvedReferrerCollectionSegment {
    items?: Array<IInvolvedReferrer>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IOldPoliceSortInput {
    basePolicyId?: ISortEnumType;
    ownerId?: ISortEnumType;
    newPolicyId?: ISortEnumType;
    projectId?: ISortEnumType;
    basePolice?: IPoliceSortInput;
    newPolice?: IPoliceSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IOldPoliceCollectionSegment {
    items?: Array<IOldPolice>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IPersonalInformationCollectionSegment {
    items?: Array<IPersonalInformation>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IPoliceCollectionSegment {
    items?: Array<IPolice>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IPoliceAssignCollectionSegment {
    items?: Array<IPoliceAssign>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IPolicePendientCollectionSegment {
    items?: Array<IPolicePendient>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IPoliceQuoteSortInput {
    projectAgentProviderBranchId?: ISortEnumType;
    ramoCode?: ISortEnumType;
    subRamoCode?: ISortEnumType;
    status?: ISortEnumType;
    firstName?: ISortEnumType;
    lastName?: ISortEnumType;
    secondLastName?: ISortEnumType;
    email?: ISortEnumType;
    phone?: ISortEnumType;
    car?: ISortEnumType;
    observations?: ISortEnumType;
    accidents?: ISortEnumType;
    damages?: ISortEnumType;
    life?: ISortEnumType;
    isComplete?: ISortEnumType;
    type?: ISortEnumType;
    ownerId?: ISortEnumType;
    projectId?: ISortEnumType;
    mainParent?: ISortEnumType;
    active?: ISortEnumType;
    prospectId?: ISortEnumType;
    contractorId?: ISortEnumType;
    contractor?: IContractorSortInput;
    projectAgentProviderBranch?: IProjectAgentProviderBranchSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPoliceQuoteCollectionSegment {
    items?: Array<IPoliceQuote>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IPoliceQuotePrimaSortInput {
    aseguradora?: ISortEnumType;
    prima?: ISortEnumType;
    checked?: ISortEnumType;
    projectId?: ISortEnumType;
    policeQuoteId?: ISortEnumType;
    policeQuote?: IPoliceQuoteSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPoliceQuotePrimaCollectionSegment {
    items?: Array<IPoliceQuotePrima>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IRelationShipSortInput {
    firstName?: ISortEnumType;
    lastName?: ISortEnumType;
    secondLastName?: ISortEnumType;
    birthDate?: ISortEnumType;
    sex?: ISortEnumType;
    relationship?: ISortEnumType;
    accidentId?: ISortEnumType;
    ownerId?: ISortEnumType;
    fullName?: ISortEnumType;
    isActive?: ISortEnumType;
    endorsementId?: ISortEnumType;
    antiquity?: ISortEnumType;
    certificate?: ISortEnumType;
    comision?: ISortEnumType;
    rigth?: ISortEnumType;
    iVA?: ISortEnumType;
    projectId?: ISortEnumType;
    pNeta?: ISortEnumType;
    pTotal?: ISortEnumType;
    rPF?: ISortEnumType;
    discount?: ISortEnumType;
    gastosInvestigacion?: ISortEnumType;
    subTotal?: ISortEnumType;
    chargeDate?: ISortEnumType;
    comisionEarned?: ISortEnumType;
    comisionPercentEarned?: ISortEnumType;
    rigthEarned?: ISortEnumType;
    discountEarned?: ISortEnumType;
    dischangeDate?: ISortEnumType;
    iVAEarned?: ISortEnumType;
    pNetaEarned?: ISortEnumType;
    pTotalEarned?: ISortEnumType;
    rPFEarned?: ISortEnumType;
    subTotalEarned?: ISortEnumType;
    comisionPaymentDate?: ISortEnumType;
    exchangeRate?: ISortEnumType;
    maquila?: ISortEnumType;
    bonoDate?: ISortEnumType;
    maquilaDate?: ISortEnumType;
    facturaYear?: ISortEnumType;
    formAccidentDisease?: IFormAccidentDiseaseSortInput;
    endorsement?: IEndorsementSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IRelationShipCollectionSegment {
    items?: Array<IRelationShip>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ISucursalCollectionSegment {
    items?: Array<ISucursal>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IEndorsementCollectionSegment {
    items?: Array<IEndorsement>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IEndorsementCertSortInput {
    proceed?: ISortEnumType;
    certificate?: ISortEnumType;
    endorsementId?: ISortEnumType;
    projectId?: ISortEnumType;
    beneficiarieId?: ISortEnumType;
    relationShipId?: ISortEnumType;
    endorsement?: IEndorsementSortInput;
    beneficiarie?: IBeneficiarieSortInput;
    relationShip?: IRelationShipSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IEndorsementCertCollectionSegment {
    items?: Array<IEndorsementCert>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ISinisterSortInput {
    companyFolio?: ISortEnumType;
    internFolio?: ISortEnumType;
    status?: ISortEnumType;
    promiseDate?: ISortEnumType;
    affectedItem?: ISortEnumType;
    sinisterNumber?: ISortEnumType;
    sinisterDate?: ISortEnumType;
    typeSinisterGeneral?: ISortEnumType;
    reason?: ISortEnumType;
    observations?: ISortEnumType;
    ownerId?: ISortEnumType;
    policeId?: ISortEnumType;
    ingressDate?: ISortEnumType;
    affectedAux?: ISortEnumType;
    compromiseDate?: ISortEnumType;
    affectedAuxRelationShip?: ISortEnumType;
    insurerZipCodeSepomexId?: ISortEnumType;
    date?: ISortEnumType;
    projectId?: ISortEnumType;
    terminationDate?: ISortEnumType;
    fileLoadedDate?: ISortEnumType;
    police?: IPoliceSortInput;
    insurerZipCodeSepomex?: IInsurerZipCodeSepomexSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerZipCodeSepomexSortInput {
    zipCode?: ISortEnumType;
    colony?: ISortEnumType;
    city?: ISortEnumType;
    state?: ISortEnumType;
    code?: ISortEnumType;
    cityId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ISinisterCollectionSegment {
    items?: Array<ISinister>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ISinisterAccidentSortInput {
    relationShip?: ISortEnumType;
    kindSinister?: ISortEnumType;
    sinisterReason?: ISortEnumType;
    sinisterComplement?: ISortEnumType;
    sinisterType?: ISortEnumType;
    paymentType?: ISortEnumType;
    totalPayment?: ISortEnumType;
    totalProcedent?: ISortEnumType;
    totalCoaseguro?: ISortEnumType;
    totalDeductible?: ISortEnumType;
    totalFinal?: ISortEnumType;
    initial?: ISortEnumType;
    receiptStatus?: ISortEnumType;
    dependientId?: ISortEnumType;
    sinisterAilingId?: ISortEnumType;
    sinisterId?: ISortEnumType;
    titularId?: ISortEnumType;
    ailment?: ISortEnumType;
    anesthesiologist?: ISortEnumType;
    helper?: ISortEnumType;
    surgeon?: ISortEnumType;
    coasHonorarios?: ISortEnumType;
    coasHospital?: ISortEnumType;
    dedHonorarios?: ISortEnumType;
    dedHospital?: ISortEnumType;
    montoHonorarios?: ISortEnumType;
    montoHospital?: ISortEnumType;
    others?: ISortEnumType;
    surgeryDate?: ISortEnumType;
    hospital?: ISortEnumType;
    affectedFullName?: ISortEnumType;
    complementConsecutiveNumber?: ISortEnumType;
    initialAccidentId?: ISortEnumType;
    projectId?: ISortEnumType;
    sinister?: ISinisterSortInput;
    personalInformation?: IPersonalInformationSortInput;
    dependient?: IRelationShipSortInput;
    initialAccident?: ISinisterAccidentSortInput;
    sinisterAiling?: ISinisterAilingSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ISinisterAilingSortInput {
    code?: ISortEnumType;
    description?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ISinisterAccidentCollectionSegment {
    items?: Array<ISinisterAccident>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ISinisterAilingCollectionSegment {
    items?: Array<ISinisterAiling>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ISinisterCarSortInput {
    typeSinister?: ISortEnumType;
    explication?: ISortEnumType;
    third?: ISortEnumType;
    imdemnization?: ISortEnumType;
    sinisterId?: ISortEnumType;
    driver?: ISortEnumType;
    coaseguro?: ISortEnumType;
    deductible?: ISortEnumType;
    projectId?: ISortEnumType;
    firstSubTypeSinister?: ISortEnumType;
    secondSubTypeSinister?: ISortEnumType;
    sinister?: ISinisterSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ISinisterCarCollectionSegment {
    items?: Array<ISinisterCar>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ISinisterCarContactSortInput {
    firstName?: ISortEnumType;
    lastName?: ISortEnumType;
    secondLastName?: ISortEnumType;
    phone?: ISortEnumType;
    email?: ISortEnumType;
    references?: ISortEnumType;
    sinisterCarId?: ISortEnumType;
    projectId?: ISortEnumType;
    sinisterCar?: ISinisterCarSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ISinisterCarContactCollectionSegment {
    items?: Array<ISinisterCarContact>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ISinisterDamageSortInput {
    insuredProperty?: ISortEnumType;
    lossEstimate?: ISortEnumType;
    claimCause?: ISortEnumType;
    affectedCoverage?: ISortEnumType;
    indemnization?: ISortEnumType;
    totalClaim?: ISortEnumType;
    sinisterId?: ISortEnumType;
    currency?: ISortEnumType;
    exchangeRate?: ISortEnumType;
    totalCoaseguro?: ISortEnumType;
    totalDeductible?: ISortEnumType;
    projectId?: ISortEnumType;
    sinister?: ISinisterSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ISinisterDamageCollectionSegment {
    items?: Array<ISinisterDamage>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ISinisterDamageContactSortInput {
    firstName?: ISortEnumType;
    lastName?: ISortEnumType;
    secondLastName?: ISortEnumType;
    phone?: ISortEnumType;
    email?: ISortEnumType;
    references?: ISortEnumType;
    sinisterDamageId?: ISortEnumType;
    projectId?: ISortEnumType;
    sinisterDamage?: ISinisterDamageSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ISinisterDamageContactCollectionSegment {
    items?: Array<ISinisterDamageContact>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ISinisterFacturaSortInput {
    facturaNumber?: ISortEnumType;
    provider?: ISortEnumType;
    facturaDate?: ISortEnumType;
    import?: ISortEnumType;
    iVA?: ISortEnumType;
    total?: ISortEnumType;
    procedent?: ISortEnumType;
    observations?: ISortEnumType;
    sinisterId?: ISortEnumType;
    concept?: ISortEnumType;
    serie?: ISortEnumType;
    projectId?: ISortEnumType;
    sinister?: ISinisterSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ISinisterFacturaCollectionSegment {
    items?: Array<ISinisterFactura>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ISinisterHospitalFilterInput {
    and?: Array<ISinisterHospitalFilterInput>;
    or?: Array<ISinisterHospitalFilterInput>;
    description?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ISinisterHospitalSortInput {
    description?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ISinisterHospitalCollectionSegment {
    items?: Array<ISinisterHospital>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ISinisterHospital {
    description?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ISinisterLifeSortInput {
    sinisterReason?: ISortEnumType;
    paymentType?: ISortEnumType;
    sinisterId?: ISortEnumType;
    affectedName?: ISortEnumType;
    relationAffected?: ISortEnumType;
    projectId?: ISortEnumType;
    sinister?: ISinisterSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ISinisterLifeCollectionSegment {
    items?: Array<ISinisterLife>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ISinisterLifeContactFilterInput {
    and?: Array<ISinisterLifeContactFilterInput>;
    or?: Array<ISinisterLifeContactFilterInput>;
    firstName?: IStringOperationFilterInput;
    lastName?: IStringOperationFilterInput;
    secondLastName?: IStringOperationFilterInput;
    phone?: IStringOperationFilterInput;
    email?: IStringOperationFilterInput;
    references?: IStringOperationFilterInput;
    sinisterLifeId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    sinisterLife?: ISinisterLifeFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ISinisterLifeContactSortInput {
    firstName?: ISortEnumType;
    lastName?: ISortEnumType;
    secondLastName?: ISortEnumType;
    phone?: ISortEnumType;
    email?: ISortEnumType;
    references?: ISortEnumType;
    sinisterLifeId?: ISortEnumType;
    projectId?: ISortEnumType;
    sinisterLife?: ISinisterLifeSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ISinisterLifeContactCollectionSegment {
    items?: Array<ISinisterLifeContact>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ISinisterLifeContact {
    firstName?: string;
    lastName?: string;
    secondLastName?: string;
    phone?: string;
    email?: string;
    references?: string;
    sinisterLifeId?: IUUID;
    projectId?: IUUID;
    sinisterLife?: ISinisterLife;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPoliceReceiptSortInput {
    number?: ISortEnumType;
    primaNeta?: ISortEnumType;
    rPF?: ISortEnumType;
    right?: ISortEnumType;
    iVA?: ISortEnumType;
    subTotal?: ISortEnumType;
    primaTotal?: ISortEnumType;
    status?: ISortEnumType;
    startDate?: ISortEnumType;
    endDate?: ISortEnumType;
    description?: ISortEnumType;
    folio?: ISortEnumType;
    type?: ISortEnumType;
    payForm?: ISortEnumType;
    paymentDocument?: ISortEnumType;
    isCopy?: ISortEnumType;
    isActive?: ISortEnumType;
    bank?: ISortEnumType;
    ownerId?: ISortEnumType;
    policeId?: ISortEnumType;
    comision?: ISortEnumType;
    validityDate?: ISortEnumType;
    reconciledComision?: ISortEnumType;
    reconciledDate?: ISortEnumType;
    reconciledObservation?: ISortEnumType;
    settlementFolio?: ISortEnumType;
    reconciledFolio?: ISortEnumType;
    settlementDate?: ISortEnumType;
    reconcilationAccountId?: ISortEnumType;
    paymentDate?: ISortEnumType;
    endorsementId?: ISortEnumType;
    delivered?: ISortEnumType;
    paymentFolio?: ISortEnumType;
    settlementBank?: ISortEnumType;
    settlementCurrRate?: ISortEnumType;
    settlementDoc?: ISortEnumType;
    settlementForm?: ISortEnumType;
    excedent?: ISortEnumType;
    agentProviderBonoId?: ISortEnumType;
    changeReferrerComision?: ISortEnumType;
    referrerComosion?: ISortEnumType;
    binnacleTrack?: ISortEnumType;
    emailTrack?: ISortEnumType;
    phoneTrack?: ISortEnumType;
    referrerClosedNew?: ISortEnumType;
    memberPaymentId?: ISortEnumType;
    paymentPromise?: ISortEnumType;
    researchCost?: ISortEnumType;
    projectId?: ISortEnumType;
    conductPayment?: ISortEnumType;
    exchangeRate?: ISortEnumType;
    manualSerie?: ISortEnumType;
    settlementMethod?: ISortEnumType;
    memberSettlementId?: ISortEnumType;
    police?: IPoliceSortInput;
    endorsement?: IEndorsementSortInput;
    policeReceiptAccount?: IPoliceReceiptAccountSortInput;
    agentProviderbono?: IAgentProviderBonoSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPoliceReceiptAccountSortInput {
    name?: ISortEnumType;
    account?: ISortEnumType;
    observations?: ISortEnumType;
    bank?: ISortEnumType;
    ownerId?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPoliceReceiptCollectionSegment {
    items?: Array<IPoliceReceipt>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IPoliceReceiptAccountCollectionSegment {
    items?: Array<IPoliceReceiptAccount>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IPoliceReceiptAccountStateSortInput {
    policeReceiptAccountId?: ISortEnumType;
    policeReceiptId?: ISortEnumType;
    policeReceipt?: IPoliceReceiptSortInput;
    policeReceiptAccount?: IPoliceReceiptAccountSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPoliceReceiptAccountStateCollectionSegment {
    items?: Array<IPoliceReceiptAccountState>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IPoliceReceiptFolioFilterInput {
    and?: Array<IPoliceReceiptFolioFilterInput>;
    or?: Array<IPoliceReceiptFolioFilterInput>;
    paymentMethod?: INullableOfEnumPoliceReceiptFolioPaymentMethodOperationFilterInput;
    paymentDocument?: IStringOperationFilterInput;
    currentRate?: IComparableNullableOfInt32OperationFilterInput;
    paymentDate?: IComparableNullableOfDateTimeOperationFilterInput;
    folio?: IStringOperationFilterInput;
    bank?: INullableOfEnumBankOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumPoliceReceiptFolioPaymentMethodOperationFilterInput {
    eq?: IEnumPoliceReceiptFolioPaymentMethod;
    neq?: IEnumPoliceReceiptFolioPaymentMethod;
    in?: Array<IEnumPoliceReceiptFolioPaymentMethod | null>;
    nin?: Array<IEnumPoliceReceiptFolioPaymentMethod | null>;
}
export declare const enum IEnumPoliceReceiptFolioPaymentMethod {
    CHECK = "CHECK",
    CASH = "CASH",
    TRANSFER = "TRANSFER",
    BANK_DEPOSIT = "BANK_DEPOSIT",
    CREDIT_CARD = "CREDIT_CARD",
    DEBIT_CARD = "DEBIT_CARD",
    ACCOUNT_STATUS = "ACCOUNT_STATUS",
    COMPANY = "COMPANY",
    UNKNOWN = "UNKNOWN"
}
export interface IPoliceReceiptFolioSortInput {
    paymentMethod?: ISortEnumType;
    paymentDocument?: ISortEnumType;
    currentRate?: ISortEnumType;
    paymentDate?: ISortEnumType;
    folio?: ISortEnumType;
    bank?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPoliceReceiptFolioCollectionSegment {
    items?: Array<IPoliceReceiptFolio>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IPoliceReceiptFolio {
    paymentMethod?: IEnumPoliceReceiptFolioPaymentMethod;
    paymentDocument?: string;
    currentRate?: number;
    paymentDate?: IDateTime;
    folio?: string;
    bank?: IEnumBank;
    projectId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPoliceReceiptPaymentSortInput {
    paymentMethod?: ISortEnumType;
    paymentDocument?: ISortEnumType;
    amount?: ISortEnumType;
    paymentDate?: ISortEnumType;
    ownerId?: ISortEnumType;
    policeReceiptId?: ISortEnumType;
    projectId?: ISortEnumType;
    policeReceipt?: IPoliceReceiptSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPoliceReceiptPaymentCollectionSegment {
    items?: Array<IPoliceReceiptPayment>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IPoliceFileSortInput {
    url?: ISortEnumType;
    ownerId?: ISortEnumType;
    projectId?: ISortEnumType;
    name?: ISortEnumType;
    sensible?: ISortEnumType;
    shared?: ISortEnumType;
    documentType?: ISortEnumType;
    checked?: ISortEnumType;
    active?: ISortEnumType;
    folio?: ISortEnumType;
    baseModel?: ISortEnumType;
    height?: ISortEnumType;
    width?: ISortEnumType;
    policeId?: ISortEnumType;
    police?: IPoliceSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPoliceFileCollectionSegment {
    items?: Array<IPoliceFile>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerCommentFilterInput {
    and?: Array<IInsurerCommentFilterInput>;
    or?: Array<IInsurerCommentFilterInput>;
    model?: INullableOfEnumInsurerCommentModelOperationFilterInput;
    modelId?: IComparableNullableOfGuidOperationFilterInput;
    content?: IStringOperationFilterInput;
    isChild?: IBooleanOperationFilterInput;
    memberId?: IComparableNullableOfGuidOperationFilterInput;
    hasReminder?: IBooleanOperationFilterInput;
    reminderDate?: IComparableNullableOfDateTimeOperationFilterInput;
    taskModel?: IStringOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    parentId?: IComparableNullableOfGuidOperationFilterInput;
    parent?: IInsurerCommentFilterInput;
    insurerComments?: IListFilterInputTypeOfInsurerCommentFilterInput;
    insurerLogEmails?: IListFilterInputTypeOfInsurerLogEmailFilterInput;
    insurerTickets?: IListFilterInputTypeOfInsurerTicketFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfInsurerCommentFilterInput {
    all?: IInsurerCommentFilterInput;
    none?: IInsurerCommentFilterInput;
    some?: IInsurerCommentFilterInput;
    any?: boolean;
}
export interface IListFilterInputTypeOfInsurerLogEmailFilterInput {
    all?: IInsurerLogEmailFilterInput;
    none?: IInsurerLogEmailFilterInput;
    some?: IInsurerLogEmailFilterInput;
    any?: boolean;
}
export interface IInsurerLogEmailFilterInput {
    and?: Array<IInsurerLogEmailFilterInput>;
    or?: Array<IInsurerLogEmailFilterInput>;
    moldel?: INullableOfEnumInsurerCommentModelOperationFilterInput;
    associatedId?: IStringOperationFilterInput;
    to?: IListStringOperationFilterInput;
    cC?: IListStringOperationFilterInput;
    cCO?: IListStringOperationFilterInput;
    subject?: IStringOperationFilterInput;
    body?: IStringOperationFilterInput;
    file?: IStringOperationFilterInput;
    insurerCommentId?: IComparableNullableOfGuidOperationFilterInput;
    insurerLogId?: IComparableNullableOfGuidOperationFilterInput;
    insurerComment?: IInsurerCommentFilterInput;
    insurerLog?: IInsurerLogFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IInsurerLogFilterInput {
    and?: Array<IInsurerLogFilterInput>;
    or?: Array<IInsurerLogFilterInput>;
    moldel?: INullableOfEnumInsurerCommentModelOperationFilterInput;
    event?: INullableOfEnumInsurerLogEventOperationFilterInput;
    associatedId?: IStringOperationFilterInput;
    identifier?: IStringOperationFilterInput;
    memberId?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    original?: IStringOperationFilterInput;
    change?: IStringOperationFilterInput;
    insurerLogEmails?: IListFilterInputTypeOfInsurerLogEmailFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumInsurerLogEventOperationFilterInput {
    eq?: IEnumInsurerLogEvent;
    neq?: IEnumInsurerLogEvent;
    in?: Array<IEnumInsurerLogEvent | null>;
    nin?: Array<IEnumInsurerLogEvent | null>;
}
export declare const enum IEnumInsurerLogEvent {
    CREATE = "CREATE",
    DELETE = "DELETE",
    UPDATE = "UPDATE",
    CANCEL = "CANCEL"
}
export interface IListFilterInputTypeOfInsurerTicketFilterInput {
    all?: IInsurerTicketFilterInput;
    none?: IInsurerTicketFilterInput;
    some?: IInsurerTicketFilterInput;
    any?: boolean;
}
export interface IInsurerTicketFilterInput {
    and?: Array<IInsurerTicketFilterInput>;
    or?: Array<IInsurerTicketFilterInput>;
    title?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    date?: IComparableNullableOfDateTimeOperationFilterInput;
    priority?: INullableOfEnumInsurerTicketPriorityOperationFilterInput;
    closeDay?: IComparableNullableOfDateTimeOperationFilterInput;
    closed?: IBooleanOperationFilterInput;
    identifier?: IStringOperationFilterInput;
    assignedId?: IComparableNullableOfGuidOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    archived?: IBooleanOperationFilterInput;
    associated?: IStringOperationFilterInput;
    model?: IComparableNullableOfInt32OperationFilterInput;
    route?: IStringOperationFilterInput;
    concept?: INullableOfEnumInsurerTicketConceptOperationFilterInput;
    insurerCommentId?: IComparableNullableOfGuidOperationFilterInput;
    closedBy?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    reassingBy?: IComparableNullableOfGuidOperationFilterInput;
    reassignDate?: IComparableNullableOfDateTimeOperationFilterInput;
    insurerComment?: IInsurerCommentFilterInput;
    insurerInvolved?: IListFilterInputTypeOfInsurerInvolvedFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumInsurerTicketPriorityOperationFilterInput {
    eq?: IEnumInsurerTicketPriority;
    neq?: IEnumInsurerTicketPriority;
    in?: Array<IEnumInsurerTicketPriority | null>;
    nin?: Array<IEnumInsurerTicketPriority | null>;
}
export declare const enum IEnumInsurerTicketPriority {
    LOW = "LOW",
    MEDIUM = "MEDIUM",
    HIGH = "HIGH"
}
export interface INullableOfEnumInsurerTicketConceptOperationFilterInput {
    eq?: IEnumInsurerTicketConcept;
    neq?: IEnumInsurerTicketConcept;
    in?: Array<IEnumInsurerTicketConcept | null>;
    nin?: Array<IEnumInsurerTicketConcept | null>;
}
export declare const enum IEnumInsurerTicketConcept {
    ENDORSEMENT = "ENDORSEMENT",
    EMISSION = "EMISSION",
    QUOTE = "QUOTE",
    CORRECTION = "CORRECTION",
    CANCELATION = "CANCELATION",
    RENEW = "RENEW",
    ANOTHER = "ANOTHER",
    REFUND = "REFUND",
    SURGERY_SCHEDULING = "SURGERY_SCHEDULING",
    B_ENDORSEMENT = "B_ENDORSEMENT",
    D_ENDORSEMENT = "D_ENDORSEMENT",
    RECOGNITION_ANTIQUITY = "RECOGNITION_ANTIQUITY",
    ANTIQUITY_LETTER = "ANTIQUITY_LETTER"
}
export interface IListFilterInputTypeOfInsurerInvolvedFilterInput {
    all?: IInsurerInvolvedFilterInput;
    none?: IInsurerInvolvedFilterInput;
    some?: IInsurerInvolvedFilterInput;
    any?: boolean;
}
export interface IInsurerInvolvedFilterInput {
    and?: Array<IInsurerInvolvedFilterInput>;
    or?: Array<IInsurerInvolvedFilterInput>;
    involvedId?: IComparableNullableOfGuidOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    personId?: IComparableNullableOfGuidOperationFilterInput;
    projetId?: IComparableNullableOfGuidOperationFilterInput;
    insurerTicket?: IInsurerTicketFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IInsurerCommentSortInput {
    model?: ISortEnumType;
    modelId?: ISortEnumType;
    content?: ISortEnumType;
    isChild?: ISortEnumType;
    memberId?: ISortEnumType;
    hasReminder?: ISortEnumType;
    reminderDate?: ISortEnumType;
    taskModel?: ISortEnumType;
    projectId?: ISortEnumType;
    parentId?: ISortEnumType;
    parent?: IInsurerCommentSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerCommentCollectionSegment {
    items?: Array<IInsurerComment>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerComment {
    model?: IEnumInsurerCommentModel;
    modelId?: IUUID;
    content?: string;
    isChild?: boolean;
    memberId?: IUUID;
    hasReminder?: boolean;
    reminderDate?: IDateTime;
    taskModel?: string;
    projectId?: IUUID;
    parentId?: IUUID;
    parent?: IInsurerComment;
    insurerComments: Array<IInsurerComment>;
    insurerLogEmails: Array<IInsurerLogEmail>;
    insurerTickets: Array<IInsurerTicket>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerLogEmail {
    moldel?: IEnumInsurerCommentModel;
    associatedId?: string;
    to: Array<string>;
    cC: Array<string>;
    cCO: Array<string>;
    subject?: string;
    body?: string;
    file?: string;
    insurerCommentId?: IUUID;
    insurerLogId?: IUUID;
    insurerComment?: IInsurerComment;
    insurerLog?: IInsurerLog;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerLog {
    moldel?: IEnumInsurerCommentModel;
    event?: IEnumInsurerLogEvent;
    associatedId?: string;
    identifier?: string;
    memberId?: IUUID;
    projectId?: IUUID;
    original?: string;
    change?: string;
    insurerLogEmails: Array<IInsurerLogEmail>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerTicket {
    title?: string;
    description?: string;
    date?: IDateTime;
    priority?: IEnumInsurerTicketPriority;
    closeDay?: IDateTime;
    closed?: boolean;
    identifier?: string;
    assignedId?: IUUID;
    ownerId?: IUUID;
    archived?: boolean;
    associated?: string;
    model?: number;
    route?: string;
    concept?: IEnumInsurerTicketConcept;
    insurerCommentId?: IUUID;
    closedBy?: IUUID;
    projectId?: IUUID;
    reassingBy?: IUUID;
    reassignDate?: IDateTime;
    insurerComment?: IInsurerComment;
    insurerInvolved: Array<IInsurerInvolved>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerInvolved {
    involvedId?: IUUID;
    ownerId?: IUUID;
    personId?: IUUID;
    projetId?: IUUID;
    insurerTicket?: IInsurerTicket;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerFileReadingFilterInput {
    and?: Array<IInsurerFileReadingFilterInput>;
    or?: Array<IInsurerFileReadingFilterInput>;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    policeType?: IStringOperationFilterInput;
    insurer?: IStringOperationFilterInput;
    branch?: IStringOperationFilterInput;
    subBranch?: IStringOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IInsurerFileReadingSortInput {
    projectId?: ISortEnumType;
    name?: ISortEnumType;
    policeType?: ISortEnumType;
    insurer?: ISortEnumType;
    branch?: ISortEnumType;
    subBranch?: ISortEnumType;
    ownerId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerFileReadingCollectionSegment {
    items?: Array<IInsurerFileReading>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerFileReading {
    projectId?: IUUID;
    name?: string;
    policeType?: string;
    insurer?: string;
    branch?: string;
    subBranch?: string;
    ownerId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerFileReadingTagFilterInput {
    and?: Array<IInsurerFileReadingTagFilterInput>;
    or?: Array<IInsurerFileReadingTagFilterInput>;
    area?: IStringOperationFilterInput;
    cssClass?: IStringOperationFilterInput;
    height?: IStringOperationFilterInput;
    width?: IStringOperationFilterInput;
    name?: IStringOperationFilterInput;
    pageNumber?: IStringOperationFilterInput;
    tag?: IStringOperationFilterInput;
    x?: IStringOperationFilterInput;
    y?: IStringOperationFilterInput;
    z?: IStringOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IInsurerFileReadingTagSortInput {
    area?: ISortEnumType;
    cssClass?: ISortEnumType;
    height?: ISortEnumType;
    width?: ISortEnumType;
    name?: ISortEnumType;
    pageNumber?: ISortEnumType;
    tag?: ISortEnumType;
    x?: ISortEnumType;
    y?: ISortEnumType;
    z?: ISortEnumType;
    projectId?: ISortEnumType;
    ownerId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerFileReadingTagCollectionSegment {
    items?: Array<IInsurerFileReadingTag>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerFileReadingTag {
    area?: string;
    cssClass?: string;
    height?: string;
    width?: string;
    name?: string;
    pageNumber?: string;
    tag?: string;
    x?: string;
    y?: string;
    z?: string;
    projectId?: IUUID;
    ownerId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerInvolvedSortInput {
    involvedId?: ISortEnumType;
    ownerId?: ISortEnumType;
    personId?: ISortEnumType;
    projetId?: ISortEnumType;
    insurerTicket?: IInsurerTicketSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerTicketSortInput {
    title?: ISortEnumType;
    description?: ISortEnumType;
    date?: ISortEnumType;
    priority?: ISortEnumType;
    closeDay?: ISortEnumType;
    closed?: ISortEnumType;
    identifier?: ISortEnumType;
    assignedId?: ISortEnumType;
    ownerId?: ISortEnumType;
    archived?: ISortEnumType;
    associated?: ISortEnumType;
    model?: ISortEnumType;
    route?: ISortEnumType;
    concept?: ISortEnumType;
    insurerCommentId?: ISortEnumType;
    closedBy?: ISortEnumType;
    projectId?: ISortEnumType;
    reassingBy?: ISortEnumType;
    reassignDate?: ISortEnumType;
    insurerComment?: IInsurerCommentSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerInvolvedCollectionSegment {
    items?: Array<IInsurerInvolved>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerLogSortInput {
    moldel?: ISortEnumType;
    event?: ISortEnumType;
    associatedId?: ISortEnumType;
    identifier?: ISortEnumType;
    memberId?: ISortEnumType;
    projectId?: ISortEnumType;
    original?: ISortEnumType;
    change?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerLogCollectionSegment {
    items?: Array<IInsurerLog>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerLogEmailSortInput {
    moldel?: ISortEnumType;
    associatedId?: ISortEnumType;
    subject?: ISortEnumType;
    body?: ISortEnumType;
    file?: ISortEnumType;
    insurerCommentId?: ISortEnumType;
    insurerLogId?: ISortEnumType;
    insurerComment?: IInsurerCommentSortInput;
    insurerLog?: IInsurerLogSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerLogEmailCollectionSegment {
    items?: Array<IInsurerLogEmail>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerOrgInfoFilterInput {
    and?: Array<IInsurerOrgInfoFilterInput>;
    or?: Array<IInsurerOrgInfoFilterInput>;
    policeRequest?: IBooleanOperationFilterInput;
    endosoRequest?: IBooleanOperationFilterInput;
    renewal?: IBooleanOperationFilterInput;
    policeRecord?: IBooleanOperationFilterInput;
    endosoRecord?: IBooleanOperationFilterInput;
    sinisterRequest?: IBooleanOperationFilterInput;
    sinisterEnd?: IBooleanOperationFilterInput;
    coberageReminder?: IBooleanOperationFilterInput;
    renReminder?: IBooleanOperationFilterInput;
    collectionRemider?: IBooleanOperationFilterInput;
    noteCreated?: IBooleanOperationFilterInput;
    noteApplied?: IBooleanOperationFilterInput;
    sinisterCancel?: IBooleanOperationFilterInput;
    sinisterReject?: IBooleanOperationFilterInput;
    sinisterOnHold?: IBooleanOperationFilterInput;
    sinisterInProcess?: IBooleanOperationFilterInput;
    cumReminder?: IBooleanOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IInsurerOrgInfoSortInput {
    policeRequest?: ISortEnumType;
    endosoRequest?: ISortEnumType;
    renewal?: ISortEnumType;
    policeRecord?: ISortEnumType;
    endosoRecord?: ISortEnumType;
    sinisterRequest?: ISortEnumType;
    sinisterEnd?: ISortEnumType;
    coberageReminder?: ISortEnumType;
    renReminder?: ISortEnumType;
    collectionRemider?: ISortEnumType;
    noteCreated?: ISortEnumType;
    noteApplied?: ISortEnumType;
    sinisterCancel?: ISortEnumType;
    sinisterReject?: ISortEnumType;
    sinisterOnHold?: ISortEnumType;
    sinisterInProcess?: ISortEnumType;
    cumReminder?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerOrgInfoCollectionSegment {
    items?: Array<IInsurerOrgInfo>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerOrgInfo {
    policeRequest?: boolean;
    endosoRequest?: boolean;
    renewal?: boolean;
    policeRecord?: boolean;
    endosoRecord?: boolean;
    sinisterRequest?: boolean;
    sinisterEnd?: boolean;
    coberageReminder?: boolean;
    renReminder?: boolean;
    collectionRemider?: boolean;
    noteCreated?: boolean;
    noteApplied?: boolean;
    sinisterCancel?: boolean;
    sinisterReject?: boolean;
    sinisterOnHold?: boolean;
    sinisterInProcess?: boolean;
    cumReminder?: boolean;
    projectId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerTicketCollectionSegment {
    items?: Array<IInsurerTicket>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerScheduleFilterInput {
    and?: Array<IInsurerScheduleFilterInput>;
    or?: Array<IInsurerScheduleFilterInput>;
    title?: IStringOperationFilterInput;
    color?: IStringOperationFilterInput;
    startsAt?: IComparableNullableOfDateTimeOperationFilterInput;
    endsAt?: IComparableNullableOfDateTimeOperationFilterInput;
    resizable?: IBooleanOperationFilterInput;
    draggable?: IBooleanOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    observations?: IStringOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    insurerScheduleParticipant?: IListFilterInputTypeOfInsurerScheduleParticipantFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfInsurerScheduleParticipantFilterInput {
    all?: IInsurerScheduleParticipantFilterInput;
    none?: IInsurerScheduleParticipantFilterInput;
    some?: IInsurerScheduleParticipantFilterInput;
    any?: boolean;
}
export interface IInsurerScheduleParticipantFilterInput {
    and?: Array<IInsurerScheduleParticipantFilterInput>;
    or?: Array<IInsurerScheduleParticipantFilterInput>;
    insurerScheduleId?: IComparableNullableOfGuidOperationFilterInput;
    memberId?: IComparableNullableOfGuidOperationFilterInput;
    insurerSchedule?: IInsurerScheduleFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IInsurerScheduleSortInput {
    title?: ISortEnumType;
    color?: ISortEnumType;
    startsAt?: ISortEnumType;
    endsAt?: ISortEnumType;
    resizable?: ISortEnumType;
    draggable?: ISortEnumType;
    ownerId?: ISortEnumType;
    observations?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerScheduleCollectionSegment {
    items?: Array<IInsurerSchedule>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerSchedule {
    title?: string;
    color?: string;
    startsAt?: IDateTime;
    endsAt?: IDateTime;
    resizable?: boolean;
    draggable?: boolean;
    ownerId?: IUUID;
    observations?: string;
    projectId?: IUUID;
    insurerScheduleParticipant: Array<IInsurerScheduleParticipant>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerScheduleParticipant {
    insurerScheduleId?: IUUID;
    memberId?: IUUID;
    insurerSchedule?: IInsurerSchedule;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerScheduleParticipantSortInput {
    insurerScheduleId?: ISortEnumType;
    memberId?: ISortEnumType;
    insurerSchedule?: IInsurerScheduleSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerScheduleParticipantCollectionSegment {
    items?: Array<IInsurerScheduleParticipant>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerNotificationFilterInput {
    and?: Array<IInsurerNotificationFilterInput>;
    or?: Array<IInsurerNotificationFilterInput>;
    model?: INullableOfEnumInsurerCommentModelOperationFilterInput;
    modelId?: IComparableNullableOfGuidOperationFilterInput;
    title?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    seen?: IBooleanOperationFilterInput;
    involved?: IBooleanOperationFilterInput;
    assignedId?: IComparableNullableOfGuidOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    areaInvolved?: IBooleanOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    contractorPolice?: IListComparableGuidOperationFilterInput;
    policeGroupongLevel?: IComparableNullableOfGuidOperationFilterInput;
    policeProvider?: IListComparableGuidOperationFilterInput;
    policeBranch?: IListComparableGuidOperationFilterInput;
    site?: IStringOperationFilterInput;
    startsAt?: IComparableNullableOfDateTimeOperationFilterInput;
    type?: INullableOfEnumNotificationTypeOperationFilterInput;
    reminderRecordId?: IComparableNullableOfGuidOperationFilterInput;
    insurerReminderRecord?: IInsurerReminderRecordFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumNotificationTypeOperationFilterInput {
    eq?: IEnumNotificationType;
    neq?: IEnumNotificationType;
    in?: Array<IEnumNotificationType | null>;
    nin?: Array<IEnumNotificationType | null>;
}
export declare const enum IEnumNotificationType {
    NOTIFICATION = "NOTIFICATION",
    PROMOTION = "PROMOTION"
}
export interface IInsurerNotificationSortInput {
    model?: ISortEnumType;
    modelId?: ISortEnumType;
    title?: ISortEnumType;
    description?: ISortEnumType;
    seen?: ISortEnumType;
    involved?: ISortEnumType;
    assignedId?: ISortEnumType;
    ownerId?: ISortEnumType;
    areaInvolved?: ISortEnumType;
    projectId?: ISortEnumType;
    policeGroupongLevel?: ISortEnumType;
    site?: ISortEnumType;
    startsAt?: ISortEnumType;
    type?: ISortEnumType;
    reminderRecordId?: ISortEnumType;
    insurerReminderRecord?: IInsurerReminderRecordSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerReminderRecordSortInput {
    insurerReminderId?: ISortEnumType;
    seen?: ISortEnumType;
    projectId?: ISortEnumType;
    recordId?: ISortEnumType;
    recordModel?: ISortEnumType;
    insurerReminder?: IInsurerReminderSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerReminderSortInput {
    name?: ISortEnumType;
    description?: ISortEnumType;
    sended?: ISortEnumType;
    type?: ISortEnumType;
    instanceType?: ISortEnumType;
    reminderDate?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerNotificationCollectionSegment {
    items?: Array<IInsurerNotification>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerNotification {
    model?: IEnumInsurerCommentModel;
    modelId?: IUUID;
    title?: string;
    description?: string;
    seen?: boolean;
    involved?: boolean;
    assignedId?: IUUID;
    ownerId?: IUUID;
    areaInvolved?: boolean;
    projectId?: IUUID;
    contractorPolice?: Array<IUUID>;
    policeGroupongLevel?: IUUID;
    policeProvider?: Array<IUUID>;
    policeBranch?: Array<IUUID>;
    site?: string;
    startsAt?: IDateTime;
    type?: IEnumNotificationType;
    reminderRecordId?: IUUID;
    insurerReminderRecord?: IInsurerReminderRecord;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerReminderCollectionSegment {
    items?: Array<IInsurerReminder>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerReminderProjectAgentProviderSortInput {
    insurerReminderId?: ISortEnumType;
    projectAgentProviderId?: ISortEnumType;
    projectId?: ISortEnumType;
    insurerReminder?: IInsurerReminderSortInput;
    projectAgentProvider?: IProjectAgentProviderSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerReminderProjectAgentProviderCollectionSegment {
    items?: Array<IInsurerReminderProjectAgentProvider>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerReminderRecordCollectionSegment {
    items?: Array<IInsurerReminderRecord>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerReminderSubBranchSortInput {
    insurerReminderId?: ISortEnumType;
    subBranch?: ISortEnumType;
    projectId?: ISortEnumType;
    insurerReminder?: IInsurerReminderSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerReminderSubBranchCollectionSegment {
    items?: Array<IInsurerReminderSubBranch>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerBailTypeSortInput {
    name?: ISortEnumType;
    code?: ISortEnumType;
    ownerId?: ISortEnumType;
    projectId?: ISortEnumType;
    subBranchId?: ISortEnumType;
    subBranch?: ISubBranchSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerBailTypeCollectionSegment {
    items?: Array<IInsurerBailType>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerBirthDateTemplateFilterInput {
    and?: Array<IInsurerBirthDateTemplateFilterInput>;
    or?: Array<IInsurerBirthDateTemplateFilterInput>;
    subject?: IStringOperationFilterInput;
    text?: IStringOperationFilterInput;
    enabled?: IBooleanOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IInsurerBirthDateTemplateSortInput {
    subject?: ISortEnumType;
    text?: ISortEnumType;
    enabled?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerBirthDateTemplateCollectionSegment {
    items?: Array<IInsurerBirthDateTemplate>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerBirthDateTemplate {
    subject?: string;
    text?: string;
    enabled?: boolean;
    projectId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerDirectoryFilterInput {
    and?: Array<IInsurerDirectoryFilterInput>;
    or?: Array<IInsurerDirectoryFilterInput>;
    name?: IStringOperationFilterInput;
    phone?: IStringOperationFilterInput;
    area?: IStringOperationFilterInput;
    employment?: IStringOperationFilterInput;
    branch?: IComparableNullableOfGuidOperationFilterInput;
    gender?: INullableOfEnumGenderOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumGenderOperationFilterInput {
    eq?: Isaam_EnumGender;
    neq?: Isaam_EnumGender;
    in?: Array<Isaam_EnumGender | null>;
    nin?: Array<Isaam_EnumGender | null>;
}
export interface IInsurerDirectorySortInput {
    name?: ISortEnumType;
    phone?: ISortEnumType;
    area?: ISortEnumType;
    employment?: ISortEnumType;
    branch?: ISortEnumType;
    gender?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerDirectoryCollectionSegment {
    items?: Array<IInsurerDirectory>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerDirectory {
    name?: string;
    phone?: string;
    area?: string;
    employment?: string;
    branch?: IUUID;
    gender?: Isaam_EnumGender;
    projectId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerExpenseFilterInput {
    and?: Array<IInsurerExpenseFilterInput>;
    or?: Array<IInsurerExpenseFilterInput>;
    quantity?: IComparableNullableOfInt32OperationFilterInput;
    concept?: IStringOperationFilterInput;
    month?: INullableOfEnumMonthOperationFilterInput;
    porjectId?: IComparableNullableOfGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumMonthOperationFilterInput {
    eq?: IEnumMonth;
    neq?: IEnumMonth;
    in?: Array<IEnumMonth | null>;
    nin?: Array<IEnumMonth | null>;
}
export declare const enum IEnumMonth {
    JANUARY = "JANUARY",
    FEBRUARY = "FEBRUARY",
    MARCH = "MARCH",
    APRIL = "APRIL",
    MAY = "MAY",
    JUNE = "JUNE",
    JULY = "JULY",
    AUGUST = "AUGUST",
    SEPTEMBER = "SEPTEMBER",
    OCTOBER = "OCTOBER",
    NOVEMBER = "NOVEMBER",
    DECEMBER = "DECEMBER"
}
export interface IInsurerExpenseSortInput {
    quantity?: ISortEnumType;
    concept?: ISortEnumType;
    month?: ISortEnumType;
    porjectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerExpenseCollectionSegment {
    items?: Array<IInsurerExpense>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerExpense {
    quantity?: number;
    concept?: string;
    month?: IEnumMonth;
    porjectId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerIbisFormFilterInput {
    and?: Array<IInsurerIbisFormFilterInput>;
    or?: Array<IInsurerIbisFormFilterInput>;
    file?: IStringOperationFilterInput;
    name?: IStringOperationFilterInput;
    branch?: IComparableNullableOfGuidOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IInsurerIbisFormSortInput {
    file?: ISortEnumType;
    name?: ISortEnumType;
    branch?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerIbisFormCollectionSegment {
    items?: Array<IInsurerIbisForm>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerIbisForm {
    file?: string;
    name?: string;
    branch?: IUUID;
    projectId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerIbisProviderFilterInput {
    and?: Array<IInsurerIbisProviderFilterInput>;
    or?: Array<IInsurerIbisProviderFilterInput>;
    name?: IStringOperationFilterInput;
    street?: IStringOperationFilterInput;
    number?: IStringOperationFilterInput;
    colony?: IStringOperationFilterInput;
    city?: IStringOperationFilterInput;
    zipCode?: IComparableNullableOfInt32OperationFilterInput;
    state?: IStringOperationFilterInput;
    phone?: IStringOperationFilterInput;
    latitude?: IComparableNullableOfDoubleOperationFilterInput;
    length?: IComparableNullableOfDoubleOperationFilterInput;
    branch?: IComparableNullableOfGuidOperationFilterInput;
    type?: IComparableNullableOfInt32OperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IInsurerIbisProviderSortInput {
    name?: ISortEnumType;
    street?: ISortEnumType;
    number?: ISortEnumType;
    colony?: ISortEnumType;
    city?: ISortEnumType;
    zipCode?: ISortEnumType;
    state?: ISortEnumType;
    phone?: ISortEnumType;
    latitude?: ISortEnumType;
    length?: ISortEnumType;
    branch?: ISortEnumType;
    type?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerIbisProviderCollectionSegment {
    items?: Array<IInsurerIbisProvider>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerIbisProvider {
    name?: string;
    street?: string;
    number?: string;
    colony?: string;
    city?: string;
    zipCode?: number;
    state?: string;
    phone?: string;
    latitude?: number;
    length?: number;
    branch?: IUUID;
    type?: number;
    projectId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerSenderFilterInput {
    and?: Array<IInsurerSenderFilterInput>;
    or?: Array<IInsurerSenderFilterInput>;
    email?: IStringOperationFilterInput;
    passApp?: IStringOperationFilterInput;
    area?: IComparableNullableOfInt32OperationFilterInput;
    active?: IBooleanOperationFilterInput;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IInsurerSenderSortInput {
    email?: ISortEnumType;
    passApp?: ISortEnumType;
    area?: ISortEnumType;
    active?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IInsurerSenderCollectionSegment {
    items?: Array<IInsurerSender>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IInsurerSender {
    email?: string;
    passApp?: string;
    area?: number;
    active?: boolean;
    projectId?: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IInsurerZipCodeSepomexCollectionSegment {
    items?: Array<IInsurerZipCodeSepomex>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IComissionSortInput {
    projectAgentProviderBranchId?: ISortEnumType;
    name?: ISortEnumType;
    amount?: ISortEnumType;
    uDI?: ISortEnumType;
    other?: ISortEnumType;
    observations?: ISortEnumType;
    efectiveDate?: ISortEnumType;
    expireDate?: ISortEnumType;
    commisionRPF?: ISortEnumType;
    otherRPF?: ISortEnumType;
    rigth?: ISortEnumType;
    otherRigths?: ISortEnumType;
    initialPeriod?: ISortEnumType;
    subSequentPeriod?: ISortEnumType;
    anualRPF?: ISortEnumType;
    bimestralRPF?: ISortEnumType;
    mensualRPF?: ISortEnumType;
    trimestralRPF?: ISortEnumType;
    rigthUDI?: ISortEnumType;
    rigthComission?: ISortEnumType;
    keyId?: ISortEnumType;
    projectAgentProviderBranch?: IProjectAgentProviderBranchSortInput;
    agentKey?: IAgentKeySortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IComissionCollectionSegment {
    items?: Array<IComission>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ICoverageTopecoinsuranceFilterInput {
    and?: Array<ICoverageTopecoinsuranceFilterInput>;
    or?: Array<ICoverageTopecoinsuranceFilterInput>;
    topecinsurance?: IStringOperationFilterInput;
    topecinsuranceId?: IComparableNullableOfInt32OperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ICoverageTopecoinsuranceSortInput {
    topecinsurance?: ISortEnumType;
    topecinsuranceId?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ICoverageTopecoinsuranceCollectionSegment {
    items?: Array<ICoverageTopecoinsurance>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ICoverageTopecoinsurance {
    topecinsurance?: string;
    topecinsuranceId?: number;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICoverageSuminsuredFilterInput {
    and?: Array<ICoverageSuminsuredFilterInput>;
    or?: Array<ICoverageSuminsuredFilterInput>;
    sumInsured?: IStringOperationFilterInput;
    sumId?: IComparableNullableOfInt32OperationFilterInput;
    default?: IBooleanOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ICoverageSuminsuredSortInput {
    sumInsured?: ISortEnumType;
    sumId?: ISortEnumType;
    default?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ICoverageSuminsuredCollectionSegment {
    items?: Array<ICoverageSuminsured>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ICoverageSuminsured {
    sumInsured?: string;
    sumId?: number;
    default?: boolean;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICoveragePackageSortInput {
    name?: ISortEnumType;
    description?: ISortEnumType;
    projectAgentProviderBranchId?: ISortEnumType;
    typePackage?: ISortEnumType;
    policy?: ISortEnumType;
    ownerId?: ISortEnumType;
    projectAgentProviderId?: ISortEnumType;
    projectAgentProvider?: IProjectAgentProviderSortInput;
    projectAgentProviderBranch?: IProjectAgentProviderBranchSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ICoveragePackageCollectionSegment {
    items?: Array<ICoveragePackage>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ICoverageFilterInput {
    and?: Array<ICoverageFilterInput>;
    or?: Array<ICoverageFilterInput>;
    name?: IStringOperationFilterInput;
    default?: IBooleanOperationFilterInput;
    ownerId?: IComparableGuidOperationFilterInput;
    packageId?: IComparableGuidOperationFilterInput;
    projectAgentProviderId?: IComparableGuidOperationFilterInput;
    priority?: IComparableInt32OperationFilterInput;
    typeCoverage?: IComparableInt32OperationFilterInput;
    coveragePackage?: ICoveragePackageFilterInput;
    projectAgentProvider?: IProjectAgentProviderFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ICoverageSortInput {
    name?: ISortEnumType;
    default?: ISortEnumType;
    ownerId?: ISortEnumType;
    packageId?: ISortEnumType;
    projectAgentProviderId?: ISortEnumType;
    priority?: ISortEnumType;
    typeCoverage?: ISortEnumType;
    coveragePackage?: ICoveragePackageSortInput;
    projectAgentProvider?: IProjectAgentProviderSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ICoverageCollectionSegment {
    items?: Array<Isaam_Coverage>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface Isaam_Coverage {
    name?: string;
    default?: boolean;
    ownerId: IUUID;
    packageId: IUUID;
    projectAgentProviderId: IUUID;
    priority: number;
    typeCoverage: number;
    coveragePackage?: ICoveragePackage;
    projectAgentProvider?: IProjectAgentProvider;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICoverageInPolicySortInput {
    name?: ISortEnumType;
    sumInsured?: ISortEnumType;
    deductible?: ISortEnumType;
    prima?: ISortEnumType;
    coinsurance?: ISortEnumType;
    topecoinsurance?: ISortEnumType;
    priority?: ISortEnumType;
    ownerId?: ISortEnumType;
    projectId?: ISortEnumType;
    policyId?: ISortEnumType;
    packageId?: ISortEnumType;
    coveragePackage?: ICoveragePackageSortInput;
    police?: IPoliceSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ICoverageInPolicyCollectionSegment {
    items?: Array<ICoverageInPolicy>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ICoverageDeductibleFilterInput {
    and?: Array<ICoverageDeductibleFilterInput>;
    or?: Array<ICoverageDeductibleFilterInput>;
    deductible?: IStringOperationFilterInput;
    deductibleId?: IComparableNullableOfInt32OperationFilterInput;
    default?: IBooleanOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ICoverageDeductibleSortInput {
    deductible?: ISortEnumType;
    deductibleId?: ISortEnumType;
    default?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ICoverageDeductibleCollectionSegment {
    items?: Array<ICoverageDeductible>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ICoverageDeductible {
    deductible?: string;
    deductibleId?: number;
    default?: boolean;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICoverageCoinsuranceFilterInput {
    and?: Array<ICoverageCoinsuranceFilterInput>;
    or?: Array<ICoverageCoinsuranceFilterInput>;
    coinsurance?: IStringOperationFilterInput;
    coinsuranceId?: IComparableNullableOfInt32OperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface ICoverageCoinsuranceSortInput {
    coinsurance?: ISortEnumType;
    coinsuranceId?: ISortEnumType;
    projectId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ICoverageCoinsuranceCollectionSegment {
    items?: Array<ICoverageCoinsurance>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ICoverageCoinsurance {
    coinsurance?: string;
    coinsuranceId?: number;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IResponsableInvolvedFilterInput {
    and?: Array<IResponsableInvolvedFilterInput>;
    or?: Array<IResponsableInvolvedFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    responsableId?: IComparableNullableOfGuidOperationFilterInput;
    ownerId?: IComparableNullableOfGuidOperationFilterInput;
    area?: INullableOfEnumResponsableAreaOperationFilterInput;
    name?: IStringOperationFilterInput;
    contractorId?: IComparableGuidOperationFilterInput;
    contractor?: Isaam_ContractorFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INullableOfEnumResponsableAreaOperationFilterInput {
    eq?: IEnumResponsableArea;
    neq?: IEnumResponsableArea;
    in?: Array<IEnumResponsableArea | null>;
    nin?: Array<IEnumResponsableArea | null>;
}
export declare const enum IEnumResponsableArea {
    EMITION = "EMITION",
    EJECUTIVE = "EJECUTIVE",
    COMERTIAL = "COMERTIAL",
    COLLECTION = "COLLECTION",
    SINISTER = "SINISTER"
}
export interface IResponsableInvolvedSortInput {
    projectId?: ISortEnumType;
    responsableId?: ISortEnumType;
    ownerId?: ISortEnumType;
    area?: ISortEnumType;
    name?: ISortEnumType;
    contractorId?: ISortEnumType;
    contractor?: IContractorSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IResponsableInvolvedCollectionSegment {
    items?: Array<IResponsableInvolved>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IResponsableInvolved {
    projectId: IUUID;
    responsableId?: IUUID;
    ownerId?: IUUID;
    area?: IEnumResponsableArea;
    name?: string;
    contractorId: IUUID;
    contractor?: Isaam_Contractor;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProjectAgentProviderEmailReminderSortInput {
    model?: ISortEnumType;
    text?: ISortEnumType;
    footer?: ISortEnumType;
    ownerId?: ISortEnumType;
    frequency?: ISortEnumType;
    ramoCode?: ISortEnumType;
    policyType?: ISortEnumType;
    chargeType?: ISortEnumType;
    dateType?: ISortEnumType;
    projectAgentProviderId?: ISortEnumType;
    projectAgentProvider?: IProjectAgentProviderSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IProjectAgentProviderEmailReminderCollectionSegment {
    items?: Array<IProjectAgentProviderEmailReminder>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IProjectAgentProviderCollectionSegment {
    items?: Array<IProjectAgentProvider>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IAgentProviderContactSortInput {
    projectAgentProviderBranchId?: ISortEnumType;
    name?: ISortEnumType;
    email?: ISortEnumType;
    phone?: ISortEnumType;
    department?: ISortEnumType;
    sinisterAccidentId?: ISortEnumType;
    ownerId?: ISortEnumType;
    contractorGroupId?: ISortEnumType;
    contractorGroup?: IContractorGroupSortInput;
    projectAgentProviderBranch?: IProjectAgentProviderBranchSortInput;
    contractorId?: ISortEnumType;
    contractor?: IContractorSortInput;
    projectAgentProviderId?: ISortEnumType;
    projectAgentProvider?: IProjectAgentProviderSortInput;
    sinisterAccident?: ISinisterAccidentSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IAgentProviderContactCollectionSegment {
    items?: Array<IAgentProviderContact>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IAgentProviderCollectionSegment {
    items?: Array<IAgentProvider>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IAgentKeyCollectionSegment {
    items?: Array<IAgentKey>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IReferrerCollectionSegment {
    items?: Array<IReferrer>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IReferrerBranchSortInput {
    projectAgentProviderId?: ISortEnumType;
    projectAgentProviderBranchId?: ISortEnumType;
    referrerId?: ISortEnumType;
    comition?: ISortEnumType;
    referrer?: IReferrerSortInput;
    projectAgentProvider?: IProjectAgentProviderSortInput;
    projectAgentProviderBranch?: IProjectAgentProviderBranchSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IReferrerBranchCollectionSegment {
    items?: Array<IReferrerBranch>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IReferrerAccountStateSortInput {
    projectId?: ISortEnumType;
    ownerId?: ISortEnumType;
    folio?: ISortEnumType;
    total?: ISortEnumType;
    printDate?: ISortEnumType;
    status?: ISortEnumType;
    transactionNumber?: ISortEnumType;
    reasonReject?: ISortEnumType;
    observation?: ISortEnumType;
    referrerId?: ISortEnumType;
    referrer?: IReferrerSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IReferrerAccountStateCollectionSegment {
    items?: Array<IReferrerAccountState>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IContractorCollectionSegment {
    items?: Array<Isaam_Contractor>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IContractorCelulaCollectionSegment {
    items?: Array<IContractorCelula>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IContractorGroupCollectionSegment {
    items?: Array<IContractorGroup>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IContractorGroupingLevelCollectionSegment {
    items?: Array<IContractorGroupingLevel>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IContractorClassificationCollectionSegment {
    items?: Array<IContractorClassification>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IContractorProcessDocumentSortInput {
    delivered?: ISortEnumType;
    validated?: ISortEnumType;
    processDocumentId?: ISortEnumType;
    contractorId?: ISortEnumType;
    contractor?: IContractorSortInput;
    processDocument?: IProcessDocumentSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IProcessDocumentSortInput {
    name?: ISortEnumType;
    slug?: ISortEnumType;
    active?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IContractorProcessDocumentCollectionSegment {
    items?: Array<IContractorProcessDocument>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IProcessDocumentCollectionSegment {
    items?: Array<IProcessDocument>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IBranchCollectionSegment {
    items?: Array<IBranch>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ISubBranchCollectionSegment {
    items?: Array<ISubBranch>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IProjectAgentProviderBranchCollectionSegment {
    items?: Array<IProjectAgentProviderBranch>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface IDeviceFilterInput {
    and?: Array<IDeviceFilterInput>;
    or?: Array<IDeviceFilterInput>;
    memberId?: IComparableGuidOperationFilterInput;
    projectId?: IComparableGuidOperationFilterInput;
    token?: IStringOperationFilterInput;
    unique?: IBooleanOperationFilterInput;
    avalible?: IBooleanOperationFilterInput;
    deviceNotifications?: IListFilterInputTypeOfDeviceNotificationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfDeviceNotificationFilterInput {
    all?: IDeviceNotificationFilterInput;
    none?: IDeviceNotificationFilterInput;
    some?: IDeviceNotificationFilterInput;
    any?: boolean;
}
export interface IDeviceNotificationFilterInput {
    and?: Array<IDeviceNotificationFilterInput>;
    or?: Array<IDeviceNotificationFilterInput>;
    deviceId?: IComparableNullableOfGuidOperationFilterInput;
    notificationId?: IComparableNullableOfGuidOperationFilterInput;
    device?: IDeviceFilterInput;
    notification?: INotificationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface INotificationFilterInput {
    and?: Array<INotificationFilterInput>;
    or?: Array<INotificationFilterInput>;
    title?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    data?: IStringOperationFilterInput;
    enabled?: IBooleanOperationFilterInput;
    view?: IBooleanOperationFilterInput;
    date?: IComparableDateTimeOperationFilterInput;
    memberId?: IComparableNullableOfGuidOperationFilterInput;
    deviceNotifications?: IListFilterInputTypeOfDeviceNotificationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IDeviceSortInput {
    memberId?: ISortEnumType;
    projectId?: ISortEnumType;
    token?: ISortEnumType;
    unique?: ISortEnumType;
    avalible?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IDeviceCollectionSegment {
    items?: Array<IDevice>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface INotificationSortInput {
    title?: ISortEnumType;
    description?: ISortEnumType;
    data?: ISortEnumType;
    enabled?: ISortEnumType;
    view?: ISortEnumType;
    date?: ISortEnumType;
    memberId?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface INotificationCollectionSegment {
    items?: Array<INotification>;
    /**
     * Information to aid in pagination.
     */
    pageInfo: ICollectionSegmentInfo;
    totalCount: number;
}
export interface ICode {
    projectId?: IUUID;
    uniqueCode: string;
    expiration: IDateTime;
    orderId: string;
    brandId?: IUUID;
    brand?: IBrand;
    batch: string;
    dots: number;
    providerId: IUUID;
    provider?: IProvider;
    state?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IBrand {
    projectId: IUUID;
    name: string;
    image?: string;
    codes?: Array<ICode>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IProvider {
    projectId?: IUUID;
    name: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IBrandFilterInput {
    and?: Array<IBrandFilterInput>;
    or?: Array<IBrandFilterInput>;
    projectId?: IComparableGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    image?: IStringOperationFilterInput;
    codes?: IListFilterInputTypeOfCodeFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IListFilterInputTypeOfCodeFilterInput {
    all?: ICodeFilterInput;
    none?: ICodeFilterInput;
    some?: ICodeFilterInput;
    any?: boolean;
}
export interface ICodeFilterInput {
    and?: Array<ICodeFilterInput>;
    or?: Array<ICodeFilterInput>;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    uniqueCode?: IStringOperationFilterInput;
    expiration?: IComparableDateTimeOperationFilterInput;
    orderId?: IStringOperationFilterInput;
    brandId?: IComparableNullableOfGuidOperationFilterInput;
    brand?: IBrandFilterInput;
    batch?: IStringOperationFilterInput;
    dots?: IComparableInt32OperationFilterInput;
    providerId?: IComparableGuidOperationFilterInput;
    provider?: IProviderFilterInput;
    state?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IProviderFilterInput {
    and?: Array<IProviderFilterInput>;
    or?: Array<IProviderFilterInput>;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IDotMovementFilterInput {
    and?: Array<IDotMovementFilterInput>;
    or?: Array<IDotMovementFilterInput>;
    codeId?: IComparableNullableOfGuidOperationFilterInput;
    code?: ICodeFilterInput;
    memberId?: IComparableGuidOperationFilterInput;
    dots?: IComparableInt32OperationFilterInput;
    name?: IStringOperationFilterInput;
    email?: IStringOperationFilterInput;
    phone?: IStringOperationFilterInput;
    status?: IStatusOperationFilterInput;
    movementType?: IMovementTypeOperationFilterInput;
    prizeCategoryId?: IComparableNullableOfGuidOperationFilterInput;
    prizeCategory?: IPrizeCategoryFilterInput;
    providerId?: IComparableNullableOfGuidOperationFilterInput;
    provider?: IProviderFilterInput;
    prizeCodeId?: IComparableNullableOfGuidOperationFilterInput;
    prizeCode?: IPrizeCodeFilterInput;
    image?: IStringOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IStatusOperationFilterInput {
    eq?: Iexchange_Status;
    neq?: Iexchange_Status;
    in?: Array<Iexchange_Status>;
    nin?: Array<Iexchange_Status>;
}
export declare const enum Iexchange_Status {
    INPROCESS = "INPROCESS",
    EXCHANGED = "EXCHANGED"
}
export interface IMovementTypeOperationFilterInput {
    eq?: IMovementType;
    neq?: IMovementType;
    in?: Array<IMovementType>;
    nin?: Array<IMovementType>;
}
export declare const enum IMovementType {
    CODEREGISTRATION = "CODEREGISTRATION",
    EXCHANGE = "EXCHANGE"
}
export interface IPrizeCategoryFilterInput {
    and?: Array<IPrizeCategoryFilterInput>;
    or?: Array<IPrizeCategoryFilterInput>;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    name?: IStringOperationFilterInput;
    image?: IStringOperationFilterInput;
    dots?: IComparableNullableOfInt32OperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IPrizeCodeFilterInput {
    and?: Array<IPrizeCodeFilterInput>;
    or?: Array<IPrizeCodeFilterInput>;
    projectId?: IComparableNullableOfGuidOperationFilterInput;
    title?: IStringOperationFilterInput;
    description?: IStringOperationFilterInput;
    status?: IPrizeCodeStatusOperationFilterInput;
    prizeCategoryId?: IComparableGuidOperationFilterInput;
    dots?: IComparableInt32OperationFilterInput;
    code?: IStringOperationFilterInput;
    prizeCategory?: IPrizeCategoryFilterInput;
    value?: IComparableNullableOfDoubleOperationFilterInput;
    id?: IComparableGuidOperationFilterInput;
    createdAt?: IComparableDateTimeOperationFilterInput;
    updatedAt?: IComparableDateTimeOperationFilterInput;
}
export interface IPrizeCodeStatusOperationFilterInput {
    eq?: IPrizeCodeStatus;
    neq?: IPrizeCodeStatus;
    in?: Array<IPrizeCodeStatus>;
    nin?: Array<IPrizeCodeStatus>;
}
export declare const enum IPrizeCodeStatus {
    AVAILABLE = "AVAILABLE",
    EXCHANGED = "EXCHANGED"
}
export interface IDotMovement {
    codeId?: IUUID;
    code?: ICode;
    memberId: IUUID;
    dots: number;
    name?: string;
    email?: string;
    phone?: string;
    status: Iexchange_Status;
    movementType: IMovementType;
    prizeCategoryId?: IUUID;
    prizeCategory?: IPrizeCategory;
    providerId?: IUUID;
    provider?: IProvider;
    prizeCodeId?: IUUID;
    prizeCode?: IPrizeCode;
    image?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPrizeCategory {
    projectId?: IUUID;
    name: string;
    image: string;
    dots?: number;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPrizeCode {
    projectId?: IUUID;
    title?: string;
    description: string;
    status: IPrizeCodeStatus;
    prizeCategoryId: IUUID;
    dots: number;
    code: string;
    prizeCategory?: IPrizeCategory;
    value?: number;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDotMovementSortInput {
    codeId?: ISortEnumType;
    code?: ICodeSortInput;
    memberId?: ISortEnumType;
    dots?: ISortEnumType;
    name?: ISortEnumType;
    email?: ISortEnumType;
    phone?: ISortEnumType;
    status?: ISortEnumType;
    movementType?: ISortEnumType;
    prizeCategoryId?: ISortEnumType;
    prizeCategory?: IPrizeCategorySortInput;
    providerId?: ISortEnumType;
    provider?: IProviderSortInput;
    prizeCodeId?: ISortEnumType;
    prizeCode?: IPrizeCodeSortInput;
    image?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface ICodeSortInput {
    projectId?: ISortEnumType;
    uniqueCode?: ISortEnumType;
    expiration?: ISortEnumType;
    orderId?: ISortEnumType;
    brandId?: ISortEnumType;
    brand?: IBrandSortInput;
    batch?: ISortEnumType;
    dots?: ISortEnumType;
    providerId?: ISortEnumType;
    provider?: IProviderSortInput;
    state?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IBrandSortInput {
    projectId?: ISortEnumType;
    name?: ISortEnumType;
    image?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IProviderSortInput {
    projectId?: ISortEnumType;
    name?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPrizeCategorySortInput {
    projectId?: ISortEnumType;
    name?: ISortEnumType;
    image?: ISortEnumType;
    dots?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IPrizeCodeSortInput {
    projectId?: ISortEnumType;
    title?: ISortEnumType;
    description?: ISortEnumType;
    status?: ISortEnumType;
    prizeCategoryId?: ISortEnumType;
    dots?: ISortEnumType;
    code?: ISortEnumType;
    prizeCategory?: IPrizeCategorySortInput;
    value?: ISortEnumType;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface IMutation {
    sendQuizToEmail: ISendQuizToEmailPayload;
    translateCountries: boolean;
    updateWithIdProfile: IUpdateProfileWithIdPayload;
    createNiche: INichePayload;
    updateNiche: INichePayload;
    deleteNiche: IUUID;
    createNicheService: INicheServicePayload;
    createBulkTutor: ICreateBulkTutorPayload;
    updateNicheService: INicheServicePayload;
    deleteNicheService: IUUID;
    updateBillingData: IUpdateBillingDataPayload;
    updateCompanyData: IUpdateCompanyDataPayload;
    createBulkTeacher: ICreateBulkTeacherPayload;
    updateHealthInsurance: IUpdateHealthInsurancePayload;
    createAttendanceExcel: ICreateAttendanceExcelPayload;
    createBulkUser: ICreateBulkUserPayload;
    createAttendance: ICreateAttendancePayload;
    createCheisiUsersExcel: ICreateCheisiUsersExcelPayload;
    newContactForm: INewContactFormPayload;
    newExternalLogin: INewExternalLoginPayload;
    deleteUser: IDeleteUserPayload;
    testBulk: ITestBulkPayload;
    updatePositionColumns: IUpdatePositionColumnsPayload;
    updatePositionBlockColumns: IUpdatePositionBlockColumnsPayload;
    loginWithProvider: ILoginWithProviderPayload;
    createProjectSocialNetwork: ICreateProjectSocialNetworkPayload;
    updateProjectSocialNetwork: IUpdateProjectSocialNetworkPayload;
    deleteProjectSocialNetwork: IDeleteProjectSocialNetworkPayload;
    createRecommendedProject: ICreateRecommendedProjectPayload;
    updateRecommendedProject: IUpdateRecommendedProjectPayload;
    deleteRecommendedProject: IDeleteRecommendedProjectPayload;
    setProjectToProduction: ISetProjectToProductionPayload;
    createProjectTemplate: ICreateProjectTemplatePayload;
    updateProjectTemplate: IUpdateProjectTemplatePayload;
    deleteProjectTemplate: IDeleteProjectTemplatePayload;
    createMember: ICreateMemberPayload;
    loginMember: ILoginMemberPayload;
    createCompany: ICreateCompanyPayload;
    createProject: ICreateProjectPayload;
    generateSlug: string;
    createNewRoles: ICreateNewRolesPayload;
    createUser: ICreateUserPayload;
    createOrFindUser: ICreateOrFindUserPayload;
    createOrdinaryUser: ICreateOrdinaryUserPayload;
    createUserWithoutMail: ICreateUserPayload;
    updateProfile: IUpdateProfilePayload;
    updatePassword: IUpdatePasswordPayload;
    activeMember: IActiveMemberPayload;
    createProjectRole: ICreateProjectRolePayload;
    removeAccent: string;
    uploadPhotoProfile: IUploadPhotoProfilePayload;
    deleteProject: IDeleteProjectPayload;
    updateCompany: IUpdateCompanyPayload;
    restorePassword: IRestorePasswordPayload;
    recoverPassword: IRecoverPasswordPayload;
    verifyToken: IVerifyTokenPayload;
    createGroup: ICreateGroupPayload;
    addGroupToMember: IAddGroupToMemberPayload;
    addGroupToTaxonomy: IAddGroupToTaxonomyPayload;
    addTaxonomyToMember: IAddTaxonomyToMemberPayload;
    deleteGroup: IDeleteGroupPayload;
    deleteGroupTaxonomy: IDeleteGroupTaxonomyPayload;
    deleteMemberGroup: IDeleteMemberGroupMutationPayload;
    deleteMemberTaxonomy: IDeleteMemberTaxonomyPayload;
    deleteMember: string;
    deleteProjectRole: IDeleteProjectRolePayload;
    createUpdatePermission: ICreateUpdatePermissionPayload;
    updateProject: IUpdateProjectPayload;
    updateProjectRole: IUpdateProjectRolePayload;
    updateGroup: IUpdateGroupPayload;
    addMemberAsAdmin: IAddMemberAsAdminPayload;
    createMemberStream: ICreateMemberStreamPayload;
    deleteMemberFromMemberProjects: IDeleteMemberFromMemberProjectsPayload;
    addMemberToCompany: IAddMemberToCompanyPayload;
    createPageManager: ICreatePageManagerPayload;
    createViewManager: ICreateViewManagerPayload;
    createViewColumn: ICreateViewColumnPayload;
    createViewBlockColumn: ICreateViewBlockColumnPayload;
    updatePageManager: IUpdatePageManagerPayload;
    updateViewManager: IUpdateViewManagerPayload;
    updateViewColumn: IUpdateViewColumnPayload;
    updateViewBlockColumn: IUpdateViewBlockColumnPayload;
    deletePageManager: IDeletePageManagerPayload;
    deleteViewManager: IDeleteViewManagerPayload;
    deleteViewColumn: IDeleteViewColumnPayload;
    linkTransactionToSell: ILinkTransactionToSellPayload;
    updateSell: IUpdateSellPayload;
    deleteViewBlockColumn: IDeleteViewBlockColumnPayload;
    createMultipleMemberRelation: IMultipleMemberRelationPayload;
    createMemberRelation: IMemberRelationPayload;
    updateMemberRelation: IMemberRelationPayload;
    deleteMemberRelation: IUUID;
    updateProductSell: IUpdateProductSellPayload;
    createTax: ICreateTaxPayload;
    deleteTax: IDeleteTaxPayload;
    importProductsFromExcel: IImportProductsFromExcelPayload;
    createRoute: ICreateRoutePayload;
    deleteRoute: IDeleteRoutePayload;
    createProductSell: ICreateProductSellPayload;
    deleteProductSell: IDeleteProductSellPayload;
    createPurchaseQuote: ICreatePurchaseQuotePayload;
    deletePurchaseQuote: IDeletePurchaseQuotePayload;
    createStockAlert: ICreateStockAlertPayload;
    deleteStockAlert: IDeleteStockAlertPayload;
    updateStockAlert: IUpdateStockAlertPayload;
    createLegalTerm: ICreateLegalTermPayload;
    createInsuranceForm: ICreateInsuranceFormPayload;
    updateInsuranceForm: IUpdateInsuranceFormPayload;
    updateLegalTerm: IUpdateLegalTermPayload;
    deleteLegalTerm: IDeleteLegalTermPayload;
    createArticle: ICreateArticlePayload;
    updateStatusArticle: IUpdateStatusArticlePayload;
    createTaxonomy: ICreateTaxonomyPayload;
    blog_generateSlug: string;
    updateArticle: IUpdateArticlePayload;
    updateTaxonomy: IUpdateTaxonomyPayload;
    deleteArticle: IDeleteArticlePayload;
    deleteTaxonomy: IDeleteTaxonomyPayload;
    newSurvey: INewSurveyPayload;
    updateSurvey: IUpdateSurveyPayload;
    deleteSurvey: IDeleteSurveyPayload;
    newQuestion: INewQuestionPayload;
    deleteQuestion: IDeleteQuestionPayload;
    updateQuestion: IUpdateQuestionPayload;
    newOption: INewOptionPayload;
    deleteOption: IDeleteOptionPayload;
    updateOption: IUpdateOptionPayload;
    answerQuestion: IAnswerQuestionPayload;
    createProduct: ICreateProductPayload;
    updateProduct: IUpdateProductPayload;
    deleteProduct: IDeleteProductPayload;
    createAddress: ICreateAddressPayload;
    updateAddress: IUpdateAddressPayload;
    deleteAddress: IDeleteAddressPayload;
    createUpdateShop: ICreateUpdateShopPayload;
    createDisease: ICreateDiseasePayload;
    updateDisease: IUpdateDiseasePayload;
    deleteDisease: IDeleteDiseasePayload;
    createTopicDisease: ICreateTopicDiseasePayload;
    updateTopicDisease: IUpdateTopicDiseasePayload;
    deleteTopicDisease: IDeleteTopicDiseasePayload;
    createFAQ: ICreateFAQPayload;
    updateFAQ: IUpdateFAQPayload;
    deleteFAQ: IDeleteFAQPayload;
    runJobShop: IRunJobShopPayload;
    createCourse: ICreateCoursePayload;
    createBeginCourse: ICreateBeginCoursePayload;
    createCourseForm: ICreateCourseFormPayload;
    updateCourse: IUpdateCoursePayload;
    updateBeginCourse: IUpdateBeginCoursePayload;
    updateCourseForm: IUpdateCourseFormPayload;
    deleteCourse: IDeleteCoursePayload;
    deleteBeginCourse: IDeleteBeginCoursePayload;
    deleteCourseForm: IDeleteCourseFormPayload;
    fixProduct: IFixProductPayload;
    deleteCourseSchedule: IDeleteCourseSchedulePayload;
    updateCourseSchedule: IUpdateCourseSchedulePayload;
    createBranchOffice: ICreateBranchOfficePayload;
    createManager: ICreateManagerPayload;
    createProductPurchase: ICreateProductPurchasePayload;
    createPurchase: ICreatePurchasePayload;
    createStore: ICreateStorePayload;
    newStoreTransfer: INewStoreTransferPayload;
    createProvider: ICreateProviderPayload;
    updateBranchOffice: IUpdateBranchOfficePayload;
    updateManager: IUpdateManagerPayload;
    updatePurchase: IUpdatePurchasePayload;
    updateStore: IUpdateStorePayload;
    deleteStore: IDeleteStorePayload;
    deleteManager: IDeleteManagerPayload;
    updateProvider: IUpdateProviderPayload;
    deleteProvider: IDeleteProviderPayload;
    deletePurchase: IDeletePurchasePayload;
    deleteProductPurchase: IDeleteProductPurchasePayload;
    deleteBranchOffice: IDeleteBranchOfficePayload;
    associationServiceToProject: IAssociationServiceToProjectPayload;
    createArrayFunction: ICreateArrayFunctionPayload;
    deleteArrayFunction: IDeleteArrayFunctionPayload;
    updateServiceProject: IUpdateServiceProjectPayload;
    deleteServiceProject: IDeleteServiceProjectPayload;
    cancelEvent: ICancelEventPayload;
    createEventType: ICreateEventTypePayload;
    createSubEventType: ICreateSubEventTypePayload;
    deleteSubEventType: IDeleteSubEventTypePayload;
    updateSubEventType: IUpdateSubEventTypePayload;
    addSubTypeToEventType: IAddSubTypeToEventTypePayload;
    deleteEventType: IDeleteEventTypePayload;
    updateEventType: IUpdateEventTypePayload;
    createEvent: ICreateEventPayload;
    createEventMember: ICreateEventMemberPayload;
    updateEvent: IUpdateEventPayload;
    deleteEvent: IDeleteEventPayload;
    createEventSession: ICreateEventSessionPayload;
    updateEventSession: IUpdateEventSessionPayload;
    deleteEventSession: IDeleteEventSessionPayload;
    sendRecordatory: boolean;
    createSchedule: ICreateSchedulePayload;
    associationMemberToConsult: IAssociationMemberToConsultPayload;
    cancellationMemberToConsult: ICancellationMemberToConsultPayload;
    changeStatusEvent: IChangeStatusEventPayload;
    deleteSchedule: IDeleteSchedulePayload;
    deleteTurn: IDeleteTurnPayload;
    createResourceQuote: IResourceQuotePayload;
    updateResourceQuote: IResourceQuotePayload;
    deleteResourceQuote: IUUID;
    createResourceQuoteDetail: IResourceQuoteDetailPayload;
    updateResourceQuoteDetail: IResourceQuoteDetailPayload;
    deleteResourceQuoteDetail: IUUID;
    createProposal: IProposalPayload;
    updateProposal: IProposalPayload;
    deleteProposal: IUUID;
    createCollaborator: ICollaboratorPayload;
    updateCollaborator: ICollaboratorPayload;
    deleteCollaborator: IUUID;
    createCollaboratorHours: ICollaboratorHoursPayload;
    updateCollaboratorHours: ICollaboratorHoursPayload;
    deleteCollaboratorHours: IUUID;
    createHiring: IHiringPayload;
    updateHiring: IHiringPayload;
    deleteHiring: IUUID;
    createHiringService: IHiringServicePayload;
    updateHiringService: IHiringServicePayload;
    deleteHiringService: IUUID;
    createHiringType: IHiringTypePayload;
    updateHiringType: IHiringTypePayload;
    deleteHiringType: IUUID;
    createShift: IShiftPayload;
    updateShift: IShiftPayload;
    deleteShift: IUUID;
    createBusinessType: ICreateBusinessTypePayload;
    updateBusinessType: IUpdateBusinessTypePayload;
    deleteBusinessType: IDeleteBusinessPayload;
    createBusinessRule: ICreateBusinessRulePayload;
    updateBusinessRule: IUpdateBusinessRulePayload;
    deleteBusinessRule: IDeleteBusinessRulePayload;
    deleteCouponFromTemplate: IDeleteCouponFromTemplatePayload;
    addCouponsToTemplate: IAddCouponsToTemplatePayload;
    createUpdateConfigurationTemplate: ICreateUpdateConfigurationTemplatePayload;
    sendTemplate: ISendTemplatePayload;
    putFirebaseDevice: IPutFirebaseDevicePayload;
    createCoupon: ICreateCouponPayload;
    updateCoupon: IUpdateCouponPayload;
    deleteCoupon: IDeleteCouponPayload;
    createTemplate: ICreateTemplatePayload;
    updateTemplate: IUpdateTemplatePayload;
    deleteTemplate: IDeleteTemplatePayload;
    createErrorPage: ICreateErrorPagePayload;
    updateErrorPage: IUpdateErrorPagePayload;
    deleteErrorPage: IDeleteErrorPagePayload;
    createErrorPageValidation: ICreateErrorPageValidationPayload;
    updateErrorPageValidation: IUpdateErrorPageValidationPayload;
    deleteErrorValidationPage: IDeleteErrorPageValidationPayload;
    createBusiness: ICreateBusinessPayload;
    updateBusiness: IUpdateBusinessPayload;
    deleteBusiness: IDeleteBusinessPayload;
    associateBusinessRules: IAssociateBusinessRulesPayload;
    associateProjectPlanSubscription: IAssociateProjectPlanSubscriptionPayload;
    createProjectPlan: ICreateProjectPlanPayload;
    updateProjectPlan: IUpdateProjectPlanPayload;
    deleteProjectPlan: IDeleteProjectPlanPayload;
    deleteProjectPlanSubscription: IDeleteProjectPlanSubscriptionPayload;
    putConfig: IPutConfigPayload;
    deleteConfig: IDeleteConfigPayload;
    updateOrderPages: IUpdateOrderPagesPayload;
    updateBatchWewbsiteComponent: IUpdateBatchWewbsiteComponentPayload;
    createComponent: ICreateComponentPayload;
    createWebsiteComponent: ICreateWebsiteComponentPayload;
    createWebsitePage: ICreateWebsitePagePayload;
    createWebsiteSeo: ICreateWebsiteSeoPayload;
    updateComponent: IUpdateComponentPayload;
    updateWebsiteComponent: IUpdateWebsiteComponentPayload;
    updateWebsitePage: IUpdateWebsitePagePayload;
    updateWebsiteSeo: IUpdateWebsiteSeoPayload;
    deleteComponent: IDeleteComponentPayload;
    deleteWebsiteComponent: IDeleteWebsiteComponentPayload;
    deleteWebsitePage: IDeleteWebsitePagePayload;
    deleteWebsiteSeo: IDeleteWebsiteSeoPayload;
    deleteBusinessRuleProjectPlans: IUUID;
    createDocumentCategory: IDocumentCategoryPayload;
    updateDocumentCategory: IDocumentCategoryPayload;
    deleteDocumentCategory: IUUID;
    createDocumentCategoryDetail: IDocumentCategoryDetailPayload;
    updateDocumentCategoryDetail: IDocumentCategoryDetailPayload;
    deleteDocumentCategoryDetail: IUUID;
    createDocument: IDocumentPayload;
    updateDocument: IDocumentPayload;
    deleteDocument: IUUID;
    createDocumentTemplate: IDocumentTemplatePayload;
    updateDocumentTemplate: IDocumentTemplatePayload;
    deleteDocumentTemplate: IUUID;
    createTemplatePage: ITemplatePagePayload;
    updateTemplatePage: ITemplatePagePayload;
    deleteTemplatePage: IUUID;
    createDocumentTag: IDocumentTagPayload;
    updateDocumentTag: IDocumentTagPayload;
    deleteDocumentTag: IUUID;
    createDocumentScan: IDocumentScanPayload;
    updateDocumentScan: IDocumentScanPayload;
    deleteDocumentScan: IUUID;
    createDocumentRead: IDocumentReadPayload;
    updateDocumentRead: IDocumentReadPayload;
    deleteDocumentRead: IUUID;
    readTextFromImage: ICreateTemplatePayload;
    createVideoCall: ICreateVideoCallPayload;
    updateVideoCall: IUpdateVideoCallPayload;
    deleteVideoCall: IDeleteVideoCallPayload;
    createAccessToken: IRoomAccessToken;
    createVideoRoom: ICreateVideoRoomPayload;
    sendNotification: ISendNotificationUsersPayload;
    sendEmailDownload: ISendEmailDownloadPayload;
    sendEmailNotification: ISendEmailNotificationPayload;
    muteParticipant: boolean;
    removeParticipantRoom: boolean;
    updateParticipantRoom: boolean;
    startRecordRoom2?: string;
    endRecordRoom: IRecordingPath;
    createUpdateContactEmail: ICreateUpdateContactEmailPayload;
    sendEmail: ISendEmailPayload;
    deleteContactEmail: IDeleteContactEmailPayload;
    sendMailBot: ISendMailBotPayload;
    sendQuiz: IHttpStatusCode;
    mainSection: string;
    hyperVincule: string;
    sendQuizGratitude: IHttpStatusCode;
    createServiceArea: IServiceAreaPayload;
    updateServiceArea: IServiceAreaPayload;
    deleteServiceArea: IUUID;
    createArea: IAreaPayload;
    updateArea: IAreaPayload;
    deleteArea: IUUID;
    updateBatchServiceMember: Array<IUUID>;
    createServiceMember: IServiceMemberPayload;
    updateServiceMember: IServiceMemberPayload;
    deleteServiceMember: IUUID;
    createServiceQuiz: IServiceQuizPayload;
    updateServiceQuiz: IServiceQuizPayload;
    deleteServiceQuiz: IUUID;
    createQuiz: IQuizPayload;
    updateQuiz: IQuizPayload;
    deleteQuiz: IUUID;
    createQuizSection: IQuizSectionPayload;
    updateQuizSection: IQuizSectionPayload;
    deleteQuizSection: IUUID;
    duplicateQuizQuestion: IQuizQuestionPayload;
    createQuizQuestion: IQuizQuestionPayload;
    updateQuizQuestion: IQuizQuestionPayload;
    deleteQuizQuestion: IUUID;
    createQuizQuestionNested: IQuizQuestionNestedPayload;
    updateQuizQuestionNested: IQuizQuestionNestedPayload;
    deleteQuizQuestionNested: IUUID;
    updateBatchQuizQuestion: Array<IUUID>;
    createQuizQuestionAnswer: IQuizQuestionAnswerPayload;
    updateQuizQuestionAnswer: IQuizQuestionAnswerPayload;
    deleteQuizQuestionAnswer: IQuizQuestionAnswerPayload;
    updateBatchQuizQuestionAnswer: Array<IUUID>;
    createQuizAnswer: IQuizAnswerPayload;
    updateQuizAnswer: IQuizAnswerPayload;
    deleteQuizAnswer: IUUID;
    createQuizMember: IQuizMemberPayload;
    updateQuizMember: IQuizMemberPayload;
    deleteQuizMember: IUUID;
    createQuizQuestionMember: IQuizQuestionMemberPayload;
    updateQuizQuestionMember: IQuizQuestionMemberPayload;
    deleteQuizQuestionMember: IUUID;
    updateBatchQuizQuestionMember: Array<IUUID>;
    createQuizMemberAnswer: IQuizMemberAnswerPayload;
    updateQuizMemberAnswer: IQuizMemberAnswerPayload;
    deleteQuizMemberAnswer: IUUID;
    updateBatchQuizMemberAnswer: Array<IUUID>;
    createQuizMemberDescription: IQuizMemberDescriptionPayload;
    updateQuizMemberDescription: IQuizMemberDescriptionPayload;
    deleteQuizMemberDescription: IUUID;
    updateBatchQuizMemberDescription: Array<IUUID>;
    createKey: IKeyPayload;
    createQuotationAarco: IQuotationPayload;
    loginAarco: ILoginPayload;
    policyAarco: IPolicyPayload;
    quotationDownloadPDFAarco: IQuotationDownloadPDFPayload;
    quotationEmitAarco: IQuotationEmitPayload;
    quotationSendPDFAarco: ISendQuotationPayload;
    attachPaymentMethodToCustomer: ICreatePaymentMethodPayload;
    createSetupIntentStripe: ISetupIntentStripePayload;
    setDefaultPaymentMethodOnCustomer: ISetDefaultPaymentMethodOnCustomerPayload;
    updatePriceStripe: IUpdatePriceStripePayload;
    newPaymentsAnyType: INewPaymentsAnyTypePayload;
    createProductStripe: ICreateProductStripePayload;
    createPlan: IPlanPayload;
    createStripePrice: ICreateStripePricePayload;
    createMethodPayment: ICreateMethodPaymentPayload;
    updateMethodPayment: IUpdateMethodPaymentPayload;
    deleteMethodPayment: IDeleteMethodPaymentPayload;
    createPaymentStripe: ICreatePaymentStripePayload;
    createPaymentStripeToAccount: ICreatePaymentStripePayload;
    createSuscriptionStripe: ICreateSuscriptionStripePayload;
    createSuscriptionExternalStripe: ICreateSuscriptionExternalStripePayload;
    deleteSuscriptionExternalStripe: IDeleteSuscriptionExternalStripePayload;
    createAccountStripe: ICreateStripeAccountPayload;
    deletePayment: IDeletePaymentPayload;
    updatePayment: IUpdatePaymentPayload;
    createInvoice: ICreateInvoicePayload;
    updateStatusInvoice: IUpdateStatusInvoicePayload;
    createPaymentMethod: ICreatePaymentMethodPayload;
    deletePaymentMethod: IDeletePaymentMethodPayload;
    createBatchInsurerCoverages: ICreateBatchInsurerCoveragesPayload;
    createQuote: ICreateQuotePayload;
    createNewOffices: ICreateNewOfficesPayload;
    createNewProfiles: ICreateNewProfilesPayload;
    createInsurer: ICreateInsurerPayload;
    createOffice: ICreateOfficePayload;
    createRegistration: ICreateRegistrationPayload;
    createQuatorProfile: ICreateQuatorProfilePayload;
    deleteInsurer: IDeleteInsurerPayload;
    deleteOffice: IDeleteOfficePayload;
    deleteQuoterProfile: IDeleteQuoterProfilePayload;
    updateInsurer: IUpdateInsurerPayload;
    updateOffice: IUpdateOfficePayload;
    updateQuoterProfile: IUpdateQuoterProfilePayload;
    createCatalog: ICreateCatalogPayload;
    populateCredentials: IPopulateCredentialsPayload;
    populateServices: IPopulateServicesPayload;
    registrarPersona: string;
    runServiceQuote?: IRunServicePayload;
    emissionCar: IEmissionCarPayload;
    printEmission: IPrintEmissionPayload;
    createQuoteCoverage: ICreateQuoteCoveragePayload;
    updateQuoteCoverage: IUpdateQuoteCoveragePayload;
    deleteQuoteCoverage: IDeleteQuoteCoveragePayload;
    associationWithQuoterProfile: IAssociationWithQuoterProfilePayload;
    updateQuote: IUpdateQuotePayload;
    createInsurerCredential: ICreateInsurerCredentialPayload;
    updateInsurerCredential: IUpdateInsurerCredentialPayload;
    associationRelationCar: IAssociationRelationCarPayload;
    createCoverageProject: ICreateCoverageProjectPayload;
    updateCoverageProject: IUpdateCoverageProjectPayload;
    updateBatchCoverageProject: IUpdateBatchCoverageProjectPayload;
    createApiService: ICreateApiServicePayload;
    updateApiService: IUpdateApiServicePayload;
    createDynamicCustomMeta: IDynamicCustomMetaPayload;
    updateDynamicCustomMeta: IDynamicCustomMetaPayload;
    deleteDynamicCustomMeta: IUUID;
    updateBatchDynamicCustomMeta: Array<IUUID>;
    createDynamicCustomValue: IDynamicCustomValuePayload;
    updateDynamicCustomValue: IDynamicCustomValuePayload;
    deleteDynamicCustomValue: IUUID;
    updateBatchDynamicCustomValue: Array<IUUID>;
    createDynamicPage: IDynamicPagePayload;
    updateDynamicPage: IDynamicPagePayload;
    deleteDynamicPage: IUUID;
    createDynamicBlock: IDynamicBlockPayload;
    updateDynamicBlock: IDynamicBlockPayload;
    deleteDynamicBlock: IUUID;
    createDynamicSection: IDynamicSectionPayload;
    updateDynamicSection: IDynamicSectionPayload;
    deleteDynamicSection: IUUID;
    createDynamicSectionBlock: IDynamicSectionBlockPayload;
    updateDynamicSectionBlock: IDynamicSectionBlockPayload;
    deleteDynamicSectionBlock: IUUID;
    createDynamicTab: IDynamicTabPayload;
    updateDynamicTabBlock: IDynamicTabPayload;
    deleteDynamicTab: IUUID;
    createCharge: ICreateChargePayload;
    createClinicHistory: ICreateClinicHistoryPayload;
    createClinicHistoryMedicalBackgroundDetail: ICreateClinicHistoryMedicalBackgroundDetailPayload;
    createEventDetail: ICreateEventDetailPayload;
    createFisicExam: ICreateFisicExamPayload;
    createFormat: ICreateFormatPayload;
    createMedicalBackgroundDetail: ICreateMedicalBackgroundDetailPayload;
    createMedicalBackground: ICreateMedicalBackgroundPayload;
    createMedicalConfig: ICreateMedicalConfigPayload;
    createMedicalService: ICreateMedicalServicePaylod;
    createMedicine: ICreateMedicinePayload;
    createVaccine: ICreateVaccinePayload;
    createVitalSigns: ICreateVitalSignsPayload;
    createMedicRecipe: ICreateMedicRecipePayload;
    createRecipeConfig: ICreateRecipeConfigPaylod;
    createRegistSesion: ICreateRegistSesionPayload;
    createPacientNote: ICreatePacientNotePayload;
    createTherapy: ICreateChargePayload;
    createDiagnostic: ICreateDiagnosticPayload;
    createConsultNote: ICreateConsultNotePayload;
    createMedicalBackgroundSet: ICreateMedicalBackgroundSetPayload;
    createMedicalBackgroundTemplate: boolean;
    createVitalSignsTemplate: boolean;
    createPacientMedicalBackground: ICreatePacientMedicalBackgroundPaylod;
    createPatientVitalSignsResponse: ICreatePatientVitalSignsResponsePayload;
    updateCharge: IUpdateChargePayload;
    updateClinicHistory: IUpdateClinicHistoryPayloads;
    updateClinicHistoryMedicalBackgroundDetail: IUpdateClinicHistoryMedicalBackgroundDetailPayload;
    updateEventDetail: IUpdateEventDetailtPayload;
    updateFisicExam: IUpdateFisicExamPayload;
    updateFormat: IUpdateFormatPayload;
    updateMedicalBackgroundDetail: IUpdateMedicalBackgroundDetailPayload;
    updateMedicalBackground: IUpdateMedicalBackgroundPayload;
    updateMedicalConfig: IUpdateMedicalConfigPayload;
    updateMedicalService: IUpdateMedicalServicePayload;
    updateMedicine: IUpdateMedicinePayload;
    updateVaccine: IUpdateVaccinePayload;
    updateVitalSigns: IUpdateVitalSingsPayloads;
    updateMedicRecipe: IUpdateMedicRecipePayload;
    updateRecipeConfig: IUpdateRecipeConfigPayload;
    updateRegistSesion: IUpdateRegistSesionPayload;
    updatePacientNote: IUpdatePacientNotePayload;
    updateTherapy: IUpdateTherapyPayload;
    updateDiagnostic: IUpdateDiagnosticPayload;
    updateConsultNote: IUpdateConsultNotePayload;
    updatePacientMedicalBackground: IUpdatePacientMedicalBackgroundPayload;
    updateBillingRequest: IUpdateBillingRequestPayload;
    updateSortFormat: IUpdateSortFormatPayload;
    updatePatientVitalSignsResponse: IUpdatePatientVitalSignsResponsePayloads;
    deleteCharge: IDeleteChargePayload;
    deleteClinicHistory: IDeleteClinicHistoryPayload;
    deleteClinicHistoryMedicalBackgrounDetail: IDeleteClinicHistoryMedicalBackgroundDetailPayload;
    deleteConsult: IDeleteConsultPayload;
    deleteFisicExam: IDeleteFisicalExamPayload;
    deleteMedicalBackgroundDetail: IDeleteMedicalBackgroundDetailPayload;
    deleteMedicalBackground: IDeleteMedicalBackgroundPayload;
    deleteMedicalConfig: IDeleteMedicalConfigPayload;
    deleteMedicalService: IDeleteMedicalServicePayload;
    deleteMedicine: IDeleteMedicinePayload;
    deleteVaccine: IDeleteVaccinePayload;
    deleteVitalSign: IDeleteVitalSignPayload;
    deleteMedicRecipe: IDeleteMedicRecipePayload;
    deleteRecipeConfig: IDeleteRecipeConfigPayload;
    deleteRegistSesion: IDeleteRegistSesionPayload;
    deleteTherapy: IDeleteTherapyPayload;
    deleteDiagnostic: IDeleteDiagnosticPayload;
    deleteConsultNote: IDeleteConsultNotePayload;
    deletePacientNote: IDeletePacientNotePayload;
    deletePacientMedicalBackground: IDeletePacientMedicalBackgroundPayload;
    deleteBillingRequest: IDeleteBillingRequestPayload;
    deleteFormat: IDeleteFormatPayload;
    printWithImageFromUrl: ICreatePDFPayload;
    bulkWorkSpace: boolean;
    orderingMemberBoard: IOrderingMemberBoardPayload;
    createSpace: ISpacePayload;
    updateSpace: ISpacePayload;
    deleteSpace: IUUID;
    updateBatchMemberSpace: Array<IUUID>;
    createMemberSpace: IMemberSpacePayload;
    updateMemberSpace: IMemberSpacePayload;
    deleteMemberSpace: IUUID;
    createBoardStatus: IBoardStatusPayload;
    updateBoardStatus: IBoardStatusPayload;
    deleteBoardStatus: IUUID;
    updateBatchMemberBoard: Array<IUUID>;
    createBoard: IBoardPayload;
    updateBoard: IBoardPayload;
    deleteBoard: IUUID;
    createBoardList: IBoardListPayload;
    updateBoardList: IBoardListPayload;
    updateBatchBoardList: Array<IUUID>;
    deleteBoardList: IUUID;
    createBoardGroupColumn: IBoardGroupColumnPayload;
    updateBoardGroupColumn: IBoardGroupColumnPayload;
    updateBatchBoardGroupColumn: Array<IUUID>;
    deleteBoardGroupColumn: IUUID;
    createBoardColumnType: IBoardColumnTypePayload;
    updateBoardColumnType: IBoardColumnTypePayload;
    deleteBoardColumnType: IUUID;
    createBoardColumnValue: IBoardColumnValuePayload;
    updateBoardColumnValue: IBoardColumnValuePayload;
    deleteBoardColumnValue: IUUID;
    createCardColumnValue: ICardColumnValuePayload;
    updateCardColumnValue: ICardColumnValuePayload;
    deleteCardColumnValue: IUUID;
    createBoardMemberReference: IBoardMemberReferencePayload;
    updateBoardMemberReference: IBoardMemberReferencePayload;
    deleteBoardMemberReference: IUUID;
    createBoardRowForResourceQuote: IBoardRowPayload;
    createBoardRow: IBoardRowPayload;
    updateBoardRow: IBoardRowPayload;
    updateBatchBoardRow: Array<IUUID>;
    deleteBoardRow: IUUID;
    createCard: ICardPayload;
    updateCard: ICardPayload;
    deleteCard: IUUID;
    createCardChecklist: ICardChecklistPayload;
    updateCardChecklist: ICardChecklistPayload;
    deleteCardChecklist: IUUID;
    updateBatchCardCheckComponent: Array<IUUID>;
    createCardCheckComponent: ICardCheckComponentPayload;
    updateCardCheckComponent: ICardCheckComponentPayload;
    deleteCardCheckComponent: IUUID;
    createCardReply: ICardReplyPayload;
    updateCardReply: ICardReplyPayload;
    deleteCardReply: IUUID;
    createNestedFiles: INestedFilesPayload;
    updateNestedFiles: INestedFilesPayload;
    deleteNestedFiles: IUUID;
    createMemberCard: IMemberCardPayload;
    updateMemberCard: IMemberCardPayload;
    deleteMemberCard: IUUID;
    createMemberBoard: IMemberBoardPayload;
    updateMemberBoard: IMemberBoardPayload;
    deleteMemberBoard: IUUID;
    deleteMeasure: IDeleteMeasurePayload;
    updateMeasure: IUpdateMeasurePayload;
    deleteMaterialCategory: IDeleteMaterialCategoryPayload;
    createMeasureValue: ICreateMeasureValuePayload;
    updateMeasureValue: IUpdateMeasureValuePayload;
    deleteMeasureValue: IDeleteMeasureValuePayload;
    deleteMeasureUnityTwo: IDeleteMeasureUnityTwoPayload;
    updateModule: IUpdateModulePayload;
    createMaterialQuotation: ICreateMaterialQuotationPayload;
    updateMaterialQuotation: IUpdateMaterialQuotationPayload;
    deleteMaterialQuotation: IDeleteMaterialQuotationPayload;
    createMaterialModule: ICreateMaterialModulePayload;
    updateMaterialModule: IUpdateMaterialModulePayload;
    deleteMaterialModule: IDeleteMaterialModulePayload;
    createUserCustomer: ICreateUserCustomerPayload;
    createMeasureUnity: ICreateMeasureUnityPayload;
    updateMeasureUnity: IUpdateMeasureUnityPayload;
    deleteMeasureUnity: IDeleteMeasureUnityPayload;
    createAttribute: ICreateAttributePayload;
    createAttributeValue: ICreateAttributeValuePayload;
    createBuildingSite: ICreateBuildingSiteAddressPayload;
    createMadreQuotation: ICreateMadreQuotationPayload;
    createMaterialCategory: ICreateMaterialCategoryPayload;
    createMaterialCombination: ICreateMaterialCombinationPayload;
    createMaterial: ICreateMaterialPayload;
    createMaterialStockMeasure: ICreateMaterialStockMeasurePayload;
    createMaterialStock: ICreateMaterialStockPayload;
    createMaterialVariableQuotation: ICreateMaterialVariableQuotationPayload;
    createMeasure: ICreateMeasurePayload;
    createMeasureUnityTwo: ICreateMeasureTwoPayload;
    createModuleCategory: ICreateModuleCategoryPayload;
    createModule: ICreateModulePayload;
    createQuotation: ICreateQuotationPayload;
    createQuotationModule: ICreateQuotationModulePayload;
    createVariable: ICreateVariablePayload;
    deleteAttribute: IDeleteAttributePayload;
    deleteAttributeValue: IDeleteAttributeValuePayload;
    deleteBuildingSiteAddress: IDeleteBuildingSiteAddressPayload;
    deleteMaterialCombination: IDeleteMaterialCombinationPayload;
    deleteMaterial: IDeleteMaterialPayload;
    deleteMaterialStock: IDeleteMaterialStockPayload;
    deleteMaterialStockMeasure: IDeleteMaterialStockMeasurePayload;
    deleteMaterialVariableQuotation: IDeleteMaterialVariableQuotationPayload;
    deleteModuleCategory: IDeleteModuleCategoryPayload;
    deleteModule: IDeleteModulePayload;
    deleteQuotationModule: IDeleteQuotationModulePayload;
    deleteQuotation: IDeleteQuotationPayload;
    deleteVariable: IDeleteVariablePayload;
    updateAttribute: IUpdateAttributePayload;
    updateAttributeValue: IUpdateAttributeValuePayload;
    updateBuildingSiteAddress: IUpdateBuildingSiteAddressPayload;
    updateMaterialCategory: IUpdateMaterialCategoryPayload;
    updateMaterialCombination: IUpdateMaterialCombinationPayload;
    updateMaterial: IUpdateMaterialPayload;
    updateMaterialStockMeasure: IUpdateMaterialStockMeasurePayload;
    updateMaterialStock: IUpdateMaterialStockPayload;
    updateMadreQuotation: IUpdateMadreQuotationPayload;
    deleteMadreQuotation: IDeleteMadreQuotationPayload;
    updateMaterialVariableQuotation: IUpdateMaterialVariableQuotationPayload;
    updateMeasureUnityTwo: IUpdateMeasureUnityTwoPayload;
    updateCategoryModule: IUpdateModuleCategoryPayload;
    updateQuotationModule: IUpdateQuotationModulePayload;
    updateQuotation: IUpdateQuotationPayload;
    updateVariable: IUpdateVariablePayload;
    updateAnalysis: IUpdateAnalysisPayload;
    createClient: ICreateClientPayload;
    updateClient: IUpdateClientPayload;
    createConsult: ICreateConsultPayload;
    updateConsult: IUpdateConsultPayload;
    calculator_deleteConsult: IDeleteConsultPayload;
    createCompared: ICreateComparedPayload;
    updateCompared: IUpdateComparedPayload;
    deleteCompared: IDeleteComparedPayload;
    createCarMercado: ICreateCarMercadoPayload;
    createCarMercadoMassive: ICreateCarMercadoMassivePayload;
    deleteCarMercado: IDeleteCarMercadoPayload;
    uploadFile: string;
    zipFolderContent: IZipFolderContentPayload;
    createFolder: IFolderPayload;
    updateFolder: IFolderPayload;
    deleteFolder: IDeleteFolderPayLoad;
    createFile: ICreateFilePayload;
    updateFile: IUpdateFilesPayload;
    deleteFile: IDeleteFilePayLoad;
    shareFile: IShareFilePayload;
    shareFolder: IShareFolderPayload;
    stopSharingFolder: IStopSharingFolderPayload;
    stopSharingFile: IStopSharingFilePayload;
    uploadFilePrivate: IUploadFilePrivatePayload;
    addChatMember: IAddChatMemberPayload;
    addChatMemberWs: IAddChatMemberWsPayload;
    conversationId: IGetConversationIdPayload;
    deleteReply: IDeleteReplyPayload;
    createWallet: IWalletPayload;
    updateWallet: IWalletPayload;
    deleteWallet: IUUID;
    createWalletTransaction: IWalletTransactionPayload;
    createMultipleWalletTransaction: IMultipleWalletTransactionPayload;
    createWalletTransactionStatus: IWalletTransactionStatusPayload;
    createWalletTransactionMemberRelation: IWalletTransactionMemberRelationPayload;
    createMemberWallet: IMemberWalletPayload;
    updateMemberWallet: IMemberWalletPayload;
    deleteMemberWallet: IUUID;
    createProjectWalletKey: IProjectWalletKeyPayload;
    updateProjectWalletKey: IProjectWalletKeyPayload;
    deleteProjectWalletKey: IUUID;
    createCertificateMovement: ICreateCertificateMovementPayload;
    deleteCertificate: IDeleteCertificatePayload;
    updateInsurerModule: IUpdateInsurerModulePayload;
    createInsurerModule: ICreateInsurerModulePayload;
    createPolicyModule: ICreatePolicyModulePayload;
    updatePolicyModule: IUpdatePolicyModulePayload;
    deletePolicyModule: IDeletePolicyModulePayload;
    createInsurerFee: ICreateInsurerFeePayload;
    deleteInsurerFee: IDeleteInsurerFeePayload;
    updateInsurerFee: IUpdateInsurerFeePayload;
    createPolicy: ICreatePolicyPayload;
    cancelCertificate: ICancelCertificatePayload;
    createBeneficiary: ICreateBeneficiaryPayload;
    createCertificate: ICreateCertificatePayload;
    createCertificateFile: ICreateCertificateFilePayload;
    createContact: ICreateContactPayload;
    createContractorBranchOffice: ICreateContractorBranchOfficePayload;
    createContractorContact: ICreateContractorContactPayload;
    createContractor: ICreateContractorPayload;
    createContractorPolicy: ICreateContractorPolicyPayload;
    createCountryRequest: ICreateCountryRequestPayload;
    createFee: ICreateFeePayload;
    createInsurerCompany: ICreateInsurerCompanyPayload;
    createIssuedReport: ICreateIssuedReportPayload;
    createMerchandiseDetail: ICreateMerchandiseDetailPayload;
    createMerchandise: ICreateMerchandisePayload;
    createMoney: ICreateMoneyPayload;
    createMoneyPolicy: ICreateMoneyPolicyPayload;
    itus_createOffice: ICreateOfficePayload;
    deleteBeneficiary: IDeleteBeneficiaryPayload;
    deleteContact: IDeleteContactPayload;
    deleteContractor: IDeleteContractorPayload;
    deleteContractorOffice: IDeleteContractorOfficePayload;
    deleteContractorPolicy: IDeleteContractorPolicyPayload;
    deleteInsurerModule: IDeleteInsurerModulePayload;
    deleteFee: IDeleteFeePayload;
    deleteMerchandise: IDeleteMerchandisePayload;
    deleteInsurerCompany: IDeleteInsurerCompanyPayload;
    deleteMoney: IDeleteMoneyPayload;
    deletePolicy: IDeletePolicyPayload;
    updateBeneficiary: IUpdateBeneficiaryPayload;
    updateCertificate: IUpdateCertificatePayload;
    updateContact: IUpdateContactPayload;
    updateContractor: IUpdateContractorPayload;
    updateFee: IUpdateFeePayload;
    updateInsurerCompany: IUpdateInsurerCompanyPayload;
    updateMerchandise: IUpdateMerchandisePayload;
    updateMoney: IUpdateMoneyPayload;
    updatePolicy: IUpdatePolicyPayload;
    createAttendanceStudent: IAttendancePayload;
    createClassroom: IClassroomPayload;
    createDayService: IDayServicePayload;
    createGrade: IGradePayload;
    createLevel: ILevelPayload;
    createSchool: ISchoolPayload;
    createStudent: IStudentPayload;
    createBulkStudent: ICreateBulkStudentPayload;
    updateAttendanceStudents: IAttendancePayload;
    updateClassroom: IClassroomPayload;
    updateDayService: IDayServicePayload;
    updateGrade: IGradePayload;
    updateLevel: ILevelPayload;
    updateSchool: ISchoolPayload;
    updateStudent: IStudentPayload;
    deleteAttendanceStudent: IUUID;
    deleteClassroom: IUUID;
    deleteDayService: IUUID;
    deleteGrade: IUUID;
    deleteLevel: IUUID;
    deleteSchool: IUUID;
    deleteStudent: IUUID;
    deleteStudentTutor: IUUID;
    createBeneficiarie: IBeneficiariePayload;
    updateBeneficiarie: IBeneficiariePayload;
    deleteBeneficiarie: IUUID;
    createFormAccidentDisease: IFormAccidentDiseasePayload;
    updateFormAccidentDisease: IFormAccidentDiseasePayload;
    deleteFormAccidentDisease: IUUID;
    createFormAutomobileDamage: IFormAutomobileDamagePayload;
    updateFormAutomobileDamage: IFormAutomobileDamagePayload;
    deleteFormAutomobileDamage: IUUID;
    createFormCarCatalog: IFormCarCatalogPayload;
    updateFormCarCatalog: IFormCarCatalogPayload;
    deleteFormCarCatalog: IUUID;
    createFormDamage: IFormDamagePayload;
    updateFormDamage: IFormDamagePayload;
    deleteFormDamage: IUUID;
    createFormLife: IFormLifePayload;
    updateFormLife: IFormLifePayload;
    deleteFormLife: IUUID;
    createInvolvedReferrer: IInvolvedReferrerPayload;
    updateInvolvedReferrer: IInvolvedReferrerPayload;
    deleteInvolvedReferrer: IUUID;
    createOldPolice: IOldPolicePayload;
    updateOldPolice: IOldPolicePayload;
    deleteOldPolice: IUUID;
    createPersonalInformation: IPersonalInformationPayload;
    updatePersonalInformation: IPersonalInformationPayload;
    deletePersonalInformation: IUUID;
    createPolice: IPolicePayload;
    updatePolice: IPolicePayload;
    deletePolice: IUUID;
    createPoliceAssign: IPoliceAssignPayload;
    updatePoliceAssign: IPoliceAssignPayload;
    deletePoliceAssign: IUUID;
    createPolicePendient: IPolicePendientPayload;
    updatePolicePendient: IPolicePendientPayload;
    deletePolicePendient: IUUID;
    createPoliceQuote: IPoliceQuotePayload;
    updatePoliceQuote: IPoliceQuotePayload;
    deletePoliceQuote: IUUID;
    updatePoliceQuotePrima: IPoliceQuotePrimaPayload;
    deletePoliceQuotePrima: IUUID;
    createRelationShip: IRelationShipPayload;
    updateRelationShip: IRelationShipPayload;
    deleteRelationShip: IUUID;
    createSucursal: ISucursalPayload;
    updateSucursal: ISucursalPayload;
    deleteSucursal: IUUID;
    createAgentKey: IAgentKeyPayload;
    updateAgentKey: IAgentKeyPayload;
    deleteAgentKey: IUUID;
    createAgentProviderContact: IAgentProviderContactPayload;
    updateAgentProviderContact: IAgentProviderContactPayload;
    deleteAgentProviderContact: IUUID;
    createAgentProvider: IAgentProviderPayload;
    updateAgentProvider: IAgentProviderPayload;
    deleteAgentProvider: IUUID;
    createBranch: IBranchPayload;
    updateBranch: IBranchPayload;
    deleteBranch: IUUID;
    createComission: IComissionPayload;
    updateComission: IComissionPayload;
    deleteComission: IUUID;
    createContractorCelula: IContractorCelulaPayload;
    updateContractorCelula: IContractorCelulaPayload;
    deleteContractorCelula: IUUID;
    createContractorClassification: IContractorClassificationPayload;
    updateContractorClassification: IContractorClassificationPayload;
    deleteContractorClassification: IUUID;
    createContractorGroupingLevel: IContractorGroupingLevelPayload;
    updateContractorGroupingLevel: IContractorGroupingLevelPayload;
    deleteContractorGroupingLevel: IUUID;
    saam_createContractor: IContractorPayload;
    saam_updateContractor: IContractorPayload;
    saam_deleteContractor: IUUID;
    createContractorProcessDocument: IContractorProcessDocumentPayload;
    updateContractorProcessDocument: IContractorProcessDocumentPayload;
    deleteContractorProcessDocument: IUUID;
    createCoverageCoinsurance: ICoverageCoinsurancePayload;
    updateCoverageCoinsurance: ICoverageCoinsurancePayload;
    deleteCoverageCoinsurance: IUUID;
    createCoverageDeductible: ICoverageDeductiblePayload;
    updateCoverageDeductible: ICoverageDeductiblePayload;
    deleteCoverageDeductible: IUUID;
    createCoverageInPolicy: ICoverageInPolicyPayload;
    updateCoverageInPolicy: ICoverageInPolicyPayload;
    deleteCoverageInPolicy: IUUID;
    createCoverage: ICoveragePayload;
    updateCoverage: ICoveragePayload;
    deleteCoverage: IUUID;
    createCoveragePackage: ICoveragePackagePayload;
    updateCoveragePackage: ICoveragePackagePayload;
    deleteCoveragePackage: IUUID;
    createCoverageSuminsured: ICoverageSuminsuredPayload;
    updateCoverageSuminsured: ICoverageSuminsuredPayload;
    deleteCoverageSuminsured: IUUID;
    createCoverageTopecoinsurance: ICoverageTopecoinsurancePayload;
    updateCoverageTopecoinsurance: ICoverageTopecoinsurancePayload;
    deleteCoverageTopecoinsurance: IUUID;
    createProcessDocument: IProcessDocumentPayload;
    updateProcessDocument: IProcessDocumentPayload;
    deleteProcessDocument: IUUID;
    createProjectAgentProviderBranch: IProjectAgentProviderBranchPayload;
    updateProjectAgentProviderBranch: IProjectAgentProviderBranchPayload;
    deleteProjectAgentProviderBranch: IUUID;
    createProjectAgentProvider: IProjectAgentProviderPayload;
    updateProjectAgentProvider: IProjectAgentProviderPayload;
    deleteProjectAgentProvider: IUUID;
    createReferrerAccountState: IReferrerAccountStatePayload;
    updateReferrerAccountState: IReferrerAccountStatePayload;
    deleteReferrerAccountState: IUUID;
    createReferrerBranch: IReferrerBranchPayload;
    updateReferrerBranch: IReferrerBranchPayload;
    deleteReferrerBranch: IUUID;
    createReferrer: IReferrerPayload;
    updateReferrer: IReferrerPayload;
    deleteReferrer: IUUID;
    createResponsableInvolved: IResponsableInvolvedPayload;
    updateResponsableInvolved: IResponsableInvolvedPayload;
    deleteResponsableInvolved: IUUID;
    createSubBranch: ISubBranchPayload;
    updateSubBranch: ISubBranchPayload;
    deleteSubBranch: IUUID;
    createProjectAgentProviderEmailReminder: IProjectAgentProviderEmailReminderPayload;
    updateProjectAgentProviderEmailReminder: IProjectAgentProviderEmailReminderPayload;
    deleteProjectAgentProviderEmailReminder: IUUID;
    createEndorsement: IEndorsementPayload;
    updateEndorsement: IEndorsementPayload;
    deleteEndorsement: IUUID;
    createEndorsementCert: IEndorsementCertPayload;
    updateEndorsementCert: IEndorsementCertPayload;
    deleteEndorsementCert: IUUID;
    createSinister: ISinisterPayload;
    updateSinister: ISinisterPayload;
    deleteSinister: IUUID;
    createSinisterAiling: ISinisterAilingPayload;
    updateSinisterAiling: ISinisterAilingPayload;
    deleteSinisterAiling: IUUID;
    createSinisterCar: ISinisterCarPayload;
    updateSinisterCar: ISinisterCarPayload;
    deleteSinisterCar: IUUID;
    createSinisterCarContact: ISinisterCarContactPayload;
    updateSinisterCarContact: ISinisterCarContactPayload;
    deleteSinisterCarContact: IUUID;
    createSinisterDamage: ISinisterDamagePayload;
    updateSinisterDamage: ISinisterDamagePayload;
    deleteSinisterDamage: IUUID;
    createSinisterDamageContact: ISinisterDamageContactPayload;
    updateSinisterDamageContact: ISinisterDamageContactPayload;
    deleteSinisterDamageContact: IUUID;
    createSinisterLife: ISinisterLifePayload;
    updateSinisterLife: ISinisterLifePayload;
    deleteSinisterLife: IUUID;
    createSinisterLifeContact: ISinisterLifeContactPayload;
    updateSinisterLifeContact: ISinisterLifeContactPayload;
    deleteSinisterLifeContact: IUUID;
    createSinisterHospital: ISinisterHospitalPayload;
    updateSinisterHospital: ISinisterHospitalPayload;
    deleteSinisterHospital: IUUID;
    createSinisterFactura: ISinisterFacturaPayload;
    updateSinisterFactura: ISinisterFacturaPayload;
    deleteSinisterFactura: IUUID;
    createPoliceReceipt: IPoliceReceiptPayload;
    updatePoliceReceipt: IPoliceReceiptPayload;
    deletePoliceReceipt: IUUID;
    createPoliceReceiptAccount: IPoliceReceiptAccountPayload;
    updatePoliceReceiptAccount: IPoliceReceiptAccountPayload;
    deletePoliceReceiptAccount: IUUID;
    createPoliceReceiptAccountState: IPoliceReceiptAccountStatePayload;
    updatePoliceReceiptAccountState: IPoliceReceiptAccountStatePayload;
    deletePoliceReceiptAccountState: IUUID;
    createPoliceReceiptFolio: IPoliceReceiptFolioPayload;
    updatePoliceReceiptFolio: IPoliceReceiptFolioPayload;
    deletePoliceReceiptFolio: IUUID;
    createPoliceReceiptPayment: IPoliceReceiptPaymentPayload;
    updatePoliceReceiptPayment: IPoliceReceiptPaymentPayload;
    deletePoliceReceiptPayment: IUUID;
    createPoliceFile: IPoliceFilePayload;
    updatePoliceFile: IPoliceFilePayload;
    deletePoliceFile: IUUID;
    createInsurerComment: IInsurerCommentPayload;
    updateInsurerComment: IInsurerCommentPayload;
    deleteInsurerComment: IUUID;
    createInsurerFileReading: IInsurerFileReadingPayload;
    updateInsurerFileReading: IInsurerFileReadingPayload;
    deleteInsurerFileReading: IUUID;
    createInsurerFileReadingTag: IInsurerFileReadingTagPayload;
    updateInsurerFileReadingTag: IInsurerFileReadingTagPayload;
    deleteInsurerFileReadingTag: IUUID;
    updateInsurerBailType: IInsurerBailTypePayload;
    deleteInsurerBailType: IUUID;
    createInsurerInvolved: IInsurerInvolvedPayload;
    updateInsurerInvolved: IInsurerInvolvedPayload;
    deleteInsurerInvolved: IUUID;
    createInsurerLog: IInsurerLogPayload;
    updateInsurerLog: IInsurerLogPayload;
    deleteInsurerLog: IUUID;
    createInsurerLogEmail: IInsurerLogEmailPayload;
    updateInsurerLogEmail: IInsurerLogEmailPayload;
    deleteInsurerLogEmail: IUUID;
    createInsurerOrgInfo: IInsurerOrgInfoPayload;
    updateInsurerOrgInfo: IInsurerOrgInfoPayload;
    deleteInsurerOrgInfo: IUUID;
    createInsurerTicket: IInsurerTicketPayload;
    updateInsurerTicket: IInsurerTicketPayload;
    deleteInsurerTicket: IUUID;
    createInsurerSchedule: IInsurerSchedulePayload;
    updateInsurerSchedule: IInsurerSchedulePayload;
    deleteInsurerSchedule: IUUID;
    createInsurerScheduleParticipant: IInsurerScheduleParticipantPayload;
    updateInsurerScheduleParticipant: IInsurerScheduleParticipantPayload;
    deleteInsurerScheduleParticipant: IUUID;
    createInsurerNotification: IInsurerNotificationPayload;
    updateInsurerNotification: IInsurerNotificationPayload;
    deleteInsurerNotification: IUUID;
    createInsurerReminder: IInsurerReminderPayload;
    updateInsurerReminder: IInsurerReminderPayload;
    deleteInsurerReminder: IUUID;
    createInsurerReminderProjectAgentProvider: IInsurerReminderProjectAgentProviderPayload;
    updateInsurerReminderProjectAgentProvider: IInsurerReminderProjectAgentProviderPayload;
    deleteInsurerReminderProjectAgentProvider: IUUID;
    createInsurerReminderRecord: IInsurerReminderRecordPayload;
    updateInsurerReminderRecord: IInsurerReminderRecordPayload;
    deleteInsurerReminderRecord: IUUID;
    createInsurerReminderSubBranch: IInsurerReminderSubBranchPayload;
    updateInsurerReminderSubBranch: IInsurerReminderSubBranchPayload;
    deleteInsurerReminderSubBranch: IUUID;
    createInsurerBailType: IInsurerBailTypePayload;
    createInsurerBirthDateTemplate: IInsurerBirthDateTemplatePayload;
    updateInsurerBirthDateTemplate: IInsurerBirthDateTemplatePayload;
    deleteInsurerBirthDateTemplate: IUUID;
    createInsurerDirectory: IInsurerDirectoryPayload;
    updateInsurerDirectory: IInsurerDirectoryPayload;
    deleteInsurerDirectory: IUUID;
    createInsurerExpense: IInsurerExpensePayload;
    updateInsurerExpense: IInsurerExpensePayload;
    deleteInsurerExpense: IUUID;
    createInsurerIbisForm: IInsurerIbisFormPayload;
    updateInsurerIbisForm: IInsurerIbisFormPayload;
    deleteInsurerIbisForm: IUUID;
    createInsurerIbisProvider: IInsurerIbisProviderPayload;
    updateInsurerIbisProvider: IInsurerIbisProviderPayload;
    deleteInsurerIbisProvider: IUUID;
    createInsurerSender: IInsurerSenderPayload;
    updateInsurerSender: IInsurerSenderPayload;
    deleteInsurerSender: IUUID;
    createInsurerZipCodeSepomex: IInsurerZipCodeSepomexPayload;
    updateInsurerZipCodeSepomex: IInsurerZipCodeSepomexPayload;
    deleteInsurerZipCodeSepomex: IUUID;
    createAgentProviderBono: IAgentProviderBonoPayload;
    updateAgentProviderBono: IAgentProviderBonoPayload;
    deleteAgentProviderBono: IUUID;
    saam_sendNotification: ISendNotificationPayload;
    createMultipleNotification: IMultipleNotificationPayload;
    createMultipleMemberNotification: IMultipleMemberNotificationPayload;
    createMemberNotification: IMemberNotificationPayload;
    createNotification: INotificationPayload;
    updateMultipleNotification: IMultipleNotificationPayload;
    updateNotification: INotificationPayload;
    deleteNotification: INotificationPayload;
    createDevice: IDevicePayload;
    updateDevice: IDevicePayload;
    deleteDevice: IDevicePayload;
    addDots: boolean;
    setCodeAsUnavailable: ISetCodeAsUnavailablePayload;
    createAdminCode: ICreateAdminCodePayload;
    scanCode: IScanCodePayload;
    sendMessage: ISendMessagePayload;
    lookForCode: ILookForCodePayload;
    createCode: ICreateCodePayload;
    exchange_createProvider: ICreateProviderPayload;
    createPrizeCategory: ICreatePrizeCategoryPayload;
    createPrizeCode: ICreatePrizeCodePayload;
    deleteCode: IDeleteCodePayload;
    deletePrizeCode: IDeletePrizeCodePayload;
    exchange_deleteProvider: IDeleteProviderPayload;
    exchangeDots: IExchangeDotsPayload;
    createAdverseEvent: ICreateAdverseEventPayload;
    execCreateCodes: boolean;
    setGlobalCode: boolean;
    deleteAdverseEvent: IDeleteAdverseEventPayload;
    createBrand: ICreateBrandPayload;
}
export interface ISendQuizToEmailInput {
    quiz: Array<IKeyValuePairOfStringAndStringInput>;
    email: string;
}
export interface IKeyValuePairOfStringAndStringInput {
    key: string;
    value: string;
}
export interface ISendQuizToEmailPayload {
    message: string;
}
export interface IUpdateProfileWithIdInput {
    memberId: IUUID;
    email?: string;
    firstName?: string;
    lastName?: string;
    maritalStatus?: IMaritalStatus;
    hospital?: string;
    state?: string;
    institution?: string;
    gender?: IGender;
    companyName?: string;
    photo?: string;
    phone?: string;
    roleCode?: string;
    bussinessName?: string;
    countryCode?: string;
    projectRoleCode?: string;
    quatorProfileId?: string;
    biography?: string;
    siteUrl?: string;
    siteLogo?: string;
    cURP?: string;
    rFC?: string;
    nSS?: string;
    infonavitCredit?: string;
    nationality?: string;
    age?: number;
    dateOfBirth?: string;
}
export interface IUpdateProfileWithIdPayload {
    member: IMember;
}
export interface INicheInput {
    name?: string;
    description?: string;
}
export interface INichePayload {
    niche: INiche;
}
export interface INicheServiceInput {
    microserviceId?: IUUID;
    nicheId?: IUUID;
    codeName?: string;
}
export interface INicheServicePayload {
    nicheService: INicheService;
}
export interface ICreateBulkTutorInput {
    projectId: IUUID;
    cSVContent?: string;
    isActive: boolean;
    projectRoleCode?: string;
    countryCode?: string;
}
export interface ICreateBulkTutorPayload {
    message: string;
}
export interface IUpdateBillingDataInput {
    memberId: IUUID;
    person: IPerson;
    businessName: string;
    rFC?: string;
    useCDFI?: IUseCDFI;
    paymentMethod?: Iauth_PaymentMethod;
    paymentTerm?: IPaymentTerm;
    taxSituation?: string;
}
export interface IUpdateBillingDataPayload {
    billingData: IBillingData;
}
export interface IUpdateCompanyDataInput {
    memberId: IUUID;
    companyName: string;
    companyCategory?: string;
    sucursal?: string;
    phones?: string;
    webSite?: string;
}
export interface IUpdateCompanyDataPayload {
    enterpriseData: IEnterpriseData;
}
export interface ICreateBulkTeacherInput {
    schoolId: IUUID;
    projectId: IUUID;
    cSVContent: string;
    isActive: boolean;
    projectRoleCode?: string;
    countryCode?: string;
}
export interface ICreateBulkTeacherPayload {
    message: string;
}
export interface IUpdateHealthInsuranceInput {
    memberId: IUUID;
    nSS?: string;
    insuranceMajorMedicalExpenses?: string;
    typeInsurance?: ITypeInsurance;
    insuranceCarrier?: string;
    policyNumber?: string;
    dischargeDate?: IDateTime;
    expirationDate?: IDateTime;
}
export interface IUpdateHealthInsurancePayload {
    healthInsurance: IHealthInsurance;
}
export interface ICreateAttendanceExcelInput {
    projectId: IUUID;
}
export interface ICreateAttendanceExcelPayload {
    url: string;
}
export interface ICreateBulkUserInput {
    projectId: IUUID;
    cSVContent: string;
    isActive: boolean;
    projectRoleCode?: string;
    countryCode?: string;
}
export interface ICreateBulkUserPayload {
    message: string;
}
export interface ICreateAttendanceInput {
    memberId: IUUID;
    conferenceId: number;
}
export interface ICreateAttendancePayload {
    attendance: IAttendance;
}
export interface ICreateCheisiUsersExcelInput {
    projectId: IUUID;
}
export interface ICreateCheisiUsersExcelPayload {
    url: string;
}
export interface INewContactFormInput {
    message: string;
    email: string;
    projectId?: IUUID;
    receiver: string;
}
export interface INewContactFormPayload {
    message: string;
}
export interface INewExternalLoginInput {
    memberId: IUUID;
    token: string;
    providerName: string;
    email: string;
}
export interface INewExternalLoginPayload {
    externalLogin: IExternalLogin;
}
export interface IExternalLogin {
    memberId: IUUID;
    token: string;
    providerName: string;
    email: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDeleteUserInput {
    memberId: IUUID;
}
export interface IDeleteUserPayload {
    message: string;
}
export interface ITestBulkInput {
    test: string;
}
export interface ITestBulkPayload {
    message: string;
}
export interface IUpdatePositionColumnsInput {
    items: Array<IViewColumnPageInput>;
}
export interface IViewColumnPageInput {
    id: IUUID;
    position: number;
}
export interface IUpdatePositionColumnsPayload {
    items: Array<IViewColumnPage>;
}
export interface IViewColumnPage {
    id: IUUID;
    position: number;
}
export interface IUpdatePositionBlockColumnsInput {
    items: Array<IViewBlockColumnPageInput>;
}
export interface IViewBlockColumnPageInput {
    id: IUUID;
    position: number;
}
export interface IUpdatePositionBlockColumnsPayload {
    items: Array<IViewBlockColumnPage>;
}
export interface IViewBlockColumnPage {
    id: IUUID;
    position: number;
}
export interface ILoginWithProviderInput {
    token: string;
    providerName: string;
    email: string;
}
export interface ILoginWithProviderPayload {
    externalLogin: IExternalLogin;
}
export interface ICreateProjectSocialNetworkInput {
    projectId: IUUID;
    socialNetworkType: ISocialNetworkType;
    value: string;
}
export interface ICreateProjectSocialNetworkPayload {
    projectSocialNetwork: IProjectSocialNetwork;
}
export interface IUpdateProjectSocialNetworkInput {
    id: IUUID;
    socialNetworkType?: ISocialNetworkType;
    value?: string;
}
export interface IUpdateProjectSocialNetworkPayload {
    message: string;
}
export interface IDeleteProjectSocialNetworkInput {
    id: IUUID;
}
export interface IDeleteProjectSocialNetworkPayload {
    message: string;
}
export interface ICreateRecommendedProjectInput {
    projectId: IUUID;
    position?: number;
}
export interface ICreateRecommendedProjectPayload {
    recommendedProject: IRecommendedProject;
}
export interface IUpdateRecommendedProjectInput {
    recommendedProjectId: IUUID;
    projectId?: IUUID;
    position?: number;
}
export interface IUpdateRecommendedProjectPayload {
    message: string;
}
export interface IDeleteRecommendedProjectInput {
    id: IUUID;
}
export interface IDeleteRecommendedProjectPayload {
    message: string;
}
export interface ISetProjectToProductionInput {
    projectId: IUUID;
    status: boolean;
}
export interface ISetProjectToProductionPayload {
    message: string;
}
export interface ICreateProjectTemplateInput {
    projectId: IUUID;
    templateId: IUUID;
    serviceEmail: IServiceEmail;
    templateService: ITemplateService;
}
export interface ICreateProjectTemplatePayload {
    projectTemplate: IProjectTemplate;
}
export interface IUpdateProjectTemplateInput {
    projectTemplateId: IUUID;
    projectId?: IUUID;
    templateId?: IUUID;
    serviceEmail?: IServiceEmail;
    templateService?: ITemplateService;
}
export interface IUpdateProjectTemplatePayload {
    message: string;
}
export interface IDeleteProjectTemplateInput {
    id: IUUID;
}
export interface IDeleteProjectTemplatePayload {
    message: string;
}
export interface ICreateMemberInput {
    email: string;
    password: string;
    planId?: IUUID;
    useBilling?: boolean;
    socialReason?: string;
    firstName?: string;
    lastName?: string;
    phone?: string;
    photo?: string;
    isActive: boolean;
    roleCode?: string;
    countryCode?: string;
    companyId?: string;
}
export interface ICreateMemberPayload {
    accessToken: string;
    member: IMember;
}
export interface ILoginMemberInput {
    email: string;
    password: string;
    projectId?: string;
}
export interface ILoginMemberPayload {
    accessToken: string;
    member: IMember;
}
export interface ICreateCompanyInput {
    name: string;
}
export interface ICreateCompanyPayload {
    company: ICompany;
}
export interface ICreateProjectInput {
    companyId: IUUID;
    name: string;
    description: string;
    industryId: IUUID;
    logo: string;
    tagLine: string;
    url?: string;
}
export interface ICreateProjectPayload {
    project: IProject;
}
export interface ICreateNewRolesPayload {
    message: string;
}
export interface ICreateUserInput {
    roleType?: string;
    dialCode?: string;
    city?: string;
    town?: string;
    houseNumber?: string;
    colony?: string;
    street?: string;
    businessId?: IUUID;
    businessIds?: Array<IUUID>;
    branchOfficeIds?: Array<IUUID>;
    projectId: IUUID;
    email: string;
    password: string;
    accessToken?: string;
    provider?: string;
    adminCode?: string;
    state?: string;
    institution?: string;
    hospital?: string;
    maritalStatus?: IMaritalStatus;
    gender?: IGender;
    postalCode?: string;
    address?: string;
    periodInvoice?: IPeriodInvoice;
    billingForm?: IBillingForm;
    paymentTerm?: IPaymentTerm;
    quatorProfileId?: string;
    firstName?: string;
    lastName?: string;
    photo?: string;
    phone?: string;
    biography?: string;
    siteUrl?: string;
    siteLogo?: string;
    cURP?: string;
    url?: string;
    rFC?: string;
    nSS?: string;
    infonavitCredit?: string;
    nationality?: string;
    age?: number;
    dateOfBirth?: string;
    isActive: boolean;
    projectRoleCode?: string;
    countryCode?: string;
}
export interface ICreateUserPayload {
    accessToken: string;
    member: IMember;
}
export interface ICreateOrFindUserInput {
    projectId: IUUID;
    email: string;
    password: string;
    state?: string;
    institution?: string;
    hospital?: string;
    maritalStatus?: IMaritalStatus;
    gender?: IGender;
    quatorProfileId?: string;
    firstName?: string;
    lastName?: string;
    photo?: string;
    phone?: string;
    biography?: string;
    siteUrl?: string;
    siteLogo?: string;
    cURP?: string;
    rFC?: string;
    nSS?: string;
    infonavitCredit?: string;
    nationality?: string;
    age?: number;
    dateOfBirth?: IDateTime;
    isActive?: boolean;
    projectRoleCode?: string;
    countryCode?: string;
}
export interface ICreateOrFindUserPayload {
    member: IMember;
}
export interface ICreateOrdinaryUserInput {
    businessIds?: Array<IUUID>;
    projectId: IUUID;
    email?: string;
    password?: string;
    state?: string;
    institution?: string;
    hospital?: string;
    roleType?: string;
    maritalStatus?: IMaritalStatus;
    gender?: IGender;
    quatorProfileId?: string;
    firstName?: string;
    lastName?: string;
    photo?: string;
    phone: string;
    biography?: string;
    siteUrl?: string;
    siteLogo?: string;
    cURP?: string;
    rFC?: string;
    nSS?: string;
    infonavitCredit?: string;
    nationality?: string;
    age?: number;
    dateOfBirth?: IDateTime;
    isActive?: boolean;
    projectRoleCode?: string;
    dialCode?: string;
    slugs?: Array<string>;
    memberIndustry?: IUUID;
    countryCode?: string;
}
export interface ICreateOrdinaryUserPayload {
    member: IMember;
}
export interface ICreateUserWithoutMailInput {
    projectId: IUUID;
    email: string;
    url?: string;
    password: string;
    roleCode?: string;
    maritalStatus?: IMaritalStatus;
    gender?: IGender;
    quatorProfileId?: string;
    firstName?: string;
    lastName?: string;
    photo?: string;
    phone?: string;
    biography?: string;
    siteUrl?: string;
    siteLogo?: string;
    cURP?: string;
    rFC?: string;
    nSS?: string;
    infonavitCredit?: string;
    nationality?: string;
    age?: number;
    dateOfBirth?: string;
    isActive: boolean;
    projectRoleCode?: string;
    countryCode?: string;
}
export interface IUpdateProfileInput {
    photo?: string;
    email?: string;
    businessId?: IUUID;
    branchOfficeIds?: Array<IUUID>;
    dialCode?: string;
    firstName?: string;
    lastName?: string;
    maritalStatus?: IMaritalStatus;
    hospital?: string;
    state?: string;
    institution?: string;
    gender?: IGender;
    companyName?: string;
    phone?: string;
    roleCode?: string;
    bussinessName?: string;
    countryCode?: string;
    memberId?: string;
    projectRoleCode?: string;
    quatorProfileId?: string;
    biography?: string;
    siteUrl?: string;
    siteLogo?: string;
    cURP?: string;
    rFC?: string;
    nSS?: string;
    infonavitCredit?: string;
    nationality?: string;
    age?: number;
    dateOfBirth?: string;
}
export interface IUpdateProfilePayload {
    member: IMember;
}
export interface IUpdatePasswordInput {
    currentPassword: string;
    newPassword: string;
    memberId: string;
}
export interface IUpdatePasswordPayload {
    member: IMember;
}
export interface IActiveMemberInput {
    memberId: string;
    active: boolean;
}
export interface IActiveMemberPayload {
    member: IMember;
}
export interface ICreateProjectRoleInput {
    projectId: IUUID;
    name: string;
    isActive?: boolean;
    label?: string;
    description?: string;
}
export interface ICreateProjectRolePayload {
    projectRole: IProjectRole;
}
export interface IUploadPhotoProfileInput {
    photo: string;
    memberId: string;
}
export interface IUploadPhotoProfilePayload {
    member: IMember;
}
export interface IDeleteProjectInput {
    projectId: IUUID;
}
export interface IDeleteProjectPayload {
    project: IProject;
}
export interface IUpdateCompanyInput {
    companyId: IUUID;
    name?: string;
    industryId?: string;
    photo?: string;
    tagLine?: string;
}
export interface IUpdateCompanyPayload {
    company: ICompany;
}
export interface IRestorePasswordInput {
    newPassword: string;
    memberId: string;
}
export interface IRestorePasswordPayload {
    member: IMember;
}
export interface IRecoverPasswordInput {
    email: string;
    url: string;
    projectId?: string;
}
export interface IRecoverPasswordPayload {
    member: IMember;
}
export interface IVerifyTokenInput {
    token: string;
}
export interface IVerifyTokenPayload {
    member: IMember;
}
export interface ICreateGroupInput {
    projectId: IUUID;
    name: string;
    description?: string;
}
export interface ICreateGroupPayload {
    group: IGroup;
}
export interface IAddGroupToMemberInput {
    groupId: IUUID;
    memberId: IUUID;
}
export interface IAddGroupToMemberPayload {
    memberGroup: IMemberGroup;
}
export interface IMemberGroup {
    memberId: IUUID;
    member: IMember;
    groupId: IUUID;
    group: IGroup;
}
export interface IAddGroupToTaxonomyInput {
    groupId: IUUID;
    taxonomyId: IUUID;
}
export interface IAddGroupToTaxonomyPayload {
    groupTaxonomy: IGroupTaxonomy;
}
export interface IAddTaxonomyToMemberInput {
    memberId: IUUID;
    taxonomyId: IUUID;
}
export interface IAddTaxonomyToMemberPayload {
    memberTaxonomy: IMemberTaxonomy;
}
export interface IDeleteGroupInput {
    groupId: IUUID;
}
export interface IDeleteGroupPayload {
    member: IGroup;
}
export interface IDeleteGroupTaxonomyInput {
    groupId: IUUID;
    taxonomyId: IUUID;
}
export interface IDeleteGroupTaxonomyPayload {
    memberTaxonomy: IGroupTaxonomy;
}
export interface IDeleteMemberGroupMutationInput {
    memberId: IUUID;
    groupId: IUUID;
}
export interface IDeleteMemberGroupMutationPayload {
    memberGroup: IMemberGroup;
}
export interface IDeleteMemberTaxonomyInput {
    memberId: IUUID;
    taxonomyId: IUUID;
}
export interface IDeleteMemberTaxonomyPayload {
    memberTaxonomy: IMemberTaxonomy;
}
export interface IDeleteProjectRoleInput {
    id: IUUID;
    projectId: IUUID;
}
export interface IDeleteProjectRolePayload {
    message: string;
}
export interface ICreateUpdatePermissionInput {
    projectId: IUUID;
    projectRoleId: IUUID;
    rules: string;
}
export interface ICreateUpdatePermissionPayload {
    permission: IPermission;
}
export interface IUpdateProjectInput {
    projectId: IUUID;
    onProduction?: boolean;
    isReady?: boolean;
    name?: string;
    description?: string;
    logo?: string;
    tagLine?: string;
    url?: string;
    industryId?: string;
}
export interface IUpdateProjectPayload {
    project: IProject;
}
export interface IUpdateProjectRoleInput {
    projectRoleId: IUUID;
    isActive?: boolean;
    name?: string;
    label?: string;
    description?: string;
}
export interface IUpdateProjectRolePayload {
    projectRole: IProjectRole;
}
export interface IUpdateGroupInput {
    groupId: IUUID;
    name?: string;
    description?: string;
}
export interface IUpdateGroupPayload {
    group: IGroup;
}
export interface IAddMemberAsAdminInput {
    memberId: IUUID;
    projectId: IUUID;
}
export interface IAddMemberAsAdminPayload {
    message: string;
}
export interface ICreateMemberStreamInput {
    memberId: IUUID;
    isOnline?: boolean;
    userName?: string;
    firstName?: string;
    lastName?: string;
    image?: string;
    description?: string;
}
export interface ICreateMemberStreamPayload {
    memberStream: IMemberStream;
}
export interface IDeleteMemberFromMemberProjectsInput {
    memberId: IUUID;
    projectId?: IUUID;
}
export interface IDeleteMemberFromMemberProjectsPayload {
    message: string;
}
export interface IAddMemberToCompanyInput {
    memberId: IUUID;
    companyId: IUUID;
}
export interface IAddMemberToCompanyPayload {
    message: string;
}
export interface ICreatePageManagerInput {
    pageName: string;
    config?: string;
    projectId: IUUID;
}
export interface ICreatePageManagerPayload {
    pageManager: IPageManager;
}
export interface ICreateViewManagerInput {
    pageManagerId: IUUID;
    name: string;
    default: boolean;
    config?: string;
    projectRoleCode?: string;
    numColumns: number;
}
export interface ICreateViewManagerPayload {
    viewManager: IViewManager;
}
export interface ICreateViewColumnInput {
    viewManagerId: IUUID;
    isDefault: boolean;
    position?: number;
    config: string;
}
export interface ICreateViewColumnPayload {
    viewColumn: IViewColumn;
}
export interface ICreateViewBlockColumnInput {
    viewColumnId: IUUID;
    keyName: string;
    name: string;
    position: number;
    config: string;
    columnTabId?: IUUID;
}
export interface ICreateViewBlockColumnPayload {
    viewBlockColumn: IViewBlockColumn;
}
export interface IUpdatePageManagerInput {
    id: IUUID;
    pageName?: string;
    config?: string;
    projectId?: IUUID;
}
export interface IUpdatePageManagerPayload {
    message: string;
}
export interface IUpdateViewManagerInput {
    id: IUUID;
    name?: string;
    default?: boolean;
    config?: string;
    projectRoleCode?: string;
}
export interface IUpdateViewManagerPayload {
    message: string;
}
export interface IUpdateViewColumnInput {
    id: IUUID;
    isDefault?: boolean;
    position?: number;
    config?: string;
}
export interface IUpdateViewColumnPayload {
    message: string;
}
export interface IUpdateViewBlockColumnInput {
    id: IUUID;
    keyName?: string;
    name?: string;
    position?: number;
    config?: string;
    columnTabId?: IUUID;
}
export interface IUpdateViewBlockColumnPayload {
    message: string;
}
export interface IDeletePageManagerInput {
    pageManagerId: IUUID;
}
export interface IDeletePageManagerPayload {
    message: string;
}
export interface IDeleteViewManagerInput {
    viewManagerId: IUUID;
}
export interface IDeleteViewManagerPayload {
    message: string;
}
export interface IDeleteViewColumnInput {
    viewColumnId: IUUID;
}
export interface IDeleteViewColumnPayload {
    message: string;
}
export interface ILinkTransactionToSellInput {
    transactionId: IUUID;
    sellId: IUUID;
}
export interface ILinkTransactionToSellPayload {
    message: string;
}
export interface IUpdateSellInput {
    nominatorId?: IUUID;
    prospectId?: IUUID;
    sellerId?: IUUID;
    concept?: string;
    description?: string;
    amount?: IDecimal;
    status?: ISellStatus;
    walletTransactionId?: IUUID;
}
export interface IUpdateSellPayload {
    sell: ISell;
}
export interface IDeleteViewBlockColumnInput {
    viewBlockColumnId: IUUID;
}
export interface IDeleteViewBlockColumnPayload {
    message: string;
}
export interface IMultipleMemberRelationInput {
    status?: IEnumMemberRelationStatus;
    parentNodeId?: IUUID;
    childNodesId: Array<IUUID>;
    isActive?: boolean;
    parentRelationId?: IUUID;
}
export interface IMultipleMemberRelationPayload {
    memberRelation: Array<IMemberRelation>;
}
export interface IMemberRelationInput {
    status?: IEnumMemberRelationStatus;
    parentNodeId?: IUUID;
    childNodeId?: IUUID;
    isActive?: boolean;
    parentRelationId?: IUUID;
}
export interface IMemberRelationPayload {
    memberRelation: IMemberRelation;
}
export interface IUpdateProductSellInput {
    id: IUUID;
    folio?: string;
    invoiceDate?: IDateTime;
    expirationDate?: IDateTime;
    iva?: IDecimal;
    isActive?: boolean;
    currencyId?: IUUID;
    branchOfficeId?: IUUID;
    storeId?: IUUID;
    sellerId?: IUUID;
    routeId?: IUUID;
    customerId?: IUUID;
    socialReason?: string;
    rfc?: string;
    automaticInvoicing?: boolean;
    address?: string;
    products?: Array<IProductSellItemDtoInput>;
}
export interface IProductSellItemDtoInput {
    productId: IUUID;
    discount: IDecimal;
    priceId?: IUUID;
    quantity: number;
}
export interface IUpdateProductSellPayload {
    message: string;
}
export interface ICreateTaxInput {
    projectId: IUUID;
    name: string;
    rate: IDecimal;
}
export interface ICreateTaxPayload {
    tax: ITax;
}
export interface IDeleteTaxInput {
    id: IUUID;
}
export interface IDeleteTaxPayload {
    message: string;
}
export interface IImportProductsFromExcelInput {
    projectId: IUUID;
    url?: string;
    memberId: IUUID;
}
export interface IImportProductsFromExcelPayload {
    message: string;
}
export interface ICreateRouteInput {
    projectId: IUUID;
    key: string;
    title: string;
    description: string;
    branchOfficeId: IUUID;
    routeType: string;
    travelDays: number;
    beginningDate: IDateTime;
}
export interface ICreateRoutePayload {
    route: IRoute;
}
export interface IDeleteRouteInput {
    id: IUUID;
}
export interface IDeleteRoutePayload {
    message: string;
}
export interface ICreateProductSellInput {
    folio?: string;
    projectId: IUUID;
    invoiceDate: IDateTime;
    expirationDate: IDateTime;
    iva: IDecimal;
    currencyId: IUUID;
    branchOfficeId: IUUID;
    storeId: IUUID;
    sellerId: IUUID;
    routeId: IUUID;
    customerId: IUUID;
    socialReason: string;
    rfc: string;
    automaticInvoicing: boolean;
    address: string;
    products: Array<IProductSellItemDtoInput>;
}
export interface ICreateProductSellPayload {
    productSell: IProductSell;
}
export interface IDeleteProductSellInput {
    id: IUUID;
}
export interface IDeleteProductSellPayload {
    message: string;
}
export interface ICreatePurchaseQuoteInput {
    projectId: IUUID;
    invoiceDate: IDateTime;
    expirationDate: IDateTime;
    reference: string;
    branchOfficeId: IUUID;
    storeId: IUUID;
    sellerId: IUUID;
    customerId: IUUID;
    comment: string;
    products: Array<IUUID>;
    discount?: IDecimal;
    subTotal?: IDecimal;
    taxes?: IDecimal;
    detained?: IDecimal;
    total?: IDecimal;
    purchaseQuoteStatus: IPurchaseQuoteStatus;
}
export interface ICreatePurchaseQuotePayload {
    purchaseQuote: IPurchaseQuote;
}
export interface IDeletePurchaseQuoteInput {
    id: IUUID;
}
export interface IDeletePurchaseQuotePayload {
    message: string;
}
export interface ICreateStockAlertInput {
    projectId: IUUID;
    productId: IUUID;
    lowestQuantity: number;
    middleQuantity: number;
    highestQuantity: number;
}
export interface ICreateStockAlertPayload {
    stockAlert: IStockAlert;
}
export interface IDeleteStockAlertInput {
    id: IUUID;
}
export interface IDeleteStockAlertPayload {
    message: string;
}
export interface IUpdateStockAlertInput {
    id: IUUID;
    lowestQuantity?: number;
    highestQuantity?: number;
    middleQuantity?: number;
}
export interface IUpdateStockAlertPayload {
    message: string;
}
export interface ICreateLegalTermInput {
    projectId: IUUID;
    keyName: string;
    title: string;
    description: string;
}
export interface ICreateLegalTermPayload {
    legalTerm: ILegalTerm;
}
export interface ICreateInsuranceFormInput {
    projectId: IUUID;
    typeForm: ITypeForm;
    name?: string;
    email?: string;
    phone?: string;
    zipCode?: string;
    birthDate?: string;
    typeInsurance?: string;
    message?: string;
    hospitalLevel?: string;
    gender: boolean;
}
export interface ICreateInsuranceFormPayload {
    insuranceForm: IInsuranceForm;
}
export interface IUpdateInsuranceFormInput {
    id: IUUID;
    typeForm: ITypeForm;
    gender: boolean;
    name?: string;
    email?: string;
    phone?: string;
    zipCode?: string;
    birthDate?: IDateTime;
    typeInsurance?: string;
    message?: string;
    hospitalLevel?: string;
}
export interface IUpdateInsuranceFormPayload {
    insuranceForm: IInsuranceForm;
}
export interface IUpdateLegalTermInput {
    legalTermId: IUUID;
    keyName?: string;
    title?: string;
    description?: string;
}
export interface IUpdateLegalTermPayload {
    message: string;
}
export interface IDeleteLegalTermInput {
    id: IUUID;
}
export interface IDeleteLegalTermPayload {
    message: string;
}
export interface ICreateArticleInput {
    projectId: IUUID;
    parentId?: IUUID;
    groupId?: IUUID;
    title: string;
    typeContent?: ITypeContent;
    categories?: Array<string>;
    tags?: Array<string>;
    photo?: string;
    resume?: string;
    content?: string;
    slug?: string;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
    structuredMarking?: string;
    seoArticle?: string;
    imageAlt?: string;
    releaseDate?: string;
    embedContent?: string;
    status: IArticleStatus;
    language: IArticleLanguage;
}
export interface ICreateArticlePayload {
    article: IArticle;
}
export interface IUpdateStatusArticleInput {
    articleId: IUUID;
    status: IArticleStatus;
}
export interface IUpdateStatusArticlePayload {
    article: IArticle;
}
export interface ICreateTaxonomyInput {
    projectId: IUUID;
    name: string;
    isPublic?: boolean;
    seoTaxonomy?: string;
    slug?: string;
    termGroup?: string;
    parentId?: string;
    photo: string;
    tagLine?: string;
    tagLine2?: string;
    description?: string;
}
export interface ICreateTaxonomyPayload {
    taxonomy: ITaxonomy;
}
export interface IUpdateArticleInput {
    articleId: IUUID;
    parentId?: IUUID;
    groupId?: IUUID;
    categories: Array<string>;
    title: string;
    tags?: Array<string>;
    typeContent?: ITypeContent;
    language?: IArticleLanguage;
    status?: IArticleStatus;
    photo?: string;
    resume?: string;
    content?: string;
    slug?: string;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
    structuredMarking?: string;
    imageAlt?: string;
    releaseDate?: string;
    embedContent?: string;
    seoArticle?: string;
}
export interface IUpdateArticlePayload {
    article: IArticle;
}
export interface IUpdateTaxonomyInput {
    taxonomyId: IUUID;
    isPublic?: boolean;
    seoTaxonomy?: string;
    name?: string;
    slug?: string;
    parentId?: string;
    photo?: string;
    tagLine?: string;
    tagLine2?: string;
    description?: string;
}
export interface IUpdateTaxonomyPayload {
    taxonomy: ITaxonomy;
}
export interface IDeleteArticleInput {
    articleId: IUUID;
}
export interface IDeleteArticlePayload {
    article: IArticle;
}
export interface IDeleteTaxonomyInput {
    taxonomyId: IUUID;
}
export interface IDeleteTaxonomyPayload {
    taxonomy: ITaxonomy;
}
export interface INewSurveyInput {
    articleId: IUUID;
}
export interface INewSurveyPayload {
    survey: ISurvey;
}
export interface IUpdateSurveyInput {
    surveyId: IUUID;
    isActive?: boolean;
    title?: string;
    description?: string;
    thankYouMessage?: string;
}
export interface IUpdateSurveyPayload {
    survey: ISurvey;
}
export interface IDeleteSurveyInput {
    surveyId: IUUID;
}
export interface IDeleteSurveyPayload {
    survey: ISurvey;
}
export interface INewQuestionInput {
    surveyId: IUUID;
    type: IQuestionType;
}
export interface INewQuestionPayload {
    question: IQuestion;
}
export interface IDeleteQuestionInput {
    questionId: IUUID;
}
export interface IDeleteQuestionPayload {
    question: IQuestion;
}
export interface IUpdateQuestionInput {
    questionId: IUUID;
    position: number;
    type: IQuestionType;
    isRequired?: boolean;
    allowsFileUpload?: boolean;
    title?: string;
    image?: string;
}
export interface IUpdateQuestionPayload {
    question: IQuestion;
}
export interface INewOptionInput {
    questionId: IUUID;
}
export interface INewOptionPayload {
    option: IOption;
}
export interface IDeleteOptionInput {
    optionId: IUUID;
}
export interface IDeleteOptionPayload {
    option: IOption;
}
export interface IUpdateOptionInput {
    optionId: IUUID;
    position: number;
    title?: string;
}
export interface IUpdateOptionPayload {
    option: IOption;
}
export interface IAnswerQuestionInput {
    memberId: IUUID;
    answerings: Array<IAnsweringDTOInput>;
}
export interface IAnsweringDTOInput {
    questionId: IUUID;
    options?: Array<string>;
    responseText?: string;
    uploadFile?: string;
}
export interface IAnswerQuestionPayload {
    message: string;
}
export interface ICreateProductInput {
    projectId: IUUID;
    categories: Array<string>;
    costType?: string;
    dataSheet?: string;
    ecommerceTitle?: string;
    ecommerceDescription?: string;
    ecommerceInstructions?: string;
    title: string;
    shopType?: IShopType;
    providerIds?: Array<IUUID>;
    partNumber?: string;
    sellMeasure?: string;
    purchaseMeasure?: string;
    key?: string;
    fee?: IDecimal;
    discounts?: Array<IDecimal>;
    taxes?: Array<IUUID>;
    brand?: string;
    onStore?: boolean;
    onCatalog?: boolean;
    prices?: Array<IProductPricesDTOInput>;
    line?: string;
    family?: string;
    subFamily?: string;
    barcode?: string;
    sku?: string;
    price?: IDecimal;
    stock?: number;
    code?: string;
    sellPrice?: number;
    purchasePrice?: number;
    storeId?: IUUID;
    utility?: number;
    origin?: string;
    shippingPrice?: IDecimal;
    offerPrice?: IDecimal;
    images?: Array<string>;
    measure?: string;
    measureType?: string;
    productType?: IProductType;
    planId?: IUUID;
    shippingType?: string;
    photo?: string;
    description?: string;
    slug?: string;
    seoProduct?: string;
    publishDate?: string;
    status: IProductStatus;
}
export interface IProductPricesDTOInput {
    price: IDecimal;
    utility: IDecimal;
    setPrice: boolean;
}
export interface ICreateProductPayload {
    product: IProduct;
}
export interface IUpdateProductInput {
    productId: IUUID;
    categories?: Array<string>;
    costType?: string;
    dataSheet?: string;
    ecommerceTitle?: string;
    ecommerceDescription?: string;
    ecommerceInstructions?: string;
    shopType?: IShopType;
    status?: IProductStatus;
    providerIds?: Array<IUUID>;
    partNumber?: string;
    prices?: Array<IProductPricesDTOInput>;
    productType?: IProductType;
    onStore?: boolean;
    onCatalog?: boolean;
    planId?: IUUID;
    price?: IDecimal;
    stock?: number;
    shippingPrice?: IDecimal;
    offerPrice?: IDecimal;
    images?: Array<string>;
    origin?: string;
    measure?: string;
    utility?: number;
    sellPrice?: number;
    purchasePrice?: number;
    code?: string;
    measureType?: string;
    title?: string;
    sku?: string;
    shippingType?: string;
    photo?: string;
    description?: string;
    slug?: string;
    seoProduct?: string;
    publishDate?: string;
}
export interface IUpdateProductPayload {
    product: IProduct;
}
export interface IDeleteProductInput {
    productId: IUUID;
}
export interface IDeleteProductPayload {
    product: IProduct;
}
export interface ICreateAddressInput {
    projectId: IUUID;
    memberId: IUUID;
    firstName?: string;
    number?: string;
    municipality?: string;
    lastName?: string;
    countryName?: string;
    state?: string;
    city?: string;
    subUrb?: string;
    zipCode?: string;
    addressLine1?: string;
    addressLine2?: string;
    phone?: string;
    addressDetails?: string;
    addressType?: string;
    isPrincipal?: boolean;
    businessName?: string;
}
export interface ICreateAddressPayload {
    address: IAddress;
}
export interface IUpdateAddressInput {
    addressId: IUUID;
    isPrincipal?: boolean;
    number?: string;
    municipality?: string;
    firstName?: string;
    lastName?: string;
    countryName?: string;
    state?: string;
    city?: string;
    subUrb?: string;
    zipCode?: string;
    addressLine1?: string;
    addressLine2?: string;
    phone?: string;
    addressDetails?: string;
    addressType?: string;
    businessName?: string;
}
export interface IUpdateAddressPayload {
    address: IAddress;
}
export interface IDeleteAddressInput {
    addressId: IUUID;
}
export interface IDeleteAddressPayload {
    address: IAddress;
}
export interface ICreateUpdateShopInput {
    projectId: IUUID;
    shopType: IShopType;
    profileUrl?: string;
}
export interface ICreateUpdateShopPayload {
    shop: IShop;
}
export interface ICreateDiseaseInput {
    projectId: IUUID;
    topicDiseaseId: IUUID;
    title: string;
    iconImage?: string;
    image?: string;
    position: number;
}
export interface ICreateDiseasePayload {
    disease: IDisease;
}
export interface IUpdateDiseaseInput {
    diseaseId: IUUID;
    title: string;
    iconImage?: string;
    image?: string;
    position: number;
}
export interface IUpdateDiseasePayload {
    disease: IDisease;
}
export interface IDeleteDiseaseInput {
    diseaseId: IUUID;
}
export interface IDeleteDiseasePayload {
    message: string;
}
export interface ICreateTopicDiseaseInput {
    projectId: IUUID;
    month: number;
    title: string;
    backgroundImage?: string;
}
export interface ICreateTopicDiseasePayload {
    topicDisease: ITopicDisease;
}
export interface IUpdateTopicDiseaseInput {
    topicDiseaseId: IUUID;
    month?: number;
    title?: string;
    backgroundImage?: string;
}
export interface IUpdateTopicDiseasePayload {
    topicDisease: ITopicDisease;
}
export interface IDeleteTopicDiseaseInput {
    topicDiseaseId: IUUID;
}
export interface IDeleteTopicDiseasePayload {
    message: string;
}
export interface ICreateFAQInput {
    projectId: IUUID;
    question: string;
    answer: string;
    image?: string;
    position: number;
}
export interface ICreateFAQPayload {
    faq: IFAQ;
}
export interface IUpdateFAQInput {
    fAQId: IUUID;
    question?: string;
    answer?: string;
    image?: string;
    position?: number;
}
export interface IUpdateFAQPayload {
    faq: IFAQ;
}
export interface IDeleteFAQInput {
    fAQId: IUUID;
}
export interface IDeleteFAQPayload {
    message: string;
}
export interface IRunJobShopInput {
    url: string;
    projectId: IUUID;
    profileUrl?: string;
}
export interface IRunJobShopPayload {
    message: string;
}
export interface ICreateCourseInput {
    projectId: IUUID;
    title: string;
    school: string;
    modality: ICourseModality;
    courseLevel: ICourseLevel;
    price: number;
    discount: number;
    description: string;
    endDate: IDateTime;
    startDate: IDateTime;
    addressId: IUUID;
    categories: Array<IUUID>;
    beginType: IBeginType;
    courseType: ICourseType;
    schedule: Array<IScheduleDayDtoInput>;
    duration: number;
}
export interface IScheduleDayDtoInput {
    time?: ITimeSpan;
    day: string;
}
export interface ICreateCoursePayload {
    course: ICourse;
}
export interface ICreateBeginCourseInput {
    courseId: IUUID;
    startDate: IDateTime;
    limitDate: IDateTime;
    endDate: IDateTime;
    name: string;
    price: number;
}
export interface ICreateBeginCoursePayload {
    beginCourse: IBeginCourse;
}
export interface IBeginCourse {
    courseId: IUUID;
    startDate: IDateTime;
    limitDate: IDateTime;
    endDate: IDateTime;
    name: string;
    price: number;
    course?: ICourse;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICreateCourseFormInput {
    formId: IUUID;
    courseId: IUUID;
    position: number;
}
export interface ICreateCourseFormPayload {
    courseForm: ICourseForm;
}
export interface ICourseForm {
    courseId: IUUID;
    formId: IUUID;
    position: number;
    course?: ICourse;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IUpdateCourseInput {
    courseId: IUUID;
    title?: string;
    modality?: ICourseModality;
    description?: string;
    endDate?: IDateTime;
    startDate?: IDateTime;
    addressId?: IUUID;
    price?: number;
    discount?: number;
    school?: string;
    courseLevel?: ICourseLevel;
    duration?: number;
    schedule: Array<IScheduleDayDtoInput>;
}
export interface IUpdateCoursePayload {
    message: string;
}
export interface IUpdateBeginCourseInput {
    beginCourseId: IUUID;
    courseId?: IUUID;
    startDate?: IDateTime;
    limitDate?: IDateTime;
    endDate?: IDateTime;
    name?: string;
    price?: number;
}
export interface IUpdateBeginCoursePayload {
    message: string;
}
export interface IUpdateCourseFormInput {
    courseFormId: IUUID;
    formId?: IUUID;
    courseId?: IUUID;
    position?: number;
}
export interface IUpdateCourseFormPayload {
    message: string;
}
export interface IDeleteCourseInput {
    id: IUUID;
}
export interface IDeleteCoursePayload {
    message: string;
}
export interface IDeleteBeginCourseInput {
    id: IUUID;
}
export interface IDeleteBeginCoursePayload {
    message: string;
}
export interface IDeleteCourseFormInput {
    id: IUUID;
}
export interface IDeleteCourseFormPayload {
    message: string;
}
export interface IFixProductInput {
    projectId: IUUID;
}
export interface IFixProductPayload {
    message: string;
}
export interface IDeleteCourseScheduleInput {
    id: IUUID;
}
export interface IDeleteCourseSchedulePayload {
    message: string;
}
export interface IUpdateCourseScheduleInput {
    id: IUUID;
    time: ITimeSpan;
}
export interface IUpdateCourseSchedulePayload {
    message: string;
}
export interface ICreateBranchOfficeInput {
    projectId: IUUID;
    name: string;
    isActive: boolean;
    countryId: IUUID;
    state: string;
    municipality: string;
    email: string;
    phone: string;
    postalCode: string;
    street: string;
    number: string;
    managerId?: IUUID;
}
export interface ICreateBranchOfficePayload {
    branchOffice: IBranchOffice;
}
export interface ICreateManagerInput {
    projectId: IUUID;
    memberId: IUUID;
    branchOfficeId: IUUID;
}
export interface ICreateManagerPayload {
    manager: IManager;
}
export interface ICreateProductPurchaseInput {
    projectId: IUUID;
    purchaseId: IUUID;
    products: Array<IProductDtoInput>;
}
export interface IProductDtoInput {
    id: IUUID;
    quantity: number;
    price: number;
    taxes: number;
    discount: number;
}
export interface ICreateProductPurchasePayload {
    message: string;
}
export interface ICreatePurchaseInput {
    projectId: IUUID;
    invoice: string;
    invoiceDate: IDateTime;
    expirationDate: IDateTime;
    branchOfficeId: IUUID;
    storeId: IUUID;
    providerId: IUUID;
    total?: number;
    active: boolean;
    currencyId: IUUID;
    hasBuyer?: boolean;
    discount?: number;
    subTotal?: number;
    buyerId?: IUUID;
    globalDiscount: IDecimal;
}
export interface ICreatePurchasePayload {
    purchase: IPurchase;
}
export interface ICreateStoreInput {
    projectId: IUUID;
    name: string;
    branchOfficeId: IUUID;
    code: string;
    storeType?: IStoreType;
    sellerId?: IUUID;
}
export interface ICreateStorePayload {
    store: IStore;
}
export interface INewStoreTransferInput {
    projectId: IUUID;
    storeOriginId: IUUID;
    storeDestinyId: IUUID;
    currencyId: IUUID;
    products: Array<IUUID>;
    quantities: Array<number>;
    folio: string;
}
export interface INewStoreTransferPayload {
    storeTransfer: IStoreTransfer;
}
export interface ICreateProviderInput {
    projectId: IUUID;
    city: string;
    creditDays: number;
    balance: IDecimal;
    credit: IDecimal;
    afectaDiot: boolean;
    providerType: IProviderType;
    name: string;
    rfc: string;
    socialReason: string;
    address: string;
}
export interface ICreateProviderPayload {
    provider: IProductProvider;
}
export interface IUpdateBranchOfficeInput {
    branchOfficeId: IUUID;
    name?: string;
    isActive?: boolean;
    countryId?: IUUID;
    municipality?: string;
    state?: string;
    email?: string;
    phone?: string;
    postalCode?: string;
    street?: string;
    number?: string;
    managerId?: IUUID;
}
export interface IUpdateBranchOfficePayload {
    message: string;
}
export interface IUpdateManagerInput {
    id: IUUID;
    memberId?: IUUID;
    branchOfficeId?: IUUID;
}
export interface IUpdateManagerPayload {
    message: string;
}
export interface IUpdatePurchaseInput {
    purchaseId: IUUID;
    folio?: string;
    invoice?: string;
    invoiceDate?: IDateTime;
    expirationDate?: IDateTime;
    branchOfficeId?: IUUID;
    storeId?: IUUID;
    providerId?: IUUID;
    total?: number;
    active?: boolean;
    currencyId?: IUUID;
    hasBuyer?: boolean;
    discount?: number;
    subTotal?: number;
}
export interface IUpdatePurchasePayload {
    message: string;
}
export interface IUpdateStoreInput {
    id: IUUID;
    name?: string;
    code?: string;
    storeType?: IStoreType;
    branchOfficeId?: IUUID;
    sellerId?: IUUID;
}
export interface IUpdateStorePayload {
    message: string;
}
export interface IDeleteStoreInput {
    id: IUUID;
}
export interface IDeleteStorePayload {
    message: string;
}
export interface IDeleteManagerInput {
    id: IUUID;
}
export interface IDeleteManagerPayload {
    message: string;
}
export interface IUpdateProviderInput {
    providerId: IUUID;
    name?: string;
    city?: string;
    providerType?: IProviderType;
    rfc?: string;
    creditDays?: number;
    balance?: IDecimal;
    credit?: IDecimal;
    afectaDiot?: boolean;
    socialReason?: string;
    address?: string;
}
export interface IUpdateProviderPayload {
    message: string;
}
export interface IDeleteProviderInput {
    id: IUUID;
}
export interface IDeleteProviderPayload {
    message: string;
}
export interface IDeletePurchaseInput {
    id: IUUID;
}
export interface IDeletePurchasePayload {
    message: string;
}
export interface IDeleteProductPurchaseInput {
    id: IUUID;
}
export interface IDeleteProductPurchasePayload {
    message: string;
}
export interface IDeleteBranchOfficeInput {
    id: IUUID;
}
export interface IDeleteBranchOfficePayload {
    message: string;
}
export interface IAssociationServiceToProjectInput {
    projectId: IUUID;
    codeNames: Array<string>;
}
export interface IAssociationServiceToProjectPayload {
    projectMicroservice: IProjectMicroservice;
}
export interface ICreateArrayFunctionInput {
    service: string;
    functions: Array<IFunctionArrayInput>;
}
export interface IFunctionArrayInput {
    name: string;
    codeName: string;
    functionType: IFunctionType;
}
export interface ICreateArrayFunctionPayload {
    service: IMicroservice;
}
export interface IDeleteArrayFunctionInput {
    service: string;
    functions: Array<IFunctionArrayInput>;
}
export interface IDeleteArrayFunctionPayload {
    service: IMicroservice;
}
export interface IUpdateServiceProjectInput {
    projectId: IUUID;
    codeName: string;
    isActive?: boolean;
    label?: string;
}
export interface IUpdateServiceProjectPayload {
    message: string;
}
export interface IDeleteServiceProjectInput {
    projectId: IUUID;
    codeName: string;
}
export interface IDeleteServiceProjectPayload {
    message: string;
}
export interface ICancelEventInput {
    id: IUUID;
}
export interface ICancelEventPayload {
    message: string;
}
export interface ICreateEventTypeInput {
    projectId: IUUID;
    subEventTypes?: Array<IUUID>;
    image?: string;
    name: string;
    description: string;
    price: IDecimal;
}
export interface ICreateEventTypePayload {
    message: string;
}
export interface ICreateSubEventTypeInput {
    name: string;
    price: IDecimal;
}
export interface ICreateSubEventTypePayload {
    subEventType: ISubEventType;
}
export interface IDeleteSubEventTypeInput {
    subEventTypeId: IUUID;
}
export interface IDeleteSubEventTypePayload {
    message: string;
}
export interface IUpdateSubEventTypeInput {
    subEventTypeId: IUUID;
    name?: string;
    price?: IDecimal;
}
export interface IUpdateSubEventTypePayload {
    message: string;
}
export interface IAddSubTypeToEventTypeInput {
    eventTypeId: IUUID;
    subEventTypes: Array<IUUID>;
}
export interface IAddSubTypeToEventTypePayload {
    message: string;
}
export interface IDeleteEventTypePayload {
    message: string;
}
export interface IUpdateEventTypeInput {
    eventTypeId: IUUID;
    projectId?: IUUID;
    name?: string;
    image?: string;
    price?: IDecimal;
    description?: string;
}
export interface IUpdateEventTypePayload {
    message: string;
}
export interface ICreateEventInput {
    projectId: IUUID;
    memberId: IUUID;
    description: string;
    eventDate: string;
    totalPrice?: IDecimal;
    discount?: IDecimal;
    sendDetails?: boolean;
    sendRemember?: boolean;
    members?: Array<string>;
    eventTypeId?: IUUID;
    eventMode: IEventMode;
    title?: string;
    roomId?: string;
    file?: string;
    location?: string;
    eventSessionId?: string;
    color?: string;
    finishDate?: string;
    charges?: Array<IEventChargeInput>;
    visibility: IEventVisibility;
}
export interface IEventChargeInput {
    price: IDecimal;
    description?: string;
}
export interface ICreateEventPayload {
    eventCalendar: IEvent;
}
export interface ICreateEventMemberInput {
    memberId: IUUID;
    eventId: IUUID;
}
export interface ICreateEventMemberPayload {
    message: string;
}
export interface IUpdateEventInput {
    eventId: IUUID;
    description?: string;
    eventTypeId?: IUUID;
    sendDetails?: boolean;
    visibility?: IEventVisibility;
    charges?: Array<IEventChargeInput>;
    sendRemember?: boolean;
    members?: Array<string>;
    eventMode: IEventMode;
    title?: string;
    eventDate?: string;
    roomId?: string;
    file?: string;
    location?: string;
    eventSessionId?: string;
    color?: string;
    totalPrice?: IDecimal;
    discount?: IDecimal;
}
export interface IUpdateEventPayload {
    eventCalendar: IEvent;
}
export interface IDeleteEventInput {
    eventId: IUUID;
}
export interface IDeleteEventPayload {
    message: string;
}
export interface ICreateEventSessionInput {
    projectId: IUUID;
    price: IDecimal;
    title?: string;
    image?: string;
    description?: string;
    duration: number;
    eventMode: IEventMode;
}
export interface ICreateEventSessionPayload {
    eventSession: IEventSession;
}
export interface IUpdateEventSessionInput {
    eventSessionId: IUUID;
    price: IDecimal;
    title?: string;
    image?: string;
    description?: string;
    duration: number;
    eventMode: IEventMode;
}
export interface IUpdateEventSessionPayload {
    eventSession: IEventSession;
}
export interface IDeleteEventSessionInput {
    eventSessionId: IUUID;
}
export interface IDeleteEventSessionPayload {
    message: string;
}
export interface ICreateScheduleInput {
    projectId: IUUID;
    memberId: IUUID;
    eventTypeId: IUUID;
    schedule: Array<IScheduleDtoInput>;
}
export interface IScheduleDtoInput {
    turns: Array<ITurnsDtoInput>;
    monday: boolean;
    tuesday: boolean;
    thursday: boolean;
    wednesday: boolean;
    friday: boolean;
    saturday: boolean;
    sunday: boolean;
}
export interface ITurnsDtoInput {
    timeStart?: string;
    timeEnd?: string;
}
export interface ICreateSchedulePayload {
    message: string;
}
export interface IAssociationMemberToConsultInput {
    memberId: IUUID;
    eventId: IUUID;
}
export interface IAssociationMemberToConsultPayload {
    message: string;
}
export interface ICancellationMemberToConsultInput {
    memberId: IUUID;
    eventId: IUUID;
}
export interface ICancellationMemberToConsultPayload {
    message: string;
}
export interface IChangeStatusEventInput {
    eventId: IUUID;
    status: IEventStatus;
}
export interface IChangeStatusEventPayload {
    message: string;
}
export interface IDeleteScheduleInput {
    scheduleManagerId: IUUID;
}
export interface IDeleteSchedulePayload {
    message: string;
}
export interface IDeleteTurnInput {
    turnId: IUUID;
}
export interface IDeleteTurnPayload {
    message: string;
}
export interface IResourceQuoteInput {
    title?: string;
    memberId?: IUUID;
    projectId?: IUUID;
    status?: IEnumResourceQuoteStatus;
    areaId?: IUUID;
    approvedDate?: IDateTime;
}
export interface IResourceQuotePayload {
    resourceQuote: IResourceQuote;
}
export interface IResourceQuoteDetailInput {
    serviceId?: IUUID;
    resourceQuoteId?: IUUID;
    description?: string;
    nomenclature?: string;
    resourceQuoteDetailBoardRowInput?: IResourceQuoteDetailBoardRowInput;
    projectId?: IUUID;
    memberConsecutive?: number;
    earningPercentage?: IDecimal;
}
export interface IResourceQuoteDetailBoardRowInput {
    boardRowId: IUUID;
}
export interface IResourceQuoteDetailPayload {
    resourceQuoteDetail: IResourceQuoteDetail;
}
export interface IProposalInput {
    title?: string;
    state?: string;
    city?: string;
    pDF?: string;
    introduction?: string;
    summary?: string;
    methodology?: string;
    timeEstimate?: string;
    finishDate?: IDateTime;
    discount?: IDecimal;
    discountType?: IEnumDiscount;
    tax?: IDecimal;
    taxType?: IEnumDiscount;
    resourceQuoteId?: IUUID;
    total?: IDecimal;
    status?: IEnumResourceQuoteStatus;
    urlOnClick?: string;
}
export interface IProposalPayload {
    proposal: IProposal;
}
export interface ICollaboratorInput {
    hours?: number;
    costByHour?: IDecimal;
    role?: string;
    projectRoleId?: IUUID;
    timeEstimated?: string;
    amount?: IDecimal;
    memberId?: IUUID;
    resourceQuoteDetailId?: IUUID;
    hiringId?: IUUID;
}
export interface ICollaboratorPayload {
    collaborator: ICollaborator;
}
export interface ICollaboratorHoursInput {
    date?: IDateTime;
    initialHour?: string;
    finalHour?: string;
    collaboratorId?: IUUID;
}
export interface ICollaboratorHoursPayload {
    collaboratorHours: ICollaboratorHours;
}
export interface IHiringInput {
    projectRoleId?: IUUID;
    memberId?: IUUID;
    dateStart?: IDateTime;
    dateEnd?: IDateTime;
    description?: string;
    amount?: IDecimal;
    amountWritted?: string;
    amountPerHour?: IDecimal;
    hiringTypeId?: IUUID;
    benefits?: IEnumBenefits;
    enumHiringType?: IEnumHiringType;
    job?: string;
    vacationDays?: number;
    professionalLicense?: string;
    cURP?: string;
    iNE?: string;
    infonavit?: string;
    nationality?: string;
    birthNationality?: string;
    civilState?: IEnumCivilState;
}
export interface IHiringPayload {
    hiring: IHiring;
}
export interface IHiringServiceInput {
    hiringId: IUUID;
    serviceId: IUUID;
}
export interface IHiringServicePayload {
    hiringService: IHiringService;
}
export interface IHiringTypeInput {
    name?: string;
    projectId?: IUUID;
}
export interface IHiringTypePayload {
    hiringType: IHiringType;
}
export interface IShiftInput {
    projectId?: IUUID;
    memberId?: IUUID;
    timeStart: string;
    timeEnd: string;
    codeDay: string;
}
export interface IShiftPayload {
    shift: IShift;
}
export interface ICreateBusinessTypeInput {
    projectId: IUUID;
    image?: string;
    name: string;
    description: string;
}
export interface ICreateBusinessTypePayload {
    businessType: IBusinessType;
}
export interface IUpdateBusinessTypeInput {
    id: IUUID;
    image?: string;
    name?: string;
    description?: string;
}
export interface IUpdateBusinessTypePayload {
    message: string;
}
export interface IDeleteBusinessTypeInput {
    id: IUUID;
}
export interface IDeleteBusinessPayload {
    message: string;
}
export interface ICreateBusinessRuleInput {
    projectId: IUUID;
    title: string;
    commissionNominator: string;
    potentialProspectLimit: number;
    allowExtraBonus: boolean;
    minimumBalance: number;
    idealBalance: number;
}
export interface ICreateBusinessRulePayload {
    businessRule: IBusinessRule;
}
export interface IUpdateBusinessRuleInput {
    id: IUUID;
    title?: string;
    commissionNominator?: string;
    potentialProspectLimit?: number;
    allowExtraBonus?: boolean;
    minimumBalance?: number;
    idealBalance?: number;
}
export interface IUpdateBusinessRulePayload {
    message: string;
}
export interface IDeleteBusinessRuleInput {
    id: IUUID;
}
export interface IDeleteBusinessRulePayload {
    message: string;
}
export interface IDeleteCouponFromTemplateInput {
    templateId: IUUID;
    couponId: IUUID;
    projectId: IUUID;
}
export interface IDeleteCouponFromTemplatePayload {
    message: string;
}
export interface IAddCouponsToTemplateInput {
    templateId: IUUID;
    projectId: IUUID;
    coupons: Array<IUUID>;
}
export interface IAddCouponsToTemplatePayload {
    message: string;
}
export interface ICreateUpdateConfigurationTemplateInput {
    projectId: IUUID;
    templateType: ITemplateType;
    config: string;
}
export interface ICreateUpdateConfigurationTemplatePayload {
    configurationTemplate: IConfigurationTemplate;
}
export interface ISendTemplateInput {
    templateId: IUUID;
}
export interface ISendTemplatePayload {
    template: ITemplate;
}
export interface IPutFirebaseDeviceInput {
    projectId: IUUID;
    memberId: IUUID;
    deviceToken: string;
    deviceTopic: string;
}
export interface IPutFirebaseDevicePayload {
    message: string;
}
export interface ICreateCouponInput {
    title: string;
    code: string;
    itemToApplyTo: IUUID;
    roleType: IRoleType;
    ruleAppliesOn: IRuleAppliesOn;
    projectId: IUUID;
    beginingDate: IDateTime;
    endDate: IDateTime;
    couponRuleType: ICouponRuleType;
    percentage: number;
}
export interface ICreateCouponPayload {
    coupon: ICoupon;
}
export interface IUpdateCouponInput {
    couponId: IUUID;
    title?: string;
    code?: string;
    itemToApplyTo?: IUUID;
    roleType?: IRoleType;
    ruleAppliesOn?: IRuleAppliesOn;
    beginingDate?: IDateTime;
    endDate?: IDateTime;
    couponRuleType?: ICouponRuleType;
    percentage?: number;
}
export interface IUpdateCouponPayload {
    message: string;
}
export interface IDeleteCouponInput {
    couponId: IUUID;
}
export interface IDeleteCouponPayload {
    message: string;
}
export interface ICreateTemplateInput {
    projectId: IUUID;
    couponId?: IUUID;
    title: string;
    message?: string;
    serviceName?: string;
    projectRoleId?: IUUID;
    templateType: ITemplateType;
    releaseDate: IDateTime;
}
export interface ICreateTemplatePayload {
    template: ITemplate;
}
export interface IUpdateTemplateInput {
    templateId: IUUID;
    couponId?: IUUID;
    title?: string;
    message?: string;
    serviceName?: string;
    projectRoleId?: IUUID;
    templateType: ITemplateType;
    campaignBeginingDate?: IDateTime;
    campaignEndDate?: IDateTime;
    campaignRuleType?: ICouponRuleType;
    percentage?: number;
    ruleAppliesOn?: IRuleAppliesOn;
    releaseDate?: IDateTime;
}
export interface IUpdateTemplatePayload {
    message: string;
}
export interface IDeleteTemplateInput {
    id: IUUID;
}
export interface IDeleteTemplatePayload {
    message: string;
}
export interface ICreateErrorPageInput {
    projectId: IUUID;
    page: string;
    description?: string;
}
export interface ICreateErrorPagePayload {
    errorPage: IErrorPage;
}
export interface IUpdateErrorPageInput {
    errorPageId: IUUID;
    page?: string;
    description?: string;
}
export interface IUpdateErrorPagePayload {
    message: string;
}
export interface IDeleteErrorPageInput {
    id: IUUID;
}
export interface IDeleteErrorPagePayload {
    message: string;
}
export interface ICreateErrorPageValidationInput {
    errorPageId: IUUID;
    keyName: string;
    title?: string;
    textMessage?: string;
    textAccept?: string;
    textCancel?: string;
}
export interface ICreateErrorPageValidationPayload {
    errorPageValidation: IErrorPageValidation;
}
export interface IUpdateErrorPageValidationInput {
    errorPageValidationId: IUUID;
    errorPageId?: IUUID;
    keyName?: string;
    title?: string;
    textMessage?: string;
    textAccept?: string;
    textCancel?: string;
}
export interface IUpdateErrorPageValidationPayload {
    message: string;
}
export interface IDeleteErrorPageValidationInput {
    id: IUUID;
}
export interface IDeleteErrorPageValidationPayload {
    message: string;
}
export interface ICreateBusinessInput {
    projectId: IUUID;
    name: string;
    description?: string;
    slogan?: string;
    image?: string;
    businessTypeId: IUUID;
    businessRuleId?: IUUID;
}
export interface ICreateBusinessPayload {
    business: IBusiness;
}
export interface IUpdateBusinessInput {
    id: IUUID;
    name?: string;
    description?: string;
    slogan?: string;
    image?: string;
    businessTypeId?: IUUID;
    businesssRuleId?: IUUID;
}
export interface IUpdateBusinessPayload {
    business: IBusiness;
}
export interface IDeleteBusinessInput {
    businessId: IUUID;
}
export interface IAssociateBusinessRulesInput {
    businessId: IUUID;
    businessRules: Array<IBusinessRuleDtoInput>;
}
export interface IBusinessRuleDtoInput {
    id?: IUUID;
    keyName?: string;
    commissionNominator?: string;
    businessRuleProjectPlans: Array<IBusinessRuleProjectPlanDtoInput>;
}
export interface IBusinessRuleProjectPlanDtoInput {
    id?: IUUID;
    projectPlanId: IUUID;
    commission?: string;
    commissionSell?: string;
    commissionProspect?: string;
    commissionInterested?: string;
}
export interface IAssociateBusinessRulesPayload {
    business: IBusiness;
}
export interface IAssociateProjectPlanSubscriptionInput {
    projectPlanId: IUUID;
    projectId: IUUID;
    memberId: IUUID;
    active?: boolean;
}
export interface IAssociateProjectPlanSubscriptionPayload {
    projectPlanSubscription: IProjectPlanSubscription;
}
export interface ICreateProjectPlanInput {
    projectId: IUUID;
    title: string;
    description?: string;
    frequencyPayment: IFrequencyPayment;
    availableNominators: number;
    cost: number;
    default?: boolean;
    rateBase?: boolean;
    currency: string;
    serviceProductId?: string;
    changeNominators: string;
    accessExternalNominators?: boolean;
    accessExternalProspects?: boolean;
    vendorRakingDisplay?: boolean;
    accessConnectionProspectsWhatsapp?: boolean;
    serviceSupport?: boolean;
    fee?: number;
}
export interface ICreateProjectPlanPayload {
    projectPlan: IProjectPlan;
}
export interface IUpdateProjectPlanInput {
    id: IUUID;
    title?: string;
    description?: string;
    cost?: number;
    currency?: string;
    default?: boolean;
    rateBase?: boolean;
    changeNominators?: string;
    serviceProductId?: string;
    availableNominators?: number;
    frequencyPayment?: IFrequencyPayment;
    accessExternalNominators?: boolean;
    accessExternalProspects?: boolean;
    vendorRakingDisplay?: boolean;
    accessConnectionProspectsWhatsapp?: boolean;
    serviceSupport?: boolean;
    fee?: number;
}
export interface IUpdateProjectPlanPayload {
    projectPlan: IProjectPlan;
}
export interface IDeleteProjectPlanInput {
    projectPlanId: IUUID;
}
export interface IDeleteProjectPlanPayload {
    message: string;
}
export interface IDeleteProjectPlanSubscriptionInput {
    projectPlanSubscriptionId: IUUID;
}
export interface IDeleteProjectPlanSubscriptionPayload {
    message: string;
}
export interface IPutConfigInput {
    projectId: IUUID;
    key: string;
    value?: string;
}
export interface IPutConfigPayload {
    configuration: IConfiguration;
}
export interface IDeleteConfigInput {
    projectId: IUUID;
    key: string;
}
export interface IDeleteConfigPayload {
    configuration: IConfiguration;
}
export interface IUpdateOrderPageInput {
    items: Array<IPagesDtoInput>;
}
export interface IPagesDtoInput {
    pageId: IUUID;
    position: number;
}
export interface IUpdateOrderPagesPayload {
    items: Array<IPagesDto>;
}
export interface IPagesDto {
    pageId: IUUID;
    position: number;
}
export interface IUpdateBatchWewbsiteComponentInput {
    items: Array<IComponentDtoInput>;
}
export interface IComponentDtoInput {
    webSitePageComponentId: IUUID;
    position: number;
}
export interface IUpdateBatchWewbsiteComponentPayload {
    items: Array<IComponentDto>;
}
export interface IComponentDto {
    webSitePageComponentId: IUUID;
    position: number;
}
export interface ICreateComponentInput {
    keyName: string;
    service: string;
    type: string;
    description: string;
}
export interface ICreateComponentPayload {
    message: string;
}
export interface ICreateWebsiteComponentInput {
    websitePageId: IUUID;
    keyName?: string;
    props?: string;
    position: number;
    parentId?: IUUID;
    subComponents: string;
}
export interface ICreateWebsiteComponentPayload {
    message: string;
}
export interface ICreateWebsitePageInput {
    projectId: IUUID;
    position: number;
    name?: string;
    url?: string;
    description?: string;
    isActive?: boolean;
    scriptHead?: string;
    scriptFooter?: string;
    seoWebsitePage?: string;
}
export interface ICreateWebsitePagePayload {
    message: string;
}
export interface ICreateWebsiteSeoInput {
    websitePageId: IUUID;
    title?: string;
    description?: string;
    keywords?: string;
    canonicaUrl?: string;
    robots?: string;
    googlebot?: string;
    author?: string;
    language?: string;
    twitterCard?: string;
    twitterSite?: string;
    twitterCreator?: string;
    twitterTitle?: string;
    twitterDescription?: string;
    twitterUrl?: string;
    twitterImageAlt?: string;
    twitterImageTitle?: string;
    twitterImageWidth?: string;
    twitterImageHeight?: string;
    twitterImage?: string;
    openGraphTitle?: string;
    openGraphDescription?: string;
    openGraphUrl?: string;
    openGraphImageAlt?: string;
    openGraphImageTitle?: string;
    openGraphImageWidth?: string;
    openGraphImageHeight?: string;
    openGraphImage?: string;
    openGraphType?: string;
    openGraphSiteName?: string;
    openGraphFacebookAppId?: string;
}
export interface ICreateWebsiteSeoPayload {
    message: string;
}
export interface IUpdateComponentInput {
    componentId: IUUID;
    keyName?: string;
    services?: string;
    description?: string;
    type?: string;
}
export interface IUpdateComponentPayload {
    message: string;
}
export interface IUpdateWebsiteComponentInput {
    websitesComponents: Array<IUpdateWebsiteComponentDtoInput>;
}
export interface IUpdateWebsiteComponentDtoInput {
    id: IUUID;
    props?: string;
    position?: number;
}
export interface IUpdateWebsiteComponentPayload {
    message: string;
}
export interface IUpdateWebsitePageInput {
    websitePageId: IUUID;
    name?: string;
    url?: string;
    description?: string;
    isActive?: boolean;
    scriptHead?: string;
    scriptFooter?: string;
    position?: number;
    seoWebsitePage?: string;
}
export interface IUpdateWebsitePagePayload {
    message: string;
}
export interface IUpdateWebsiteSeoInput {
    websiteSeoId: IUUID;
    webSitePageId?: IUUID;
    title?: string;
    description?: string;
    keywords?: string;
    canonicaUrl?: string;
    robots?: string;
    googlebot?: string;
    author?: string;
    language?: string;
    twitterCard?: string;
    twitterSite?: string;
    twitterCreator?: string;
    twitterTitle?: string;
    twitterDescription?: string;
    twitterUrl?: string;
    twitterImageAlt?: string;
    twitterImageTitle?: string;
    twitterImageWidth?: string;
    twitterImageHeight?: string;
    twitterImage?: string;
    openGraphTitle?: string;
    openGraphDescription?: string;
    openGraphUrl?: string;
    openGraphImageAlt?: string;
    openGraphImageTitle?: string;
    openGraphImageWidth?: string;
    openGraphImageHeight?: string;
    openGraphImage?: string;
    openGraphType?: string;
    openGraphSiteName?: string;
    openGraphFacebookAppId?: string;
}
export interface IUpdateWebsiteSeoPayload {
    message: string;
}
export interface IDeleteComponentInput {
    componentId: IUUID;
}
export interface IDeleteComponentPayload {
    message: string;
}
export interface IDeleteWebsiteComponentInput {
    websiteComponentId: IUUID;
}
export interface IDeleteWebsiteComponentPayload {
    message: string;
}
export interface IDeleteWebsitePageInput {
    websitePageId: IUUID;
}
export interface IDeleteWebsitePagePayload {
    message: string;
}
export interface IDeleteWebsiteSeoInput {
    websiteSeoId: IUUID;
}
export interface IDeleteWebsiteSeoPayload {
    message: string;
}
export interface IDocumentCategoryInput {
    name?: string;
    description?: string;
    projectId?: IUUID;
}
export interface IDocumentCategoryPayload {
    documentCategory: IDocumentCategory;
}
export interface IDocumentCategoryDetailInput {
    documentCategoryId?: IUUID;
    documentId?: IUUID;
}
export interface IDocumentCategoryDetailPayload {
    document: IDocumentCategoryDetail;
}
export interface IDocumentInput {
    name?: string;
    url?: string;
    projectId?: IUUID;
}
export interface IDocumentPayload {
    document: IDocument;
}
export interface IDocumentTemplateInput {
    name?: string;
    documentId?: IUUID;
}
export interface IDocumentTemplatePayload {
    document: IDocumentTemplate;
}
export interface ITemplatePageInput {
    page?: number;
    url?: string;
    templateId?: IUUID;
}
export interface ITemplatePagePayload {
    templatePage: ITemplatePage;
}
export interface IDocumentTagInput {
    name?: string;
    height?: IDecimal;
    width?: IDecimal;
    verticalAxis?: IDecimal;
    horizontalAxis?: IDecimal;
    templatePageId?: IUUID;
}
export interface IDocumentTagPayload {
    documentTag: IDocumentTag;
}
export interface IDocumentScanInput {
    value?: string;
    documentTagId?: IUUID;
    documentReadId?: IUUID;
}
export interface IDocumentScanPayload {
    documentScan: IDocumentScan;
}
export interface IDocumentReadInput {
    url?: string;
    memberId?: IUUID;
    projectId?: IUUID;
}
export interface IDocumentReadPayload {
    documentRead: IDocumentRead;
}
export interface ICreateVideoCallInput {
    projectId: IUUID;
    memberId: IUUID;
    participantName: string;
    members?: Array<IMemberInput>;
    services?: Array<IServiceInput>;
    url?: string;
    roomName?: string;
}
export interface IMemberInput {
    id: string;
    fullName: string;
    email: string;
}
export interface IServiceInput {
    serviceCode: string;
    viewAdmin: boolean;
    viewUser: boolean;
}
export interface ICreateVideoCallPayload {
    videoCall: IVideoCall;
    roomAccessToken: IRoomAccessToken;
}
export interface IRoomAccessToken {
    createdAt: string;
    roomName: string;
    token: string;
    participantIdentity: string;
}
export interface IUpdateVideoCallInput {
    videoCallId: IUUID;
    members: Array<string>;
    url?: string;
}
export interface IUpdateVideoCallPayload {
    videoCall: IVideoCall;
}
export interface IDeleteVideoCallInput {
    videoCallId: IUUID;
}
export interface IDeleteVideoCallPayload {
    videoCall: IVideoCall;
}
export interface ICreateAccessTokenInput {
    participantName: string;
    roomName?: string;
}
export interface ICreateVideoRoomInput {
    projectId: IUUID;
    url: string;
    creatorName: string;
    creatorEmail: string;
    title?: string;
    dateScheduled?: IDateTime;
    memberId?: IUUID;
    typeVideo?: ITypeVideo;
}
export interface ICreateVideoRoomPayload {
    videoCall: IVideoRoom;
    roomAccessToken: IRoomAccessToken;
}
export interface ISendNotificationUsersInput {
    videoRoomId?: IUUID;
    membersList: Array<IMemberDtoInput>;
}
export interface IMemberDtoInput {
    fullName: string;
    email: string;
}
export interface ISendNotificationUsersPayload {
    message: string;
}
export interface ISendEmailDownloadInput {
    email: string;
    url: string;
    videoName: string;
}
export interface ISendEmailDownloadPayload {
    message: string;
}
export interface ISendEmailNotificationInput {
    senderName: string;
    senderEmail: string;
    link: string;
    subject: string;
    date: string;
    guests: Array<IMemberDTOInput>;
}
export interface IMemberDTOInput {
    email: string;
    name: string;
}
export interface ISendEmailNotificationPayload {
    message: string;
}
export interface IMuteParticipantInput {
    identity: string;
    roomName: string;
    track: string;
    mute: boolean;
}
export interface IRemoveParticipantRoomInput {
    identity: string;
    roomName: string;
}
export interface IUpdateParticipantRoomInput {
    roomName: string;
    identity: string;
    metadata: string;
}
export interface IStartRecordRoomInput {
    memberId: IUUID;
    name: string;
    roomName?: string;
}
export interface IEndRecordRoomInput {
    roomName?: string;
}
export interface IRecordingPath {
    url: string;
    signedUrl: string;
    size: string;
    name: string;
}
export interface ICreateUpdateContactEmailInput {
    projectId: IUUID;
    contactEmail: string;
    fullName: string;
    fromEmail?: string;
    fromName?: string;
    sendGridKey?: string;
    sendGridTemplateId?: string;
    description?: string;
}
export interface ICreateUpdateContactEmailPayload {
    contactEmail: IContactEmail;
}
export interface ISendEmailInput {
    projectId: IUUID;
    contactEmail: string;
    name: string;
    email: string;
    subject: string;
    content: string;
}
export interface ISendEmailPayload {
    responseEmail: IResponseEmail;
}
export interface IResponseEmail {
    message: string;
}
export interface IDeleteContactEmailInput {
    projectId: IUUID;
    contactEmail: string;
}
export interface IDeleteContactEmailPayload {
    message: string;
}
export interface ISendMailBotInput {
    apiKey: string;
    email: string;
    name: string;
    subject: string;
    content: string;
    templateId?: string;
}
export interface ISendMailBotPayload {
    responseEmail: IResponseEmail;
}
export interface ISendQuizInput {
    destinataries: Array<IQuizDestinaratiesInput>;
    copyTo?: Array<IQuizDestinaratiesInput>;
    from?: string;
    subject: string;
    content: string;
    banner: string;
    redirectTo: Array<IQuizRedirectButtonsInput>;
}
export interface IQuizDestinaratiesInput {
    fullName?: string;
    email: string;
}
export interface IQuizRedirectButtonsInput {
    url: string;
    name: string;
}
export declare const enum IHttpStatusCode {
    CONTINUE = "CONTINUE",
    SWITCHING_PROTOCOLS = "SWITCHING_PROTOCOLS",
    PROCESSING = "PROCESSING",
    EARLY_HINTS = "EARLY_HINTS",
    OK = "OK",
    CREATED = "CREATED",
    ACCEPTED = "ACCEPTED",
    NON_AUTHORITATIVE_INFORMATION = "NON_AUTHORITATIVE_INFORMATION",
    NO_CONTENT = "NO_CONTENT",
    RESET_CONTENT = "RESET_CONTENT",
    PARTIAL_CONTENT = "PARTIAL_CONTENT",
    MULTI_STATUS = "MULTI_STATUS",
    ALREADY_REPORTED = "ALREADY_REPORTED",
    IM_USED = "IM_USED",
    AMBIGUOUS = "AMBIGUOUS",
    MOVED = "MOVED",
    REDIRECT = "REDIRECT",
    REDIRECT_METHOD = "REDIRECT_METHOD",
    NOT_MODIFIED = "NOT_MODIFIED",
    USE_PROXY = "USE_PROXY",
    UNUSED = "UNUSED",
    TEMPORARY_REDIRECT = "TEMPORARY_REDIRECT",
    PERMANENT_REDIRECT = "PERMANENT_REDIRECT",
    BAD_REQUEST = "BAD_REQUEST",
    UNAUTHORIZED = "UNAUTHORIZED",
    PAYMENT_REQUIRED = "PAYMENT_REQUIRED",
    FORBIDDEN = "FORBIDDEN",
    NOT_FOUND = "NOT_FOUND",
    METHOD_NOT_ALLOWED = "METHOD_NOT_ALLOWED",
    NOT_ACCEPTABLE = "NOT_ACCEPTABLE",
    PROXY_AUTHENTICATION_REQUIRED = "PROXY_AUTHENTICATION_REQUIRED",
    REQUEST_TIMEOUT = "REQUEST_TIMEOUT",
    CONFLICT = "CONFLICT",
    GONE = "GONE",
    LENGTH_REQUIRED = "LENGTH_REQUIRED",
    PRECONDITION_FAILED = "PRECONDITION_FAILED",
    REQUEST_ENTITY_TOO_LARGE = "REQUEST_ENTITY_TOO_LARGE",
    REQUEST_URI_TOO_LONG = "REQUEST_URI_TOO_LONG",
    UNSUPPORTED_MEDIA_TYPE = "UNSUPPORTED_MEDIA_TYPE",
    REQUESTED_RANGE_NOT_SATISFIABLE = "REQUESTED_RANGE_NOT_SATISFIABLE",
    EXPECTATION_FAILED = "EXPECTATION_FAILED",
    MISDIRECTED_REQUEST = "MISDIRECTED_REQUEST",
    UNPROCESSABLE_ENTITY = "UNPROCESSABLE_ENTITY",
    LOCKED = "LOCKED",
    FAILED_DEPENDENCY = "FAILED_DEPENDENCY",
    UPGRADE_REQUIRED = "UPGRADE_REQUIRED",
    PRECONDITION_REQUIRED = "PRECONDITION_REQUIRED",
    TOO_MANY_REQUESTS = "TOO_MANY_REQUESTS",
    REQUEST_HEADER_FIELDS_TOO_LARGE = "REQUEST_HEADER_FIELDS_TOO_LARGE",
    UNAVAILABLE_FOR_LEGAL_REASONS = "UNAVAILABLE_FOR_LEGAL_REASONS",
    INTERNAL_SERVER_ERROR = "INTERNAL_SERVER_ERROR",
    NOT_IMPLEMENTED = "NOT_IMPLEMENTED",
    BAD_GATEWAY = "BAD_GATEWAY",
    SERVICE_UNAVAILABLE = "SERVICE_UNAVAILABLE",
    GATEWAY_TIMEOUT = "GATEWAY_TIMEOUT",
    HTTP_VERSION_NOT_SUPPORTED = "HTTP_VERSION_NOT_SUPPORTED",
    VARIANT_ALSO_NEGOTIATES = "VARIANT_ALSO_NEGOTIATES",
    INSUFFICIENT_STORAGE = "INSUFFICIENT_STORAGE",
    LOOP_DETECTED = "LOOP_DETECTED",
    NOT_EXTENDED = "NOT_EXTENDED",
    NETWORK_AUTHENTICATION_REQUIRED = "NETWORK_AUTHENTICATION_REQUIRED"
}
export interface ISendQuizGratitudeInput {
    quizMemberId: IUUID;
    from?: string;
    subject?: string;
    copyTo?: Array<IQuizDestinaratiesInput>;
}
export interface IServiceAreaInput {
    name?: string;
    description?: string;
    code?: string;
    active?: boolean;
    areaId?: IUUID;
}
export interface IServiceAreaPayload {
    serviceArea: IServiceArea;
}
export interface IAreaInput {
    name?: string;
    description?: string;
    code: string;
    active?: boolean;
    projectId?: IUUID;
}
export interface IAreaPayload {
    area: IArea;
}
export interface IUpdateBatchServiceMemberInput {
    new?: Array<IServiceMemberInput>;
    zippedData?: Array<IServiceMemberZippedInput>;
    deleteable?: Array<IUUID>;
}
export interface IServiceMemberInput {
    memberId: IUUID;
    serviceId: IUUID;
}
export interface IServiceMemberZippedInput {
    id: IUUID;
    serviceMember: IServiceMemberInput;
}
export interface IServiceMemberPayload {
    serviceMember: IServiceMember;
}
export interface IServiceQuizInput {
    quizId: IUUID;
    serviceId: IUUID;
}
export interface IServiceQuizPayload {
    serviceQuiz: IServiceQuiz;
}
export interface IQuizInput {
    name?: string;
    description?: string;
    projectId?: IUUID;
    answerableOnlyOnce?: boolean;
    maxTimesAnswerable?: number;
    mailInterviewed?: boolean;
    mailCreator?: boolean;
    saveSend?: boolean;
    note?: string;
    tagPosition?: IEnumTagPosition;
    quizStatus?: IEnumOnlineQuizStatus;
}
export interface IQuizPayload {
    quiz: IQuiz;
}
export interface IQuizSectionInput {
    name?: string;
    description?: string;
    quizId?: IUUID;
    order?: number;
}
export interface IQuizSectionPayload {
    quizSection: IQuizSection;
}
export interface IQuizQuestionPayload {
    quizQuestion: IQuizQuestion;
}
export interface IQuizQuestionInput {
    question?: string;
    type?: IQuiz_QuestionType;
    quizSectionId?: IUUID;
    active?: boolean;
    required?: boolean;
    order?: number;
}
export interface IQuizQuestionNestedInput {
    name?: string;
    description?: string;
    url?: string;
    show?: boolean;
    order?: number;
    quizQuestionId?: IUUID;
}
export interface IQuizQuestionNestedPayload {
    quizQuestionNested: IQuizQuestionNested;
}
export interface IUpdateBatchQuizQuestionInput {
    new?: Array<IQuizQuestionInput>;
    zippedData?: Array<IQuizQuestionZippedInput>;
    deleteable?: Array<IUUID>;
}
export interface IQuizQuestionZippedInput {
    id: IUUID;
    question: IQuizQuestionInput;
}
export interface IQuizQuestionAnswerInput {
    quizQuestionId: IUUID;
    quizAnswerId: IUUID;
    order?: number;
}
export interface IQuizQuestionAnswerPayload {
    questionAnswer: IQuizQuestionAnswer;
}
export interface IUpdateBatchQuizQuestionAnswerInput {
    new?: Array<IQuizQuestionAnswerInput>;
    zippedData?: Array<IQuizQuestionAnswerZippedInput>;
    deleteable?: Array<IUUID>;
}
export interface IQuizQuestionAnswerZippedInput {
    id: IUUID;
    question: IQuizQuestionAnswerInput;
}
export interface IQuizAnswerInput {
    description?: string;
    active?: boolean;
    projectId?: IUUID;
    quizQuestionId?: IUUID;
}
export interface IQuizAnswerPayload {
    quizAnswer: IQuizAnswer;
}
export interface IQuizMemberInput {
    quizId?: IUUID;
    memberId?: IUUID;
    projectId?: IUUID;
    email?: string;
    active?: boolean;
    status?: IEnumQuizStatus;
}
export interface IQuizMemberPayload {
    quizMember: IQuizMember;
}
export interface IQuizQuestionMemberInput {
    quizQuestionId?: IUUID;
    quizMemberId?: IUUID;
    active?: boolean;
    quizMemberAnswerInput?: Array<IQuizMemberAnswerInput>;
    quizMemberDescriptionInput?: IQuizMemberDescriptionInput;
}
export interface IQuizMemberAnswerInput {
    quizQuestionMemberId?: IUUID;
    quizAnswerId?: IUUID;
    active?: boolean;
}
export interface IQuizMemberDescriptionInput {
    quizQuestionMemberId?: IUUID;
    description?: string;
    active?: boolean;
}
export interface IQuizQuestionMemberPayload {
    quizQuestionMember: IQuizQuestionMember;
}
export interface IUpdateBatchQuizQuestionMemberInput {
    new?: Array<IQuizQuestionMemberInput>;
    zippedData?: Array<IQuizQuestionMemberZippedInput>;
    deleteable?: Array<IUUID>;
}
export interface IQuizQuestionMemberZippedInput {
    id: IUUID;
    member: IQuizQuestionMemberInput;
}
export interface IQuizMemberAnswerPayload {
    memberAnswer: IQuizMemberAnswer;
}
export interface IUpdateBatchQuizMemberAnswerInput {
    new?: Array<IQuizMemberAnswerInput>;
    zippedData?: Array<IQuizMemberAnswerZippedInput>;
    deleteable?: Array<IUUID>;
}
export interface IQuizMemberAnswerZippedInput {
    id: IUUID;
    member: IQuizMemberAnswerInput;
}
export interface IQuizMemberDescriptionPayload {
    memberDescription: IQuizMemberDescription;
}
export interface IUpdateBatchQuizMemberDescriptionInput {
    new?: Array<IQuizMemberDescriptionInput>;
    zippedData?: Array<IQuizMemberDescriptionZippedInput>;
    deleteable?: Array<IUUID>;
}
export interface IQuizMemberDescriptionZippedInput {
    id: IUUID;
    member: IQuizMemberDescriptionInput;
}
export interface IKeyInput {
    user: string;
    device: string;
    origin: string;
    idAplication: number;
    projectId: IUUID;
}
export interface IKeyPayload {
    key: IKey;
}
export interface IKey {
    user?: string;
    device?: string;
    origin?: string;
    idAplication?: number;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IQuotationInput {
    projectId: IUUID;
    token: string;
    idUbicacion: number;
    codigoPostal: string;
    idMunicipio: number;
    idEstado: number;
    rfc: string;
    edad: number;
    sexo: number;
    email: string;
    telefono: string;
    idDescripcionModelo: number;
    idAseguradora?: number;
}
export interface IQuotationPayload {
    idPeticionCotizacion?: number;
    error?: string;
}
export interface ILoginInput {
    projectId: IUUID;
}
export interface ILoginPayload {
    name?: string;
    idCredential?: number;
    token?: string;
    aplicaciones?: string;
    error?: IErrorData;
}
export interface IErrorData {
    numero?: number;
    descripcion?: string;
}
export interface IPolicyInput {
    projectId: IUUID;
    token: string;
    numeroPoliza: string;
    idCotizacion: number;
    idAseguradoraSubRamo: number;
    idSubramo: number;
}
export interface IPolicyPayload {
    error?: IErrorData;
    poliza?: IPolicy;
    condiciones?: string;
    siniestro?: string;
    polizaGR?: string;
}
export interface IQuotationDownloadPDFInput {
    projectId: IUUID;
    token: string;
    idCotizacion: number;
    formasPago: Array<IEnumFormsPayment>;
    idProducto: number;
    productos: Array<number>;
}
export interface IQuotationDownloadPDFPayload {
    error?: IErrorData;
    pdf64?: IPdf64Data;
}
export interface IPdf64Data {
    amplia?: string;
    ampliaPlus?: string;
    limitada?: string;
}
export interface IQuotationEmitInput {
    projectId: IUUID;
    token: string;
    idCotizacion: number;
    fechaInicioVigencia: IDateTime;
    calle: string;
    numExt: string;
    numInt: string;
    nombre: string;
    apellidoPaterno: string;
    apellidoMaterno: string;
    fechaNacimiento: IDateTime;
    rfc: string;
    edad: number;
    sexo: IEnumGender;
    email: string;
    telefono: string;
    idOcupacion: number;
    idAseguradora: IEnumInsurerSubBranch;
    idProduct: IEnumIdProduct;
    medioPago: IEnumMethodPayment;
    nombreTarjetaHabiente: string;
    paternoTarjetaHabiente: string;
    maternoTarjetaHabiente: string;
    idBanco: number;
    nombreBanco: string;
    codigoSeguridad: string;
    numTarjeta: string;
    anioVigenciaTarjeta: number;
    mesVigenciaTarjeta: number;
    numSerie: string;
    placa: string;
    numMotor: string;
    tipoPersona: IEnumTypePerson;
    nombreBeneficiario: string;
    apellidoPaternoBeneficiario: string;
    apellidoMaternoBeneficiario: string;
    rfcBeneficiario: string;
    razonSocial: string;
    formaPago: IEnumFormsPayment;
    regimenFiscal: string;
    usoCfdi: string;
}
export declare const enum IEnumGender {
    MASCULINE = "MASCULINE",
    FEMININE = "FEMININE"
}
export declare const enum IEnumInsurerSubBranch {
    AXA = "AXA",
    CHUBB = "CHUBB",
    SURA = "SURA",
    ZURICH = "ZURICH",
    MAPFRE = "MAPFRE",
    QUALITAS = "QUALITAS",
    BANORTE = "BANORTE",
    ANA_SEGUROS = "ANA_SEGUROS",
    AFIRME = "AFIRME",
    HDI = "HDI"
}
export declare const enum IEnumIdProduct {
    AMPLIA = "AMPLIA",
    AMPLIA_PLUS = "AMPLIA_PLUS",
    LIMITADA = "LIMITADA"
}
export declare const enum IEnumMethodPayment {
    CASH = "CASH",
    CREDIT_CARD = "CREDIT_CARD"
}
export declare const enum IEnumTypePerson {
    FISICA = "FISICA",
    MORAL = "MORAL"
}
export interface IQuotationEmitPayload {
    numeroPoliza?: string;
    error?: IErrorData;
}
export interface ISendQuotationInput {
    projectId: IUUID;
    token: string;
    idCotizacion: number;
    formasPago: Array<IEnumFormsPayment>;
    idProducto: number;
    producto: string;
    correos: Array<string>;
}
export interface ISendQuotationPayload {
    error?: string;
}
export interface IAttachPaymentMethodToCustomerInput {
    paymentMethodId: IUUID;
    memberId: IUUID;
    projectId: IUUID;
}
export interface ICreatePaymentMethodPayload {
    paymentMethod: IPaymentMethod;
}
export interface ISetupIntentStripeInput {
    projectId: IUUID;
    memberId: IUUID;
    customerData?: ICustomerDataInput;
}
export interface ICustomerDataInput {
    name: string;
    mail: string;
}
export interface ISetupIntentStripePayload {
    setupIntentClientSecret: string;
    customerId: string;
    publicKey: string;
}
export interface ISetDefaultPaymentMethodOnCustomerInput {
    memberId: IUUID;
    projectId: IUUID;
    paymentMethodId: IUUID;
}
export interface ISetDefaultPaymentMethodOnCustomerPayload {
    message: string;
}
export interface IUpdatePriceStripeInput {
    productId: IUUID;
    newPrice: number;
    currency: string;
    interval: string;
}
export interface IUpdatePriceStripePayload {
    message: string;
}
export interface INewPaymentsAnyTypeInput {
    products: Array<IUUID>;
    stripeToken: string;
    stripeEmail: string;
    memberId: IUUID;
    projectId: IUUID;
    numbers: string;
    expiration: string;
    cvc: string;
}
export interface INewPaymentsAnyTypePayload {
    message: string;
}
export interface ICreateProductStripeInput {
    name: string;
    productId: IUUID;
    projectId: IUUID;
}
export interface ICreateProductStripePayload {
    productId: string;
}
export interface IPlanInput {
    projectId?: IUUID;
    description?: string;
    code?: string;
    status?: boolean;
    amount?: IDecimal;
    interval?: IEnumInterval;
    intervalCount?: number;
    productId?: IUUID;
}
export declare const enum IEnumInterval {
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
export interface IPlanPayload {
    plan: Ipayment_Plan;
}
export interface ICreateStripePriceInput {
    unitAmount: ILong;
    currency: string;
    interval: string;
    stripeProductId: string;
    projectId: IUUID;
    productId: IUUID;
}
export interface ICreateStripePricePayload {
    plan: Ipayment_Plan;
}
export interface ICreateMethodPaymentInput {
    projectId?: IUUID;
    companyId?: IUUID;
    memberId: IUUID;
    alias?: string;
    privateKey: string;
    publicKey: string;
    active?: boolean;
    servicePayment: IServicePayment;
}
export interface ICreateMethodPaymentPayload {
    methodPayment: IMethodPayment;
}
export interface IUpdateMethodPaymentInput {
    methodPaymentId: IUUID;
    servicePayment?: IServicePayment;
    active?: boolean;
    alias?: string;
    privateKey?: string;
    publicKey?: string;
}
export interface IUpdateMethodPaymentPayload {
    methodPayment: IMethodPayment;
}
export interface IDeleteMethodPaymentInput {
    methodPaymentId: IUUID;
}
export interface IDeleteMethodPaymentPayload {
    methodPayment: IMethodPayment;
}
export interface ICreatePaymentStripeInput {
    invoiceId?: IUUID;
    projectId?: IUUID;
    companyId?: IUUID;
    paymentStripeCharge: IPaymentStripeChargeInput;
}
export interface IPaymentStripeChargeInput {
    amount: number;
    receiptEmail: string;
    currency: string;
    transactionNumber: string;
}
export interface ICreatePaymentStripePayload {
    transaction: Ipayment_Transaction;
}
export interface ICreatePaymentStripeToAccountInput {
    memberId: IUUID;
    invoiceId?: IUUID;
    projectId: IUUID;
    paymentStripeCharge: IPaymentStripeChargeInput;
}
export interface ICreateSuscriptionStripeInput {
    projectId: IUUID;
    invoiceId: IUUID;
    planId: IUUID;
    name: string;
    mail: string;
    numbers: string;
    expiration: string;
    cvc: string;
    count: number;
}
export interface ICreateSuscriptionStripePayload {
    userKey: IAccountKey;
    trans: Ipayment_Transaction;
}
export interface ICreateSuscriptionExternalStripeInput {
    projectId: IUUID;
    planCode: string;
    amount: IDecimal;
    name: string;
    mail: string;
    numbers: string;
    expiration: string;
    cvc: string;
    count: number;
}
export interface ICreateSuscriptionExternalStripePayload {
    userKey: IAccountKey;
    trans: Ipayment_Transaction;
}
export interface IDeleteSuscriptionExternalStripeInput {
    projectId: IUUID;
    memberId: IUUID;
    planCode: string;
}
export interface IDeleteSuscriptionExternalStripePayload {
    userKey: IAccountKey;
}
export interface ICreateStripeAccountInput {
    projectId: IUUID;
    memberId?: IUUID;
    url?: string;
}
export interface ICreateStripeAccountPayload {
    userKey: IAccountKey;
    url: string;
}
export interface IDeletePaymentInput {
    paymentId: IUUID;
}
export interface IDeletePaymentPayload {
    transaction: Ipayment_Transaction;
}
export interface IUpdatePaymentInput {
    transactionNumber: string;
    transactionStatus: ITransactionStatus;
    responseText: string;
}
export interface IUpdatePaymentPayload {
    transaction: Ipayment_Transaction;
}
export interface ICreateInvoiceInput {
    projectId: IUUID;
    addressId: IUUID;
    memberId: IUUID;
    products?: Array<IProductInvoiceDetailInput>;
    invoiceNumber: string;
    invoiceStatus: IInvoiceStatus;
    shippingSale: IDecimal;
    observations?: string;
    invoiceDate?: string;
}
export interface IProductInvoiceDetailInput {
    id: IUUID;
    quantity: number;
    unitPrice: IDecimal;
}
export interface ICreateInvoicePayload {
    invoice: IInvoice;
}
export interface IUpdateStatusInvoiceInput {
    invoiceId: IUUID;
    status: IInvoiceStatus;
}
export interface IUpdateStatusInvoicePayload {
    invoice: IInvoice;
}
export interface ICreatePaymentMethodInput {
    memberId: IUUID;
    projectId: IUUID;
    default?: boolean;
    numbers: string;
    expiration: string;
    cvc: string;
}
export interface IDeletePaymentMethodInput {
    id: IUUID;
}
export interface IDeletePaymentMethodPayload {
    message: string;
}
export interface ICreateBatchInsurerCoveragesInput {
    coverages: Array<IInsurerCoverageDTOInput>;
    projectId: IUUID;
}
export interface IInsurerCoverageDTOInput {
    code: string;
    name: string;
    description?: string;
    insurerServiceId: IUUID;
}
export interface ICreateBatchInsurerCoveragesPayload {
    message: string;
}
export interface ICreateQuoteInput {
    projectId: IUUID;
    memberId: IUUID;
    firstName: string;
    lastName: string;
    rfc?: string;
    phone: string;
    frecuency: number;
    packageName: string;
    email: string;
    colony: string;
    town: string;
    state: string;
    stateId: string;
    brand: string;
    subBrand: string;
    description: string;
    gender?: IQuoteGender;
    zipCode: string;
    carId: number;
    carCode: string;
    year: number;
    dateOfBirth: string;
    startValidity?: string;
    endValidity?: string;
}
export interface ICreateQuotePayload {
    quoteId: IUUID;
}
export interface ICreateNewOfficesPayload {
    message: string;
}
export interface ICreateNewProfilesPayload {
    message: string;
}
export interface ICreateInsurerInput {
    insurerServiceId: IUUID;
    projectId: IUUID;
    name: string;
    percentageMax?: IDecimal;
}
export interface ICreateInsurerPayload {
    message: string;
}
export interface ICreateOfficeInput {
    projectId: IUUID;
    name: string;
}
export interface ICreateOfficePayload {
    message: string;
}
export interface ICreateRegistrationInput {
    projectId: IUUID;
    name: string;
    email: string;
    state?: string;
    city?: string;
    tradename?: string;
    interests?: Array<boolean>;
    company?: string;
}
export interface ICreateRegistrationPayload {
    message: string;
}
export interface ICreateQuatorProfileInput {
    projectId: IUUID;
    name: string;
    officeId: IUUID;
    insurers?: Array<IQuoterProfileInsurerInsertInput>;
}
export interface IQuoterProfileInsurerInsertInput {
    percentageBase: IDecimal;
    percentageMax: IDecimal;
    insurerId: IUUID;
    portalAgentQuote: boolean;
    portalAgentEmits: boolean;
    portalPublicQuote: boolean;
    portalPublicEmits: boolean;
}
export interface ICreateQuatorProfilePayload {
    message: string;
}
export interface IDeleteInsurerInput {
    insurerId: IUUID;
}
export interface IDeleteInsurerPayload {
    message: string;
}
export interface IDeleteOfficeInput {
    officeId: IUUID;
}
export interface IDeleteOfficePayload {
    message: string;
}
export interface IDeleteQuoterProfileInput {
    quoterProfileId: IUUID;
}
export interface IDeleteQuoterProfilePayload {
    message: string;
}
export interface IUpdateInsurerInput {
    insurerId: IUUID;
    name: string;
    percentageMax: IDecimal;
}
export interface IUpdateInsurerPayload {
    message: string;
}
export interface IUpdateOfficeInput {
    officeId: IUUID;
    name: string;
}
export interface IUpdateOfficePayload {
    message: string;
}
export interface IUpdateQuoterProfileInput {
    quoterProfileId: IUUID;
    name: string;
    officeId: IUUID;
    insurers?: Array<IQuoterProfileInsurerUpdateInput>;
}
export interface IQuoterProfileInsurerUpdateInput {
    id?: IUUID;
    insurerId: IUUID;
    percentageBase: IDecimal;
    percentageMax: IDecimal;
    portalAgentQuote: boolean;
    portalAgentEmits: boolean;
    portalPublicQuote: boolean;
    portalPublicEmits: boolean;
}
export interface IUpdateQuoterProfilePayload {
    message: string;
}
export interface ICreateCatalogInput {
    brand: string;
    years: Array<ICatalogoByYearInsertInput>;
    subBrand: string;
    description: string;
    occupants: number;
    catalogType?: string;
}
export interface ICatalogoByYearInsertInput {
    year: number;
    cveveh: string;
}
export interface ICreateCatalogPayload {
    message: string;
}
export interface IPopulateCredentialsInput {
    projectId: IUUID;
}
export interface IPopulateCredentialsPayload {
    message: string;
}
export interface IPopulateServicesInput {
    projectId: IUUID;
    services: Array<string>;
}
export interface IPopulateServicesPayload {
    message: string;
}
export interface IEmitionRequestInput {
    serie: string;
    quoteId: IUUID;
    serviceId: IUUID;
    makeCoverages?: boolean;
}
export interface IEmissionCarPayload {
    message: string;
}
export interface IPrintEmitionRequestInput {
    quoteId: IUUID;
    serviceId: IUUID;
}
export interface IPrintEmissionPayload {
    message: string;
}
export interface ICreateQuoteCoverageInput {
    name?: string;
    code?: string;
    sumAssured?: string;
    sumType?: string;
    deductible?: string;
    total?: string;
    neto?: string;
    priority: number;
    quoteId: IUUID;
}
export interface ICreateQuoteCoveragePayload {
    quoteCoverage: IQuotationCoverage;
}
export interface IUpdateQuoteCoverageInput {
    quoteCoverageId: IUUID;
    name?: string;
    code?: string;
    sumAssured?: string;
    sumType?: string;
    deductible?: string;
    total?: string;
    neto?: string;
    priority?: number;
    quoteId?: IUUID;
}
export interface IUpdateQuoteCoveragePayload {
    message: string;
}
export interface IDeleteQuoteCoverageInput {
    id: IUUID;
}
export interface IDeleteQuoteCoveragePayload {
    message: string;
}
export interface IAssociationWithQuoterProfileInput {
    projectId: IUUID;
    memberId: IUUID;
    quoterProfileId: IUUID;
}
export interface IAssociationWithQuoterProfilePayload {
    message: string;
}
export interface IUpdateQuoteInput {
    quoteId: IUUID;
    hiredSame?: boolean;
    status?: IQuoteStatus;
    firstName?: string;
    lastName?: string;
    phone?: string;
    email?: string;
    address?: string;
    discount?: number;
    coverage?: string;
    primalTotal?: string;
    deductible?: string;
    typeFrecuency?: string;
    firstPay?: string;
    secondPay?: string;
    plaque?: string;
    compensationValue?: string;
    serialNumber?: string;
    hiredFirstName?: string;
    hiredLastName?: string;
    hiredPhone?: string;
    hiredEmail?: string;
    hiredAddress?: string;
}
export interface IUpdateQuotePayload {
    message: string;
}
export interface ICreateInsurerCredentialInput {
    insurerServiceId: IUUID;
    projectId: IUUID;
    conduit?: string;
    username?: string;
    password?: string;
    rate?: string;
    agent?: string;
    group?: string;
    deal?: string;
    office?: string;
    cprogram?: string;
    default?: boolean;
    active?: boolean;
    extra?: string;
    discount?: number;
    owner?: string;
    environment?: IServiceEnvironment;
}
export interface ICreateInsurerCredentialPayload {
    message: string;
}
export interface IUpdateInsurerCredentialInput {
    insurerServiceCredentialId: IUUID;
    insurerServiceId: IUUID;
    projectId: IUUID;
    conduit?: string;
    username?: string;
    password?: string;
    rate?: string;
    agent?: string;
    group?: string;
    deal?: string;
    office?: string;
    cprogram?: string;
    default?: boolean;
    active?: boolean;
    extra?: string;
    discount?: number;
    owner?: string;
    environment?: IServiceEnvironment;
}
export interface IUpdateInsurerCredentialPayload {
    message: string;
}
export interface IAssociationRelationCarInput {
    qualitasCode: string;
    forAssociationId: string;
    insurer: IEnumInsurer;
}
export declare const enum IEnumInsurer {
    CHUBB = "CHUBB",
    ANA = "ANA",
    QUALITAS = "QUALITAS",
    GNP = "GNP",
    HDI = "HDI",
    POTOSI = "POTOSI",
    MAPFRE = "MAPFRE",
    ZURICH = "ZURICH"
}
export interface IAssociationRelationCarPayload {
    message: string;
}
export interface ICreateCoverageProjectInput {
    projectId: IUUID;
    insurerServiceCode: string;
    insurerCoverageCode: string;
    insurerPackages?: Array<IInsurerPackageStatus>;
    sumAssured?: string;
    sumType?: string;
    deductible?: string;
    prima?: string;
    deductibleOptions?: Array<string>;
    sumAssuredOptions?: Array<string>;
    isActive: boolean;
    visible?: boolean;
    priority: number;
}
export interface ICreateCoverageProjectPayload {
    message: string;
}
export interface IUpdateCoverageProjectInput {
    projectId?: IUUID;
    insurerServiceCode?: string;
    insurerCoverageCode?: string;
    insurerPackages?: Array<IInsurerPackageStatus>;
    sumAssured?: string;
    sumType?: string;
    deductible?: string;
    deductibleOptions?: Array<string>;
    sumAssuredOptions?: Array<string>;
    isActive?: boolean;
    priority?: number;
    ampliaAvailable?: boolean;
    limitadaAvailable?: boolean;
    rCAvailable?: boolean;
}
export interface IUpdateCoverageProjectPayload {
    message: string;
}
export interface IUpdateBatchCoverageProjectInput {
    newCoverage?: Array<ICreateCoverageProjectInput>;
    zippedCoverage?: Array<IZippedCoverageProjectInput>;
}
export interface IZippedCoverageProjectInput {
    id: IUUID;
    data?: IUpdateCoverageProjectInput;
}
export interface IUpdateBatchCoverageProjectPayload {
    message: string;
}
export interface ICreateApiServiceInput {
    projectId: IUUID;
    label: string;
    serviceCode: string;
}
export interface ICreateApiServicePayload {
    apiService: IApiService;
}
export interface IUpdateApiServiceInput {
    apiServiceId: IUUID;
    label?: string;
    serviceCode?: string;
    expiration?: string;
}
export interface IUpdateApiServicePayload {
    message: string;
}
export interface IDynamicCustomMetaInput {
    dynamicSectionBlockId?: IUUID;
    metaKey?: string;
    metaType?: IMetaType;
    label?: string;
    description?: string;
    position?: number;
}
export interface IDynamicCustomMetaPayload {
    dynamicCustomMeta: IDynamicCustomMeta;
}
export interface IUpdateBatchDynamicCustomMetaInput {
    new?: Array<IDynamicCustomMetaInput>;
    zippedData?: Array<IDynamicCustomMetaZippedInput>;
    deleteable?: Array<IUUID>;
}
export interface IDynamicCustomMetaZippedInput {
    id: IUUID;
    customMeta: IDynamicCustomMetaInput;
}
export interface IDynamicCustomValueInput {
    memberId?: IUUID;
    dynamicCustomMetaId?: IUUID;
    value?: string;
}
export interface IDynamicCustomValuePayload {
    dynamicCustomValue: IDynamicCustomValue;
}
export interface IUpdateBatchDynamicCustomValueInput {
    new?: Array<IDynamicCustomValueInput>;
    zippedData?: Array<IDynamicCustomValueZippedInput>;
    deleteable?: Array<IUUID>;
}
export interface IDynamicCustomValueZippedInput {
    id: IUUID;
    customValue: IDynamicCustomValueInput;
}
export interface IDynamicPageInput {
    label?: string;
    name?: string;
    projectId?: IUUID;
}
export interface IDynamicPagePayload {
    dynamicPage: IDynamicPage;
}
export interface IDynamicBlockInput {
    codeName?: string;
    description?: string;
    services?: string;
    components?: string;
    style?: string;
}
export interface IDynamicBlockPayload {
    dynamicBlock: IDynamicBlock;
}
export interface IDynamicSectionInput {
    position?: number;
    isPrimary?: boolean;
    dynamicPageId?: IUUID;
}
export interface IDynamicSectionPayload {
    dynamicSection: IDynamicSection;
}
export interface IDynamicSectionBlockInput {
    label?: string;
    position?: number;
    style?: string;
    dynamicTabId?: IUUID;
    dynamicBlockId?: IUUID;
}
export interface IDynamicSectionBlockPayload {
    dynamicSectionBlock: IDynamicSectionBlock;
}
export interface IDynamicTabInput {
    name?: string;
    position?: number;
    dynamicSectionId?: IUUID;
}
export interface IDynamicTabPayload {
    dynamicTab: IDynamicTab;
}
export interface ICreateChargeInput {
    projectId: IUUID;
    eventId: IUUID;
    memberId: IUUID;
    total: IDecimal;
}
export interface ICreateChargePayload {
    message: string;
}
export interface ICreateClinicHistoryInput {
    projectId: IUUID;
    memberId: IUUID;
    eventId: IUUID;
    notes: string;
    isVisible?: boolean;
    position?: number;
}
export interface ICreateClinicHistoryPayload {
    message: string;
}
export interface ICreateClinicHistoryMedicalBackgroundDetailInput {
    projectId: IUUID;
    medicalBackgrounDetailId: IUUID;
    isYes: boolean;
}
export interface ICreateClinicHistoryMedicalBackgroundDetailPayload {
    message: string;
}
export interface ICreateEventDetailInput {
    memberId: IUUID;
    projectId: IUUID;
    eventId: IUUID;
    subTotal: IDecimal;
    descuento: IDecimal;
    tax: IDecimal;
    total: IDecimal;
}
export interface ICreateEventDetailPayload {
    message: string;
}
export interface ICreateFisicExamInput {
    projectId: IUUID;
    eventId: IUUID;
    memberId: IUUID;
    isVisible?: boolean;
    position?: number;
    title?: string;
    content: string;
}
export interface ICreateFisicExamPayload {
    message: string;
}
export interface ICreateFormatInput {
    projectId: IUUID;
    memberId: IUUID;
    eventTypeId: IUUID;
    nameFormat?: string;
}
export interface ICreateFormatPayload {
    format: IFormat;
}
export interface ICreateMedicalBackgroundDetailInput {
    medicalBackgroundId: IUUID;
    label: string;
    isOPtion: boolean;
    isVisible: boolean;
    backgroundTypesOption: IBackgroundTypesOptions;
    position: number;
}
export interface ICreateMedicalBackgroundDetailPayload {
    message: string;
}
export interface ICreateMedicalBackgroundInput {
    projectId: IUUID;
    formatId?: IUUID;
    label: string;
    position: number;
    isVisible: boolean;
}
export interface ICreateMedicalBackgroundPayload {
    message: string;
}
export interface ICreateMedicalConfigInput {
    projectId: IUUID;
    patologis: boolean;
}
export interface ICreateMedicalConfigPayload {
    message: string;
}
export interface ICreateMedicalServiceInput {
    projectId: IUUID;
    state: boolean;
    name: string;
    serviceOption: IServiceOption;
    cost: IDecimal;
    imgroute: string;
    description: string;
}
export interface ICreateMedicalServicePaylod {
    message: string;
}
export interface ICreateMedicineInput {
    projectId: IUUID;
    eventId: IUUID;
    memberId: IUUID;
    medicineName: string;
    take: string;
    frecuency: string;
    duration: string;
}
export interface ICreateMedicinePayload {
    message: string;
}
export interface ICreateVaccineInput {
    projectId: IUUID;
    memberId: IUUID;
    nameVac: string;
    position?: number;
    dateAplicaction: string;
    nextVac?: string;
    notesVac?: string;
}
export interface ICreateVaccinePayload {
    message: string;
}
export interface ICreateVitalSignsInput {
    projectId: IUUID;
    label: string;
    position: number;
    isVisible: boolean;
}
export interface ICreateVitalSignsPayload {
    message: string;
}
export interface ICreateMedicRecipeInput {
    projectId: IUUID;
    memberId: IUUID;
    profesionalCell: string;
    speciality: string;
    institute: string;
    electronicsign: string;
    isCorrect: boolean;
}
export interface ICreateMedicRecipePayload {
    message: string;
}
export interface ICreateRecipeConfigInput {
    projectId: IUUID;
    medicRecipeId: IUUID;
    isActiveAllPacients: boolean;
    isAccessDataPacient: boolean;
}
export interface ICreateRecipeConfigPaylod {
    message: string;
}
export interface ICreateRegistSesionInput {
    projectId: IUUID;
    therapyId: IUUID;
    namePacient: string;
    terapist: string;
    dateSesion: string;
    comments: string;
    title: string;
    electronicsign: string;
    legalType: boolean;
}
export interface ICreateRegistSesionPayload {
    message: string;
}
export interface ICreatePacientNoteInput {
    memberId: IUUID;
    projectId: IUUID;
    eventId: IUUID;
    note?: string;
}
export interface ICreatePacientNotePayload {
    message: string;
}
export interface ICreateTherapyInput {
    projectId: IUUID;
    eventId: IUUID;
    memberId: IUUID;
    content: string;
    isVisible?: boolean;
    position: number;
    numSesion: IDecimal;
}
export interface ICreateDiagnosticInput {
    memberId: IUUID;
    projectId: IUUID;
    eventId: IUUID;
    isVisible: boolean;
    content: string;
}
export interface ICreateDiagnosticPayload {
    message: string;
}
export interface ICreateConsultNoteInput {
    memberId: IUUID;
    projectId: IUUID;
    eventId: IUUID;
    isVisible: boolean;
    note?: string;
}
export interface ICreateConsultNotePayload {
    message: string;
}
export interface ICreateMedicalBackgroundSetInput {
    medicalBackground?: IMedicalBackgroundInput;
    medicalBackgroundDetail?: IMedicalBackgroundDetailInput;
    clinicHistoryMedicalBackgroundDetail?: IClinicHistoryMedicalBackgroundDetailInput;
}
export interface IMedicalBackgroundInput {
    projectId: IUUID;
    formatId?: IUUID;
    format?: IFormatInput;
    label?: string;
    isVisible: boolean;
    position: number;
    pacientMedicalBackground?: IPacientMedicalBackgroundInput;
    medicalBackgroundDetails: Array<IMedicalBackgroundDetailInput>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IFormatInput {
    projectId: IUUID;
    memberId: IUUID;
    eventTypeId: IUUID;
    nameFormat?: string;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IPacientMedicalBackgroundInput {
    medicalBackgroundDetailId: IUUID;
    medicalBackgroundDetail: IMedicalBackgroundDetailInput;
    projectId: IUUID;
    memberId: IUUID;
    eventId: IUUID;
    text?: string;
    isResponse?: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IMedicalBackgroundDetailInput {
    projectId: IUUID;
    medicalBackgroundId: IUUID;
    medicalBackground: IMedicalBackgroundInput;
    label: string;
    backgroundTypeOption?: IBackgroundTypesOptions;
    isOption?: boolean;
    isVisible?: boolean;
    position: number;
    clinicHistoryMedicalBackgroundDetails?: Array<IClinicHistoryMedicalBackgroundDetailInput>;
    pacientMedicalBackgrounds?: Array<IPacientMedicalBackgroundInput>;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IClinicHistoryMedicalBackgroundDetailInput {
    medicalBackgroundDetailId: IUUID;
    medicalBackgroundDetail: IMedicalBackgroundDetailInput;
    backgroundType: IBackgroundTypesOptions;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICreateMedicalBackgroundSetPayload {
    id: IUUID;
}
export interface ICreateVitalSignsTemplateInput {
    projectId: IUUID;
}
export interface ICreatePacientMedicalBackgroundInput {
    medicalBackgroundDetailId: IUUID;
    projectId: IUUID;
    memberId: IUUID;
    eventId: IUUID;
    text?: string;
    isResponse?: boolean;
}
export interface ICreatePacientMedicalBackgroundPaylod {
    message: string;
}
export interface ICreatePatientVitalSignsResponseInput {
    vitalSignId: IUUID;
    eventId: IUUID;
    memberId: IUUID;
    value?: IDecimal;
}
export interface ICreatePatientVitalSignsResponsePayload {
    message: string;
}
export interface IUpdateChargeInput {
    chargeId: IUUID;
    total: IDecimal;
}
export interface IUpdateChargePayload {
    message: string;
}
export interface IUpdateClinicHistoryInput {
    clinicHistoryId: IUUID;
    notes: string;
    isVisible?: boolean;
    position?: number;
}
export interface IUpdateClinicHistoryPayloads {
    message: string;
}
export interface IUpdateClinicHistoryMedicalBackgroundDetailInput {
    clinicHistoryMedicalBackgrounId: IUUID;
    isYes: boolean;
}
export interface IUpdateClinicHistoryMedicalBackgroundDetailPayload {
    message: string;
}
export interface IUpdateEventDetailInput {
    eventId: IUUID;
    subtotal: IDecimal;
    descuento: IDecimal;
    tax: IDecimal;
    total: IDecimal;
}
export interface IUpdateEventDetailtPayload {
    message: string;
}
export interface IUpdateFisicExamInput {
    fisicalExamId: IUUID;
    isVisible?: boolean;
    title?: string;
    content?: string;
    position?: number;
}
export interface IUpdateFisicExamPayload {
    message: string;
}
export interface IUpdateFormatInput {
    formatId: IUUID;
    eventTypeId: IUUID;
    formatName?: string;
}
export interface IUpdateFormatPayload {
    message: string;
}
export interface IUpdateMedicalBackgroundDetailInput {
    medicalBackgroundDetailId: IUUID;
    backgroundTypeOption: IBackgroundTypesOptions;
    isOptional?: boolean;
    isVisible?: boolean;
    label: string;
}
export interface IUpdateMedicalBackgroundDetailPayload {
    message: string;
}
export interface IUpdateMedicalBackgroundInput {
    medicalBackgroundId: IUUID;
    formatId?: IUUID;
    isVisible?: boolean;
    label?: string;
}
export interface IUpdateMedicalBackgroundPayload {
    message: string;
}
export interface IUpdateMedicalConfigInput {
    medicalConfigId: IUUID;
    patologis?: boolean;
}
export interface IUpdateMedicalConfigPayload {
    message: string;
}
export interface IUpdateMedicalServiceInput {
    medicalServiceId: IUUID;
    name?: string;
    serviceOption?: IServiceOption;
    state?: boolean;
    cost: IDecimal;
    imgRoute?: string;
    description?: string;
}
export interface IUpdateMedicalServicePayload {
    message: string;
}
export interface IUpdateMedicineInput {
    medicineId: IUUID;
    medicine?: string;
    take?: string;
    frecuency?: string;
    duration?: string;
}
export interface IUpdateMedicinePayload {
    message: string;
}
export interface IUpdateVaccineInput {
    vaccineId: IUUID;
    dateAplicationVac?: string;
    nextVac?: string;
    position?: number;
    nameVac?: string;
    notesVac?: string;
}
export interface IUpdateVaccinePayload {
    message: string;
}
export interface IUpdateVitalSingsInput {
    vitalSingsId: IUUID;
    label?: string;
    position?: number;
    isVisible?: boolean;
}
export interface IUpdateVitalSingsPayloads {
    message: string;
}
export interface IUpdateMedicRecipeInput {
    medicRecipeId: IUUID;
    isCorrect?: boolean;
    profesionalCell: string;
    speciality: string;
    institute: string;
    electronicSing: string;
}
export interface IUpdateMedicRecipePayload {
    message: string;
}
export interface IUpdateRecipeConfigInput {
    recipeConfigId: IUUID;
    isActiveAllPacients: boolean;
    isAccessDataPacient: boolean;
}
export interface IUpdateRecipeConfigPayload {
    message: string;
}
export interface IUpdateRegistSesionInput {
    registSesionId: IUUID;
    title: string;
    electronicSing: string;
    legalType: boolean;
    dateSesion: string;
    namePacient: string;
    terapist: string;
    comments: string;
}
export interface IUpdateRegistSesionPayload {
    message: string;
}
export interface IUpdatePacientNoteInput {
    pacientNoteId: IUUID;
    note?: string;
}
export interface IUpdatePacientNotePayload {
    message: string;
}
export interface IUpdateTherapyInput {
    therapyId: IUUID;
    numSesion: IDecimal;
    content: string;
    isVisible?: boolean;
    position: number;
}
export interface IUpdateTherapyPayload {
    message: string;
}
export interface IUpdateDiagnosticInput {
    diagnosticId: IUUID;
    content?: string;
}
export interface IUpdateDiagnosticPayload {
    message: string;
}
export interface IUpdateConsultNoteInput {
    consultNoteId: IUUID;
    isVisible?: boolean;
    note?: string;
}
export interface IUpdateConsultNotePayload {
    message: string;
}
export interface IUpdatePacientMedicalBackgroundInput {
    pacientMedicalBackgroundId: IUUID;
    isResponse?: boolean;
    text?: string;
}
export interface IUpdatePacientMedicalBackgroundPayload {
    message: string;
}
export interface IUpdateBillingRequestInput {
    billingRequestId: IUUID;
    status: boolean;
    billingUrl: string;
    emailContent: string;
    cP?: string;
    socialReason?: string;
    rfc?: string;
    cFDI?: string;
    socialRegiment?: string;
    email?: string;
}
export interface IUpdateBillingRequestPayload {
    message: string;
}
export interface IUpdateSortFormatInput {
    formatId: IUUID;
    positions: Array<IPositionsDtoInput>;
}
export interface IPositionsDtoInput {
    medicalBackgroundId: IUUID;
    position: number;
}
export interface IUpdateSortFormatPayload {
    message: string;
}
export interface IUpdatePatientVitalSignsResponseInput {
    patientVitalSingResponseId: IUUID;
    value?: IDecimal;
}
export interface IUpdatePatientVitalSignsResponsePayloads {
    message: string;
}
export interface IDeleteChargeInput {
    chargeId: IUUID;
}
export interface IDeleteChargePayload {
    message: string;
}
export interface IDeleteClinicHistoryInput {
    clinicHistoryId: IUUID;
}
export interface IDeleteClinicHistoryPayload {
    message: string;
}
export interface IDeleteClinicHistoryMedicalBackgroundDetailInput {
    clinicMedicalBackgroundId: IUUID;
}
export interface IDeleteClinicHistoryMedicalBackgroundDetailPayload {
    message: string;
}
export interface IDeleteConsultInput {
    eventId: IUUID;
}
export interface IDeleteConsultPayload {
    message: string;
}
export interface IDeleteFisicalExamInput {
    fisicalExamId: IUUID;
}
export interface IDeleteFisicalExamPayload {
    message: string;
}
export interface IDeleteMedicalBackgroundDetailInput {
    medicalBackgroundDetailId: IUUID;
}
export interface IDeleteMedicalBackgroundDetailPayload {
    message: string;
}
export interface IDeleteMedicalBackgroundInput {
    medicalBackgroundId: IUUID;
}
export interface IDeleteMedicalBackgroundPayload {
    message: string;
}
export interface IDeleteMedicalConfigInput {
    medicalConfigId: IUUID;
}
export interface IDeleteMedicalConfigPayload {
    message: string;
}
export interface IDeleteMedicalServiceinputInput {
    medicalServiceId: IUUID;
}
export interface IDeleteMedicalServicePayload {
    message: string;
}
export interface IDeleteMedicineinputInput {
    medicineId: IUUID;
}
export interface IDeleteMedicinePayload {
    message: string;
}
export interface IDeleteVaccineinputInput {
    vaccineId: IUUID;
}
export interface IDeleteVaccinePayload {
    message: string;
}
export interface IDeleteVitalSignInput {
    vitalSignId: IUUID;
}
export interface IDeleteVitalSignPayload {
    message: string;
}
export interface IDeleteMedicRecipeinputInput {
    medicRecipeId: IUUID;
}
export interface IDeleteMedicRecipePayload {
    message: string;
}
export interface IDeleteRecipeConfiginputInput {
    recipeConfigId: IUUID;
}
export interface IDeleteRecipeConfigPayload {
    message: string;
}
export interface IDeleteRegisSesioninputInput {
    recipeSesionId: IUUID;
}
export interface IDeleteRegistSesionPayload {
    message: string;
}
export interface IDeleteTherapyinputInput {
    therapyId: IUUID;
}
export interface IDeleteTherapyPayload {
    message: string;
}
export interface IDeleteDiagnosticInput {
    diagnosticId: IUUID;
}
export interface IDeleteDiagnosticPayload {
    message: string;
}
export interface IDeleteConsultNoteInput {
    consultNoteId: IUUID;
}
export interface IDeleteConsultNotePayload {
    message: string;
}
export interface IDeletePacientNoteInput {
    pacientNoteId: IUUID;
}
export interface IDeletePacientNotePayload {
    message: string;
}
export interface IDeletePacientMedicalBackgroundInput {
    pacientMedicalBackgroundId: IUUID;
}
export interface IDeletePacientMedicalBackgroundPayload {
    message: string;
}
export interface IDeleteBillingRequestinputInput {
    billingRequestId: IUUID;
}
export interface IDeleteBillingRequestPayload {
    message: string;
}
export interface IDeleteFormatInput {
    formatId: IUUID;
}
export interface IDeleteFormatPayload {
    message: string;
}
export interface ICreatePdfInput {
    pdfName: string;
    pdfType: IPdfType;
    eventId: IUUID;
    patientId: IUUID;
    doctorId: IUUID;
}
export declare const enum IPdfType {
    MEDICRECIPE = "MEDICRECIPE",
    PRESCRIPTION_THERAPY = "PRESCRIPTION_THERAPY",
    CONSULT = "CONSULT",
    BACKGROUND = "BACKGROUND"
}
export interface ICreatePDFPayload {
    base64: string;
}
export interface IBulkWorkSpaceInput {
    spaceId: IUUID;
    url: string;
}
export interface IOrderingMemberBoardInput {
    memberId: IUUID;
    boardId: IUUID;
    relatable?: boolean;
}
export interface IOrderingMemberBoardPayload {
    memberBoard: Array<IMemberBoard>;
}
export interface ISpaceInput {
    name?: string;
    description?: string;
    image?: string;
    projectId?: IUUID;
    active?: boolean;
    visibility?: IEnumVisibility;
    areaId?: IUUID;
}
export interface ISpacePayload {
    space: ISpace;
}
export interface IUpdateBatchMemberSpaceInput {
    new?: Array<IMemberSpaceInput>;
    zippedData?: Array<IMemberSpaceZippedInput>;
    deleteable?: Array<IUUID>;
}
export interface IMemberSpaceInput {
    memberId: IUUID;
    spaceId: IUUID;
    outstading?: boolean;
    active?: boolean;
    order?: number;
    access?: IEnumSpaceAccess;
    sendDetails?: boolean;
}
export interface IMemberSpaceZippedInput {
    id: IUUID;
    memberSpace: IMemberSpaceInput;
}
export interface IMemberSpacePayload {
    memberSpace: IMemberSpace;
}
export interface IBoardStatusInput {
    name: string;
    description?: string;
    color?: string;
    code?: string;
    active?: boolean;
    projectId?: IUUID;
    boardId?: IUUID;
}
export interface IBoardStatusPayload {
    boardStatus: IBoardStatus;
}
export interface IUpdateBatchMemberBoardInput {
    new?: Array<IMemberBoardInput>;
    zippedData?: Array<IMemberBoardZippedInput>;
    deleteable?: Array<IUUID>;
}
export interface IMemberBoardInput {
    memberId: IUUID;
    boardId: IUUID;
    outstading?: boolean;
    active?: boolean;
    sendDetails?: boolean;
    order?: number;
}
export interface IMemberBoardZippedInput {
    id: IUUID;
    memberBoard: IMemberBoardInput;
}
export interface IBoardInput {
    name?: string;
    description?: string;
    active?: boolean;
    spaceId?: IUUID;
    serviceId?: IUUID;
    order?: number;
    color?: string;
    cascadeCreate?: boolean;
}
export interface IBoardPayload {
    board: IBoard;
}
export interface IBoardListInput {
    name?: string;
    description?: string;
    order?: number;
    color?: string;
    active?: boolean;
    boardId?: IUUID;
    cascadeCreate?: boolean;
}
export interface IBoardListPayload {
    board: IBoardList;
}
export interface IUpdateBatchBoardListInput {
    new?: Array<IBoardListInput>;
    zippedData?: Array<IBoardListZippedInput>;
    deleteable?: Array<IUUID>;
}
export interface IBoardListZippedInput {
    id: IUUID;
    boardListInput: IBoardListInput;
}
export interface IBoardGroupColumnInput {
    name?: string;
    order?: number;
    boardListId?: IUUID;
    boardColumnTypeId?: IUUID;
    cascadeCreate?: boolean;
}
export interface IBoardGroupColumnPayload {
    boardGroupColumn: IBoardGroupColumn;
}
export interface IUpdateBatchBoardGroupColumnInput {
    new?: Array<IBoardGroupColumnInput>;
    zippedData?: Array<IBoardGroupColumnZippedInput>;
    deleteable?: Array<IUUID>;
}
export interface IBoardGroupColumnZippedInput {
    id: IUUID;
    boardGroupInput: IBoardGroupColumnInput;
}
export interface IBoardColumnTypeInput {
    name?: string;
    description?: string;
    active?: boolean;
    dataType?: string;
    projectId?: IUUID;
    insideType?: IEnumInsideType;
}
export interface IBoardColumnTypePayload {
    boardColumnType: IBoardColumnType;
}
export interface IBoardColumnValueInput {
    value?: string;
    boardGroupColumnId?: IUUID;
    boardRowId?: IUUID;
    boardMemberReferenceInput?: Array<IBoardMemberReferenceInput>;
    cascadeCreate?: boolean;
}
export interface IBoardMemberReferenceInput {
    memberId?: IUUID;
    description?: string;
    active?: boolean;
    boardColumnValueId?: IUUID;
}
export interface IBoardColumnValuePayload {
    boardColumnValue: IBoardColumnValue;
}
export interface ICardColumnValueInput {
    cardId: IUUID;
    boardColumnValueId: IUUID;
}
export interface ICardColumnValuePayload {
    cardColumnValue: ICardColumnValue;
}
export interface IBoardMemberReferencePayload {
    boardMemberReference: IBoardMemberReference;
}
export interface IBoardRowForResourceQuoteInput {
    title: string;
    areaId: IUUID;
    serviceId: IUUID;
    password: string;
}
export interface IBoardRowPayload {
    boardRow: IBoardRow;
}
export interface IBoardRowInput {
    title?: string;
    description?: string;
    order?: number;
    active?: boolean;
    boardListId?: IUUID;
    cascadeCreate?: boolean;
}
export interface IUpdateBatchBoardRowInput {
    new?: Array<IBoardRowInput>;
    zippedData?: Array<IBoardRowZippedInput>;
    deleteable?: Array<IUUID>;
}
export interface IBoardRowZippedInput {
    id: IUUID;
    boardRowInput: IBoardRowInput;
}
export interface ICardInput {
    name?: string;
    description?: string;
    active?: boolean;
    progress?: IProgress;
    priority?: IPriority;
    boardListId?: IUUID;
    projectId?: IUUID;
    startDate?: IDateTime;
    endDate?: IDateTime;
    boardStatusId?: IUUID;
}
export interface ICardPayload {
    card: ICard;
}
export interface ICardChecklistInput {
    name?: string;
    cardId?: IUUID;
}
export interface ICardChecklistPayload {
    cardChecklist: ICardChecklist;
}
export interface IUpdateBatchCardCheckComponentInput {
    new?: Array<ICardCheckComponentInput>;
    zippedData?: Array<ICardCheckComponentZippedInput>;
    deleteable?: Array<IUUID>;
}
export interface ICardCheckComponentInput {
    description?: string;
    cardChecklistId?: IUUID;
    order?: number;
    selected?: boolean;
}
export interface ICardCheckComponentZippedInput {
    id: IUUID;
    cardCheckComponentInput: ICardCheckComponentInput;
}
export interface ICardCheckComponentPayload {
    cardCheckComponent: ICardCheckComponent;
}
export interface ICardReplyInput {
    description?: string;
    active?: boolean;
    cardId?: IUUID;
}
export interface ICardReplyPayload {
    cardReply: ICardReply;
}
export interface INestedFilesInput {
    name?: string;
    show?: boolean;
    url?: string;
    cardId?: IUUID;
}
export interface INestedFilesPayload {
    nestedFile: INestedFile;
}
export interface IMemberCardInput {
    cardId: IUUID;
    memberId: IUUID;
    active?: boolean;
}
export interface IMemberCardPayload {
    memberCard: IMemberCard;
}
export interface IMemberBoardPayload {
    memberBoard: IMemberBoard;
}
export interface IDeleteMeasureInput {
    id: IUUID;
}
export interface IDeleteMeasurePayload {
    message: string;
}
export interface IUpdateMeasureInput {
    id: IUUID;
    name?: string;
    abbreviation?: string;
}
export interface IUpdateMeasurePayload {
    message: string;
}
export interface IDeleteMaterialCategoryInput {
    id: IUUID;
}
export interface IDeleteMaterialCategoryPayload {
    message: string;
}
export interface ICreateMeasureValueInput {
    measureId: IUUID;
    materialId: IUUID;
    projectId: IUUID;
}
export interface ICreateMeasureValuePayload {
    measureValue: IMeasureValue;
}
export interface IUpdateMeasureValueInput {
    measureValueId: IUUID;
    materialId?: IUUID;
    measureId?: IUUID;
}
export interface IUpdateMeasureValuePayload {
    message: string;
}
export interface IDeleteMeasureValueInput {
    id: IUUID;
}
export interface IDeleteMeasureValuePayload {
    message: string;
}
export interface IDeleteMeasureUnityTwoInput {
    id: IUUID;
}
export interface IDeleteMeasureUnityTwoPayload {
    message: string;
}
export interface IUpdateModuleInput {
    id: IUUID;
    moduleName?: string;
    descModule?: string;
    moduleCategoryId?: IUUID;
}
export interface IUpdateModulePayload {
    message: string;
}
export interface ICreateMaterialQuotationInput {
    moduleQuotationId: IUUID;
    materialId: IUUID;
    materialModuleId: IUUID;
    materialCombinationId: IUUID;
    projectId: IUUID;
}
export interface ICreateMaterialQuotationPayload {
    materialQuotation: IMaterialQuotation;
}
export interface IUpdateMaterialQuotationInput {
    id: IUUID;
    moduleQuotationId?: IUUID;
    materialId?: IUUID;
    materialModuleId?: IUUID;
    materialCombinationId?: IUUID;
}
export interface IUpdateMaterialQuotationPayload {
    message: string;
}
export interface IDeleteMaterialQuotationInput {
    id: IUUID;
}
export interface IDeleteMaterialQuotationPayload {
    message: string;
}
export interface ICreateMaterialModuleInput {
    moduleId: IUUID;
    materialCategoryId: IUUID;
    projectId: IUUID;
    materialId: IUUID;
    formule: string;
    formuleOpe: string;
    variables?: string;
}
export interface ICreateMaterialModulePayload {
    materialModule: IMaterialModule;
}
export interface IUpdateMaterialModuleInput {
    id: IUUID;
    moduleId?: IUUID;
    materialCategoryId?: IUUID;
    materialId?: IUUID;
    formule?: string;
    formuleOpe?: string;
    variables?: string;
}
export interface IUpdateMaterialModulePayload {
    message: string;
}
export interface IDeleteMaterialModuleInput {
    id: IUUID;
}
export interface IDeleteMaterialModulePayload {
    message: string;
}
export interface ICreateUserCustomerInput {
    memberId: IUUID;
    projectId: IUUID;
}
export interface ICreateUserCustomerPayload {
    userCustomer: IUserCustomer;
}
export interface ICreateMeasureUnityInput {
    name: string;
    abbreviation: string;
    projectId: IUUID;
}
export interface ICreateMeasureUnityPayload {
    measureUnity: IMeasureUnity;
}
export interface IUpdateMeasureUnityInput {
    id: IUUID;
    name?: string;
    abbreviation: string;
}
export interface IUpdateMeasureUnityPayload {
    message: string;
}
export interface IDeleteMeasureUnityInput {
    id: IUUID;
}
export interface IDeleteMeasureUnityPayload {
    message: string;
}
export interface ICreateAttributeInput {
    value: string;
    projectId: IUUID;
}
export interface ICreateAttributePayload {
    attribute: IAttribute;
}
export interface ICreateAttributeValueInput {
    value: string;
    attributeId: IUUID;
    projectId: IUUID;
}
export interface ICreateAttributeValuePayload {
    attributeValue: IAttributeValue;
}
export interface ICreateBuildingSiteAddressInput {
    quotationId: IUUID;
    countryId: IUUID;
    stateId: IUUID;
    street: string;
    externalNumber: string;
    internalNumber: string;
    colony: string;
    municipality: string;
    projectId: IUUID;
}
export interface ICreateBuildingSiteAddressPayload {
    buildingSiteAddress: IBuildingSiteAddress;
}
export interface ICreateMadreQuotationInput {
    memberId: IUUID;
    userCustomerId: IUUID;
    folio: string;
    projectId: IUUID;
}
export interface ICreateMadreQuotationPayload {
    madreQuotation: IMadreQuotation;
}
export interface ICreateMaterialCategoryInput {
    name: string;
    projectId: IUUID;
}
export interface ICreateMaterialCategoryPayload {
    materialCategory: IMaterialCategory;
}
export interface ICreateMaterialCombinationInput {
    materialId: IUUID;
    provCode: string;
    intCode: string;
    price: number;
    projectId: IUUID;
}
export interface ICreateMaterialCombinationPayload {
    materialCombination: IMaterialCombination;
}
export interface ICreateMaterialInput {
    measureUnityId: IUUID;
    materialCategoryId: IUUID;
    name: string;
    provCode: string;
    intCode: string;
    descMaterial: string;
    projectId: IUUID;
}
export interface ICreateMaterialPayload {
    material: IMaterial;
}
export interface ICreateMaterialStockMeasureInput {
    materialStockId: IUUID;
    quotationId: IUUID;
    value: number;
    formule: string;
    isActive: boolean;
    quotationIdUsed: IUUID;
    projectId: IUUID;
}
export interface ICreateMaterialStockMeasurePayload {
    materialStockMeasure: IMaterialStockMeasure;
}
export interface ICreateMaterialStockInput {
    materialId: IUUID;
    materialCombinationId: IUUID;
    projectId: IUUID;
}
export interface ICreateMaterialStockPayload {
    materialStock: IMaterialStock;
}
export interface ICreateMaterialVariableQuotationInput {
    materialQuotationId: IUUID;
    variableId: IUUID;
    value: string;
    projectId: IUUID;
}
export interface ICreateMaterialVariableQuotationPayload {
    materialVariableQuotation: IMaterialVariableQuotation;
}
export interface ICreateMeasureInput {
    name: string;
    abbreviation: string;
    projectId: IUUID;
}
export interface ICreateMeasurePayload {
    measure: IMeasure;
}
export interface ICreateMeasureTwoInput {
    measureUnityId: IUUID;
    measureId: IUUID;
    projectId: IUUID;
}
export interface ICreateMeasureTwoPayload {
    measureUnityTwo: IMeasureUnityTwo;
}
export interface ICreateModuleCategoryInput {
    name: string;
    descCategory: string;
    projectId: IUUID;
}
export interface ICreateModuleCategoryPayload {
    moduleCategory: IModuleCategory;
}
export interface ICreateModuleInput {
    moduleName: string;
    descModule: string;
    moduleCategoryId: IUUID;
    materialIds: Array<IUUID>;
    materialCategories: Array<IUUID>;
    formulas: Array<string>;
    formulasOpe: Array<string>;
    variables: Array<string>;
    projectId: IUUID;
}
export interface ICreateModulePayload {
    module: IModule;
}
export interface ICreateQuotationInput {
    madreQuotationId: IUUID;
    buildingSiteName: string;
    folio: string;
    isOptimized: boolean;
    memberId: IUUID;
    projectId: IUUID;
}
export interface ICreateQuotationPayload {
    quotation: IQuotation;
}
export interface ICreateQuotationModuleInput {
    quotationId: IUUID;
    moduleCategoryId: IUUID;
    moduleId: IUUID;
    quantity: number;
    price: number;
    image: string;
    projectId: IUUID;
}
export interface ICreateQuotationModulePayload {
    quotationModule: IQuotationModule;
}
export interface ICreateVariableInput {
    value: string;
    projectId: IUUID;
}
export interface ICreateVariablePayload {
    variable: IVariable;
}
export interface IDeleteAttributeInput {
    id: IUUID;
}
export interface IDeleteAttributePayload {
    message: string;
}
export interface IDeleteAttributeValueInput {
    id: IUUID;
}
export interface IDeleteAttributeValuePayload {
    message: string;
}
export interface IDeleteBuildingSiteAddresInput {
    id: IUUID;
}
export interface IDeleteBuildingSiteAddressPayload {
    message: string;
}
export interface IDeleteMaterialCombinationInput {
    id: IUUID;
}
export interface IDeleteMaterialCombinationPayload {
    message: string;
}
export interface IDeleteMaterialInput {
    materialId: IUUID;
}
export interface IDeleteMaterialPayload {
    message: string;
}
export interface IDeleteMaterialStockInput {
    materialStockId: IUUID;
}
export interface IDeleteMaterialStockPayload {
    message: string;
}
export interface IDeleteMaterialStockMeasureInput {
    materialStockMeasureId: IUUID;
}
export interface IDeleteMaterialStockMeasurePayload {
    message: string;
}
export interface IDeleteMaterialVariableQuotationInput {
    id: IUUID;
}
export interface IDeleteMaterialVariableQuotationPayload {
    message: string;
}
export interface IDeleteModuleCategoryInput {
    id: IUUID;
}
export interface IDeleteModuleCategoryPayload {
    message: string;
}
export interface IDeleteModuleInput {
    id: IUUID;
}
export interface IDeleteModulePayload {
    message: string;
}
export interface IDeleteQuotationModuleInput {
    id: IUUID;
}
export interface IDeleteQuotationModulePayload {
    message: string;
}
export interface IDeleteQuotationInput {
    quotationId: IUUID;
}
export interface IDeleteQuotationPayload {
    message: string;
}
export interface IDeleteVariableInput {
    variableId: IUUID;
}
export interface IDeleteVariablePayload {
    message: string;
}
export interface IUpdateAttributeInput {
    attributeId: IUUID;
    value: string;
}
export interface IUpdateAttributePayload {
    message: string;
}
export interface IUpdateAttributeValueInput {
    id: IUUID;
    value: string;
}
export interface IUpdateAttributeValuePayload {
    message: string;
}
export interface IUpdateBuildingSiteAddressInput {
    buildingSiteAddressId: IUUID;
    quotationId?: IUUID;
    countryId?: IUUID;
    stateId?: IUUID;
    street?: string;
    externalNumber?: string;
    internalNumber?: string;
    colony?: string;
    municipality?: string;
}
export interface IUpdateBuildingSiteAddressPayload {
    message: string;
}
export interface IUpdateMaterialCategoryInput {
    id: IUUID;
    name: string;
}
export interface IUpdateMaterialCategoryPayload {
    message: string;
}
export interface IUpdateMaterialCombinationInput {
    materialCombinationId: IUUID;
    materialId?: IUUID;
    provCode?: string;
    intCode?: string;
    price?: number;
}
export interface IUpdateMaterialCombinationPayload {
    message: string;
}
export interface IUpdateMaterialInput {
    materialId: IUUID;
    measureUnityId?: IUUID;
    materialCategoryId?: IUUID;
    name?: string;
    provCode?: string;
    intCode?: string;
    descMaterial?: string;
}
export interface IUpdateMaterialPayload {
    message: string;
}
export interface IUpdateMaterialStockMeasureInput {
    materialStockMeasureId: IUUID;
    materialStockId?: IUUID;
    quotationId?: IUUID;
    value?: number;
    formule?: string;
    isActive?: boolean;
    quotationIdUsed?: IUUID;
}
export interface IUpdateMaterialStockMeasurePayload {
    message: string;
}
export interface IUpdateMaterialStockInput {
    materialStockId: IUUID;
    materialId?: IUUID;
    materialCombinationId?: IUUID;
}
export interface IUpdateMaterialStockPayload {
    message: string;
}
export interface IUpdateMadreQuotationInput {
    id: IUUID;
    memberId?: IUUID;
    folio?: string;
}
export interface IUpdateMadreQuotationPayload {
    message: string;
}
export interface IDeleteMadreQuotationInput {
    id: IUUID;
}
export interface IDeleteMadreQuotationPayload {
    message: string;
}
export interface IUpdateMaterialVariableQuotationInput {
    materialVariableQuoationId: IUUID;
    materialQuotationId?: IUUID;
    variableId?: IUUID;
    value?: string;
}
export interface IUpdateMaterialVariableQuotationPayload {
    message: string;
}
export interface IUpdateMeasureUnityTwoInput {
    measureUnityTwoId: IUUID;
    measureUnityId?: IUUID;
    measureId?: IUUID;
}
export interface IUpdateMeasureUnityTwoPayload {
    message: string;
}
export interface IUpdateModuleCategoryInput {
    id: IUUID;
    name?: string;
    descCategory?: string;
}
export interface IUpdateModuleCategoryPayload {
    message: string;
}
export interface IUpdateQuotationModuleInput {
    quotationModuleId: IUUID;
    quotationId?: IUUID;
    moduleCategoryId?: IUUID;
    moduleId?: IUUID;
    quantity?: number;
    price?: number;
    image?: string;
}
export interface IUpdateQuotationModulePayload {
    message: string;
}
export interface IUpdateQuotationInput {
    quotationId: IUUID;
    madreQuotationId?: IUUID;
    buildingSiteName?: string;
    folio?: string;
    isOptimized?: boolean;
}
export interface IUpdateQuotationPayload {
    message: string;
}
export interface IUpdateVariableInput {
    variableId: IUUID;
    value: string;
}
export interface IUpdateVariablePayload {
    message: string;
}
export interface IUpdateAnalysisInput {
    id: number;
    advisedSalePriceWithKm?: number;
    advisedBuyingPriceWithKm?: number;
    damage?: number;
}
export interface IUpdateAnalysisPayload {
    analysis: IAnalysisCarMercadoHermer;
}
export interface ICreateClientInput {
    firstName?: string;
    lastName?: string;
    phone?: string;
    email?: string;
}
export interface ICreateClientPayload {
    client: IClientHermer;
}
export interface IUpdateClientInput {
    id: number;
    firstName: string;
    lastName: string;
    phone: string;
    email: string;
}
export interface IUpdateClientPayload {
    client: IClientHermer;
}
export interface ICreateConsultInput {
    clientId: number;
    vinNum: string;
    milage: number;
    valuador: string;
    brand: string;
    model: string;
    year: number;
    properties: Array<string>;
    lobatoId: number;
    appraisal?: string;
}
export interface ICreateConsultPayload {
    consult: IConsultHermer;
}
export interface IUpdateConsultInput {
    id: number;
    properties: Array<string>;
}
export interface IUpdateConsultPayload {
    consult: IConsultHermer;
}
export interface ICreateComparedInput {
    consultId: number;
    brand: string;
    model: string;
    year: number;
    properties: Array<string>;
    lobatoId: number;
}
export interface ICreateComparedPayload {
    compared: IComparedHermer;
}
export interface IUpdateComparedInput {
    id: number;
    properties: Array<string>;
}
export interface IUpdateComparedPayload {
    compared: IComparedHermer;
}
export interface IDeleteComparedInput {
    id: number;
}
export interface IDeleteComparedPayload {
    message: string;
}
export interface ICreateCarMercadoInput {
    consultId?: number;
    comparedId?: number;
    manualDevaluation: number;
    mercadolibreIds: Array<string>;
}
export interface ICreateCarMercadoPayload {
    carMercado: ICarMercadoHermer;
}
export interface ICreateCarMercadoMassiveInput {
    consultId: number;
    manualDevaluation: number;
    mercadolibreIds: Array<string>;
    compareds: Array<IComparedMassiveInput>;
}
export interface IComparedMassiveInput {
    comparedId: number;
    manualDevaluation: number;
    mercadolibreIds: Array<string>;
}
export interface ICreateCarMercadoMassivePayload {
    carMercado: Array<ICarMercadoHermer>;
}
export interface IDeleteCarMercadoInput {
    id: number;
}
export interface IDeleteCarMercadoPayload {
    message: string;
}
export interface IZipFolderContentInput {
    folderId: IUUID;
}
export interface IZipFolderContentPayload {
    fileUrl: string;
}
export interface IFolderInput {
    parentId?: IUUID;
    projectId: IUUID;
    memberId: IUUID;
    isOutstanding?: boolean;
    folderType?: string;
    path?: string;
    label: string;
    background?: string;
}
export interface IFolderPayload {
    message: string;
}
export interface IDeleteFolderMutationInput {
    folderId: IUUID;
}
export interface IDeleteFolderPayLoad {
    message: string;
}
export interface ICreateFileInput {
    folderId?: IUUID;
    projectId?: IUUID;
    memberId?: IUUID;
    name?: string;
    url: string;
    description?: string;
}
export interface ICreateFilePayload {
    message: string;
}
export interface IUpdateFilesInput {
    fileId: IUUID;
    isOutstanding?: boolean;
    name?: string;
    url?: string;
    description?: string;
}
export interface IUpdateFilesPayload {
    message: string;
}
export interface IDeleteFileMutationInput {
    fileId: IUUID;
}
export interface IDeleteFilePayLoad {
    message: string;
}
export interface IShareFileInput {
    memberIds: Array<IUUID>;
    fileId: IUUID;
}
export interface IShareFilePayload {
    sharedFile: Array<ISharedFile>;
}
export interface IShareFolderInput {
    memberIds: Array<IUUID>;
    folderId: IUUID;
}
export interface IShareFolderPayload {
    sharedFolders: Array<ISharedFolder>;
}
export interface IStopSharingFolderInput {
    memberIds: Array<IUUID>;
    folderId?: IUUID;
}
export interface IStopSharingFolderPayload {
    message: string;
}
export interface IStopSharingFileInput {
    memberIds: Array<IUUID>;
    fileId: IUUID;
}
export interface IStopSharingFilePayload {
    message: string;
}
export interface IUploadFilePrivateInput {
    projectId: IUUID;
    folderId?: IUUID;
    memberId?: IUUID;
    name?: string;
    fileName: string;
    description?: string;
    isProfile: boolean;
}
export interface IUploadFilePrivatePayload {
    fileId: IUUID;
    url: string;
    message: string;
    token: string;
    partialUrl: string;
}
export interface IAddChatMemberInput {
    projectId: IUUID;
    memberId: IUUID;
    toMemberId: IUUID;
    message: string;
}
export interface IAddChatMemberPayload {
    conversationReplies: Array<IConversationReply>;
}
export interface IAddChatMemberWsInput {
    projectId: IUUID;
    memberId: IUUID;
    toMemberId: IUUID;
    message: string;
}
export interface IAddChatMemberWsPayload {
    conversationReplies: Array<IConversationReply>;
}
export interface IGetConversationIdInput {
    projectId: IUUID;
    memberId: IUUID;
    toMemberId: IUUID;
}
export interface IGetConversationIdPayload {
    conversationId: IUUID;
}
export interface IDeleteReplyInput {
    replyId: IUUID;
}
export interface IDeleteReplyPayload {
    message: string;
}
export interface ICreateWalletInput {
    walletInput: IWalletInput;
    memberId?: IUUID;
}
export interface IWalletInput {
    projectId?: IUUID;
    principal?: boolean;
    automaticPayment?: boolean;
    detainedManual?: IDecimal;
}
export interface IWalletPayload {
    eWallet: IEWallet;
}
export interface IWalletTransactionInput {
    amount: IDecimal;
    detainedAmount?: IDecimal;
    concept: string;
    description: string;
    walletId?: IUUID;
    receptorId?: IUUID;
    memberId?: IUUID;
    transactionStatus?: IEnumTransactionStatus;
    type: IEnumTransactionType;
    service?: IEnumTransactionService;
    projectWalletKeyId?: IUUID;
    transactionDepositInput?: ITransactionDepositInput;
    walletTransactionMemberInput?: IIncludedWalletTransactionMemberRelationInput;
}
export interface ITransactionDepositInput {
    manualDeposit: boolean;
}
export interface IIncludedWalletTransactionMemberRelationInput {
    memberRelationId: IUUID;
}
export interface IWalletTransactionPayload {
    walletTransaction: IWalletTransaction;
    publicKey: string;
}
export interface IMultipleWalletTransactionInput {
    transactions: Array<IWalletTransactionInput>;
}
export interface IMultipleWalletTransactionPayload {
    transactions: Array<IWalletTransaction>;
}
export interface IWalletTransactionStatusInput {
    description: string;
    walletTransactionId: IUUID;
    status: IEnumTransactionStatus;
}
export interface IWalletTransactionStatusPayload {
    walletTransactionStatus: IWalletTransactionStatus;
}
export interface IWalletTransactionMemberRelationInput {
    memberRelationId?: IUUID;
    walletTransactionId?: IUUID;
    walletTransactionMemberDetails?: Array<IWalletTransactionMemberDetailInput>;
}
export interface IWalletTransactionMemberDetailInput {
    amount: IDecimal;
    description: string;
}
export interface IWalletTransactionMemberRelationPayload {
    walletTransactionMember: IWalletTransactionMemberRelation;
}
export interface IMemberWalletInput {
    memberId: IUUID;
    walletId: IUUID;
}
export interface IMemberWalletPayload {
    memberWallet: IMemberWallet;
}
export interface IProjectWalletKeyInput {
    projectId?: IUUID;
    publicKey?: string;
    privateKey?: string;
    service?: IEnumTransactionService;
}
export interface IProjectWalletKeyPayload {
    projectWalletKey: IProjectWalletKey;
}
export interface IProjectWalletKey {
    projectId: IUUID;
    publicKey: string;
    service: IEnumTransactionService;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICreateCertificateMovementInput {
    certificateId: IUUID;
    reasons?: Array<IKeyValuePairOfStringAndStringInput>;
    memberId: IUUID;
    certificateMovementType: ICertificateMovementType;
}
export interface ICreateCertificateMovementPayload {
    certificateMovement: ICertificateMovement;
}
export interface IDeleteCertificateInput {
    id: IUUID;
}
export interface IDeleteCertificatePayload {
    message: string;
}
export interface IUpdateInsurerModuleInput {
    id: IUUID;
    originCountry?: IUUID;
    merchandiseLegalTermsHTML?: string;
    merchandiseLegalTermsJSON?: string;
    containerLegalTermsHTML?: string;
    containerLegalTermsJSON?: string;
    content?: string;
    logo?: string;
    descriptionCoverages?: string;
    certificateType?: ICertificateType;
    name?: string;
    placeInsurer?: string;
    insurerType?: IInsurerType;
    moduleValuesByKey?: IInsurerModuleValuesByKeyInput;
    insurerAdjusterContact?: IInsurerAdjusterContactDtoInput;
    insurerSinisterContact?: IInsurerSinisterContactDtoInput;
    insurerState?: boolean;
}
export interface IInsurerModuleValuesByKeyInput {
    contacts?: Array<IInsurerContactDTOInput>;
    modules?: Array<IInsurerCompanyModuleDTOInput>;
    countries?: Array<IUUID>;
    branches?: IInsurerBranchDTOInput;
    addresses?: Array<IInsurerAddressDTOInput>;
    servicesToShow: Array<string>;
}
export interface IInsurerContactDTOInput {
    name: string;
    email: string;
    department: string;
    phone: string;
}
export interface IInsurerCompanyModuleDTOInput {
    key: string;
    name: string;
    typeValue: string;
}
export interface IInsurerBranchDTOInput {
    life: boolean;
    accidentAndDiseases: boolean;
    cars: boolean;
    damages: boolean;
}
export interface IInsurerAddressDTOInput {
    stateName: string;
    municipality: string;
    streetName: string;
}
export interface IInsurerAdjusterContactDtoInput {
    name: string;
    emailOne: string;
    emailTwo: string;
    phoneNumber: string;
}
export interface IInsurerSinisterContactDtoInput {
    contactName: string;
    officePhoneNumber: string;
    afterHoursPhoneNumber: string;
    emailOne: string;
    emailTwo: string;
}
export interface IUpdateInsurerModulePayload {
    message: string;
}
export interface ICreateInsurerModuleInput {
    content: string;
    merchandiseLegalTermsHTML: string;
    merchandiseLegalTermsJSON: string;
    containerLegalTermsHTML: string;
    containerLegalTermsJSON: string;
    logo: string;
    descriptionCoverages: string;
    certificateType: ICertificateType;
    projectId: IUUID;
    originCountry: IUUID;
    name: string;
    placeInsurer: string;
    insurerType: IInsurerType;
    moduleValuesByKey?: IInsurerModuleValuesByKeyInput;
    insurerSinisterContact: IInsurerSinisterContactDtoInput;
    insurerAdjusterContact: IInsurerAdjusterContactDtoInput;
    insurerState: boolean;
}
export interface ICreateInsurerModulePayload {
    insurerModule: IInsurerModule;
}
export interface ICreatePolicyModuleInput {
    insurerId?: IUUID;
    projectId: IUUID;
    policyType: IPolicyType;
    policyNumber: string;
    paymentResponsable: IPaymentResponsable;
    address: string;
    phoneNumber: string;
    startDateVigency: IDateTime;
    endDateVigency: IDateTime;
    moneySymbols?: Array<IMoneySymbolDtoInput>;
    dateLimitVigency: IDateTime;
    description: string;
    modules?: Array<IModuleDTOInput>;
    moduleValues?: IModuleValuesDtoInput;
}
export interface IMoneySymbolDtoInput {
    keyName: string;
    value: string;
    label: string;
}
export interface IModuleDTOInput {
    key: string;
    typeValue: string;
    name: string;
}
export interface IModuleValuesDtoInput {
    products?: Array<IPolicyProductDTOInput>;
    coverages?: ICoveragesDTOInput;
    hasRateByPolicy?: boolean;
    contracts: Array<IUUID>;
    files?: Array<IPolicyFileDTOInput>;
    declarations?: Array<IPolicyDeclarationDTOInput>;
    policyDeductible?: IPolicyDeductibleDTOInput;
    primas?: IPolicyPrimaDTOInput;
    policyFrequencyPayment?: IPolicyFrequencyPaymentDTOInput;
}
export interface IPolicyProductDTOInput {
    productId: IUUID;
    name: string;
    category: string;
    insurerBuy: IDecimal;
    insurerMinimum: IDecimal;
    policySell: IDecimal;
    policyMinimumSell: IDecimal;
}
export interface ICoveragesDTOInput {
    originCountries: Array<IUUID>;
    destinyCountries: Array<IUUID>;
}
export interface IPolicyFileDTOInput {
    fileId: IUUID;
    url: string;
    message: string;
    token: string;
    partialUrl: string;
    name: string;
    fileName: string;
    size: string;
    type: string;
}
export interface IPolicyDeclarationDTOInput {
    email: string;
    name: string;
}
export interface IPolicyDeductibleDTOInput {
    deductibleTheft: IDecimal;
    deductibleMerchandiseSensibility: IDecimal;
    deductibleRefrigeratedMerchandise: IDecimal;
    minimumDeductible: IDecimal;
    damageDeductible: IDecimal;
    minimumPurchase: IDecimal;
    purchaseRate: IDecimal;
}
export interface IPolicyPrimaDTOInput {
    primaNeta: IDecimal;
    discounts: IDecimal;
    surchargerPayments: string;
    policyRights: string;
    subtotal: IDecimal;
    iva: IDecimal;
    primaTotal: IDecimal;
}
export interface IPolicyFrequencyPaymentDTOInput {
    monthly: boolean;
    biMonthly: boolean;
    quarterly: boolean;
    halfYearly: boolean;
    annual: boolean;
    cash: boolean;
    buyRate: IDecimal;
    minimumBuy: IDecimal;
}
export interface ICreatePolicyModulePayload {
    policyModule: IPolicyModule;
}
export interface IUpdatePolicyModuleInput {
    policyModuleId: IUUID;
    projectId?: IUUID;
    policyType?: IPolicyType;
    insurerId?: IUUID;
    policyNumber?: string;
    paymentResponsable?: IPaymentResponsable;
    address?: string;
    phoneNumber?: string;
    startDateVigency?: IDateTime;
    endDateVigency?: IDateTime;
    moneySymbols?: Array<IMoneySymbolDtoInput>;
    dateLimitVigency?: IDateTime;
    description?: string;
    modules?: Array<IModuleDTOInput>;
    moduleValues?: IModuleValuesDtoInput;
}
export interface IUpdatePolicyModulePayload {
    message: string;
}
export interface IDeletePolicyModuleInput {
    id: IUUID;
}
export interface IDeletePolicyModulePayload {
    message: string;
}
export interface ICreateInsurerFeeInput {
    insurerModuleId: IUUID;
    policyModuleId?: IUUID;
    originCountries?: Array<IUUID>;
    contractorId: IUUID;
    vigencyLimit: IDateTime;
    startVigency: IDateTime;
    destinyCountries?: Array<IUUID>;
    minimumSell: number;
    purchaseRate: number;
    minimumPurchase: number;
    sellRate: number;
    maximumSell: number;
    projectId: IUUID;
    files: Array<IUUID>;
    merchandises: Array<IUUID>;
}
export interface ICreateInsurerFeePayload {
    insurerFee: IInsurerFee;
}
export interface IDeleteInsurerFeeInput {
    id: IUUID;
}
export interface IDeleteInsurerFeePayload {
    message: string;
}
export interface IUpdateInsurerFeeInput {
    insurerFeeId: IUUID;
    policyModuleId?: IUUID;
    originCountries?: Array<IUUID>;
    contractorId?: IUUID;
    vigencyLimit?: IDateTime;
    startVigency?: IDateTime;
    isActive?: boolean;
    destinyCountries?: Array<IUUID>;
    purchaseRate?: number;
    minimumPurchase?: number;
    sellRate?: number;
    maximumSell?: number;
    minimumSell?: number;
    files?: Array<IUUID>;
    merchandises?: Array<IUUID>;
}
export interface IUpdateInsurerFeePayload {
    message: string;
}
export interface ICreatePolicyInput {
    countryId: IUUID;
    insurerId: IUUID;
    document: string;
    number: string;
    policyType: IPolicyType;
    description: string;
    startValidityDate: IDateTime;
    expirationDate: IDateTime;
    limitDeclarationDate: IDateTime;
    damageDeductible: string;
    robberyDeductible: string;
    crackDeductible: string;
    merchandiseDeductible: string;
    declarationResponsible: string;
    projectId: IUUID;
    clientPaysItus: boolean;
    insurerPaysItus: boolean;
    currencies: Array<IUUID>;
    contractorType: IContractorType;
}
export interface ICreatePolicyPayload {
    policy: Iitus_Policy;
}
export interface ICancelCertificateInput {
    certificateId: IUUID;
    cancellationReason: string;
}
export interface ICancelCertificatePayload {
    message: string;
}
export interface ICreateBeneficiaryInput {
    name: string;
    rfc: string;
    countryId: IUUID;
    isActive: boolean;
    projectId: IUUID;
    contractorId: IUUID;
}
export interface ICreateBeneficiaryPayload {
    beneficiary: IBeneficiary;
}
export interface ICreateCertificateInput {
    insurerId: IUUID;
    merchandiseCategoryId: IUUID;
    contractorId: IUUID;
    officeId: IUUID;
    feeId: IUUID;
    policyModuleId: IUUID;
    statusFrom: ICertificateStatusFrom;
    beneficiaries: Array<IUUID>;
    merchandiseId: IUUID;
    countryOriginId: IUUID;
    countryDestinyId: IUUID;
    activityDescriptions: string;
    cityOrigin: string;
    currencyId: IUUID;
    minimumSell?: IDecimal;
    branchOfficeId?: IUUID;
    shipmentDate?: IDateTime;
    estimatedArrivingDate?: IDateTime;
    shippingTransport?: string;
    externalIdentifier?: string;
    cityDestiny: string;
    sumAssured: number;
    transportMode: ITransportMode;
    number: string;
    coverageType: ICoverageType;
    showPrice: boolean;
    projectId: IUUID;
    additionalComments?: string;
    createdBy: IUUID;
    files: Array<IUUID>;
}
export interface ICreateCertificatePayload {
    certificate: ICertificate;
}
export interface ICreateCertificateFileInput {
    certificateId: IUUID;
    fileIds: Array<IUUID>;
}
export interface ICreateCertificateFilePayload {
    message: string;
}
export interface ICreateContactInput {
    fullName: string;
    jobPosition: string;
    email: string;
    phone: string;
    contactType: IContactType;
    projectId: IUUID;
    contractorId: IUUID;
}
export interface ICreateContactPayload {
    contact: IContact;
}
export interface ICreateContractorBranchOfficeInput {
    contractorId: IUUID;
    officeId: IUUID;
    projectId: IUUID;
}
export interface ICreateContractorBranchOfficePayload {
    contractorBranchOffice: IContractorOffice;
}
export interface ICreateContractorContactInput {
    contractorId: IUUID;
    contactId: IUUID;
    projectId: IUUID;
}
export interface ICreateContractorContactPayload {
    contractorContact: IContractorContact;
}
export interface ICreateContractorInput {
    officeId: IUUID;
    isActive: boolean;
    name: string;
    countryId: IUUID;
    company: string;
    postalCode: string;
    location: string;
    city: string;
    colony: string;
    extNumber: string;
    phone: string;
    typeOfBusiness: string;
    webSite: string;
    rfc: string;
    auxiliaryCode: string;
    paymentMethod: string;
    usesCFDI: boolean;
    paymentTerm: Iitus_PaymentTerm;
    invoicingMethod: IInvoicingMethod;
    companysRfc: IUUID;
    registration: IUUID;
    constitutiveAct: IUUID;
    powerOfAttorney: IUUID;
    idCopy: IUUID;
    proofOfAddress: IUUID;
    positiveOpinionSat: IUUID;
    creditDays: number;
    creditAmount: number;
    taxSituationCertificate: IUUID;
    status: IStatus;
    invoicingPeriod: IInvoicingPeriod;
    projectId: IUUID;
}
export declare const enum IStatus {
    ACTIVE = "ACTIVE",
    PENDING = "PENDING",
    INACTIVE = "INACTIVE"
}
export interface ICreateContractorPayload {
    contractor: IContractor;
}
export interface ICreateContractorPolicyInput {
    contractorId: IUUID;
    policyId: IUUID;
    projectId: IUUID;
}
export interface ICreateContractorPolicyPayload {
    contractorPolicy: IContractorPolicy;
}
export interface ICreateCountryRequestInput {
    countryId: IUUID;
    insurerCompanyId: IUUID;
    projectId: IUUID;
}
export interface ICreateCountryRequestPayload {
    countryRequest: ICountryRequest;
}
export interface ICreateFeeInput {
    insurerId: IUUID;
    purchaseRate: number;
    minimumPurchase: number;
    sellRate: number;
    maximumSell: number;
    projectId: IUUID;
}
export interface ICreateFeePayload {
    fee: IFee;
}
export interface ICreateInsurerCompanyInput {
    name: string;
    socialReason: string;
    isActive: boolean;
    contractorId: IUUID;
    projectId: IUUID;
    countryIds: Array<IUUID>;
}
export interface ICreateInsurerCompanyPayload {
    insurerCompany: IInsurerCompany;
}
export interface ICreateIssuedReportInput {
    name: string;
    url: string;
    projectId: IUUID;
}
export interface ICreateIssuedReportPayload {
    issuedReport: IIssuedReport;
}
export interface IIssuedReport {
    name: string;
    url: string;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface ICreateMerchandiseDetailInput {
    contractorId: IUUID;
    officeId: IUUID;
    merchandiseCategoryId: IUUID;
    merchandiseId: IUUID;
    projectId: IUUID;
}
export interface ICreateMerchandiseDetailPayload {
    merchandiseDetail: IMerchandiseDetail;
}
export interface ICreateMerchandiseInput {
    merchandiseType: string;
    insurerId: IUUID;
    name: string;
    merchandiseStatus: IMerchandiseStatus;
    categoryId: IUUID;
    projectId: IUUID;
}
export interface ICreateMerchandisePayload {
    merchandise: IMerchandise;
}
export interface ICreateMoneyInput {
    name: string;
    code: string;
    projectId: IUUID;
}
export interface ICreateMoneyPayload {
    money: IMoney;
}
export interface ICreateMoneyPolicyInput {
    moneyId: IUUID;
    policyId: IUUID;
    projectId: IUUID;
}
export interface ICreateMoneyPolicyPayload {
    moneyPolicy: IMoneyPolicy;
}
export interface IMoneyPolicy {
    moneyId: IUUID;
    policyId: IUUID;
    money?: IMoney;
    policy?: Iitus_Policy;
    projectId: IUUID;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IDeleteBeneficiaryInput {
    id: IUUID;
}
export interface IDeleteBeneficiaryPayload {
    message: string;
}
export interface IDeleteContactInput {
    id: IUUID;
}
export interface IDeleteContactPayload {
    message: string;
}
export interface IDeleteContractorInput {
    id: IUUID;
}
export interface IDeleteContractorPayload {
    message: string;
}
export interface IDeleteContractorOfficeInput {
    id: IUUID;
}
export interface IDeleteContractorOfficePayload {
    message: string;
}
export interface IDeleteContractorPolicyInput {
    id: IUUID;
}
export interface IDeleteContractorPolicyPayload {
    message: string;
}
export interface IDeleteInsurerModuleInput {
    id: IUUID;
}
export interface IDeleteInsurerModulePayload {
    message: string;
}
export interface IDeleteFeeInput {
    id: IUUID;
}
export interface IDeleteFeePayload {
    message: string;
}
export interface IDeleteMerchandiseInput {
    id: IUUID;
}
export interface IDeleteMerchandisePayload {
    message: string;
}
export interface IDeleteInsurerCompanyInput {
    id: IUUID;
}
export interface IDeleteInsurerCompanyPayload {
    message: string;
}
export interface IDeleteMoneyInput {
    id: IUUID;
}
export interface IDeleteMoneyPayload {
    message: string;
}
export interface IDeletePolicyInput {
    id: IUUID;
}
export interface IDeletePolicyPayload {
    message: string;
}
export interface IUpdateBeneficiaryInput {
    beneficiaryId: IUUID;
    name?: string;
    rfc?: string;
    countryId?: IUUID;
    isActive?: boolean;
    contractorId?: IUUID;
}
export interface IUpdateBeneficiaryPayload {
    message: string;
}
export interface IUpdateCertificateInput {
    certificateId: IUUID;
    contractorId?: IUUID;
    officeId?: IUUID;
    beneficiaries?: Array<IUUID>;
    policyModuleId?: IUUID;
    feeId?: IUUID;
    statusFrom?: ICertificateStatusFrom;
    countryOriginId?: IUUID;
    countryDestinyId?: IUUID;
    activityDescriptions?: string;
    cityOrigin?: string;
    issueStatus?: IIssueStatus;
    memberId?: IUUID;
    shipmentDate?: IDateTime;
    estimatedArrivingDate?: IDateTime;
    shippingTransport?: string;
    externalIdentifier?: string;
    cityDestiny?: string;
    currencyId?: IUUID;
    sumAssured?: number;
    transportMode?: ITransportMode;
    number?: string;
    coverageType?: ICoverageType;
    showPrice?: boolean;
    additionalComments?: string;
    files?: Array<IUUID>;
}
export interface IUpdateCertificatePayload {
    message: string;
}
export interface IUpdateContactInput {
    contactId: IUUID;
    fullName?: string;
    jobPosition?: string;
    email?: string;
    phone?: string;
    contactType?: IContactType;
    contractorId?: IUUID;
}
export interface IUpdateContactPayload {
    message: string;
}
export interface IUpdateContractorInput {
    contractorId: IUUID;
    name?: string;
    countryId?: IUUID;
    company?: string;
    postalCode?: string;
    location?: string;
    city?: string;
    colony?: string;
    extNumber?: string;
    phone?: string;
    typeOfBusiness?: string;
    webSite?: string;
    rfc?: string;
    auxiliaryCode?: string;
    paymentMethod?: string;
    usesCFDI?: boolean;
    paymentTerm?: Iitus_PaymentTerm;
    invoicingMethod?: IInvoicingMethod;
    companysRfc?: IUUID;
    registration?: IUUID;
    constitutiveAct?: IUUID;
    powerOfAttorney?: IUUID;
    idCopy?: IUUID;
    proofOfAddress?: IUUID;
    positiveOpinionSat?: IUUID;
    creditDays?: number;
    creditAmount?: number;
    taxSituationCertificate?: IUUID;
    isActive?: boolean;
    invoicingPeriod?: IInvoicingPeriod;
}
export interface IUpdateContractorPayload {
    message: string;
}
export interface IUpdateFeeInput {
    feeId: IUUID;
    purchaseRate?: number;
    minimumPurchase?: number;
    sellRate?: number;
    maximumSell?: number;
}
export interface IUpdateFeePayload {
    message: string;
}
export interface IUpdateInsurerCompanyInput {
    insurerCompanyId: IUUID;
    name?: string;
    socialReason?: string;
    isActive?: boolean;
    countryIds?: Array<IUUID>;
}
export interface IUpdateInsurerCompanyPayload {
    message: string;
}
export interface IUpdateMerchandiseInput {
    merchandiseId: IUUID;
    insurerId?: IUUID;
    name?: string;
    merchandiseType?: string;
    merchandiseStatus?: IMerchandiseStatus;
    categoryId?: IUUID;
}
export interface IUpdateMerchandisePayload {
    message: string;
}
export interface IUpdateMoneyInput {
    moneyId: IUUID;
    name?: string;
    code?: string;
}
export interface IUpdateMoneyPayload {
    message: string;
}
export interface IUpdatePolicyInput {
    policyId: IUUID;
    countryId?: IUUID;
    insurerId?: IUUID;
    document?: string;
    number?: string;
    policyType?: IPolicyType;
    description?: string;
    startValidityDate?: IDateTime;
    expirationDate?: IDateTime;
    limitDeclarationDate?: IDateTime;
    damageDeductible?: string;
    robberyDeductible?: string;
    crackDeductible?: string;
    merchandiseDeductible?: string;
    declarationResponsible?: string;
    policyStatus?: IPolicyStatus;
    contractorType?: IContractorType;
}
export interface IUpdatePolicyPayload {
    message: string;
}
export interface IAttendanceInput {
    projectId: IUUID;
    status: IEnumAttendanceStatus;
    studentId: IUUID;
}
export interface IAttendancePayload {
    attendance: Ischool_Attendance;
}
export interface IClassroomInput {
    projectId: IUUID;
    schoolId: IUUID;
    levelId: IUUID;
    gradeId: IUUID;
    teacherMemberId?: IUUID;
    group?: string;
    isActive?: boolean;
}
export interface IClassroomPayload {
    classroom: IClassroom;
}
export interface ICreateDayServiceInput {
    projectId: IUUID;
    day?: string;
    isActive?: boolean;
    schoolId: IUUID;
}
export interface IDayServicePayload {
    dayService: IDayService;
}
export interface IGradeInput {
    projectId: IUUID;
    name: string;
    isActive?: boolean;
    levelId?: IUUID;
}
export interface IGradePayload {
    grade: IGrade;
}
export interface ILevelInput {
    name: string;
    isActive?: boolean;
    schoolId?: IUUID;
    projectId: IUUID;
}
export interface ILevelPayload {
    level: ILevel;
}
export interface ICreateSchoolInput {
    photo?: string;
    name: string;
    email?: string;
    phone?: string;
    projectId: IUUID;
}
export interface ISchoolPayload {
    school: ISchool;
}
export interface IStudentInput {
    projectId: IUUID;
    classroomId: IUUID;
    name: string;
    lastName: string;
    photo?: string;
    isActive?: boolean;
    tutors?: Array<IStudentTutorDTOInput>;
}
export interface IStudentTutorDTOInput {
    studentTutorId?: IUUID;
    tutorMemberId: IUUID;
}
export interface IStudentPayload {
    student: IStudent;
}
export interface ICreateBulkStudentInput {
    projectId: IUUID;
    cSVContent: string;
}
export interface ICreateBulkStudentPayload {
    message: string;
}
export interface IUpdateAttendanceInput {
    status?: IEnumAttendanceStatus;
    studentId?: IUUID;
}
export interface IUpdateClassroomInput {
    schoolId?: IUUID;
    levelId?: IUUID;
    gradeId?: IUUID;
    teacherMemberId?: IUUID;
    group?: string;
    isActive?: boolean;
}
export interface IUpdateDayServiceInput {
    day?: string;
    isActive?: boolean;
    schoolId?: IUUID;
}
export interface IUpdateGradeInput {
    name?: string;
    isActive?: boolean;
    levelId?: IUUID;
}
export interface IUpdateLevelInput {
    name?: string;
    isActive?: boolean;
    schoolId?: IUUID;
    projectId?: IUUID;
}
export interface IUpdateSchoolInput {
    photo?: string;
    name?: string;
    email?: string;
    phone?: string;
    projectId?: IUUID;
}
export interface IUpdateStudentInput {
    classroomId?: IUUID;
    name?: string;
    lastName?: string;
    photo?: string;
    isActive?: boolean;
    verify?: IEnumStudenteVerify;
}
export interface IBeneficiarieInput {
    firstName?: string;
    lastName?: string;
    secondLastName?: string;
    birthDate?: IDateTime;
    sex?: string;
    percentage?: number;
    optionalRelation?: string;
    lifeId?: IUUID;
    ownerId?: IUUID;
    fullName?: string;
    iSR?: IDecimal;
    procedente?: string;
    clause?: string;
    jName?: string;
    rFC?: string;
    active?: boolean;
    endorsementId?: IUUID;
    projectId?: IUUID;
    chargeDate?: IDateTime;
    dishargeDate?: IDateTime;
    antiquity?: IDateTime;
}
export interface IBeneficiariePayload {
    beneficiarie: IBeneficiarie;
}
export interface IFormAccidentDiseaseInput {
    diseaseType?: number;
    coinsurance?: string;
    documentType?: IEnumPoliceDocumentType;
    ownerId?: IUUID;
    personalId?: IUUID;
    policyId?: IUUID;
    projectId?: IUUID;
}
export interface IFormAccidentDiseasePayload {
    formAccidentDisease: IFormAccidentDisease;
}
export interface IFormAutomobileDamageInput {
    brand?: string;
    model?: string;
    year?: number;
    version?: string;
    serial?: string;
    engine?: string;
    color?: string;
    licensePlates?: string;
    documentType?: IEnumPoliceDocumentType;
    ownerId?: IUUID;
    policyId?: IUUID;
    usage?: string;
    email?: string;
    beneficiaryAddress?: string;
    beneficiaryName?: string;
    beneficiaryRFC?: string;
    adjusment?: string;
    drive?: string;
    montAdjustment?: string;
    montSpecialTeam?: string;
    specialTeam?: string;
    service?: string;
    policyType?: IEnumAutoType;
    chargeType?: IEnumChargeType;
    procedencia?: IEnumProcedent;
    personalId?: IUUID;
    preferencialBeneficiary?: string;
    sumInsured?: string;
    carOwner?: string;
    noEmployee?: string;
    projectId?: IUUID;
}
export interface IFormAutomobileDamagePayload {
    formAutomobileDamage: IFormAutomobileDamage;
}
export interface IFormCarCatalogInput {
    carModel?: string;
    carBrand?: string;
    carYear?: number;
    description?: string;
    carSubbrand?: string;
    shortDescription?: string;
    carType?: string;
    carOccupants?: number;
    carClass?: number;
    carSearch?: string;
}
export interface IFormCarCatalogPayload {
    formCarCatalog: IFormCarCatalog;
}
export interface IFormDamageInput {
    damageType?: IEnumFormDamageType;
    insuredItem?: string;
    itemAddress?: string;
    itemDetails?: string;
    coinsurance?: string;
    documentType?: IEnumPoliceDocumentType;
    ownerId?: IUUID;
    policyId?: IUUID;
    personalId?: IUUID;
    brand?: string;
    color?: string;
    constructionYear?: number;
    damOwner?: string;
    email?: string;
    engine?: string;
    fHMZone?: string;
    girp?: string;
    matricula?: string;
    model?: string;
    noEmployee?: string;
    noLevels?: number;
    permiso?: string;
    purchaseValue?: string;
    reconstructionYear?: number;
    serial?: string;
    sucursal?: string;
    tYEVZone?: string;
    typeConstruction?: IEnumConstructionType;
    usage?: string;
    version?: string;
    projectId?: IUUID;
}
export interface IFormDamagePayload {
    formDamage: IFormDamage;
}
export interface IFormLifeInput {
    smoker?: boolean;
    documentType?: IEnumPoliceDocumentType;
    ownerId?: IUUID;
    personalId?: IUUID;
    policyId?: IUUID;
    projectId?: IUUID;
}
export interface IFormLifePayload {
    formLife: IFormLife;
}
export interface IInvolvedReferrerInput {
    comisionVendedor?: IDecimal;
    ownerId?: IUUID;
    policyId?: IUUID;
    referenciadorId?: IUUID;
    projectId?: IUUID;
}
export interface IInvolvedReferrerPayload {
    involvedReferrer: IInvolvedReferrer;
}
export interface IOldPoliceInput {
    basePolicyId?: IUUID;
    ownerId?: IUUID;
    newPolicyId?: IUUID;
    projectId?: IUUID;
}
export interface IOldPolicePayload {
    oldPolice: IOldPolice;
}
export interface IPersonalInformationInput {
    firstName?: string;
    lastName?: string;
    secondLastName?: string;
    birthDate?: IDateTime;
    sex?: string;
    ownerId?: string;
    fullName?: string;
    email?: string;
    salary?: IDecimal;
    sumAssured?: IDecimal;
    memberId?: IUUID;
    antiquity?: IDateTime;
    policyType?: number;
    typeSA?: IEnumSAType;
    certificate?: string;
    comision?: IDecimal;
    rigth?: IDecimal;
    iVA?: IDecimal;
    projectId?: IUUID;
    pNeta?: IDecimal;
    pTotal?: IDecimal;
    rPF?: IDecimal;
    discount?: IDecimal;
    gastosInvestigacion?: IDecimal;
    subTotal?: IDecimal;
    chargeDate?: IDateTime;
    comisionEarned?: IDecimal;
    comisionPercentEarned?: IDecimal;
    rigthEarned?: IDecimal;
    discountEarned?: IDecimal;
    dischargeDate?: IDateTime;
    iVAEarned?: IDecimal;
    pNetaEarned?: IDecimal;
    pTotalEarned?: IDecimal;
    rPFEarned?: IDecimal;
    subTotalEarned?: IDecimal;
    endDate?: IDateTime;
    initDate?: IDateTime;
    comisionPaymentDate?: IDateTime;
    exchangeRate?: IDecimal;
    maquila?: IDecimal;
    bonoDdate?: IDateTime;
    maquilaDate?: IDateTime;
    facturaYear?: number;
}
export interface IPersonalInformationPayload {
    personalInformation: IPersonalInformation;
}
export interface IPoliceInput {
    number?: string;
    startValidity?: IDateTime;
    endValidity?: IDateTime;
    formaDePago?: IEnumPolicePaymentType;
    status?: IEnumPoliceStatus;
    observations?: string;
    folio?: string;
    internalNumber?: string;
    documentType?: IEnumPoliceDocumentType;
    addressId?: number;
    aseguradoraId?: number;
    claveId?: IUUID;
    ownerId?: IUUID;
    packageId?: number;
    projectAgentProviderBranchId?: IUUID;
    fCurrency?: IEnumFCurrency;
    identifier?: string;
    rigth?: IDecimal;
    iVA?: IDecimal;
    pNeta?: IDecimal;
    pTotal?: IDecimal;
    rPF?: IDecimal;
    comision?: IDecimal;
    administrationType?: IEnumPoliceAdministrationType;
    caratule?: string;
    certificadoIncisoActivo?: boolean;
    certificateNumber?: string;
    comisionPercent?: number;
    hospitalLevel?: string;
    name?: string;
    parentId?: IUUID;
    discount?: IDecimal;
    isRenewable?: IEnumPoliceRenew;
    reasonRen?: string;
    renewedStatus?: IEnumPoliceRenewalStatus;
    contact?: string;
    fechaBajaInciso?: IDateTime;
    reasonCancel?: string;
    receiptsBy?: IEnumPoliceReceipts;
    responsableId?: IUUID;
    giveComision?: IDecimal;
    recAntiguedad?: IDateTime;
    collectionExecutiveId?: number;
    sucursalId?: IUUID;
    subTotal?: IDecimal;
    trackBitacora?: boolean;
    accidentRate?: IDecimal;
    scheme?: IEnumPayScheme;
    steps?: string;
    totalReceipts?: number;
    conceptAnnulment?: IEnumPoliceConcept;
    deductible?: string;
    emisionDate?: IDateTime;
    emisionStatus?: IEnumPoliceEmisionStatus;
    fechaAnuencia?: IDateTime;
    fianzaTypeId?: number;
    gastoInvestigacion?: IDecimal;
    reasonRehabbilitate?: string;
    bussinessLine?: IEnumPoliceBussinessLine;
    contratanteSubGroup?: number;
    celulaId?: number;
    groupingLevelId?: number;
    typePolicy?: IEnumPolicyType;
    conductoDePago?: IEnumConductChoise;
    tabulator?: string;
    bonoVariable?: IDecimal;
    hasProgramaDeProveedores?: boolean;
    contractorId?: IUUID;
    programaDeProveedoresContractorId?: number;
    chargeDate?: IDateTime;
    comisionEarned?: IDecimal;
    comisionPercentEarned?: IDecimal;
    rigthEarned?: IDecimal;
    discountEarned?: IDecimal;
    ivaEarned?: IDecimal;
    pNetaEarned?: IDecimal;
    pTotalEarned?: IDecimal;
    rPFEarned?: IDecimal;
    subTotalEarned?: IDecimal;
    dateCancel?: IDateTime;
    amountCanceled?: IDecimal;
    stateCirculation?: string;
    fechaPagoComision?: IDateTime;
    dateEmitionFactura?: IDateTime;
    folioFactura?: string;
    monthFactura?: number;
    exchangeRate?: IDecimal;
}
export interface IPolicePayload {
    police: IPolice;
}
export interface IPoliceAssignInput {
    isOwner?: boolean;
    active?: boolean;
    policeId?: IUUID;
    memberId?: IUUID;
}
export interface IPoliceAssignPayload {
    policeAssign: IPoliceAssign;
}
export interface IPolicePendientInput {
    email?: string;
    isOwner?: boolean;
    active?: boolean;
    policeId?: IUUID;
}
export interface IPolicePendientPayload {
    policePendient: IPolicePendient;
}
export interface IPoliceQuoteInput {
    ramoCode?: string;
    subRamoCode?: string;
    projectAgentProviderBranchId?: IUUID;
    status?: IEnumPoliceQuoteStatus;
    firstName?: string;
    lastName?: string;
    secondLastName?: string;
    email?: string;
    phone?: string;
    car?: string;
    observations?: string;
    accidents?: string;
    damages?: string;
    life?: string;
    isComplete?: boolean;
    ownerId?: IUUID;
    projectId?: IUUID;
    mainParent?: number;
    contractorId?: IUUID;
    active?: boolean;
    prospectId?: IUUID;
    type?: string;
    agentProviders?: Array<IUUID>;
    selectedAgentProvider?: Array<IUUID>;
}
export interface IPoliceQuotePayload {
    policeQuote: IPoliceQuote;
}
export interface IPoliceQuotePrimaInput {
    aseguradora?: string;
    prima?: string;
    checked?: boolean;
    projectId?: IUUID;
    policeQuoteId?: IUUID;
}
export interface IPoliceQuotePrimaPayload {
    policeQuotePrima: IPoliceQuotePrima;
}
export interface IRelationShipInput {
    firstName?: string;
    lastName?: string;
    secondLastName?: string;
    birthDate?: IDateTime;
    sex?: string;
    relationship?: number;
    accidentId?: IUUID;
    ownerId?: IUUID;
    fullName?: string;
    isActive?: boolean;
    endorsementId?: IUUID;
    antiquity?: IDateTime;
    certificate?: string;
    comision?: IDecimal;
    rigth?: IDecimal;
    iVA?: IDecimal;
    pNeta?: IDecimal;
    pTotal?: IDecimal;
    rPF?: IDecimal;
    discount?: IDecimal;
    gastosInvestigacion?: IDecimal;
    subTotal?: IDecimal;
    projectId?: IUUID;
    chargeDate?: IDateTime;
    comisionEarned?: IDecimal;
    comisionPercentEarned?: IDecimal;
    rigthEarned?: IDecimal;
    discountEarned?: IDecimal;
    dischangeDate?: IDateTime;
    iVAEarned?: IDecimal;
    pNetaEarned?: IDecimal;
    pTotalEarned?: IDecimal;
    rPFEarned?: IDecimal;
    subTotalEarned?: IDecimal;
    comisionPaymentDate?: IDateTime;
    exchangeRate?: IDecimal;
    maquila?: IDecimal;
    bonoDate?: IDateTime;
    maquilaDate?: IDateTime;
    facturaYear?: number;
}
export interface IRelationShipPayload {
    relationShip: IRelationShip;
}
export interface ISucursalInput {
    name?: string;
    details?: string;
    ownerId?: IUUID;
    projectId?: IUUID;
}
export interface ISucursalPayload {
    sucursal: ISucursal;
}
export interface IAgentKeyInput {
    ownerId?: IUUID;
    name?: string;
    key?: string;
    isActive?: boolean;
    projectAgentProviderId?: IUUID;
}
export interface IAgentKeyPayload {
    agentKey: IAgentKey;
}
export interface IAgentProviderContactInput {
    projectAgentProviderId?: IUUID;
    name?: string;
    email?: string;
    phone?: string;
    department?: string;
    ownerId?: IUUID;
    contractorGroupId?: IUUID;
    projectAgentProviderBranchId?: IUUID;
    contractorId?: IUUID;
}
export interface IAgentProviderContactPayload {
    agentProviderContact: IAgentProviderContact;
}
export interface IAgentProviderInput {
    companyName?: string;
    alias?: string;
    rFC?: string;
    phone?: string;
    website?: string;
    ownerId?: IUUID;
    typeAgentProvider?: ITypeAgentProvider;
}
export interface IAgentProviderPayload {
    agentProvider: IAgentProvider;
}
export interface IBranchInput {
    branchName?: string;
    branchCode?: number;
    typeAgentProvider: Array<ITypeAgentProvider>;
}
export interface IBranchPayload {
    branch: IBranch;
}
export interface IComissionInput {
    name?: string;
    amount?: IDecimal;
    uDI?: IDecimal;
    other?: IDecimal;
    observations?: string;
    efectiveDate?: IDateTime;
    expireDate?: IDateTime;
    commisionRPF?: IDecimal;
    otherRPF?: IDecimal;
    rigth?: IDecimal;
    otherRigths?: IDecimal;
    initialPeriod?: number;
    subSequentPeriod?: number;
    anualRPF?: IDecimal;
    bimestralRPF?: IDecimal;
    mensualRPF?: IDecimal;
    trimestralRPF?: IDecimal;
    rigthUDI?: IDecimal;
    rigthComission?: IDecimal;
    keyId?: IUUID;
    projectAgentProviderBranchId?: IUUID;
}
export interface IComissionPayload {
    comission: IComission;
}
export interface IContractorCelulaInput {
    celulaName?: string;
    description?: string;
    active?: boolean;
}
export interface IContractorCelulaPayload {
    contractorCelula: IContractorCelula;
}
export interface IContractorClassificationInput {
    name?: string;
    description?: string;
    projectId?: IUUID;
    ownerId?: IUUID;
}
export interface IContractorClassificationPayload {
    contractorClassification: IContractorClassification;
}
export interface IContractorGroupingLevelInput {
    levelGrouping?: number;
    description?: string;
    ownerId?: IUUID;
    responsableId?: IUUID;
    projectId?: IUUID;
    parentId?: IUUID;
    groupingType?: IEnumContractorGroupingType;
}
export interface IContractorGroupingLevelPayload {
    contractorGroupingLevel: IContractorGroupingLevel;
}
export interface IContractorInput {
    projectId?: IUUID;
    firstName?: string;
    lastName?: string;
    secondLastName?: string;
    socialReason?: string;
    gender?: Isaam_EnumGender;
    birthDate?: IDateTime;
    phoneNumber?: string;
    rFC?: string;
    description?: string;
    email?: string;
    active?: boolean;
    sucursalId?: IUUID;
    contractorType?: IEnumContractorType;
}
export interface IContractorPayload {
    contractor: Isaam_Contractor;
}
export interface IContractorProcessDocumentInput {
    delivered?: boolean;
    validated?: boolean;
    processDocumentId?: IUUID;
    contractorId?: IUUID;
}
export interface IContractorProcessDocumentPayload {
    contractorProcessDocument: IContractorProcessDocument;
}
export interface ICoverageCoinsuranceInput {
    coinsurance?: string;
    coinsuranceId?: number;
    projectId?: IUUID;
}
export interface ICoverageCoinsurancePayload {
    coverageCoinsurance: ICoverageCoinsurance;
}
export interface ICoverageDeductibleInput {
    deductible?: string;
    deductibleId?: number;
    default?: boolean;
    projectId?: IUUID;
}
export interface ICoverageDeductiblePayload {
    coverageDeductible: ICoverageDeductible;
}
export interface ICoverageInPolicyInput {
    name?: string;
    sumInsured?: string;
    deductible?: string;
    prima?: string;
    coinsurance?: string;
    topecoinsurance?: string;
    priority?: number;
    ownerId?: IUUID;
    projectId?: IUUID;
    packageId?: IUUID;
}
export interface ICoverageInPolicyPayload {
    coverageInPolicy: ICoverageInPolicy;
}
export interface ICoverageInput {
    name?: string;
    default?: boolean;
    ownerId?: IUUID;
    packageId?: IUUID;
    priority?: number;
    projectAgentProviderId?: IUUID;
}
export interface ICoveragePayload {
    coverage: Isaam_Coverage;
}
export interface ICoveragePackageInput {
    name?: string;
    description?: string;
    projectAgentProviderBranchId?: IUUID;
    ownerId?: IUUID;
    projectAgentProviderId?: IUUID;
    typePackage?: number;
    policy?: number;
}
export interface ICoveragePackagePayload {
    coveragePackage: ICoveragePackage;
}
export interface ICoverageSuminsuredInput {
    sumInsured?: string;
    sumId?: number;
    default?: boolean;
    projectId?: IUUID;
}
export interface ICoverageSuminsuredPayload {
    coverageSuminsured: ICoverageSuminsured;
}
export interface ICoverageTopecoinsuranceInput {
    topecinsurance?: string;
    topecinsuranceId?: number;
    projectId?: IUUID;
}
export interface ICoverageTopecoinsurancePayload {
    coverageTopecoinsurance: ICoverageTopecoinsurance;
}
export interface IProcessDocumentInput {
    name?: string;
    slug?: string;
    projectId?: IUUID;
    typeAgentProvider?: Array<ITypeAgentProvider>;
    active?: boolean;
}
export interface IProcessDocumentPayload {
    processDocument: IProcessDocument;
}
export interface IProjectAgentProviderBranchInput {
    branchId: IUUID;
    agentProviderId: IUUID;
    subBranchId: IUUID;
    projectId: IUUID;
}
export interface IProjectAgentProviderBranchPayload {
    projectAgentProviderBranch: IProjectAgentProviderBranch;
}
export interface IProjectAgentProviderInput {
    projectId?: IUUID;
    agentProviderId?: IUUID;
    observations?: string;
}
export interface IProjectAgentProviderPayload {
    projectAgentProvider: IProjectAgentProvider;
}
export interface IReferrerAccountStateInput {
    folio?: string;
    total?: IDecimal;
    printDate?: IDateTime;
    status?: IEnumReferrerAccountState;
    transactionNumber?: string;
    reasonReject?: string;
    observation?: string;
    referrerId?: IUUID;
    projectId?: IUUID;
    ownerId?: IUUID;
}
export interface IReferrerAccountStatePayload {
    referrerAccountState: IReferrerAccountState;
}
export interface IReferrerBranchInput {
    projectAgentProviderId?: IUUID;
    projectAgentProviderBranchId?: IUUID;
    referrerId?: IUUID;
    comition?: IDecimal;
}
export interface IReferrerBranchPayload {
    referrerBranch: IReferrerBranch;
}
export interface IReferrerInput {
    hiredDate?: IDateTime;
    email?: string;
    address?: string;
    operationFactures?: string;
    paymentType?: IEnumReferrerPaymentType;
    paymentFrequency?: IEnumReferrerFrequency;
    referenceNumber?: string;
    bank?: IEnumBank;
    memberId?: IUUID;
    projectId?: IUUID;
    phones?: Array<string>;
}
export interface IReferrerPayload {
    referrer: IReferrer;
}
export interface IResponsableInvolvedInput {
    projectId?: IUUID;
    responsableId?: IUUID;
    ownerId?: IUUID;
    area?: IEnumResponsableArea;
    name?: string;
    contractorId?: IUUID;
}
export interface IResponsableInvolvedPayload {
    responsableInvolved: IResponsableInvolved;
}
export interface ISubBranchInput {
    subBranchName?: string;
    subBranchCode?: number;
    branchId?: IUUID;
}
export interface ISubBranchPayload {
    subbranch: ISubBranch;
}
export interface IProjectAgentProviderEmailReminderInput {
    model?: IEnumEmaiModel;
    text?: string;
    footer?: string;
    memberId?: IUUID;
    frequency?: IEnumEmailFrequency;
    ramoCode?: IEnumEmailRamo;
    policyType?: IEnumEmailType;
    chargeType?: IEnumEmailChargeType;
    dateType?: IEnumEmailDateType;
    projectAgentProviderId?: IUUID;
}
export interface IProjectAgentProviderEmailReminderPayload {
    projectAgentProviderEmailReminder: IProjectAgentProviderEmailReminder;
}
export interface IEndorsementInput {
    type?: IEnumEntorsementType;
    status?: number;
    initDate?: IDateTime;
    endDate?: IDateTime;
    numberEndorsement?: string;
    internalNumber?: string;
    concept?: number;
    otherDesc?: string;
    original?: string;
    change?: string;
    observations?: string;
    pNeta?: IDecimal;
    rPF?: IDecimal;
    rigth?: IDecimal;
    iVA?: IDecimal;
    pTotal?: IDecimal;
    comision?: IDecimal;
    ownerId?: IUUID;
    policeId?: IUUID;
    comisionPercent?: IDecimal;
    anuency?: IDateTime;
    projectId?: IUUID;
    discount?: IDecimal;
    researchCost?: IDecimal;
    comisionPercentEarned?: IDecimal;
    discoutnEarned?: IDecimal;
    iVaEarned?: IDecimal;
    pNETAEarned?: IDecimal;
    pTotalEarned?: IDecimal;
    rPFEarned?: IDecimal;
    subTotalEarned?: IDecimal;
    insuranceFolio?: string;
    comitionPatmentDate?: IDateTime;
    exchangeRate?: IDecimal;
    maquila?: IDecimal;
    bonoDate?: IDateTime;
    variableBono?: IDecimal;
    emisionFacturaDate?: IDateTime;
    maquilaDate?: IDateTime;
    folioFactura?: string;
    monthFactura?: number;
    fechaEntrega?: IDateTime;
}
export interface IEndorsementPayload {
    endorsement: IEndorsement;
}
export interface IEndorsementCertInput {
    proceed?: boolean;
    certificate?: string;
    endorsementId?: IUUID;
    projectId?: IUUID;
    beneficiarieId?: IUUID;
    relationShipId?: IUUID;
}
export interface IEndorsementCertPayload {
    endorsementCert: IEndorsementCert;
}
export interface ISinisterInput {
    companyFolio?: string;
    internFolio?: string;
    status?: IEnumSinisterStatus;
    promiseDate?: IDateTime;
    affectedItem?: string;
    sinisterNumber?: string;
    sinisterDate?: IDateTime;
    typeSinisterGeneral?: IEnumTypeSinisterGeneral;
    reason?: string;
    observations?: string;
    ownerId?: IUUID;
    policeId?: IUUID;
    ingressDate?: IDateTime;
    affectedAux?: string;
    compromiseDate?: IDateTime;
    affectedAuxRelationShip?: IEnumSinisterRelation;
    insurerZipCodeSepomexId?: IUUID;
    date?: IDateTime;
    projectId?: IUUID;
    terminationDate?: IDateTime;
    fileLoadedDate?: IDateTime;
}
export interface ISinisterPayload {
    sinister: ISinister;
}
export interface ISinisterAilingInput {
    code?: string;
    description?: string;
}
export interface ISinisterAilingPayload {
    sinisterAiling: ISinisterAiling;
}
export interface ISinisterCarInput {
    typeSinister?: IEnumSinisterCarType;
    explication?: string;
    third?: string;
    imdemnization?: IDecimal;
    sinisterId?: IUUID;
    driver?: string;
    coaseguro?: IDecimal;
    deductible?: IDecimal;
    projectId?: IUUID;
    firstSubTypeSinister?: IEnumSinisterCarSubType;
    secondSubTypeSinister?: IEnumSinisterCarSubSubType;
}
export interface ISinisterCarPayload {
    sinisterCar: ISinisterCar;
}
export interface ISinisterCarContactInput {
    firstName?: string;
    lastName?: string;
    secondLastName?: string;
    phone?: string;
    email?: string;
    references?: string;
    sinisterCarId?: IUUID;
    projectId?: IUUID;
}
export interface ISinisterCarContactPayload {
    sinisterCarContact: ISinisterCarContact;
}
export interface ISinisterDamageInput {
    insuredProperty?: string;
    lossEstimate?: string;
    claimCause?: string;
    affectedCoverage?: string;
    indemnization?: IDecimal;
    totalClaim?: IDecimal;
    sinisterId?: IUUID;
    currency?: IEnumFCurrency;
    exchangeRate?: IEnumFCurrency;
    totalCoaseguro?: IDecimal;
    totalDeductible?: IDecimal;
    projectId?: IUUID;
}
export interface ISinisterDamagePayload {
    sinisterDamage: ISinisterDamage;
}
export interface ISinisterDamageContactInput {
    firstName?: string;
    lastName?: string;
    secondLastName?: string;
    phone?: string;
    email?: string;
    references?: string;
    sinisterDamageId?: IUUID;
    projectId?: IUUID;
}
export interface ISinisterDamageContactPayload {
    sinisterDamageContact: ISinisterDamageContact;
}
export interface ISinisterLifeInput {
    sinisterReason?: IEnumSinisterLifeReason;
    paymentType?: IEnumSinisterPaymentType;
    sinisterId?: IUUID;
    affectedName?: string;
    relationAffected?: IEnumSinisterRelation;
    projectId?: IUUID;
}
export interface ISinisterLifePayload {
    sinisterLife: ISinisterLife;
}
export interface ISinisterLifeContactInput {
    firstName?: string;
    lastName?: string;
    secondLastName?: string;
    phone?: string;
    email?: string;
    references?: string;
    sinisterLifeId?: IUUID;
    projectId?: IUUID;
}
export interface ISinisterLifeContactPayload {
    sinisterLifeContact: ISinisterLifeContact;
}
export interface ISinisterHospitalInput {
    description?: string;
}
export interface ISinisterHospitalPayload {
    sinisterHospital: ISinisterHospital;
}
export interface ISinisterFacturaInput {
    facturaNumber?: string;
    provider?: string;
    facturaDate?: IDateTime;
    import?: IDecimal;
    iVA?: IDecimal;
    total?: IDecimal;
    procedent?: IDecimal;
    observations?: string;
    sinisterId?: IUUID;
    concept?: string;
    serie?: string;
    projectId?: IUUID;
}
export interface ISinisterFacturaPayload {
    sinisterFactura: ISinisterFactura;
}
export interface IPoliceReceiptInput {
    number?: number;
    primaNeta?: IDecimal;
    rPF?: IDecimal;
    right?: IDecimal;
    iVA?: IDecimal;
    subTotal?: IDecimal;
    primaTotal?: IDecimal;
    status?: IEnumPoliceReceiptStatus;
    startDate?: IDateTime;
    endDate?: IDateTime;
    description?: string;
    folio?: string;
    type?: IEnumPoliceReceiptType;
    payForm?: number;
    paymentDocument?: string;
    isCopy?: boolean;
    isActive?: boolean;
    bank?: IEnumBank;
    ownerId?: IUUID;
    policeId?: IUUID;
    comision?: IDecimal;
    validityDate?: IDateTime;
    reconciledComision?: string;
    reconciledDate?: IDateTime;
    reconciledObservation?: string;
    settlementFolio?: string;
    reconciledFolio?: string;
    settlementDate?: IDateTime;
    reconcilationAccountId?: IUUID;
    paymentDate?: IDateTime;
    endorsementId?: IUUID;
    delivered?: boolean;
    paymentFolio?: string;
    settlementBank?: IEnumBank;
    settlementCurrRate?: number;
    settlementDoc?: string;
    settlementForm?: number;
    excedent?: IDecimal;
    bonoId?: IUUID;
    changeReferrerComision?: boolean;
    referrerComosion?: IDecimal;
    binnacleTrack?: boolean;
    emailTrack?: boolean;
    phoneTrack?: boolean;
    referrerClosedNew?: IEnumReferrerClosed;
    memberPaymentId?: IUUID;
    paymentPromise?: IDateTime;
    researchCost?: IDecimal;
    projectId?: IUUID;
    conductPayment?: IEnumConductChoise;
    exchangeRate?: IDecimal;
    manualSerie?: number;
    settlementMethod?: string;
    memberSettlementId?: number;
}
export interface IPoliceReceiptPayload {
    policeReceipt: IPoliceReceipt;
}
export interface IPoliceReceiptAccountInput {
    name?: string;
    account?: string;
    observations?: string;
    bank?: IEnumBank;
    ownerId?: IUUID;
    projectId?: IUUID;
}
export interface IPoliceReceiptAccountPayload {
    policeReceiptAccount: IPoliceReceiptAccount;
}
export interface IPoliceReceiptAccountStateInput {
    policeReceiptAccountId?: IUUID;
    policeReceiptId?: IUUID;
}
export interface IPoliceReceiptAccountStatePayload {
    policeReceiptAccountState: IPoliceReceiptAccountState;
}
export interface IPoliceReceiptFolioInput {
    paymentMethod?: IEnumPoliceReceiptFolioPaymentMethod;
    paymentDocument?: string;
    currentRate?: number;
    paymentDate?: IDateTime;
    folio?: string;
    bank?: IEnumBank;
    projectId?: IUUID;
}
export interface IPoliceReceiptFolioPayload {
    policeReceiptFolio: IPoliceReceiptFolio;
}
export interface IPoliceReceiptPaymentInput {
    paymentMethod?: IEnumPoliceReceiptPaymentMethod;
    paymentDocument?: string;
    amount?: IDecimal;
    paymentDate?: IDateTime;
    ownerId?: IUUID;
    policeReceiptId?: IUUID;
    projectId?: IUUID;
}
export interface IPoliceReceiptPaymentPayload {
    policeReceiptPayment: IPoliceReceiptPayment;
}
export interface IPoliceFileInput {
    url?: string;
    ownerId?: IUUID;
    projectId?: IUUID;
    name?: string;
    sensible?: boolean;
    shared?: boolean;
    documentType?: boolean;
    checked?: boolean;
    active?: boolean;
    folio?: string;
    baseModel?: string;
    height?: string;
    width?: string;
    policeId?: IUUID;
}
export interface IPoliceFilePayload {
    policeFile: IPoliceFile;
}
export interface IInsurerCommentInput {
    moldel?: IEnumInsurerCommentModel;
    modelId?: IUUID;
    content?: string;
    isChild?: boolean;
    memberId?: IUUID;
    hasReminder?: boolean;
    reminderDate?: IDateTime;
    taskModel?: string;
    projectId?: IUUID;
    parentId?: IUUID;
}
export interface IInsurerCommentPayload {
    insurerComment: IInsurerComment;
}
export interface IInsurerFileReadingInput {
    projectId?: IUUID;
    name?: string;
    policeType?: string;
    insurer?: string;
    branch?: string;
    subBranch?: string;
    ownerId?: IUUID;
}
export interface IInsurerFileReadingPayload {
    insurerFileReading: IInsurerFileReading;
}
export interface IInsurerFileReadingTagInput {
    area?: string;
    cssClass?: string;
    height?: string;
    width?: string;
    name?: string;
    pageNumber?: string;
    tag?: string;
    x?: string;
    y?: string;
    z?: string;
    projectId?: IUUID;
    ownerId?: IUUID;
}
export interface IInsurerFileReadingTagPayload {
    insurerFileReadingTag: IInsurerFileReadingTag;
}
export interface IInsurerBailTypeInput {
    name?: string;
    code?: number;
    ownerId?: IUUID;
    projectId?: IUUID;
    subBranchId?: IUUID;
}
export interface IInsurerBailTypePayload {
    insurerBailType: IInsurerBailType;
}
export interface IInsurerInvolvedInput {
    involvedId?: IUUID;
    ownerId?: IUUID;
    personId?: IUUID;
    projetId?: IUUID;
}
export interface IInsurerInvolvedPayload {
    insurerInvolved: IInsurerInvolved;
}
export interface IInsurerLogInput {
    moldel?: IEnumInsurerCommentModel;
    event?: IEnumInsurerLogEvent;
    associatedId?: string;
    identifier?: string;
    memberId?: IUUID;
    projectId?: IUUID;
    original?: string;
    change?: string;
}
export interface IInsurerLogPayload {
    insurerLog: IInsurerLog;
}
export interface IInsurerLogEmailInput {
    moldel?: IEnumInsurerCommentModel;
    associatedId?: string;
    to?: Array<string>;
    cC?: Array<string>;
    cCO?: Array<string>;
    subject?: string;
    body?: string;
    file?: string;
    insurerCommentId?: IUUID;
    insurerLogId?: IUUID;
}
export interface IInsurerLogEmailPayload {
    insurerLogEmail: IInsurerLogEmail;
}
export interface IInsurerOrgInfoInput {
    policeRequest?: boolean;
    endosoRequest?: boolean;
    renewal?: boolean;
    policeRecord?: boolean;
    endosoRecord?: boolean;
    sinisterRequest?: boolean;
    sinisterEnd?: boolean;
    coberageReminder?: boolean;
    renReminder?: boolean;
    collectionRemider?: boolean;
    noteCreated?: boolean;
    noteApplied?: boolean;
    sinisterCancel?: boolean;
    sinisterReject?: boolean;
    sinisterOnHold?: boolean;
    sinisterInProcess?: boolean;
    cumReminder?: boolean;
    projectId?: IUUID;
}
export interface IInsurerOrgInfoPayload {
    insurerOrgInfo: IInsurerOrgInfo;
}
export interface IInsurerTicketInput {
    title?: string;
    description?: string;
    date?: IDateTime;
    priority?: IEnumInsurerTicketPriority;
    closeDay?: IDateTime;
    closed?: boolean;
    identifier?: string;
    assignedId?: IUUID;
    ownerId?: IUUID;
    archived?: boolean;
    associated?: string;
    moldel?: number;
    route?: string;
    concept?: IEnumInsurerTicketConcept;
    insurerCommentId?: IUUID;
    closedBy?: IUUID;
    projectId?: IUUID;
    reassingBy?: IUUID;
    reassignDate?: IDateTime;
}
export interface IInsurerTicketPayload {
    insurerTicket: IInsurerTicket;
}
export interface IInsurerScheduleInput {
    title?: string;
    color?: string;
    startsAt?: IDateTime;
    endsAt?: IDateTime;
    resizable?: boolean;
    draggable?: boolean;
    ownerId?: IUUID;
    observations?: string;
    projectId?: IUUID;
}
export interface IInsurerSchedulePayload {
    insurerSchedule: IInsurerSchedule;
}
export interface IInsurerScheduleParticipantInput {
    insurerScheduleId?: IUUID;
    memberId?: IUUID;
}
export interface IInsurerScheduleParticipantPayload {
    insurerScheduleParticipant: IInsurerScheduleParticipant;
}
export interface IInsurerNotificationInput {
    model?: IEnumInsurerCommentModel;
    modelId?: IUUID;
    title?: string;
    description?: string;
    seen?: boolean;
    involved?: boolean;
    assignedId?: IUUID;
    ownerId?: IUUID;
    areaInvolved?: boolean;
    projectId?: IUUID;
    contractorPolice?: Array<IUUID>;
    policeBranch?: Array<IUUID>;
    policeGroupongLevel?: IUUID;
    policeProvider?: Array<IUUID>;
    site?: string;
    startsAt?: IDateTime;
    type?: IEnumNotificationType;
    reminderRecordId?: IUUID;
}
export interface IInsurerNotificationPayload {
    insurerNotification: IInsurerNotification;
}
export interface IInsurerReminderInput {
    name?: string;
    description?: string;
    sended?: boolean;
    type?: IEnumInsurerReminderType;
    instanceType?: IEnumInsurerReminderInstanceType;
    reminderDate?: IDateTime;
    projectId?: IUUID;
}
export interface IInsurerReminderPayload {
    insurerReminder: IInsurerReminder;
}
export interface IInsurerReminderProjectAgentProviderInput {
    insurerReminderId?: IUUID;
    projectAgentProviderId?: IUUID;
    projectId?: IUUID;
}
export interface IInsurerReminderProjectAgentProviderPayload {
    insurerReminderProjectAgentProvider: IInsurerReminderProjectAgentProvider;
}
export interface IInsurerReminderRecordInput {
    insurerReminderId?: IUUID;
    seen?: boolean;
    projectId?: IUUID;
    recordId?: IUUID;
    recordModel?: IEnumInsurerCommentModel;
}
export interface IInsurerReminderRecordPayload {
    insurerReminderRecord: IInsurerReminderRecord;
}
export interface IInsurerReminderSubBranchInput {
    insurerReminderId?: IUUID;
    subBranch?: number;
    projectId?: IUUID;
}
export interface IInsurerReminderSubBranchPayload {
    insurerReminderSubBranch: IInsurerReminderSubBranch;
}
export interface IInsurerBirthDateTemplateInput {
    subject?: string;
    text?: string;
    enabled?: boolean;
    projectId?: IUUID;
}
export interface IInsurerBirthDateTemplatePayload {
    insurerBirthDateTemplate: IInsurerBirthDateTemplate;
}
export interface IInsurerDirectoryInput {
    name?: string;
    phone?: string;
    area?: string;
    employment?: string;
    branch?: IUUID;
    gender?: Isaam_EnumGender;
    projectId?: IUUID;
}
export interface IInsurerDirectoryPayload {
    insurerDirectory: IInsurerDirectory;
}
export interface IInsurerExpenseInput {
    quantity?: number;
    concept?: string;
    month?: IEnumMonth;
    porjectId?: IUUID;
}
export interface IInsurerExpensePayload {
    insurerExpense: IInsurerExpense;
}
export interface IInsurerIbisFormInput {
    file?: string;
    name?: string;
    branch?: IUUID;
    projectId?: IUUID;
}
export interface IInsurerIbisFormPayload {
    insurerIbisForm: IInsurerIbisForm;
}
export interface IInsurerIbisProviderInput {
    name?: string;
    street?: string;
    number?: string;
    colony?: string;
    city?: string;
    zipCode?: number;
    state?: string;
    phone?: string;
    latitude?: number;
    length?: number;
    branch?: IUUID;
    type?: number;
    projectId?: IUUID;
}
export interface IInsurerIbisProviderPayload {
    insurerIbisProvider: IInsurerIbisProvider;
}
export interface IInsurerSenderInput {
    email?: string;
    passApp?: string;
    area?: number;
    active?: boolean;
    projectId?: IUUID;
}
export interface IInsurerSenderPayload {
    insurerSender: IInsurerSender;
}
export interface IInsurerZipCodeSepomexInput {
    zipCode?: number;
    colony?: string;
    city?: string;
    state?: string;
    code?: string;
    cityId?: string;
}
export interface IInsurerZipCodeSepomexPayload {
    insurerZipCodeSepomex: IInsurerZipCodeSepomex;
}
export interface IAgentProviderBonoInput {
    agentKeyId?: IUUID;
    startValidity?: IDateTime;
    endValidity?: IDateTime;
    quantity?: number;
    exchangeRate?: IEnumFCurrency;
    bono?: IEnumBonoType;
    projectId?: IUUID;
    factureNumber?: string;
    ownerId?: IUUID;
    referrerId?: IUUID;
}
export interface IAgentProviderBonoPayload {
    agentProviderBono: IAgentProviderBono;
}
export interface ISendNotificationInput {
    insurerNotificationId: IUUID;
    insurerTicketId: IUUID;
}
export interface ISendNotificationPayload {
    sended: boolean;
}
export interface ICreateMultipleNotificationInput {
    title?: string;
    description?: string;
    data?: string;
    enabled?: boolean;
    view?: boolean;
    devicesId: Array<IUUID>;
    date?: IDateTime;
}
export interface IMultipleNotificationPayload {
    notifications: Array<INotification>;
}
export interface ICreateMultipleMemberNotificationInput {
    notifications: Array<ICreateMemberNotificationInput>;
}
export interface ICreateMemberNotificationInput {
    title?: string;
    description?: string;
    data?: string;
    enabled?: boolean;
    view?: boolean;
    memberId: IUUID;
    date?: IDateTime;
}
export interface IMultipleMemberNotificationPayload {
    notifications: Array<INotification>;
}
export interface IMemberNotificationPayload {
    notifications: Array<INotification>;
}
export interface INotificationInput {
    title?: string;
    description?: string;
    data?: string;
    enabled?: boolean;
    view?: boolean;
    deviceId: IUUID;
    date?: IDateTime;
}
export interface INotificationPayload {
    notification: INotification;
}
export interface IMultipleNotificationInput {
    notifications: Array<INotificationZippedInput>;
}
export interface INotificationZippedInput {
    id: IUUID;
    notification: IUpdateNotificationInput;
}
export interface IUpdateNotificationInput {
    title?: string;
    description?: string;
    data?: string;
    enabled?: boolean;
    view?: boolean;
    deviceId?: IUUID;
    date?: IDateTime;
}
export interface IDeviceInput {
    memberId?: IUUID;
    projectId?: IUUID;
    token?: string;
    unique?: boolean;
    avalible?: boolean;
}
export interface IDevicePayload {
    device: IDevice;
}
export interface ISetCodeAsUnavailableInput {
    code: string;
}
export interface ISetCodeAsUnavailablePayload {
    success: boolean;
}
export interface ICreateAdminCodeInput {
    code: string;
}
export interface ICreateAdminCodePayload {
    adminCode: IAdminCode;
}
export interface IAdminCode {
    code: string;
    isAvailable: boolean;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IScanCodeInput {
    code: string;
    image: string;
    memberId: IUUID;
    providerId: IUUID;
}
export interface IScanCodePayload {
    code: ICode;
}
export interface ISendMessageInput {
    phone: string;
    lada: string;
}
export interface ISendMessagePayload {
    code: string;
}
export interface ILookForCodeInput {
    code: string;
}
export interface ILookForCodePayload {
    success: boolean;
}
export interface ICreateCodeInput {
    uniqueCode: string;
    expiration: IDateTime;
    batch: string;
    providerId: IUUID;
    brandId: IUUID;
    orderId?: string;
    projectId: IUUID;
}
export interface ICreateCodePayload {
    code: ICode;
}
export interface ICreatePrizeCategoryInput {
    name: string;
    image: string;
    projectId: IUUID;
    dots: number;
}
export interface ICreatePrizeCategoryPayload {
    prizeCategory: IPrizeCategory;
}
export interface ICreatePrizeCodeInput {
    prizeCategoryId: IUUID;
    status: IPrizeCodeStatus;
    code: string;
    value?: number;
    projectId: IUUID;
    description: string;
}
export interface ICreatePrizeCodePayload {
    prizeCode: IPrizeCode;
}
export interface IDeleteCodeInput {
    id: IUUID;
}
export interface IDeleteCodePayload {
    message: string;
}
export interface IDeletePrizeCodeInput {
    prizeCodeId: IUUID;
}
export interface IDeletePrizeCodePayload {
    message: string;
}
export interface IExchangeDotsInput {
    prizeCategoryId: IUUID;
    memberId: IUUID;
    name: string;
    email: string;
    phone: string;
}
export interface IExchangeDotsPayload {
    dotMovement: IDotMovement;
}
export interface ICreateAdverseEventInput {
    memberId: IUUID;
    name: string;
    email: string;
    problem: string;
    description: string;
    projectId: IUUID;
}
export interface ICreateAdverseEventPayload {
    adverseEvent: IAdverseEvent;
}
export interface IAdverseEvent {
    projectId?: IUUID;
    memberId: IUUID;
    name: string;
    email: string;
    problem: string;
    description: string;
    problemStatus: IProblemStatus;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export declare const enum IProblemStatus {
    OPEN = "OPEN",
    PENDING = "PENDING",
    CLOSED = "CLOSED"
}
export interface IDeleteAdverseEventInput {
    id: IUUID;
}
export interface IDeleteAdverseEventPayload {
    message: string;
}
export interface ICreateBrandInput {
    projectId: IUUID;
    name: string;
    image?: string;
}
export interface ICreateBrandPayload {
    brand: IBrand;
}
export interface ISubscription {
    conversationPublished: Array<IConversationReply>;
}
export declare const enum IApplyPolicy {
    BEFORE_RESOLVER = "BEFORE_RESOLVER",
    AFTER_RESOLVER = "AFTER_RESOLVER"
}
export interface Iexchange_CreateProviderPayload {
    provider: IProvider;
}
export interface IUpdatePurchaseQuoteMutation {
    updatePurchaseQuote: IUpdatePurchaseQuotePayload;
}
export interface IUpdatePurchaseQuoteInput {
    id: IUUID;
    invoiceDate?: IDateTime;
    expirationDate?: IDateTime;
    reference?: string;
    branchOfficeId?: IUUID;
    storeId?: IUUID;
    sellerId?: IUUID;
    customerId?: IUUID;
    comment?: string;
    products?: Array<IUUID>;
    discount?: IDecimal;
    subTotal?: IDecimal;
    taxes?: IDecimal;
    detained?: IDecimal;
    total?: IDecimal;
    purchaseQuoteStatus?: IPurchaseQuoteStatus;
}
export interface IUpdatePurchaseQuotePayload {
    message: string;
}
export interface IUpdateRouteMutation {
    updateRoute: IUpdateRoutePayload;
}
export interface IUpdateRouteInput {
    routeId: IUUID;
    title?: string;
    description?: string;
    branchOfficeId?: IUUID;
    routeType?: string;
    travelDays?: number;
    beginningDate?: IDateTime;
    sellers?: Array<IRouteSellerDtoInput>;
    customers?: Array<IRouteCustomerDtoInput>;
    itineraries: Array<IRouteItineraryDtoInput>;
}
export interface IRouteSellerDtoInput {
    key: string;
    branchOfficeId: IUUID;
    storeId: IUUID;
    sellerId: IUUID;
}
export interface IRouteCustomerDtoInput {
    customerId: IUUID;
    address: string;
}
export interface IRouteItineraryDtoInput {
    customerId: IUUID;
    description: string;
    address: string;
}
export interface IUpdateRoutePayload {
    message: string;
}
export interface Iexchange_CreateProviderInput {
    name: string;
    projectId: IUUID;
}
export interface Imultiquoter_CollaboratorSortInput {
    memberId?: ISortEnumType;
    projectRoleId?: ISortEnumType;
    staffQuoteId?: ISortEnumType;
    estimatedTime?: ISortEnumType;
    amount?: ISortEnumType;
    staffQuote?: IStaffQuoteSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface Imultiquoter_ProposalSortInput {
    staffQuoteId?: ISortEnumType;
    methodology?: ISortEnumType;
    status?: ISortEnumType;
    staffQuote?: IStaffQuoteSortInput;
    id?: ISortEnumType;
    createdAt?: ISortEnumType;
    updatedAt?: ISortEnumType;
}
export interface Idocsreader_CreateTemplatePayload {
    scans?: Array<IDocumentScan>;
}
export interface Idocsreader_CreateTemplateInput {
    documentReadId: IUUID;
}
export interface ICreateDettachedStripeSuscriptionMutation {
    createDettachedStripeSuscription: ICreateDettachedStripeSuscriptionPayload;
}
export interface ICreateDettachedStripeSuscriptionInput {
    projectId: IUUID;
    invoiceId: IUUID;
    planId: IUUID;
    memberId: IUUID;
    paymentMethodId: IUUID;
}
export interface ICreateDettachedStripeSuscriptionPayload {
    message: string;
}
export interface ICreateStripeCustomerMutation {
    createStripeCustomer: ICreateStripeCustomerPayload;
}
export interface ICreateStripeCustomerInput {
    memberId: IUUID;
    projectId: IUUID;
}
export interface ICreateStripeCustomerPayload {
    customer: IStripeCustomer;
}
export interface IStripeCustomer {
    memberId: IUUID;
    projectId: IUUID;
    stripeId: string;
    paymentMethodId?: IUUID;
    paymentMethod?: IPaymentMethod;
    id: IUUID;
    createdAt: IDateTime;
    updatedAt: IDateTime;
}
export interface IAuthorizeDirective {
    policy?: string;
    roles?: Array<string>;
    apply: IApplyPolicy;
}
export interface Iitus_CreateOfficePayload {
    office: Iitus_Office;
}
export interface Iitus_CreateOfficeInput {
    name: string;
    contractorId: IUUID;
    countryId: IUUID;
    state: string;
    projectId: IUUID;
}
export interface Icalculator_DeleteConsultInput {
    id: number;
}
/**
 * The name scalar represents a valid GraphQL name as specified in the spec and can be used to refer to fields or types.
 */
export declare type IName = any;
/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface IResolver {
    Query?: IQueryTypeResolver;
    UUID?: GraphQLScalarType;
    DateTime?: GraphQLScalarType;
    Decimal?: GraphQLScalarType;
    GroupCollectionSegment?: IGroupCollectionSegmentTypeResolver;
    Group?: IGroupTypeResolver;
    Project?: IProjectTypeResolver;
    Industry?: IIndustryTypeResolver;
    Company?: ICompanyTypeResolver;
    Country?: ICountryTypeResolver;
    Currency?: ICurrencyTypeResolver;
    Profile?: IProfileTypeResolver;
    Member?: IMemberTypeResolver;
    MemberCompany?: IMemberCompanyTypeResolver;
    MemberRole?: IMemberRoleTypeResolver;
    Role?: IRoleTypeResolver;
    MemberProject?: IMemberProjectTypeResolver;
    MemberProjectRoleProject?: IMemberProjectRoleProjectTypeResolver;
    ProjectRole?: IProjectRoleTypeResolver;
    Permission?: IPermissionTypeResolver;
    ViewManager?: IViewManagerTypeResolver;
    PageManager?: IPageManagerTypeResolver;
    ViewColumn?: IViewColumnTypeResolver;
    ViewBlockColumn?: IViewBlockColumnTypeResolver;
    ColumnTab?: IColumnTabTypeResolver;
    MemberStream?: IMemberStreamTypeResolver;
    MemberTaxonomy?: IMemberTaxonomyTypeResolver;
    HealthInsurance?: IHealthInsuranceTypeResolver;
    EnterpriseData?: IEnterpriseDataTypeResolver;
    BillingData?: IBillingDataTypeResolver;
    Sell?: ISellTypeResolver;
    MemberRelation?: IMemberRelationTypeResolver;
    WalletTransaction?: IWalletTransactionTypeResolver;
    WalletTransactionStatus?: IWalletTransactionStatusTypeResolver;
    EWallet?: IEWalletTypeResolver;
    MemberWallet?: IMemberWalletTypeResolver;
    WalletTransactionMemberRelation?: IWalletTransactionMemberRelationTypeResolver;
    WalletTransactionMemberDetail?: IWalletTransactionMemberDetailTypeResolver;
    MemberBusiness?: IMemberBusinessTypeResolver;
    MemberIndustry?: IMemberIndustryTypeResolver;
    Address?: IAddressTypeResolver;
    Invoice?: IInvoiceTypeResolver;
    InvoiceDetail?: IInvoiceDetailTypeResolver;
    Product?: IProductTypeResolver;
    Taxonomy?: ITaxonomyTypeResolver;
    Article?: IArticleTypeResolver;
    Survey?: ISurveyTypeResolver;
    Question?: IQuestionTypeResolver;
    Option?: IOptionTypeResolver;
    Answer?: IAnswerTypeResolver;
    ProductDetail?: IProductDetailTypeResolver;
    Image?: IImageTypeResolver;
    Store?: IStoreTypeResolver;
    BranchOffice?: IBranchOfficeTypeResolver;
    Manager?: IManagerTypeResolver;
    StoreStock?: IStoreStockTypeResolver;
    StockAlert?: IStockAlertTypeResolver;
    ProductProv?: IProductProvTypeResolver;
    ProductProvider?: IProductProviderTypeResolver;
    Purchase?: IPurchaseTypeResolver;
    ProductPurchase?: IProductPurchaseTypeResolver;
    PurchaseFile?: IPurchaseFileTypeResolver;
    ProductPrice?: IProductPriceTypeResolver;
    Hiring?: IHiringTypeResolver;
    HiringType?: IHiringTypeTypeResolver;
    Collaborator?: ICollaboratorTypeResolver;
    ResourceQuoteDetail?: IResourceQuoteDetailTypeResolver;
    ResourceQuote?: IResourceQuoteTypeResolver;
    Proposal?: IProposalTypeResolver;
    Area?: IAreaTypeResolver;
    ServiceArea?: IServiceAreaTypeResolver;
    ServiceQuiz?: IServiceQuizTypeResolver;
    Quiz?: IQuizTypeResolver;
    QuizSection?: IQuizSectionTypeResolver;
    QuizQuestion?: IQuizQuestionTypeResolver;
    QuizQuestionAnswer?: IQuizQuestionAnswerTypeResolver;
    QuizAnswer?: IQuizAnswerTypeResolver;
    QuizQuestionMember?: IQuizQuestionMemberTypeResolver;
    QuizMember?: IQuizMemberTypeResolver;
    QuizMemberDescription?: IQuizMemberDescriptionTypeResolver;
    QuizMemberAnswer?: IQuizMemberAnswerTypeResolver;
    QuizQuestionNested?: IQuizQuestionNestedTypeResolver;
    QuizQuestionPrefab?: IQuizQuestionPrefabTypeResolver;
    QuizQuestionPrefabGroup?: IQuizQuestionPrefabGroupTypeResolver;
    QuizQuestionPrefabFeatured?: IQuizQuestionPrefabFeaturedTypeResolver;
    ServiceMember?: IServiceMemberTypeResolver;
    HiringService?: IHiringServiceTypeResolver;
    ResourceQuoteDetailBoardRow?: IResourceQuoteDetailBoardRowTypeResolver;
    CollaboratorHours?: ICollaboratorHoursTypeResolver;
    Shift?: IShiftTypeResolver;
    Day?: IDayTypeResolver;
    TimeSpan?: GraphQLScalarType;
    Business?: IBusinessTypeResolver;
    BusinessType?: IBusinessTypeTypeResolver;
    BusinessRuleProjectPlan?: IBusinessRuleProjectPlanTypeResolver;
    BusinessRule?: IBusinessRuleTypeResolver;
    ProjectPlan?: IProjectPlanTypeResolver;
    ProjectPlanSubscription?: IProjectPlanSubscriptionTypeResolver;
    AccountKey?: IAccountKeyTypeResolver;
    PaymentMethod?: IPaymentMethodTypeResolver;
    EventDetail?: IEventDetailTypeResolver;
    FisicExam?: IFisicExamTypeResolver;
    MedicalBackground?: IMedicalBackgroundTypeResolver;
    Format?: IFormatTypeResolver;
    PacientMedicalBackground?: IPacientMedicalBackgroundTypeResolver;
    MedicalBackgroundDetail?: IMedicalBackgroundDetailTypeResolver;
    ClinicHistoryMedicalBackgroundDetail?: IClinicHistoryMedicalBackgroundDetailTypeResolver;
    MedicRecipe?: IMedicRecipeTypeResolver;
    PacientNote?: IPacientNoteTypeResolver;
    VitalSign?: IVitalSignTypeResolver;
    PatientVitalSignsResponse?: IPatientVitalSignsResponseTypeResolver;
    Vaccine?: IVaccineTypeResolver;
    MemberBoard?: IMemberBoardTypeResolver;
    Board?: IBoardTypeResolver;
    BoardList?: IBoardListTypeResolver;
    Card?: ICardTypeResolver;
    CardReply?: ICardReplyTypeResolver;
    NestedFile?: INestedFileTypeResolver;
    MemberCard?: IMemberCardTypeResolver;
    CardColumnValue?: ICardColumnValueTypeResolver;
    BoardColumnValue?: IBoardColumnValueTypeResolver;
    BoardGroupColumn?: IBoardGroupColumnTypeResolver;
    BoardColumnType?: IBoardColumnTypeTypeResolver;
    BoardRow?: IBoardRowTypeResolver;
    BoardMemberReference?: IBoardMemberReferenceTypeResolver;
    CardChecklist?: ICardChecklistTypeResolver;
    CardCheckComponent?: ICardCheckComponentTypeResolver;
    BoardStatus?: IBoardStatusTypeResolver;
    Space?: ISpaceTypeResolver;
    MemberSpace?: IMemberSpaceTypeResolver;
    File?: IFileTypeResolver;
    Folder?: IFolderTypeResolver;
    SharedFile?: ISharedFileTypeResolver;
    SharedFolder?: ISharedFolderTypeResolver;
    Device?: IDeviceTypeResolver;
    DeviceNotification?: IDeviceNotificationTypeResolver;
    Notification?: INotificationTypeResolver;
    ProjectSocialNetwork?: IProjectSocialNetworkTypeResolver;
    Niche?: INicheTypeResolver;
    NicheService?: INicheServiceTypeResolver;
    Microservice?: IMicroserviceTypeResolver;
    ProjectMicroservice?: IProjectMicroserviceTypeResolver;
    Function?: IFunctionTypeResolver;
    Shop?: IShopTypeResolver;
    ServiceHelper?: IServiceHelperTypeResolver;
    Configuration?: IConfigurationTypeResolver;
    GroupTaxonomy?: IGroupTaxonomyTypeResolver;
    CollectionSegmentInfo?: ICollectionSegmentInfoTypeResolver;
    NicheCollectionSegment?: INicheCollectionSegmentTypeResolver;
    NicheServiceCollectionSegment?: INicheServiceCollectionSegmentTypeResolver;
    MyUrl?: IMyUrlTypeResolver;
    CountryCollectionSegment?: ICountryCollectionSegmentTypeResolver;
    MemberProjectCollectionSegment?: IMemberProjectCollectionSegmentTypeResolver;
    MemberCollectionSegment?: IMemberCollectionSegmentTypeResolver;
    MemberInSpaceCollectionSegment?: IMemberInSpaceCollectionSegmentTypeResolver;
    MemberInSpace?: IMemberInSpaceTypeResolver;
    MemberInBoardCollectionSegment?: IMemberInBoardCollectionSegmentTypeResolver;
    MemberInBoard?: IMemberInBoardTypeResolver;
    ListUsersLazyLoadConnection?: IListUsersLazyLoadConnectionTypeResolver;
    PageInfo?: IPageInfoTypeResolver;
    ListUsersLazyLoadEdge?: IListUsersLazyLoadEdgeTypeResolver;
    ProjectsInfiniteConnection?: IProjectsInfiniteConnectionTypeResolver;
    ProjectsInfiniteEdge?: IProjectsInfiniteEdgeTypeResolver;
    MemberChat?: IMemberChatTypeResolver;
    MemberFullName?: IMemberFullNameTypeResolver;
    CustomMemberDto?: ICustomMemberDtoTypeResolver;
    Plan?: IPlanTypeResolver;
    PlanFunctionality?: IPlanFunctionalityTypeResolver;
    PlanLimitation?: IPlanLimitationTypeResolver;
    RecommendedProject?: IRecommendedProjectTypeResolver;
    ProjectCollectionSegment?: IProjectCollectionSegmentTypeResolver;
    MemberRelationCollectionSegment?: IMemberRelationCollectionSegmentTypeResolver;
    ProjectTemplate?: IProjectTemplateTypeResolver;
    RankingDTOCollectionSegment?: IRankingDTOCollectionSegmentTypeResolver;
    RankingDTO?: IRankingDTOTypeResolver;
    SellCollectionSegment?: ISellCollectionSegmentTypeResolver;
    MemberStats?: IMemberStatsTypeResolver;
    SellStats?: ISellStatsTypeResolver;
    MemberCompanyDtoCollectionSegment?: IMemberCompanyDtoCollectionSegmentTypeResolver;
    MemberCompanyDto?: IMemberCompanyDtoTypeResolver;
    FAQ?: IFAQTypeResolver;
    TopicDisease?: ITopicDiseaseTypeResolver;
    Disease?: IDiseaseTypeResolver;
    InsuranceFormCollectionSegment?: IInsuranceFormCollectionSegmentTypeResolver;
    InsuranceForm?: IInsuranceFormTypeResolver;
    QuestionDTO?: IQuestionDTOTypeResolver;
    ArticlesConnection?: IArticlesConnectionTypeResolver;
    ArticlesEdge?: IArticlesEdgeTypeResolver;
    ArticleCollectionSegment?: IArticleCollectionSegmentTypeResolver;
    ProductCollectionSegment?: IProductCollectionSegmentTypeResolver;
    TaxonomyCollectionSegment?: ITaxonomyCollectionSegmentTypeResolver;
    SeoDTO?: ISeoDTOTypeResolver;
    Course?: ICourseTypeResolver;
    CourseSchedule?: ICourseScheduleTypeResolver;
    CoursesByProjectIdConnection?: ICoursesByProjectIdConnectionTypeResolver;
    CoursesByProjectIdEdge?: ICoursesByProjectIdEdgeTypeResolver;
    CourseTaxonomy?: ICourseTaxonomyTypeResolver;
    StoreTransfersByStoreIdConnection?: IStoreTransfersByStoreIdConnectionTypeResolver;
    StoreTransfersByStoreIdEdge?: IStoreTransfersByStoreIdEdgeTypeResolver;
    StoreTransfer?: IStoreTransferTypeResolver;
    ProductTransferred?: IProductTransferredTypeResolver;
    CoursesByTaxonomyAndModalityConnection?: ICoursesByTaxonomyAndModalityConnectionTypeResolver;
    CoursesByTaxonomyAndModalityEdge?: ICoursesByTaxonomyAndModalityEdgeTypeResolver;
    BranchOfficesConnection?: IBranchOfficesConnectionTypeResolver;
    BranchOfficesEdge?: IBranchOfficesEdgeTypeResolver;
    ManagersConnection?: IManagersConnectionTypeResolver;
    ManagersEdge?: IManagersEdgeTypeResolver;
    PurchaseCollectionSegment?: IPurchaseCollectionSegmentTypeResolver;
    StoresConnection?: IStoresConnectionTypeResolver;
    StoresEdge?: IStoresEdgeTypeResolver;
    StoreTransfersConnection?: IStoreTransfersConnectionTypeResolver;
    StoreTransfersEdge?: IStoreTransfersEdgeTypeResolver;
    DrugCollectionSegment?: IDrugCollectionSegmentTypeResolver;
    Drug?: IDrugTypeResolver;
    Carrier?: ICarrierTypeResolver;
    GroupResponse?: IGroupResponseTypeResolver;
    GroupItem?: IGroupItemTypeResolver;
    Employer?: IEmployerTypeResolver;
    PharmacyRadiusResponse?: IPharmacyRadiusResponseTypeResolver;
    Pharmacy?: IPharmacyTypeResolver;
    Pricing?: IPricingTypeResolver;
    PharmacyResponse?: IPharmacyResponseTypeResolver;
    SearchMemberResponse?: ISearchMemberResponseTypeResolver;
    CardHolder?: ICardHolderTypeResolver;
    MemberInfo?: IMemberInfoTypeResolver;
    blog_Group?: Iblog_GroupTypeResolver;
    BenefitSpending?: IBenefitSpendingTypeResolver;
    PricingDrug?: IPricingDrugTypeResolver;
    PharmacyRadiusPricing?: IPharmacyRadiusPricingTypeResolver;
    Transaction?: ITransactionTypeResolver;
    Menu?: IMenuTypeResolver;
    MenuHeading?: IMenuHeadingTypeResolver;
    MenuItem?: IMenuItemTypeResolver;
    Restaurant?: IRestaurantTypeResolver;
    LegalTermCollectionSegment?: ILegalTermCollectionSegmentTypeResolver;
    LegalTerm?: ILegalTermTypeResolver;
    StockAlertCollectionSegment?: IStockAlertCollectionSegmentTypeResolver;
    PurchaseQuote?: IPurchaseQuoteTypeResolver;
    PurchaseQuoteProduct?: IPurchaseQuoteProductTypeResolver;
    PurchaseQuoteCollectionSegment?: IPurchaseQuoteCollectionSegmentTypeResolver;
    Tax?: ITaxTypeResolver;
    ProductSellCollectionSegment?: IProductSellCollectionSegmentTypeResolver;
    ProductSell?: IProductSellTypeResolver;
    ProductSellItem?: IProductSellItemTypeResolver;
    RouteCollectionSegment?: IRouteCollectionSegmentTypeResolver;
    Route?: IRouteTypeResolver;
    RouteSeller?: IRouteSellerTypeResolver;
    RouteCustomer?: IRouteCustomerTypeResolver;
    RouteItinerary?: IRouteItineraryTypeResolver;
    MessageFix?: IMessageFixTypeResolver;
    ScheduleManagerDto?: IScheduleManagerDtoTypeResolver;
    ScheduleManager?: IScheduleManagerTypeResolver;
    EventType?: IEventTypeTypeResolver;
    SubEventType?: ISubEventTypeTypeResolver;
    Schedule?: IScheduleTypeResolver;
    Turn?: ITurnTypeResolver;
    Event?: IEventTypeResolver;
    EventSession?: IEventSessionTypeResolver;
    EventMember?: IEventMemberTypeResolver;
    EventCharge?: IEventChargeTypeResolver;
    Diagnostic?: IDiagnosticTypeResolver;
    Medicine?: IMedicineTypeResolver;
    EventCollectionSegment?: IEventCollectionSegmentTypeResolver;
    ResourceQuoteCollectionSegment?: IResourceQuoteCollectionSegmentTypeResolver;
    ResourceQuoteDetailCollectionSegment?: IResourceQuoteDetailCollectionSegmentTypeResolver;
    ProposalCollectionSegment?: IProposalCollectionSegmentTypeResolver;
    CollaboratorCollectionSegment?: ICollaboratorCollectionSegmentTypeResolver;
    CollaboratorHoursCollectionSegment?: ICollaboratorHoursCollectionSegmentTypeResolver;
    HoursReportedDTO?: IHoursReportedDTOTypeResolver;
    ConfigurationTemplate?: IConfigurationTemplateTypeResolver;
    Component?: IComponentTypeResolver;
    WebsitePage?: IWebsitePageTypeResolver;
    WebsitePageComponent?: IWebsitePageComponentTypeResolver;
    WebsitePageSeo?: IWebsitePageSeoTypeResolver;
    ProjectPlanSubscriptionCollectionSegment?: IProjectPlanSubscriptionCollectionSegmentTypeResolver;
    BusinessCollectionSegment?: IBusinessCollectionSegmentTypeResolver;
    BusinessTypeCollectionSegment?: IBusinessTypeCollectionSegmentTypeResolver;
    BusinessRuleCollectionSegment?: IBusinessRuleCollectionSegmentTypeResolver;
    ProjectPlanCollectionSegment?: IProjectPlanCollectionSegmentTypeResolver;
    Template?: ITemplateTypeResolver;
    Coupon?: ICouponTypeResolver;
    ErrorPage?: IErrorPageTypeResolver;
    ErrorPageValidation?: IErrorPageValidationTypeResolver;
    CouponTemplate?: ICouponTemplateTypeResolver;
    DocumentCategoryCollectionSegment?: IDocumentCategoryCollectionSegmentTypeResolver;
    DocumentCategory?: IDocumentCategoryTypeResolver;
    DocumentCategoryDetail?: IDocumentCategoryDetailTypeResolver;
    Document?: IDocumentTypeResolver;
    DocumentTemplate?: IDocumentTemplateTypeResolver;
    TemplatePage?: ITemplatePageTypeResolver;
    DocumentTag?: IDocumentTagTypeResolver;
    DocumentScan?: IDocumentScanTypeResolver;
    DocumentRead?: IDocumentReadTypeResolver;
    DocumentCollectionSegment?: IDocumentCollectionSegmentTypeResolver;
    DocumentTemplateCollectionSegment?: IDocumentTemplateCollectionSegmentTypeResolver;
    TemplatePageCollectionSegment?: ITemplatePageCollectionSegmentTypeResolver;
    DocumentReadCollectionSegment?: IDocumentReadCollectionSegmentTypeResolver;
    VideoRoom?: IVideoRoomTypeResolver;
    VideoRoomMember?: IVideoRoomMemberTypeResolver;
    VideoRoomRecord?: IVideoRoomRecordTypeResolver;
    RoomTokenLiveKit2?: IRoomTokenLiveKit2TypeResolver;
    VideoCall?: IVideoCallTypeResolver;
    VideoCallMember?: IVideoCallMemberTypeResolver;
    VideoCallService?: IVideoCallServiceTypeResolver;
    Video?: IVideoTypeResolver;
    ContactEmail?: IContactEmailTypeResolver;
    ServiceCollectionSegment?: IServiceCollectionSegmentTypeResolver;
    AreaCollectionSegment?: IAreaCollectionSegmentTypeResolver;
    ServiceQuizCollectionSegment?: IServiceQuizCollectionSegmentTypeResolver;
    QuizCollectionSegment?: IQuizCollectionSegmentTypeResolver;
    QuizSectionCollectionSegment?: IQuizSectionCollectionSegmentTypeResolver;
    QuizQuestionCollectionSegment?: IQuizQuestionCollectionSegmentTypeResolver;
    QuizQuestionAnswerCollectionSegment?: IQuizQuestionAnswerCollectionSegmentTypeResolver;
    QuizAnswerCollectionSegment?: IQuizAnswerCollectionSegmentTypeResolver;
    QuizMemberCollectionSegment?: IQuizMemberCollectionSegmentTypeResolver;
    QuizMemberGroupedCollectionSegment?: IQuizMemberGroupedCollectionSegmentTypeResolver;
    QuizMemberGrouped?: IQuizMemberGroupedTypeResolver;
    QuizQuestionMemberCollectionSegment?: IQuizQuestionMemberCollectionSegmentTypeResolver;
    QuizMemberAnswerCollectionSegment?: IQuizMemberAnswerCollectionSegmentTypeResolver;
    QuizMemberDescriptionCollectionSegment?: IQuizMemberDescriptionCollectionSegmentTypeResolver;
    Catalog?: ICatalogTypeResolver;
    Errors?: IErrorsTypeResolver;
    QuotationResponse?: IQuotationResponseTypeResolver;
    Coverage?: ICoverageTypeResolver;
    DetailsInsurer?: IDetailsInsurerTypeResolver;
    DetailsProduct?: IDetailsProductTypeResolver;
    ConditionsProduct?: IConditionsProductTypeResolver;
    Specs?: ISpecsTypeResolver;
    DetailsCoverage?: IDetailsCoverageTypeResolver;
    Details?: IDetailsTypeResolver;
    TransactionCollectionSegment?: ITransactionCollectionSegmentTypeResolver;
    payment_Transaction?: Ipayment_TransactionTypeResolver;
    MethodPayment?: IMethodPaymentTypeResolver;
    MethodPaymentCollectionSegment?: IMethodPaymentCollectionSegmentTypeResolver;
    PlanCollectionSegment?: IPlanCollectionSegmentTypeResolver;
    payment_Plan?: Ipayment_PlanTypeResolver;
    InvoiceCollectionSegment?: IInvoiceCollectionSegmentTypeResolver;
    CustomerSuscription?: ICustomerSuscriptionTypeResolver;
    ProductStripe?: IProductStripeTypeResolver;
    AccountKeyCollectionSegment?: IAccountKeyCollectionSegmentTypeResolver;
    CardMethodDTO?: ICardMethodDTOTypeResolver;
    Long?: GraphQLScalarType;
    VehiclesCarCatalogHdiCodeYear?: IVehiclesCarCatalogHdiCodeYearTypeResolver;
    VehiclesCarCatalogHdi?: IVehiclesCarCatalogHdiTypeResolver;
    VehiclesCarCodeRelation?: IVehiclesCarCodeRelationTypeResolver;
    VehiclesCarCatalogAba?: IVehiclesCarCatalogAbaTypeResolver;
    VehiclesCarCatalogAbaCodeYear?: IVehiclesCarCatalogAbaCodeYearTypeResolver;
    VehiclesCarCatalogAfirme?: IVehiclesCarCatalogAfirmeTypeResolver;
    VehiclesCarCatalogAfirmeCodeYear?: IVehiclesCarCatalogAfirmeCodeYearTypeResolver;
    VehiclesCarCatalogAig?: IVehiclesCarCatalogAigTypeResolver;
    VehiclesCarCatalogAna?: IVehiclesCarCatalogAnaTypeResolver;
    VehiclesCarCatalogAnaCodeYear?: IVehiclesCarCatalogAnaCodeYearTypeResolver;
    VehiclesCarCatalogAtla?: IVehiclesCarCatalogAtlaTypeResolver;
    VehiclesCarCatalogAtlasCodeYear?: IVehiclesCarCatalogAtlasCodeYearTypeResolver;
    VehiclesCarCatalogAxa?: IVehiclesCarCatalogAxaTypeResolver;
    VehiclesCarCatalogAxaCodeYear?: IVehiclesCarCatalogAxaCodeYearTypeResolver;
    VehiclesCarCatalogBanorte?: IVehiclesCarCatalogBanorteTypeResolver;
    VehiclesCarCatalogBanorteCodeYear?: IVehiclesCarCatalogBanorteCodeYearTypeResolver;
    VehiclesCarCatalogGnp?: IVehiclesCarCatalogGnpTypeResolver;
    VehiclesCarCatalogGnpCodeYear?: IVehiclesCarCatalogGnpCodeYearTypeResolver;
    VehiclesCarCatalogMapfre?: IVehiclesCarCatalogMapfreTypeResolver;
    VehiclesCarCatalogMapfreCodeYear?: IVehiclesCarCatalogMapfreCodeYearTypeResolver;
    VehiclesCarCatalogPotosi?: IVehiclesCarCatalogPotosiTypeResolver;
    VehiclesCarCatalogP?: IVehiclesCarCatalogPTypeResolver;
    VehiclesCarCatalogQualita?: IVehiclesCarCatalogQualitaTypeResolver;
    VehiclesCarCatalogQualitasCodeYear?: IVehiclesCarCatalogQualitasCodeYearTypeResolver;
    VehiclesCarCatalogZurich?: IVehiclesCarCatalogZurichTypeResolver;
    VehiclesCarCatalogZurichCodeYear?: IVehiclesCarCatalogZurichCodeYearTypeResolver;
    QuotationCoverage?: IQuotationCoverageTypeResolver;
    Quote?: IQuoteTypeResolver;
    CarQuotation?: ICarQuotationTypeResolver;
    InsurerService?: IInsurerServiceTypeResolver;
    InsurerServiceCredential?: IInsurerServiceCredentialTypeResolver;
    InsurerServiceEnvironment?: IInsurerServiceEnvironmentTypeResolver;
    Insurer?: IInsurerTypeResolver;
    QuoteService?: IQuoteServiceTypeResolver;
    StaffQuote?: IStaffQuoteTypeResolver;
    multiquoter_Proposal?: Imultiquoter_ProposalTypeResolver;
    multiquoter_Collaborator?: Imultiquoter_CollaboratorTypeResolver;
    InsurerCoverageProject?: IInsurerCoverageProjectTypeResolver;
    InsurerCoverage?: IInsurerCoverageTypeResolver;
    CotizacionPackage?: ICotizacionPackageTypeResolver;
    CoveragesCoverage?: ICoveragesCoverageTypeResolver;
    GenericsService?: IGenericsServiceTypeResolver;
    ServiceProcessPayload?: IServiceProcessPayloadTypeResolver;
    CotizacionCredential?: ICotizacionCredentialTypeResolver;
    CotizacionQuote?: ICotizacionQuoteTypeResolver;
    Date?: GraphQLScalarType;
    CotizacionCarForm?: ICotizacionCarFormTypeResolver;
    ClientsClient?: IClientsClientTypeResolver;
    ClientsAddress?: IClientsAddressTypeResolver;
    CotizacionQuoteCoverage?: ICotizacionQuoteCoverageTypeResolver;
    CotizacionQuotePayForm?: ICotizacionQuotePayFormTypeResolver;
    CoveragesPackagesList?: ICoveragesPackagesListTypeResolver;
    RunServicePayload?: IRunServicePayloadTypeResolver;
    QuoterResponse?: IQuoterResponseTypeResolver;
    CoverageService?: ICoverageServiceTypeResolver;
    ResponseApiInsurer?: IResponseApiInsurerTypeResolver;
    Service?: IServiceTypeResolver;
    QuoteCoverage?: IQuoteCoverageTypeResolver;
    QuotePayFrecuency?: IQuotePayFrecuencyTypeResolver;
    DiscountService?: IDiscountServiceTypeResolver;
    StadisticsResult?: IStadisticsResultTypeResolver;
    ListRQuoterProfilesByProjectIdConnection?: IListRQuoterProfilesByProjectIdConnectionTypeResolver;
    ListRQuoterProfilesByProjectIdEdge?: IListRQuoterProfilesByProjectIdEdgeTypeResolver;
    QuoterProfile?: IQuoterProfileTypeResolver;
    Office?: IOfficeTypeResolver;
    QuoterProfileInsurer?: IQuoterProfileInsurerTypeResolver;
    ListRQuoterProfilesInsurerByProjectIdConnection?: IListRQuoterProfilesInsurerByProjectIdConnectionTypeResolver;
    ListRQuoterProfilesInsurerByProjectIdEdge?: IListRQuoterProfilesInsurerByProjectIdEdgeTypeResolver;
    Homologator?: IHomologatorTypeResolver;
    QuoteCollectionSegment?: IQuoteCollectionSegmentTypeResolver;
    QuoteCount?: IQuoteCountTypeResolver;
    Registration?: IRegistrationTypeResolver;
    Quoter?: IQuoterTypeResolver;
    GenderDTO?: IGenderDTOTypeResolver;
    CarTypeDTO?: ICarTypeDTOTypeResolver;
    ListBrandDTO?: IListBrandDTOTypeResolver;
    ListSubBrandDTO?: IListSubBrandDTOTypeResolver;
    ListYearDTO?: IListYearDTOTypeResolver;
    ListVersionDTO?: IListVersionDTOTypeResolver;
    HomologationService?: IHomologationServiceTypeResolver;
    ColoniaDTO?: IColoniaDTOTypeResolver;
    EstadoDTO?: IEstadoDTOTypeResolver;
    CoverageDTO?: ICoverageDTOTypeResolver;
    CatalogCollectionSegment?: ICatalogCollectionSegmentTypeResolver;
    multiquoter_Catalog?: Imultiquoter_CatalogTypeResolver;
    CatalogByYear?: ICatalogByYearTypeResolver;
    InsurerCollectionSegment?: IInsurerCollectionSegmentTypeResolver;
    OfficeCollectionSegment?: IOfficeCollectionSegmentTypeResolver;
    QuoterProfileCollectionSegment?: IQuoterProfileCollectionSegmentTypeResolver;
    ApiService?: IApiServiceTypeResolver;
    DynamicPage?: IDynamicPageTypeResolver;
    DynamicSection?: IDynamicSectionTypeResolver;
    DynamicTab?: IDynamicTabTypeResolver;
    DynamicSectionBlock?: IDynamicSectionBlockTypeResolver;
    DynamicBlock?: IDynamicBlockTypeResolver;
    DynamicCustomMeta?: IDynamicCustomMetaTypeResolver;
    DynamicCustomValue?: IDynamicCustomValueTypeResolver;
    DynamicBlockCollectionSegment?: IDynamicBlockCollectionSegmentTypeResolver;
    DynamicSectionCollectionSegment?: IDynamicSectionCollectionSegmentTypeResolver;
    DynamicTabCollectionSegment?: IDynamicTabCollectionSegmentTypeResolver;
    DynamicSectionBlockCollectionSegment?: IDynamicSectionBlockCollectionSegmentTypeResolver;
    DynamicCustomMetaCollectionSegment?: IDynamicCustomMetaCollectionSegmentTypeResolver;
    DynamicCustomValueCollectionSegment?: IDynamicCustomValueCollectionSegmentTypeResolver;
    ChargeCollectionSegment?: IChargeCollectionSegmentTypeResolver;
    Charge?: IChargeTypeResolver;
    ClinicHistory?: IClinicHistoryTypeResolver;
    EventDetailCollectionSegment?: IEventDetailCollectionSegmentTypeResolver;
    MedicalService?: IMedicalServiceTypeResolver;
    MedicalConfig?: IMedicalConfigTypeResolver;
    RegistSesion?: IRegistSesionTypeResolver;
    Therapy?: ITherapyTypeResolver;
    TherapyCollectionSegment?: ITherapyCollectionSegmentTypeResolver;
    RecipeConfig?: IRecipeConfigTypeResolver;
    ConsultNote?: IConsultNoteTypeResolver;
    BillingRequest?: IBillingRequestTypeResolver;
    ConsultDto?: IConsultDtoTypeResolver;
    SpaceCollectionSegment?: ISpaceCollectionSegmentTypeResolver;
    BoardStatusCollectionSegment?: IBoardStatusCollectionSegmentTypeResolver;
    BoardCollectionSegment?: IBoardCollectionSegmentTypeResolver;
    BoardListCollectionSegment?: IBoardListCollectionSegmentTypeResolver;
    CardReplyCollectionSegment?: ICardReplyCollectionSegmentTypeResolver;
    CardCollectionSegment?: ICardCollectionSegmentTypeResolver;
    NestedFileCollectionSegment?: INestedFileCollectionSegmentTypeResolver;
    MemberCardCollectionSegment?: IMemberCardCollectionSegmentTypeResolver;
    MemberBoardCollectionSegment?: IMemberBoardCollectionSegmentTypeResolver;
    MemberSpaceCollectionSegment?: IMemberSpaceCollectionSegmentTypeResolver;
    ListMemberSpaceOnValueConnection?: IListMemberSpaceOnValueConnectionTypeResolver;
    ListMemberSpaceOnValueEdge?: IListMemberSpaceOnValueEdgeTypeResolver;
    ListMemberSpaceOnCardConnection?: IListMemberSpaceOnCardConnectionTypeResolver;
    ListMemberSpaceOnCardEdge?: IListMemberSpaceOnCardEdgeTypeResolver;
    ListMemberBoardOnValueConnection?: IListMemberBoardOnValueConnectionTypeResolver;
    ListMemberBoardOnValueEdge?: IListMemberBoardOnValueEdgeTypeResolver;
    ListMemberBoardOnCardConnection?: IListMemberBoardOnCardConnectionTypeResolver;
    ListMemberBoardOnCardEdge?: IListMemberBoardOnCardEdgeTypeResolver;
    BoardColumnTypeCollectionSegment?: IBoardColumnTypeCollectionSegmentTypeResolver;
    MemberBoardDTO?: IMemberBoardDTOTypeResolver;
    CardColumnValueCollectionSegment?: ICardColumnValueCollectionSegmentTypeResolver;
    BoardMemberReferenceCollectionSegment?: IBoardMemberReferenceCollectionSegmentTypeResolver;
    Attribute?: IAttributeTypeResolver;
    AttributeValue?: IAttributeValueTypeResolver;
    MaterialCombinationAttribute?: IMaterialCombinationAttributeTypeResolver;
    MaterialCombination?: IMaterialCombinationTypeResolver;
    Material?: IMaterialTypeResolver;
    MaterialCategory?: IMaterialCategoryTypeResolver;
    MeasureUnity?: IMeasureUnityTypeResolver;
    MeasureUnityTwo?: IMeasureUnityTwoTypeResolver;
    Measure?: IMeasureTypeResolver;
    MeasureValue?: IMeasureValueTypeResolver;
    MaterialModule?: IMaterialModuleTypeResolver;
    Module?: IModuleTypeResolver;
    QuotationModule?: IQuotationModuleTypeResolver;
    MaterialQuotation?: IMaterialQuotationTypeResolver;
    MaterialVariableQuotation?: IMaterialVariableQuotationTypeResolver;
    Variable?: IVariableTypeResolver;
    MaterialVariableModule?: IMaterialVariableModuleTypeResolver;
    Quotation?: IQuotationTypeResolver;
    MadreQuotation?: IMadreQuotationTypeResolver;
    UserCustomer?: IUserCustomerTypeResolver;
    Customer?: ICustomerTypeResolver;
    BuildingSiteAddress?: IBuildingSiteAddressTypeResolver;
    ModuleCategory?: IModuleCategoryTypeResolver;
    MaterialStock?: IMaterialStockTypeResolver;
    MaterialStockMeasure?: IMaterialStockMeasureTypeResolver;
    MaterialCategoriesConnection?: IMaterialCategoriesConnectionTypeResolver;
    MaterialCategoriesEdge?: IMaterialCategoriesEdgeTypeResolver;
    BrandsHermer?: IBrandsHermerTypeResolver;
    ModelsHermer?: IModelsHermerTypeResolver;
    YearsHermer?: IYearsHermerTypeResolver;
    ModelLobatoHermer?: IModelLobatoHermerTypeResolver;
    ModelMercadoLibreResultHermer?: IModelMercadoLibreResultHermerTypeResolver;
    ModelMercadoLibreHermer?: IModelMercadoLibreHermerTypeResolver;
    ComparedMercadoLibreHermer?: IComparedMercadoLibreHermerTypeResolver;
    ResultConsultHermer?: IResultConsultHermerTypeResolver;
    ConsultShortHermer?: IConsultShortHermerTypeResolver;
    CarMercadoHermerShort?: ICarMercadoHermerShortTypeResolver;
    AnalysisCarMercadoHermerShort?: IAnalysisCarMercadoHermerShortTypeResolver;
    ResultConsultAllHermer?: IResultConsultAllHermerTypeResolver;
    ConsultHermer?: IConsultHermerTypeResolver;
    lobatoHermerData?: IlobatoHermerDataTypeResolver;
    ClientHermer?: IClientHermerTypeResolver;
    ComparedHermer?: IComparedHermerTypeResolver;
    CarMercadoHermer?: ICarMercadoHermerTypeResolver;
    AnalysisCarMercadoHermer?: IAnalysisCarMercadoHermerTypeResolver;
    ResultConsultLastAnalysisHermer?: IResultConsultLastAnalysisHermerTypeResolver;
    ConsultLastAnalysisHermer?: IConsultLastAnalysisHermerTypeResolver;
    LastAnalysisCarMercadoHermer?: ILastAnalysisCarMercadoHermerTypeResolver;
    LastCarMercadoHermer?: ILastCarMercadoHermerTypeResolver;
    DownloadFile?: IDownloadFileTypeResolver;
    ListFoldersConnection?: IListFoldersConnectionTypeResolver;
    ListFoldersEdge?: IListFoldersEdgeTypeResolver;
    FoldersListConnection?: IFoldersListConnectionTypeResolver;
    FoldersListEdge?: IFoldersListEdgeTypeResolver;
    SharedFilesFromFolderDto?: ISharedFilesFromFolderDtoTypeResolver;
    FileCollectionSegment?: IFileCollectionSegmentTypeResolver;
    FolderCollectionSegment?: IFolderCollectionSegmentTypeResolver;
    OutstandingFiles?: IOutstandingFilesTypeResolver;
    ConversationReply?: IConversationReplyTypeResolver;
    Conversation?: IConversationTypeResolver;
    MemberConversation?: IMemberConversationTypeResolver;
    EWalletCollectionSegment?: IEWalletCollectionSegmentTypeResolver;
    MemberWalletCollectionSegment?: IMemberWalletCollectionSegmentTypeResolver;
    WalletTransactionCollectionSegment?: IWalletTransactionCollectionSegmentTypeResolver;
    WalletTransactionStatusCollectionSegment?: IWalletTransactionStatusCollectionSegmentTypeResolver;
    WalletTransactionMemberRelationCollectionSegment?: IWalletTransactionMemberRelationCollectionSegmentTypeResolver;
    WalletTransactionMemberDetailCollectionSegment?: IWalletTransactionMemberDetailCollectionSegmentTypeResolver;
    WalletTransactionSummary?: IWalletTransactionSummaryTypeResolver;
    WalletTransactionSummaryMemberRelation?: IWalletTransactionSummaryMemberRelationTypeResolver;
    WalletTransactionSumaryPrincipal?: IWalletTransactionSumaryPrincipalTypeResolver;
    CertificateMovement?: ICertificateMovementTypeResolver;
    Certificate?: ICertificateTypeResolver;
    InsurerModule?: IInsurerModuleTypeResolver;
    InsurerSinisterContact?: IInsurerSinisterContactTypeResolver;
    InsurerAdjusterContact?: IInsurerAdjusterContactTypeResolver;
    InsurerCompanyModule?: IInsurerCompanyModuleTypeResolver;
    InsurerContact?: IInsurerContactTypeResolver;
    InsurerBranch?: IInsurerBranchTypeResolver;
    InsurerAddress?: IInsurerAddressTypeResolver;
    MerchandiseDetail?: IMerchandiseDetailTypeResolver;
    Merchandise?: IMerchandiseTypeResolver;
    TrafficDetail?: ITrafficDetailTypeResolver;
    InsurerFee?: IInsurerFeeTypeResolver;
    PolicyModule?: IPolicyModuleTypeResolver;
    MoneySymbol?: IMoneySymbolTypeResolver;
    PolicyDeductible?: IPolicyDeductibleTypeResolver;
    PolicyDeclaration?: IPolicyDeclarationTypeResolver;
    PolicyPrima?: IPolicyPrimaTypeResolver;
    PolicyFrequencyPayment?: IPolicyFrequencyPaymentTypeResolver;
    PolicyProduct?: IPolicyProductTypeResolver;
    itus_Module?: Iitus_ModuleTypeResolver;
    PolicyFile?: IPolicyFileTypeResolver;
    PolicyCoverage?: IPolicyCoverageTypeResolver;
    Fee?: IFeeTypeResolver;
    InsurerFeeFile?: IInsurerFeeFileTypeResolver;
    CertificateFile?: ICertificateFileTypeResolver;
    CertificateBeneficiary?: ICertificateBeneficiaryTypeResolver;
    Beneficiary?: IBeneficiaryTypeResolver;
    CertificateMovementReason?: ICertificateMovementReasonTypeResolver;
    CountryRequest?: ICountryRequestTypeResolver;
    InsurerCompany?: IInsurerCompanyTypeResolver;
    Contractor?: IContractorTypeResolver;
    itus_Office?: Iitus_OfficeTypeResolver;
    ContractorPolicy?: IContractorPolicyTypeResolver;
    itus_Policy?: Iitus_PolicyTypeResolver;
    CertificateCollectionSegment?: ICertificateCollectionSegmentTypeResolver;
    BeneficiaryCollectionSegment?: IBeneficiaryCollectionSegmentTypeResolver;
    InsurerCompanyCollectionSegment?: IInsurerCompanyCollectionSegmentTypeResolver;
    MerchandiseCollectionSegment?: IMerchandiseCollectionSegmentTypeResolver;
    MerchandiseCategory?: IMerchandiseCategoryTypeResolver;
    Contact?: IContactTypeResolver;
    Money?: IMoneyTypeResolver;
    Policy?: IPolicyTypeResolver;
    ContractorOffice?: IContractorOfficeTypeResolver;
    ContractorContact?: IContractorContactTypeResolver;
    PolicyModuleCollectionSegment?: IPolicyModuleCollectionSegmentTypeResolver;
    InsurerModuleCollectionSegment?: IInsurerModuleCollectionSegmentTypeResolver;
    InsurerFeeCollectionSegment?: IInsurerFeeCollectionSegmentTypeResolver;
    SchoolCollectionSegment?: ISchoolCollectionSegmentTypeResolver;
    School?: ISchoolTypeResolver;
    DayService?: IDayServiceTypeResolver;
    Level?: ILevelTypeResolver;
    Grade?: IGradeTypeResolver;
    ClassroomCollectionSegment?: IClassroomCollectionSegmentTypeResolver;
    Classroom?: IClassroomTypeResolver;
    Student?: IStudentTypeResolver;
    school_Attendance?: Ischool_AttendanceTypeResolver;
    StudentTutor?: IStudentTutorTypeResolver;
    LevelCollectionSegment?: ILevelCollectionSegmentTypeResolver;
    GradeCollectionSegment?: IGradeCollectionSegmentTypeResolver;
    StudentCollectionSegment?: IStudentCollectionSegmentTypeResolver;
    AttendanceCollectionSegment?: IAttendanceCollectionSegmentTypeResolver;
    Attendance?: IAttendanceTypeResolver;
    MyConversationCollectionSegment?: IMyConversationCollectionSegmentTypeResolver;
    MyConversation?: IMyConversationTypeResolver;
    MyMessage?: IMyMessageTypeResolver;
    AgentProviderBonoCollectionSegment?: IAgentProviderBonoCollectionSegmentTypeResolver;
    AgentProviderBono?: IAgentProviderBonoTypeResolver;
    AgentKey?: IAgentKeyTypeResolver;
    ProjectAgentProvider?: IProjectAgentProviderTypeResolver;
    AgentProvider?: IAgentProviderTypeResolver;
    CoveragePackage?: ICoveragePackageTypeResolver;
    ProjectAgentProviderBranch?: IProjectAgentProviderBranchTypeResolver;
    Branch?: IBranchTypeResolver;
    SubBranch?: ISubBranchTypeResolver;
    InsurerBailType?: IInsurerBailTypeTypeResolver;
    Police?: IPoliceTypeResolver;
    Sucursal?: ISucursalTypeResolver;
    saam_Contractor?: Isaam_ContractorTypeResolver;
    ContractorClassification?: IContractorClassificationTypeResolver;
    ContractorGroup?: IContractorGroupTypeResolver;
    AgentProviderContact?: IAgentProviderContactTypeResolver;
    SinisterAccident?: ISinisterAccidentTypeResolver;
    Sinister?: ISinisterTypeResolver;
    SinisterCar?: ISinisterCarTypeResolver;
    SinisterCarContact?: ISinisterCarContactTypeResolver;
    SinisterDamage?: ISinisterDamageTypeResolver;
    SinisterDamageContact?: ISinisterDamageContactTypeResolver;
    SinisterFactura?: ISinisterFacturaTypeResolver;
    SinisterLife?: ISinisterLifeTypeResolver;
    InsurerZipCodeSepomex?: IInsurerZipCodeSepomexTypeResolver;
    PersonalInformation?: IPersonalInformationTypeResolver;
    FormAccidentDisease?: IFormAccidentDiseaseTypeResolver;
    RelationShip?: IRelationShipTypeResolver;
    Endorsement?: IEndorsementTypeResolver;
    Beneficiarie?: IBeneficiarieTypeResolver;
    FormLife?: IFormLifeTypeResolver;
    EndorsementCert?: IEndorsementCertTypeResolver;
    PoliceReceipt?: IPoliceReceiptTypeResolver;
    PoliceReceiptAccount?: IPoliceReceiptAccountTypeResolver;
    PoliceReceiptAccountState?: IPoliceReceiptAccountStateTypeResolver;
    PoliceReceiptPayment?: IPoliceReceiptPaymentTypeResolver;
    FormAutomobileDamage?: IFormAutomobileDamageTypeResolver;
    FormDamage?: IFormDamageTypeResolver;
    SinisterAiling?: ISinisterAilingTypeResolver;
    ContractorGroupingLevel?: IContractorGroupingLevelTypeResolver;
    ContractorCelula?: IContractorCelulaTypeResolver;
    Referrer?: IReferrerTypeResolver;
    ReferrerAccountState?: IReferrerAccountStateTypeResolver;
    ReferrerBranch?: IReferrerBranchTypeResolver;
    InvolvedReferrer?: IInvolvedReferrerTypeResolver;
    ContractorProcessDocument?: IContractorProcessDocumentTypeResolver;
    ProcessDocument?: IProcessDocumentTypeResolver;
    PoliceQuote?: IPoliceQuoteTypeResolver;
    PoliceQuotePrima?: IPoliceQuotePrimaTypeResolver;
    PoliceAssign?: IPoliceAssignTypeResolver;
    PolicePendient?: IPolicePendientTypeResolver;
    OldPolice?: IOldPoliceTypeResolver;
    CoverageInPolicy?: ICoverageInPolicyTypeResolver;
    PoliceFile?: IPoliceFileTypeResolver;
    Comission?: IComissionTypeResolver;
    InsurerReminderProjectAgentProvider?: IInsurerReminderProjectAgentProviderTypeResolver;
    InsurerReminder?: IInsurerReminderTypeResolver;
    InsurerReminderRecord?: IInsurerReminderRecordTypeResolver;
    InsurerReminderSubBranch?: IInsurerReminderSubBranchTypeResolver;
    ProjectAgentProviderEmailReminder?: IProjectAgentProviderEmailReminderTypeResolver;
    BeneficiarieCollectionSegment?: IBeneficiarieCollectionSegmentTypeResolver;
    FormAccidentDiseaseCollectionSegment?: IFormAccidentDiseaseCollectionSegmentTypeResolver;
    FormAutomobileDamageCollectionSegment?: IFormAutomobileDamageCollectionSegmentTypeResolver;
    FormCarCatalogCollectionSegment?: IFormCarCatalogCollectionSegmentTypeResolver;
    FormCarCatalog?: IFormCarCatalogTypeResolver;
    FormDamageCollectionSegment?: IFormDamageCollectionSegmentTypeResolver;
    FormLifeCollectionSegment?: IFormLifeCollectionSegmentTypeResolver;
    InvolvedReferrerCollectionSegment?: IInvolvedReferrerCollectionSegmentTypeResolver;
    OldPoliceCollectionSegment?: IOldPoliceCollectionSegmentTypeResolver;
    PersonalInformationCollectionSegment?: IPersonalInformationCollectionSegmentTypeResolver;
    PoliceCollectionSegment?: IPoliceCollectionSegmentTypeResolver;
    PoliceAssignCollectionSegment?: IPoliceAssignCollectionSegmentTypeResolver;
    PolicePendientCollectionSegment?: IPolicePendientCollectionSegmentTypeResolver;
    PoliceQuoteCollectionSegment?: IPoliceQuoteCollectionSegmentTypeResolver;
    PoliceQuotePrimaCollectionSegment?: IPoliceQuotePrimaCollectionSegmentTypeResolver;
    RelationShipCollectionSegment?: IRelationShipCollectionSegmentTypeResolver;
    SucursalCollectionSegment?: ISucursalCollectionSegmentTypeResolver;
    EndorsementCollectionSegment?: IEndorsementCollectionSegmentTypeResolver;
    EndorsementCertCollectionSegment?: IEndorsementCertCollectionSegmentTypeResolver;
    SinisterCollectionSegment?: ISinisterCollectionSegmentTypeResolver;
    SinisterAccidentCollectionSegment?: ISinisterAccidentCollectionSegmentTypeResolver;
    SinisterAilingCollectionSegment?: ISinisterAilingCollectionSegmentTypeResolver;
    SinisterCarCollectionSegment?: ISinisterCarCollectionSegmentTypeResolver;
    SinisterCarContactCollectionSegment?: ISinisterCarContactCollectionSegmentTypeResolver;
    SinisterDamageCollectionSegment?: ISinisterDamageCollectionSegmentTypeResolver;
    SinisterDamageContactCollectionSegment?: ISinisterDamageContactCollectionSegmentTypeResolver;
    SinisterFacturaCollectionSegment?: ISinisterFacturaCollectionSegmentTypeResolver;
    SinisterHospitalCollectionSegment?: ISinisterHospitalCollectionSegmentTypeResolver;
    SinisterHospital?: ISinisterHospitalTypeResolver;
    SinisterLifeCollectionSegment?: ISinisterLifeCollectionSegmentTypeResolver;
    SinisterLifeContactCollectionSegment?: ISinisterLifeContactCollectionSegmentTypeResolver;
    SinisterLifeContact?: ISinisterLifeContactTypeResolver;
    PoliceReceiptCollectionSegment?: IPoliceReceiptCollectionSegmentTypeResolver;
    PoliceReceiptAccountCollectionSegment?: IPoliceReceiptAccountCollectionSegmentTypeResolver;
    PoliceReceiptAccountStateCollectionSegment?: IPoliceReceiptAccountStateCollectionSegmentTypeResolver;
    PoliceReceiptFolioCollectionSegment?: IPoliceReceiptFolioCollectionSegmentTypeResolver;
    PoliceReceiptFolio?: IPoliceReceiptFolioTypeResolver;
    PoliceReceiptPaymentCollectionSegment?: IPoliceReceiptPaymentCollectionSegmentTypeResolver;
    PoliceFileCollectionSegment?: IPoliceFileCollectionSegmentTypeResolver;
    InsurerCommentCollectionSegment?: IInsurerCommentCollectionSegmentTypeResolver;
    InsurerComment?: IInsurerCommentTypeResolver;
    InsurerLogEmail?: IInsurerLogEmailTypeResolver;
    InsurerLog?: IInsurerLogTypeResolver;
    InsurerTicket?: IInsurerTicketTypeResolver;
    InsurerInvolved?: IInsurerInvolvedTypeResolver;
    InsurerFileReadingCollectionSegment?: IInsurerFileReadingCollectionSegmentTypeResolver;
    InsurerFileReading?: IInsurerFileReadingTypeResolver;
    InsurerFileReadingTagCollectionSegment?: IInsurerFileReadingTagCollectionSegmentTypeResolver;
    InsurerFileReadingTag?: IInsurerFileReadingTagTypeResolver;
    InsurerInvolvedCollectionSegment?: IInsurerInvolvedCollectionSegmentTypeResolver;
    InsurerLogCollectionSegment?: IInsurerLogCollectionSegmentTypeResolver;
    InsurerLogEmailCollectionSegment?: IInsurerLogEmailCollectionSegmentTypeResolver;
    InsurerOrgInfoCollectionSegment?: IInsurerOrgInfoCollectionSegmentTypeResolver;
    InsurerOrgInfo?: IInsurerOrgInfoTypeResolver;
    InsurerTicketCollectionSegment?: IInsurerTicketCollectionSegmentTypeResolver;
    InsurerScheduleCollectionSegment?: IInsurerScheduleCollectionSegmentTypeResolver;
    InsurerSchedule?: IInsurerScheduleTypeResolver;
    InsurerScheduleParticipant?: IInsurerScheduleParticipantTypeResolver;
    InsurerScheduleParticipantCollectionSegment?: IInsurerScheduleParticipantCollectionSegmentTypeResolver;
    InsurerNotificationCollectionSegment?: IInsurerNotificationCollectionSegmentTypeResolver;
    InsurerNotification?: IInsurerNotificationTypeResolver;
    InsurerReminderCollectionSegment?: IInsurerReminderCollectionSegmentTypeResolver;
    InsurerReminderProjectAgentProviderCollectionSegment?: IInsurerReminderProjectAgentProviderCollectionSegmentTypeResolver;
    InsurerReminderRecordCollectionSegment?: IInsurerReminderRecordCollectionSegmentTypeResolver;
    InsurerReminderSubBranchCollectionSegment?: IInsurerReminderSubBranchCollectionSegmentTypeResolver;
    InsurerBailTypeCollectionSegment?: IInsurerBailTypeCollectionSegmentTypeResolver;
    InsurerBirthDateTemplateCollectionSegment?: IInsurerBirthDateTemplateCollectionSegmentTypeResolver;
    InsurerBirthDateTemplate?: IInsurerBirthDateTemplateTypeResolver;
    InsurerDirectoryCollectionSegment?: IInsurerDirectoryCollectionSegmentTypeResolver;
    InsurerDirectory?: IInsurerDirectoryTypeResolver;
    InsurerExpenseCollectionSegment?: IInsurerExpenseCollectionSegmentTypeResolver;
    InsurerExpense?: IInsurerExpenseTypeResolver;
    InsurerIbisFormCollectionSegment?: IInsurerIbisFormCollectionSegmentTypeResolver;
    InsurerIbisForm?: IInsurerIbisFormTypeResolver;
    InsurerIbisProviderCollectionSegment?: IInsurerIbisProviderCollectionSegmentTypeResolver;
    InsurerIbisProvider?: IInsurerIbisProviderTypeResolver;
    InsurerSenderCollectionSegment?: IInsurerSenderCollectionSegmentTypeResolver;
    InsurerSender?: IInsurerSenderTypeResolver;
    InsurerZipCodeSepomexCollectionSegment?: IInsurerZipCodeSepomexCollectionSegmentTypeResolver;
    ComissionCollectionSegment?: IComissionCollectionSegmentTypeResolver;
    CoverageTopecoinsuranceCollectionSegment?: ICoverageTopecoinsuranceCollectionSegmentTypeResolver;
    CoverageTopecoinsurance?: ICoverageTopecoinsuranceTypeResolver;
    CoverageSuminsuredCollectionSegment?: ICoverageSuminsuredCollectionSegmentTypeResolver;
    CoverageSuminsured?: ICoverageSuminsuredTypeResolver;
    CoveragePackageCollectionSegment?: ICoveragePackageCollectionSegmentTypeResolver;
    CoverageCollectionSegment?: ICoverageCollectionSegmentTypeResolver;
    saam_Coverage?: Isaam_CoverageTypeResolver;
    CoverageInPolicyCollectionSegment?: ICoverageInPolicyCollectionSegmentTypeResolver;
    CoverageDeductibleCollectionSegment?: ICoverageDeductibleCollectionSegmentTypeResolver;
    CoverageDeductible?: ICoverageDeductibleTypeResolver;
    CoverageCoinsuranceCollectionSegment?: ICoverageCoinsuranceCollectionSegmentTypeResolver;
    CoverageCoinsurance?: ICoverageCoinsuranceTypeResolver;
    ResponsableInvolvedCollectionSegment?: IResponsableInvolvedCollectionSegmentTypeResolver;
    ResponsableInvolved?: IResponsableInvolvedTypeResolver;
    ProjectAgentProviderEmailReminderCollectionSegment?: IProjectAgentProviderEmailReminderCollectionSegmentTypeResolver;
    ProjectAgentProviderCollectionSegment?: IProjectAgentProviderCollectionSegmentTypeResolver;
    AgentProviderContactCollectionSegment?: IAgentProviderContactCollectionSegmentTypeResolver;
    AgentProviderCollectionSegment?: IAgentProviderCollectionSegmentTypeResolver;
    AgentKeyCollectionSegment?: IAgentKeyCollectionSegmentTypeResolver;
    ReferrerCollectionSegment?: IReferrerCollectionSegmentTypeResolver;
    ReferrerBranchCollectionSegment?: IReferrerBranchCollectionSegmentTypeResolver;
    ReferrerAccountStateCollectionSegment?: IReferrerAccountStateCollectionSegmentTypeResolver;
    ContractorCollectionSegment?: IContractorCollectionSegmentTypeResolver;
    ContractorCelulaCollectionSegment?: IContractorCelulaCollectionSegmentTypeResolver;
    ContractorGroupCollectionSegment?: IContractorGroupCollectionSegmentTypeResolver;
    ContractorGroupingLevelCollectionSegment?: IContractorGroupingLevelCollectionSegmentTypeResolver;
    ContractorClassificationCollectionSegment?: IContractorClassificationCollectionSegmentTypeResolver;
    ContractorProcessDocumentCollectionSegment?: IContractorProcessDocumentCollectionSegmentTypeResolver;
    ProcessDocumentCollectionSegment?: IProcessDocumentCollectionSegmentTypeResolver;
    BranchCollectionSegment?: IBranchCollectionSegmentTypeResolver;
    SubBranchCollectionSegment?: ISubBranchCollectionSegmentTypeResolver;
    ProjectAgentProviderBranchCollectionSegment?: IProjectAgentProviderBranchCollectionSegmentTypeResolver;
    DeviceCollectionSegment?: IDeviceCollectionSegmentTypeResolver;
    NotificationCollectionSegment?: INotificationCollectionSegmentTypeResolver;
    Code?: ICodeTypeResolver;
    Brand?: IBrandTypeResolver;
    Provider?: IProviderTypeResolver;
    DotMovement?: IDotMovementTypeResolver;
    PrizeCategory?: IPrizeCategoryTypeResolver;
    PrizeCode?: IPrizeCodeTypeResolver;
    Mutation?: IMutationTypeResolver;
    SendQuizToEmailPayload?: ISendQuizToEmailPayloadTypeResolver;
    UpdateProfileWithIdPayload?: IUpdateProfileWithIdPayloadTypeResolver;
    NichePayload?: INichePayloadTypeResolver;
    NicheServicePayload?: INicheServicePayloadTypeResolver;
    CreateBulkTutorPayload?: ICreateBulkTutorPayloadTypeResolver;
    UpdateBillingDataPayload?: IUpdateBillingDataPayloadTypeResolver;
    UpdateCompanyDataPayload?: IUpdateCompanyDataPayloadTypeResolver;
    CreateBulkTeacherPayload?: ICreateBulkTeacherPayloadTypeResolver;
    UpdateHealthInsurancePayload?: IUpdateHealthInsurancePayloadTypeResolver;
    CreateAttendanceExcelPayload?: ICreateAttendanceExcelPayloadTypeResolver;
    CreateBulkUserPayload?: ICreateBulkUserPayloadTypeResolver;
    CreateAttendancePayload?: ICreateAttendancePayloadTypeResolver;
    CreateCheisiUsersExcelPayload?: ICreateCheisiUsersExcelPayloadTypeResolver;
    NewContactFormPayload?: INewContactFormPayloadTypeResolver;
    NewExternalLoginPayload?: INewExternalLoginPayloadTypeResolver;
    ExternalLogin?: IExternalLoginTypeResolver;
    DeleteUserPayload?: IDeleteUserPayloadTypeResolver;
    TestBulkPayload?: ITestBulkPayloadTypeResolver;
    UpdatePositionColumnsPayload?: IUpdatePositionColumnsPayloadTypeResolver;
    ViewColumnPage?: IViewColumnPageTypeResolver;
    UpdatePositionBlockColumnsPayload?: IUpdatePositionBlockColumnsPayloadTypeResolver;
    ViewBlockColumnPage?: IViewBlockColumnPageTypeResolver;
    LoginWithProviderPayload?: ILoginWithProviderPayloadTypeResolver;
    CreateProjectSocialNetworkPayload?: ICreateProjectSocialNetworkPayloadTypeResolver;
    UpdateProjectSocialNetworkPayload?: IUpdateProjectSocialNetworkPayloadTypeResolver;
    DeleteProjectSocialNetworkPayload?: IDeleteProjectSocialNetworkPayloadTypeResolver;
    CreateRecommendedProjectPayload?: ICreateRecommendedProjectPayloadTypeResolver;
    UpdateRecommendedProjectPayload?: IUpdateRecommendedProjectPayloadTypeResolver;
    DeleteRecommendedProjectPayload?: IDeleteRecommendedProjectPayloadTypeResolver;
    SetProjectToProductionPayload?: ISetProjectToProductionPayloadTypeResolver;
    CreateProjectTemplatePayload?: ICreateProjectTemplatePayloadTypeResolver;
    UpdateProjectTemplatePayload?: IUpdateProjectTemplatePayloadTypeResolver;
    DeleteProjectTemplatePayload?: IDeleteProjectTemplatePayloadTypeResolver;
    CreateMemberPayload?: ICreateMemberPayloadTypeResolver;
    LoginMemberPayload?: ILoginMemberPayloadTypeResolver;
    CreateCompanyPayload?: ICreateCompanyPayloadTypeResolver;
    CreateProjectPayload?: ICreateProjectPayloadTypeResolver;
    CreateNewRolesPayload?: ICreateNewRolesPayloadTypeResolver;
    CreateUserPayload?: ICreateUserPayloadTypeResolver;
    CreateOrFindUserPayload?: ICreateOrFindUserPayloadTypeResolver;
    CreateOrdinaryUserPayload?: ICreateOrdinaryUserPayloadTypeResolver;
    UpdateProfilePayload?: IUpdateProfilePayloadTypeResolver;
    UpdatePasswordPayload?: IUpdatePasswordPayloadTypeResolver;
    ActiveMemberPayload?: IActiveMemberPayloadTypeResolver;
    CreateProjectRolePayload?: ICreateProjectRolePayloadTypeResolver;
    UploadPhotoProfilePayload?: IUploadPhotoProfilePayloadTypeResolver;
    DeleteProjectPayload?: IDeleteProjectPayloadTypeResolver;
    UpdateCompanyPayload?: IUpdateCompanyPayloadTypeResolver;
    RestorePasswordPayload?: IRestorePasswordPayloadTypeResolver;
    RecoverPasswordPayload?: IRecoverPasswordPayloadTypeResolver;
    VerifyTokenPayload?: IVerifyTokenPayloadTypeResolver;
    CreateGroupPayload?: ICreateGroupPayloadTypeResolver;
    AddGroupToMemberPayload?: IAddGroupToMemberPayloadTypeResolver;
    MemberGroup?: IMemberGroupTypeResolver;
    AddGroupToTaxonomyPayload?: IAddGroupToTaxonomyPayloadTypeResolver;
    AddTaxonomyToMemberPayload?: IAddTaxonomyToMemberPayloadTypeResolver;
    DeleteGroupPayload?: IDeleteGroupPayloadTypeResolver;
    DeleteGroupTaxonomyPayload?: IDeleteGroupTaxonomyPayloadTypeResolver;
    DeleteMemberGroupMutationPayload?: IDeleteMemberGroupMutationPayloadTypeResolver;
    DeleteMemberTaxonomyPayload?: IDeleteMemberTaxonomyPayloadTypeResolver;
    DeleteProjectRolePayload?: IDeleteProjectRolePayloadTypeResolver;
    CreateUpdatePermissionPayload?: ICreateUpdatePermissionPayloadTypeResolver;
    UpdateProjectPayload?: IUpdateProjectPayloadTypeResolver;
    UpdateProjectRolePayload?: IUpdateProjectRolePayloadTypeResolver;
    UpdateGroupPayload?: IUpdateGroupPayloadTypeResolver;
    AddMemberAsAdminPayload?: IAddMemberAsAdminPayloadTypeResolver;
    CreateMemberStreamPayload?: ICreateMemberStreamPayloadTypeResolver;
    DeleteMemberFromMemberProjectsPayload?: IDeleteMemberFromMemberProjectsPayloadTypeResolver;
    AddMemberToCompanyPayload?: IAddMemberToCompanyPayloadTypeResolver;
    CreatePageManagerPayload?: ICreatePageManagerPayloadTypeResolver;
    CreateViewManagerPayload?: ICreateViewManagerPayloadTypeResolver;
    CreateViewColumnPayload?: ICreateViewColumnPayloadTypeResolver;
    CreateViewBlockColumnPayload?: ICreateViewBlockColumnPayloadTypeResolver;
    UpdatePageManagerPayload?: IUpdatePageManagerPayloadTypeResolver;
    UpdateViewManagerPayload?: IUpdateViewManagerPayloadTypeResolver;
    UpdateViewColumnPayload?: IUpdateViewColumnPayloadTypeResolver;
    UpdateViewBlockColumnPayload?: IUpdateViewBlockColumnPayloadTypeResolver;
    DeletePageManagerPayload?: IDeletePageManagerPayloadTypeResolver;
    DeleteViewManagerPayload?: IDeleteViewManagerPayloadTypeResolver;
    DeleteViewColumnPayload?: IDeleteViewColumnPayloadTypeResolver;
    LinkTransactionToSellPayload?: ILinkTransactionToSellPayloadTypeResolver;
    UpdateSellPayload?: IUpdateSellPayloadTypeResolver;
    DeleteViewBlockColumnPayload?: IDeleteViewBlockColumnPayloadTypeResolver;
    MultipleMemberRelationPayload?: IMultipleMemberRelationPayloadTypeResolver;
    MemberRelationPayload?: IMemberRelationPayloadTypeResolver;
    UpdateProductSellPayload?: IUpdateProductSellPayloadTypeResolver;
    CreateTaxPayload?: ICreateTaxPayloadTypeResolver;
    DeleteTaxPayload?: IDeleteTaxPayloadTypeResolver;
    ImportProductsFromExcelPayload?: IImportProductsFromExcelPayloadTypeResolver;
    CreateRoutePayload?: ICreateRoutePayloadTypeResolver;
    DeleteRoutePayload?: IDeleteRoutePayloadTypeResolver;
    CreateProductSellPayload?: ICreateProductSellPayloadTypeResolver;
    DeleteProductSellPayload?: IDeleteProductSellPayloadTypeResolver;
    CreatePurchaseQuotePayload?: ICreatePurchaseQuotePayloadTypeResolver;
    DeletePurchaseQuotePayload?: IDeletePurchaseQuotePayloadTypeResolver;
    CreateStockAlertPayload?: ICreateStockAlertPayloadTypeResolver;
    DeleteStockAlertPayload?: IDeleteStockAlertPayloadTypeResolver;
    UpdateStockAlertPayload?: IUpdateStockAlertPayloadTypeResolver;
    CreateLegalTermPayload?: ICreateLegalTermPayloadTypeResolver;
    CreateInsuranceFormPayload?: ICreateInsuranceFormPayloadTypeResolver;
    UpdateInsuranceFormPayload?: IUpdateInsuranceFormPayloadTypeResolver;
    UpdateLegalTermPayload?: IUpdateLegalTermPayloadTypeResolver;
    DeleteLegalTermPayload?: IDeleteLegalTermPayloadTypeResolver;
    CreateArticlePayload?: ICreateArticlePayloadTypeResolver;
    UpdateStatusArticlePayload?: IUpdateStatusArticlePayloadTypeResolver;
    CreateTaxonomyPayload?: ICreateTaxonomyPayloadTypeResolver;
    UpdateArticlePayload?: IUpdateArticlePayloadTypeResolver;
    UpdateTaxonomyPayload?: IUpdateTaxonomyPayloadTypeResolver;
    DeleteArticlePayload?: IDeleteArticlePayloadTypeResolver;
    DeleteTaxonomyPayload?: IDeleteTaxonomyPayloadTypeResolver;
    NewSurveyPayload?: INewSurveyPayloadTypeResolver;
    UpdateSurveyPayload?: IUpdateSurveyPayloadTypeResolver;
    DeleteSurveyPayload?: IDeleteSurveyPayloadTypeResolver;
    NewQuestionPayload?: INewQuestionPayloadTypeResolver;
    DeleteQuestionPayload?: IDeleteQuestionPayloadTypeResolver;
    UpdateQuestionPayload?: IUpdateQuestionPayloadTypeResolver;
    NewOptionPayload?: INewOptionPayloadTypeResolver;
    DeleteOptionPayload?: IDeleteOptionPayloadTypeResolver;
    UpdateOptionPayload?: IUpdateOptionPayloadTypeResolver;
    AnswerQuestionPayload?: IAnswerQuestionPayloadTypeResolver;
    CreateProductPayload?: ICreateProductPayloadTypeResolver;
    UpdateProductPayload?: IUpdateProductPayloadTypeResolver;
    DeleteProductPayload?: IDeleteProductPayloadTypeResolver;
    CreateAddressPayload?: ICreateAddressPayloadTypeResolver;
    UpdateAddressPayload?: IUpdateAddressPayloadTypeResolver;
    DeleteAddressPayload?: IDeleteAddressPayloadTypeResolver;
    CreateUpdateShopPayload?: ICreateUpdateShopPayloadTypeResolver;
    CreateDiseasePayload?: ICreateDiseasePayloadTypeResolver;
    UpdateDiseasePayload?: IUpdateDiseasePayloadTypeResolver;
    DeleteDiseasePayload?: IDeleteDiseasePayloadTypeResolver;
    CreateTopicDiseasePayload?: ICreateTopicDiseasePayloadTypeResolver;
    UpdateTopicDiseasePayload?: IUpdateTopicDiseasePayloadTypeResolver;
    DeleteTopicDiseasePayload?: IDeleteTopicDiseasePayloadTypeResolver;
    CreateFAQPayload?: ICreateFAQPayloadTypeResolver;
    UpdateFAQPayload?: IUpdateFAQPayloadTypeResolver;
    DeleteFAQPayload?: IDeleteFAQPayloadTypeResolver;
    RunJobShopPayload?: IRunJobShopPayloadTypeResolver;
    CreateCoursePayload?: ICreateCoursePayloadTypeResolver;
    CreateBeginCoursePayload?: ICreateBeginCoursePayloadTypeResolver;
    BeginCourse?: IBeginCourseTypeResolver;
    CreateCourseFormPayload?: ICreateCourseFormPayloadTypeResolver;
    CourseForm?: ICourseFormTypeResolver;
    UpdateCoursePayload?: IUpdateCoursePayloadTypeResolver;
    UpdateBeginCoursePayload?: IUpdateBeginCoursePayloadTypeResolver;
    UpdateCourseFormPayload?: IUpdateCourseFormPayloadTypeResolver;
    DeleteCoursePayload?: IDeleteCoursePayloadTypeResolver;
    DeleteBeginCoursePayload?: IDeleteBeginCoursePayloadTypeResolver;
    DeleteCourseFormPayload?: IDeleteCourseFormPayloadTypeResolver;
    FixProductPayload?: IFixProductPayloadTypeResolver;
    DeleteCourseSchedulePayload?: IDeleteCourseSchedulePayloadTypeResolver;
    UpdateCourseSchedulePayload?: IUpdateCourseSchedulePayloadTypeResolver;
    CreateBranchOfficePayload?: ICreateBranchOfficePayloadTypeResolver;
    CreateManagerPayload?: ICreateManagerPayloadTypeResolver;
    CreateProductPurchasePayload?: ICreateProductPurchasePayloadTypeResolver;
    CreatePurchasePayload?: ICreatePurchasePayloadTypeResolver;
    CreateStorePayload?: ICreateStorePayloadTypeResolver;
    NewStoreTransferPayload?: INewStoreTransferPayloadTypeResolver;
    CreateProviderPayload?: ICreateProviderPayloadTypeResolver;
    UpdateBranchOfficePayload?: IUpdateBranchOfficePayloadTypeResolver;
    UpdateManagerPayload?: IUpdateManagerPayloadTypeResolver;
    UpdatePurchasePayload?: IUpdatePurchasePayloadTypeResolver;
    UpdateStorePayload?: IUpdateStorePayloadTypeResolver;
    DeleteStorePayload?: IDeleteStorePayloadTypeResolver;
    DeleteManagerPayload?: IDeleteManagerPayloadTypeResolver;
    UpdateProviderPayload?: IUpdateProviderPayloadTypeResolver;
    DeleteProviderPayload?: IDeleteProviderPayloadTypeResolver;
    DeletePurchasePayload?: IDeletePurchasePayloadTypeResolver;
    DeleteProductPurchasePayload?: IDeleteProductPurchasePayloadTypeResolver;
    DeleteBranchOfficePayload?: IDeleteBranchOfficePayloadTypeResolver;
    AssociationServiceToProjectPayload?: IAssociationServiceToProjectPayloadTypeResolver;
    CreateArrayFunctionPayload?: ICreateArrayFunctionPayloadTypeResolver;
    DeleteArrayFunctionPayload?: IDeleteArrayFunctionPayloadTypeResolver;
    UpdateServiceProjectPayload?: IUpdateServiceProjectPayloadTypeResolver;
    DeleteServiceProjectPayload?: IDeleteServiceProjectPayloadTypeResolver;
    CancelEventPayload?: ICancelEventPayloadTypeResolver;
    CreateEventTypePayload?: ICreateEventTypePayloadTypeResolver;
    CreateSubEventTypePayload?: ICreateSubEventTypePayloadTypeResolver;
    DeleteSubEventTypePayload?: IDeleteSubEventTypePayloadTypeResolver;
    UpdateSubEventTypePayload?: IUpdateSubEventTypePayloadTypeResolver;
    AddSubTypeToEventTypePayload?: IAddSubTypeToEventTypePayloadTypeResolver;
    DeleteEventTypePayload?: IDeleteEventTypePayloadTypeResolver;
    UpdateEventTypePayload?: IUpdateEventTypePayloadTypeResolver;
    CreateEventPayload?: ICreateEventPayloadTypeResolver;
    CreateEventMemberPayload?: ICreateEventMemberPayloadTypeResolver;
    UpdateEventPayload?: IUpdateEventPayloadTypeResolver;
    DeleteEventPayload?: IDeleteEventPayloadTypeResolver;
    CreateEventSessionPayload?: ICreateEventSessionPayloadTypeResolver;
    UpdateEventSessionPayload?: IUpdateEventSessionPayloadTypeResolver;
    DeleteEventSessionPayload?: IDeleteEventSessionPayloadTypeResolver;
    CreateSchedulePayload?: ICreateSchedulePayloadTypeResolver;
    AssociationMemberToConsultPayload?: IAssociationMemberToConsultPayloadTypeResolver;
    CancellationMemberToConsultPayload?: ICancellationMemberToConsultPayloadTypeResolver;
    ChangeStatusEventPayload?: IChangeStatusEventPayloadTypeResolver;
    DeleteSchedulePayload?: IDeleteSchedulePayloadTypeResolver;
    DeleteTurnPayload?: IDeleteTurnPayloadTypeResolver;
    ResourceQuotePayload?: IResourceQuotePayloadTypeResolver;
    ResourceQuoteDetailPayload?: IResourceQuoteDetailPayloadTypeResolver;
    ProposalPayload?: IProposalPayloadTypeResolver;
    CollaboratorPayload?: ICollaboratorPayloadTypeResolver;
    CollaboratorHoursPayload?: ICollaboratorHoursPayloadTypeResolver;
    HiringPayload?: IHiringPayloadTypeResolver;
    HiringServicePayload?: IHiringServicePayloadTypeResolver;
    HiringTypePayload?: IHiringTypePayloadTypeResolver;
    ShiftPayload?: IShiftPayloadTypeResolver;
    CreateBusinessTypePayload?: ICreateBusinessTypePayloadTypeResolver;
    UpdateBusinessTypePayload?: IUpdateBusinessTypePayloadTypeResolver;
    DeleteBusinessPayload?: IDeleteBusinessPayloadTypeResolver;
    CreateBusinessRulePayload?: ICreateBusinessRulePayloadTypeResolver;
    UpdateBusinessRulePayload?: IUpdateBusinessRulePayloadTypeResolver;
    DeleteBusinessRulePayload?: IDeleteBusinessRulePayloadTypeResolver;
    DeleteCouponFromTemplatePayload?: IDeleteCouponFromTemplatePayloadTypeResolver;
    AddCouponsToTemplatePayload?: IAddCouponsToTemplatePayloadTypeResolver;
    CreateUpdateConfigurationTemplatePayload?: ICreateUpdateConfigurationTemplatePayloadTypeResolver;
    SendTemplatePayload?: ISendTemplatePayloadTypeResolver;
    PutFirebaseDevicePayload?: IPutFirebaseDevicePayloadTypeResolver;
    CreateCouponPayload?: ICreateCouponPayloadTypeResolver;
    UpdateCouponPayload?: IUpdateCouponPayloadTypeResolver;
    DeleteCouponPayload?: IDeleteCouponPayloadTypeResolver;
    CreateTemplatePayload?: ICreateTemplatePayloadTypeResolver;
    UpdateTemplatePayload?: IUpdateTemplatePayloadTypeResolver;
    DeleteTemplatePayload?: IDeleteTemplatePayloadTypeResolver;
    CreateErrorPagePayload?: ICreateErrorPagePayloadTypeResolver;
    UpdateErrorPagePayload?: IUpdateErrorPagePayloadTypeResolver;
    DeleteErrorPagePayload?: IDeleteErrorPagePayloadTypeResolver;
    CreateErrorPageValidationPayload?: ICreateErrorPageValidationPayloadTypeResolver;
    UpdateErrorPageValidationPayload?: IUpdateErrorPageValidationPayloadTypeResolver;
    DeleteErrorPageValidationPayload?: IDeleteErrorPageValidationPayloadTypeResolver;
    CreateBusinessPayload?: ICreateBusinessPayloadTypeResolver;
    UpdateBusinessPayload?: IUpdateBusinessPayloadTypeResolver;
    AssociateBusinessRulesPayload?: IAssociateBusinessRulesPayloadTypeResolver;
    AssociateProjectPlanSubscriptionPayload?: IAssociateProjectPlanSubscriptionPayloadTypeResolver;
    CreateProjectPlanPayload?: ICreateProjectPlanPayloadTypeResolver;
    UpdateProjectPlanPayload?: IUpdateProjectPlanPayloadTypeResolver;
    DeleteProjectPlanPayload?: IDeleteProjectPlanPayloadTypeResolver;
    DeleteProjectPlanSubscriptionPayload?: IDeleteProjectPlanSubscriptionPayloadTypeResolver;
    PutConfigPayload?: IPutConfigPayloadTypeResolver;
    DeleteConfigPayload?: IDeleteConfigPayloadTypeResolver;
    UpdateOrderPagesPayload?: IUpdateOrderPagesPayloadTypeResolver;
    PagesDto?: IPagesDtoTypeResolver;
    UpdateBatchWewbsiteComponentPayload?: IUpdateBatchWewbsiteComponentPayloadTypeResolver;
    ComponentDto?: IComponentDtoTypeResolver;
    CreateComponentPayload?: ICreateComponentPayloadTypeResolver;
    CreateWebsiteComponentPayload?: ICreateWebsiteComponentPayloadTypeResolver;
    CreateWebsitePagePayload?: ICreateWebsitePagePayloadTypeResolver;
    CreateWebsiteSeoPayload?: ICreateWebsiteSeoPayloadTypeResolver;
    UpdateComponentPayload?: IUpdateComponentPayloadTypeResolver;
    UpdateWebsiteComponentPayload?: IUpdateWebsiteComponentPayloadTypeResolver;
    UpdateWebsitePagePayload?: IUpdateWebsitePagePayloadTypeResolver;
    UpdateWebsiteSeoPayload?: IUpdateWebsiteSeoPayloadTypeResolver;
    DeleteComponentPayload?: IDeleteComponentPayloadTypeResolver;
    DeleteWebsiteComponentPayload?: IDeleteWebsiteComponentPayloadTypeResolver;
    DeleteWebsitePagePayload?: IDeleteWebsitePagePayloadTypeResolver;
    DeleteWebsiteSeoPayload?: IDeleteWebsiteSeoPayloadTypeResolver;
    DocumentCategoryPayload?: IDocumentCategoryPayloadTypeResolver;
    DocumentCategoryDetailPayload?: IDocumentCategoryDetailPayloadTypeResolver;
    DocumentPayload?: IDocumentPayloadTypeResolver;
    DocumentTemplatePayload?: IDocumentTemplatePayloadTypeResolver;
    TemplatePagePayload?: ITemplatePagePayloadTypeResolver;
    DocumentTagPayload?: IDocumentTagPayloadTypeResolver;
    DocumentScanPayload?: IDocumentScanPayloadTypeResolver;
    DocumentReadPayload?: IDocumentReadPayloadTypeResolver;
    CreateVideoCallPayload?: ICreateVideoCallPayloadTypeResolver;
    RoomAccessToken?: IRoomAccessTokenTypeResolver;
    UpdateVideoCallPayload?: IUpdateVideoCallPayloadTypeResolver;
    DeleteVideoCallPayload?: IDeleteVideoCallPayloadTypeResolver;
    CreateVideoRoomPayload?: ICreateVideoRoomPayloadTypeResolver;
    SendNotificationUsersPayload?: ISendNotificationUsersPayloadTypeResolver;
    SendEmailDownloadPayload?: ISendEmailDownloadPayloadTypeResolver;
    SendEmailNotificationPayload?: ISendEmailNotificationPayloadTypeResolver;
    RecordingPath?: IRecordingPathTypeResolver;
    CreateUpdateContactEmailPayload?: ICreateUpdateContactEmailPayloadTypeResolver;
    SendEmailPayload?: ISendEmailPayloadTypeResolver;
    ResponseEmail?: IResponseEmailTypeResolver;
    DeleteContactEmailPayload?: IDeleteContactEmailPayloadTypeResolver;
    SendMailBotPayload?: ISendMailBotPayloadTypeResolver;
    ServiceAreaPayload?: IServiceAreaPayloadTypeResolver;
    AreaPayload?: IAreaPayloadTypeResolver;
    ServiceMemberPayload?: IServiceMemberPayloadTypeResolver;
    ServiceQuizPayload?: IServiceQuizPayloadTypeResolver;
    QuizPayload?: IQuizPayloadTypeResolver;
    QuizSectionPayload?: IQuizSectionPayloadTypeResolver;
    QuizQuestionPayload?: IQuizQuestionPayloadTypeResolver;
    QuizQuestionNestedPayload?: IQuizQuestionNestedPayloadTypeResolver;
    QuizQuestionAnswerPayload?: IQuizQuestionAnswerPayloadTypeResolver;
    QuizAnswerPayload?: IQuizAnswerPayloadTypeResolver;
    QuizMemberPayload?: IQuizMemberPayloadTypeResolver;
    QuizQuestionMemberPayload?: IQuizQuestionMemberPayloadTypeResolver;
    QuizMemberAnswerPayload?: IQuizMemberAnswerPayloadTypeResolver;
    QuizMemberDescriptionPayload?: IQuizMemberDescriptionPayloadTypeResolver;
    KeyPayload?: IKeyPayloadTypeResolver;
    Key?: IKeyTypeResolver;
    QuotationPayload?: IQuotationPayloadTypeResolver;
    LoginPayload?: ILoginPayloadTypeResolver;
    ErrorData?: IErrorDataTypeResolver;
    PolicyPayload?: IPolicyPayloadTypeResolver;
    QuotationDownloadPDFPayload?: IQuotationDownloadPDFPayloadTypeResolver;
    Pdf64Data?: IPdf64DataTypeResolver;
    QuotationEmitPayload?: IQuotationEmitPayloadTypeResolver;
    SendQuotationPayload?: ISendQuotationPayloadTypeResolver;
    CreatePaymentMethodPayload?: ICreatePaymentMethodPayloadTypeResolver;
    SetupIntentStripePayload?: ISetupIntentStripePayloadTypeResolver;
    SetDefaultPaymentMethodOnCustomerPayload?: ISetDefaultPaymentMethodOnCustomerPayloadTypeResolver;
    UpdatePriceStripePayload?: IUpdatePriceStripePayloadTypeResolver;
    NewPaymentsAnyTypePayload?: INewPaymentsAnyTypePayloadTypeResolver;
    CreateProductStripePayload?: ICreateProductStripePayloadTypeResolver;
    PlanPayload?: IPlanPayloadTypeResolver;
    CreateStripePricePayload?: ICreateStripePricePayloadTypeResolver;
    CreateMethodPaymentPayload?: ICreateMethodPaymentPayloadTypeResolver;
    UpdateMethodPaymentPayload?: IUpdateMethodPaymentPayloadTypeResolver;
    DeleteMethodPaymentPayload?: IDeleteMethodPaymentPayloadTypeResolver;
    CreatePaymentStripePayload?: ICreatePaymentStripePayloadTypeResolver;
    CreateSuscriptionStripePayload?: ICreateSuscriptionStripePayloadTypeResolver;
    CreateSuscriptionExternalStripePayload?: ICreateSuscriptionExternalStripePayloadTypeResolver;
    DeleteSuscriptionExternalStripePayload?: IDeleteSuscriptionExternalStripePayloadTypeResolver;
    CreateStripeAccountPayload?: ICreateStripeAccountPayloadTypeResolver;
    DeletePaymentPayload?: IDeletePaymentPayloadTypeResolver;
    UpdatePaymentPayload?: IUpdatePaymentPayloadTypeResolver;
    CreateInvoicePayload?: ICreateInvoicePayloadTypeResolver;
    UpdateStatusInvoicePayload?: IUpdateStatusInvoicePayloadTypeResolver;
    DeletePaymentMethodPayload?: IDeletePaymentMethodPayloadTypeResolver;
    CreateBatchInsurerCoveragesPayload?: ICreateBatchInsurerCoveragesPayloadTypeResolver;
    CreateQuotePayload?: ICreateQuotePayloadTypeResolver;
    CreateNewOfficesPayload?: ICreateNewOfficesPayloadTypeResolver;
    CreateNewProfilesPayload?: ICreateNewProfilesPayloadTypeResolver;
    CreateInsurerPayload?: ICreateInsurerPayloadTypeResolver;
    CreateOfficePayload?: ICreateOfficePayloadTypeResolver;
    CreateRegistrationPayload?: ICreateRegistrationPayloadTypeResolver;
    CreateQuatorProfilePayload?: ICreateQuatorProfilePayloadTypeResolver;
    DeleteInsurerPayload?: IDeleteInsurerPayloadTypeResolver;
    DeleteOfficePayload?: IDeleteOfficePayloadTypeResolver;
    DeleteQuoterProfilePayload?: IDeleteQuoterProfilePayloadTypeResolver;
    UpdateInsurerPayload?: IUpdateInsurerPayloadTypeResolver;
    UpdateOfficePayload?: IUpdateOfficePayloadTypeResolver;
    UpdateQuoterProfilePayload?: IUpdateQuoterProfilePayloadTypeResolver;
    CreateCatalogPayload?: ICreateCatalogPayloadTypeResolver;
    PopulateCredentialsPayload?: IPopulateCredentialsPayloadTypeResolver;
    PopulateServicesPayload?: IPopulateServicesPayloadTypeResolver;
    EmissionCarPayload?: IEmissionCarPayloadTypeResolver;
    PrintEmissionPayload?: IPrintEmissionPayloadTypeResolver;
    CreateQuoteCoveragePayload?: ICreateQuoteCoveragePayloadTypeResolver;
    UpdateQuoteCoveragePayload?: IUpdateQuoteCoveragePayloadTypeResolver;
    DeleteQuoteCoveragePayload?: IDeleteQuoteCoveragePayloadTypeResolver;
    AssociationWithQuoterProfilePayload?: IAssociationWithQuoterProfilePayloadTypeResolver;
    UpdateQuotePayload?: IUpdateQuotePayloadTypeResolver;
    CreateInsurerCredentialPayload?: ICreateInsurerCredentialPayloadTypeResolver;
    UpdateInsurerCredentialPayload?: IUpdateInsurerCredentialPayloadTypeResolver;
    AssociationRelationCarPayload?: IAssociationRelationCarPayloadTypeResolver;
    CreateCoverageProjectPayload?: ICreateCoverageProjectPayloadTypeResolver;
    UpdateCoverageProjectPayload?: IUpdateCoverageProjectPayloadTypeResolver;
    UpdateBatchCoverageProjectPayload?: IUpdateBatchCoverageProjectPayloadTypeResolver;
    CreateApiServicePayload?: ICreateApiServicePayloadTypeResolver;
    UpdateApiServicePayload?: IUpdateApiServicePayloadTypeResolver;
    DynamicCustomMetaPayload?: IDynamicCustomMetaPayloadTypeResolver;
    DynamicCustomValuePayload?: IDynamicCustomValuePayloadTypeResolver;
    DynamicPagePayload?: IDynamicPagePayloadTypeResolver;
    DynamicBlockPayload?: IDynamicBlockPayloadTypeResolver;
    DynamicSectionPayload?: IDynamicSectionPayloadTypeResolver;
    DynamicSectionBlockPayload?: IDynamicSectionBlockPayloadTypeResolver;
    DynamicTabPayload?: IDynamicTabPayloadTypeResolver;
    CreateChargePayload?: ICreateChargePayloadTypeResolver;
    CreateClinicHistoryPayload?: ICreateClinicHistoryPayloadTypeResolver;
    CreateClinicHistoryMedicalBackgroundDetailPayload?: ICreateClinicHistoryMedicalBackgroundDetailPayloadTypeResolver;
    CreateEventDetailPayload?: ICreateEventDetailPayloadTypeResolver;
    CreateFisicExamPayload?: ICreateFisicExamPayloadTypeResolver;
    CreateFormatPayload?: ICreateFormatPayloadTypeResolver;
    CreateMedicalBackgroundDetailPayload?: ICreateMedicalBackgroundDetailPayloadTypeResolver;
    CreateMedicalBackgroundPayload?: ICreateMedicalBackgroundPayloadTypeResolver;
    CreateMedicalConfigPayload?: ICreateMedicalConfigPayloadTypeResolver;
    CreateMedicalServicePaylod?: ICreateMedicalServicePaylodTypeResolver;
    CreateMedicinePayload?: ICreateMedicinePayloadTypeResolver;
    CreateVaccinePayload?: ICreateVaccinePayloadTypeResolver;
    CreateVitalSignsPayload?: ICreateVitalSignsPayloadTypeResolver;
    CreateMedicRecipePayload?: ICreateMedicRecipePayloadTypeResolver;
    CreateRecipeConfigPaylod?: ICreateRecipeConfigPaylodTypeResolver;
    CreateRegistSesionPayload?: ICreateRegistSesionPayloadTypeResolver;
    CreatePacientNotePayload?: ICreatePacientNotePayloadTypeResolver;
    CreateDiagnosticPayload?: ICreateDiagnosticPayloadTypeResolver;
    CreateConsultNotePayload?: ICreateConsultNotePayloadTypeResolver;
    CreateMedicalBackgroundSetPayload?: ICreateMedicalBackgroundSetPayloadTypeResolver;
    CreatePacientMedicalBackgroundPaylod?: ICreatePacientMedicalBackgroundPaylodTypeResolver;
    CreatePatientVitalSignsResponsePayload?: ICreatePatientVitalSignsResponsePayloadTypeResolver;
    UpdateChargePayload?: IUpdateChargePayloadTypeResolver;
    UpdateClinicHistoryPayloads?: IUpdateClinicHistoryPayloadsTypeResolver;
    UpdateClinicHistoryMedicalBackgroundDetailPayload?: IUpdateClinicHistoryMedicalBackgroundDetailPayloadTypeResolver;
    UpdateEventDetailtPayload?: IUpdateEventDetailtPayloadTypeResolver;
    UpdateFisicExamPayload?: IUpdateFisicExamPayloadTypeResolver;
    UpdateFormatPayload?: IUpdateFormatPayloadTypeResolver;
    UpdateMedicalBackgroundDetailPayload?: IUpdateMedicalBackgroundDetailPayloadTypeResolver;
    UpdateMedicalBackgroundPayload?: IUpdateMedicalBackgroundPayloadTypeResolver;
    UpdateMedicalConfigPayload?: IUpdateMedicalConfigPayloadTypeResolver;
    UpdateMedicalServicePayload?: IUpdateMedicalServicePayloadTypeResolver;
    UpdateMedicinePayload?: IUpdateMedicinePayloadTypeResolver;
    UpdateVaccinePayload?: IUpdateVaccinePayloadTypeResolver;
    UpdateVitalSingsPayloads?: IUpdateVitalSingsPayloadsTypeResolver;
    UpdateMedicRecipePayload?: IUpdateMedicRecipePayloadTypeResolver;
    UpdateRecipeConfigPayload?: IUpdateRecipeConfigPayloadTypeResolver;
    UpdateRegistSesionPayload?: IUpdateRegistSesionPayloadTypeResolver;
    UpdatePacientNotePayload?: IUpdatePacientNotePayloadTypeResolver;
    UpdateTherapyPayload?: IUpdateTherapyPayloadTypeResolver;
    UpdateDiagnosticPayload?: IUpdateDiagnosticPayloadTypeResolver;
    UpdateConsultNotePayload?: IUpdateConsultNotePayloadTypeResolver;
    UpdatePacientMedicalBackgroundPayload?: IUpdatePacientMedicalBackgroundPayloadTypeResolver;
    UpdateBillingRequestPayload?: IUpdateBillingRequestPayloadTypeResolver;
    UpdateSortFormatPayload?: IUpdateSortFormatPayloadTypeResolver;
    UpdatePatientVitalSignsResponsePayloads?: IUpdatePatientVitalSignsResponsePayloadsTypeResolver;
    DeleteChargePayload?: IDeleteChargePayloadTypeResolver;
    DeleteClinicHistoryPayload?: IDeleteClinicHistoryPayloadTypeResolver;
    DeleteClinicHistoryMedicalBackgroundDetailPayload?: IDeleteClinicHistoryMedicalBackgroundDetailPayloadTypeResolver;
    DeleteConsultPayload?: IDeleteConsultPayloadTypeResolver;
    DeleteFisicalExamPayload?: IDeleteFisicalExamPayloadTypeResolver;
    DeleteMedicalBackgroundDetailPayload?: IDeleteMedicalBackgroundDetailPayloadTypeResolver;
    DeleteMedicalBackgroundPayload?: IDeleteMedicalBackgroundPayloadTypeResolver;
    DeleteMedicalConfigPayload?: IDeleteMedicalConfigPayloadTypeResolver;
    DeleteMedicalServicePayload?: IDeleteMedicalServicePayloadTypeResolver;
    DeleteMedicinePayload?: IDeleteMedicinePayloadTypeResolver;
    DeleteVaccinePayload?: IDeleteVaccinePayloadTypeResolver;
    DeleteVitalSignPayload?: IDeleteVitalSignPayloadTypeResolver;
    DeleteMedicRecipePayload?: IDeleteMedicRecipePayloadTypeResolver;
    DeleteRecipeConfigPayload?: IDeleteRecipeConfigPayloadTypeResolver;
    DeleteRegistSesionPayload?: IDeleteRegistSesionPayloadTypeResolver;
    DeleteTherapyPayload?: IDeleteTherapyPayloadTypeResolver;
    DeleteDiagnosticPayload?: IDeleteDiagnosticPayloadTypeResolver;
    DeleteConsultNotePayload?: IDeleteConsultNotePayloadTypeResolver;
    DeletePacientNotePayload?: IDeletePacientNotePayloadTypeResolver;
    DeletePacientMedicalBackgroundPayload?: IDeletePacientMedicalBackgroundPayloadTypeResolver;
    DeleteBillingRequestPayload?: IDeleteBillingRequestPayloadTypeResolver;
    DeleteFormatPayload?: IDeleteFormatPayloadTypeResolver;
    CreatePDFPayload?: ICreatePDFPayloadTypeResolver;
    OrderingMemberBoardPayload?: IOrderingMemberBoardPayloadTypeResolver;
    SpacePayload?: ISpacePayloadTypeResolver;
    MemberSpacePayload?: IMemberSpacePayloadTypeResolver;
    BoardStatusPayload?: IBoardStatusPayloadTypeResolver;
    BoardPayload?: IBoardPayloadTypeResolver;
    BoardListPayload?: IBoardListPayloadTypeResolver;
    BoardGroupColumnPayload?: IBoardGroupColumnPayloadTypeResolver;
    BoardColumnTypePayload?: IBoardColumnTypePayloadTypeResolver;
    BoardColumnValuePayload?: IBoardColumnValuePayloadTypeResolver;
    CardColumnValuePayload?: ICardColumnValuePayloadTypeResolver;
    BoardMemberReferencePayload?: IBoardMemberReferencePayloadTypeResolver;
    BoardRowPayload?: IBoardRowPayloadTypeResolver;
    CardPayload?: ICardPayloadTypeResolver;
    CardChecklistPayload?: ICardChecklistPayloadTypeResolver;
    CardCheckComponentPayload?: ICardCheckComponentPayloadTypeResolver;
    CardReplyPayload?: ICardReplyPayloadTypeResolver;
    NestedFilesPayload?: INestedFilesPayloadTypeResolver;
    MemberCardPayload?: IMemberCardPayloadTypeResolver;
    MemberBoardPayload?: IMemberBoardPayloadTypeResolver;
    DeleteMeasurePayload?: IDeleteMeasurePayloadTypeResolver;
    UpdateMeasurePayload?: IUpdateMeasurePayloadTypeResolver;
    DeleteMaterialCategoryPayload?: IDeleteMaterialCategoryPayloadTypeResolver;
    CreateMeasureValuePayload?: ICreateMeasureValuePayloadTypeResolver;
    UpdateMeasureValuePayload?: IUpdateMeasureValuePayloadTypeResolver;
    DeleteMeasureValuePayload?: IDeleteMeasureValuePayloadTypeResolver;
    DeleteMeasureUnityTwoPayload?: IDeleteMeasureUnityTwoPayloadTypeResolver;
    UpdateModulePayload?: IUpdateModulePayloadTypeResolver;
    CreateMaterialQuotationPayload?: ICreateMaterialQuotationPayloadTypeResolver;
    UpdateMaterialQuotationPayload?: IUpdateMaterialQuotationPayloadTypeResolver;
    DeleteMaterialQuotationPayload?: IDeleteMaterialQuotationPayloadTypeResolver;
    CreateMaterialModulePayload?: ICreateMaterialModulePayloadTypeResolver;
    UpdateMaterialModulePayload?: IUpdateMaterialModulePayloadTypeResolver;
    DeleteMaterialModulePayload?: IDeleteMaterialModulePayloadTypeResolver;
    CreateUserCustomerPayload?: ICreateUserCustomerPayloadTypeResolver;
    CreateMeasureUnityPayload?: ICreateMeasureUnityPayloadTypeResolver;
    UpdateMeasureUnityPayload?: IUpdateMeasureUnityPayloadTypeResolver;
    DeleteMeasureUnityPayload?: IDeleteMeasureUnityPayloadTypeResolver;
    CreateAttributePayload?: ICreateAttributePayloadTypeResolver;
    CreateAttributeValuePayload?: ICreateAttributeValuePayloadTypeResolver;
    CreateBuildingSiteAddressPayload?: ICreateBuildingSiteAddressPayloadTypeResolver;
    CreateMadreQuotationPayload?: ICreateMadreQuotationPayloadTypeResolver;
    CreateMaterialCategoryPayload?: ICreateMaterialCategoryPayloadTypeResolver;
    CreateMaterialCombinationPayload?: ICreateMaterialCombinationPayloadTypeResolver;
    CreateMaterialPayload?: ICreateMaterialPayloadTypeResolver;
    CreateMaterialStockMeasurePayload?: ICreateMaterialStockMeasurePayloadTypeResolver;
    CreateMaterialStockPayload?: ICreateMaterialStockPayloadTypeResolver;
    CreateMaterialVariableQuotationPayload?: ICreateMaterialVariableQuotationPayloadTypeResolver;
    CreateMeasurePayload?: ICreateMeasurePayloadTypeResolver;
    CreateMeasureTwoPayload?: ICreateMeasureTwoPayloadTypeResolver;
    CreateModuleCategoryPayload?: ICreateModuleCategoryPayloadTypeResolver;
    CreateModulePayload?: ICreateModulePayloadTypeResolver;
    CreateQuotationPayload?: ICreateQuotationPayloadTypeResolver;
    CreateQuotationModulePayload?: ICreateQuotationModulePayloadTypeResolver;
    CreateVariablePayload?: ICreateVariablePayloadTypeResolver;
    DeleteAttributePayload?: IDeleteAttributePayloadTypeResolver;
    DeleteAttributeValuePayload?: IDeleteAttributeValuePayloadTypeResolver;
    DeleteBuildingSiteAddressPayload?: IDeleteBuildingSiteAddressPayloadTypeResolver;
    DeleteMaterialCombinationPayload?: IDeleteMaterialCombinationPayloadTypeResolver;
    DeleteMaterialPayload?: IDeleteMaterialPayloadTypeResolver;
    DeleteMaterialStockPayload?: IDeleteMaterialStockPayloadTypeResolver;
    DeleteMaterialStockMeasurePayload?: IDeleteMaterialStockMeasurePayloadTypeResolver;
    DeleteMaterialVariableQuotationPayload?: IDeleteMaterialVariableQuotationPayloadTypeResolver;
    DeleteModuleCategoryPayload?: IDeleteModuleCategoryPayloadTypeResolver;
    DeleteModulePayload?: IDeleteModulePayloadTypeResolver;
    DeleteQuotationModulePayload?: IDeleteQuotationModulePayloadTypeResolver;
    DeleteQuotationPayload?: IDeleteQuotationPayloadTypeResolver;
    DeleteVariablePayload?: IDeleteVariablePayloadTypeResolver;
    UpdateAttributePayload?: IUpdateAttributePayloadTypeResolver;
    UpdateAttributeValuePayload?: IUpdateAttributeValuePayloadTypeResolver;
    UpdateBuildingSiteAddressPayload?: IUpdateBuildingSiteAddressPayloadTypeResolver;
    UpdateMaterialCategoryPayload?: IUpdateMaterialCategoryPayloadTypeResolver;
    UpdateMaterialCombinationPayload?: IUpdateMaterialCombinationPayloadTypeResolver;
    UpdateMaterialPayload?: IUpdateMaterialPayloadTypeResolver;
    UpdateMaterialStockMeasurePayload?: IUpdateMaterialStockMeasurePayloadTypeResolver;
    UpdateMaterialStockPayload?: IUpdateMaterialStockPayloadTypeResolver;
    UpdateMadreQuotationPayload?: IUpdateMadreQuotationPayloadTypeResolver;
    DeleteMadreQuotationPayload?: IDeleteMadreQuotationPayloadTypeResolver;
    UpdateMaterialVariableQuotationPayload?: IUpdateMaterialVariableQuotationPayloadTypeResolver;
    UpdateMeasureUnityTwoPayload?: IUpdateMeasureUnityTwoPayloadTypeResolver;
    UpdateModuleCategoryPayload?: IUpdateModuleCategoryPayloadTypeResolver;
    UpdateQuotationModulePayload?: IUpdateQuotationModulePayloadTypeResolver;
    UpdateQuotationPayload?: IUpdateQuotationPayloadTypeResolver;
    UpdateVariablePayload?: IUpdateVariablePayloadTypeResolver;
    UpdateAnalysisPayload?: IUpdateAnalysisPayloadTypeResolver;
    CreateClientPayload?: ICreateClientPayloadTypeResolver;
    UpdateClientPayload?: IUpdateClientPayloadTypeResolver;
    CreateConsultPayload?: ICreateConsultPayloadTypeResolver;
    UpdateConsultPayload?: IUpdateConsultPayloadTypeResolver;
    CreateComparedPayload?: ICreateComparedPayloadTypeResolver;
    UpdateComparedPayload?: IUpdateComparedPayloadTypeResolver;
    DeleteComparedPayload?: IDeleteComparedPayloadTypeResolver;
    CreateCarMercadoPayload?: ICreateCarMercadoPayloadTypeResolver;
    CreateCarMercadoMassivePayload?: ICreateCarMercadoMassivePayloadTypeResolver;
    DeleteCarMercadoPayload?: IDeleteCarMercadoPayloadTypeResolver;
    ZipFolderContentPayload?: IZipFolderContentPayloadTypeResolver;
    FolderPayload?: IFolderPayloadTypeResolver;
    DeleteFolderPayLoad?: IDeleteFolderPayLoadTypeResolver;
    CreateFilePayload?: ICreateFilePayloadTypeResolver;
    UpdateFilesPayload?: IUpdateFilesPayloadTypeResolver;
    DeleteFilePayLoad?: IDeleteFilePayLoadTypeResolver;
    ShareFilePayload?: IShareFilePayloadTypeResolver;
    ShareFolderPayload?: IShareFolderPayloadTypeResolver;
    StopSharingFolderPayload?: IStopSharingFolderPayloadTypeResolver;
    StopSharingFilePayload?: IStopSharingFilePayloadTypeResolver;
    UploadFilePrivatePayload?: IUploadFilePrivatePayloadTypeResolver;
    AddChatMemberPayload?: IAddChatMemberPayloadTypeResolver;
    AddChatMemberWsPayload?: IAddChatMemberWsPayloadTypeResolver;
    GetConversationIdPayload?: IGetConversationIdPayloadTypeResolver;
    DeleteReplyPayload?: IDeleteReplyPayloadTypeResolver;
    WalletPayload?: IWalletPayloadTypeResolver;
    WalletTransactionPayload?: IWalletTransactionPayloadTypeResolver;
    MultipleWalletTransactionPayload?: IMultipleWalletTransactionPayloadTypeResolver;
    WalletTransactionStatusPayload?: IWalletTransactionStatusPayloadTypeResolver;
    WalletTransactionMemberRelationPayload?: IWalletTransactionMemberRelationPayloadTypeResolver;
    MemberWalletPayload?: IMemberWalletPayloadTypeResolver;
    ProjectWalletKeyPayload?: IProjectWalletKeyPayloadTypeResolver;
    ProjectWalletKey?: IProjectWalletKeyTypeResolver;
    CreateCertificateMovementPayload?: ICreateCertificateMovementPayloadTypeResolver;
    DeleteCertificatePayload?: IDeleteCertificatePayloadTypeResolver;
    UpdateInsurerModulePayload?: IUpdateInsurerModulePayloadTypeResolver;
    CreateInsurerModulePayload?: ICreateInsurerModulePayloadTypeResolver;
    CreatePolicyModulePayload?: ICreatePolicyModulePayloadTypeResolver;
    UpdatePolicyModulePayload?: IUpdatePolicyModulePayloadTypeResolver;
    DeletePolicyModulePayload?: IDeletePolicyModulePayloadTypeResolver;
    CreateInsurerFeePayload?: ICreateInsurerFeePayloadTypeResolver;
    DeleteInsurerFeePayload?: IDeleteInsurerFeePayloadTypeResolver;
    UpdateInsurerFeePayload?: IUpdateInsurerFeePayloadTypeResolver;
    CreatePolicyPayload?: ICreatePolicyPayloadTypeResolver;
    CancelCertificatePayload?: ICancelCertificatePayloadTypeResolver;
    CreateBeneficiaryPayload?: ICreateBeneficiaryPayloadTypeResolver;
    CreateCertificatePayload?: ICreateCertificatePayloadTypeResolver;
    CreateCertificateFilePayload?: ICreateCertificateFilePayloadTypeResolver;
    CreateContactPayload?: ICreateContactPayloadTypeResolver;
    CreateContractorBranchOfficePayload?: ICreateContractorBranchOfficePayloadTypeResolver;
    CreateContractorContactPayload?: ICreateContractorContactPayloadTypeResolver;
    CreateContractorPayload?: ICreateContractorPayloadTypeResolver;
    CreateContractorPolicyPayload?: ICreateContractorPolicyPayloadTypeResolver;
    CreateCountryRequestPayload?: ICreateCountryRequestPayloadTypeResolver;
    CreateFeePayload?: ICreateFeePayloadTypeResolver;
    CreateInsurerCompanyPayload?: ICreateInsurerCompanyPayloadTypeResolver;
    CreateIssuedReportPayload?: ICreateIssuedReportPayloadTypeResolver;
    IssuedReport?: IIssuedReportTypeResolver;
    CreateMerchandiseDetailPayload?: ICreateMerchandiseDetailPayloadTypeResolver;
    CreateMerchandisePayload?: ICreateMerchandisePayloadTypeResolver;
    CreateMoneyPayload?: ICreateMoneyPayloadTypeResolver;
    CreateMoneyPolicyPayload?: ICreateMoneyPolicyPayloadTypeResolver;
    MoneyPolicy?: IMoneyPolicyTypeResolver;
    DeleteBeneficiaryPayload?: IDeleteBeneficiaryPayloadTypeResolver;
    DeleteContactPayload?: IDeleteContactPayloadTypeResolver;
    DeleteContractorPayload?: IDeleteContractorPayloadTypeResolver;
    DeleteContractorOfficePayload?: IDeleteContractorOfficePayloadTypeResolver;
    DeleteContractorPolicyPayload?: IDeleteContractorPolicyPayloadTypeResolver;
    DeleteInsurerModulePayload?: IDeleteInsurerModulePayloadTypeResolver;
    DeleteFeePayload?: IDeleteFeePayloadTypeResolver;
    DeleteMerchandisePayload?: IDeleteMerchandisePayloadTypeResolver;
    DeleteInsurerCompanyPayload?: IDeleteInsurerCompanyPayloadTypeResolver;
    DeleteMoneyPayload?: IDeleteMoneyPayloadTypeResolver;
    DeletePolicyPayload?: IDeletePolicyPayloadTypeResolver;
    UpdateBeneficiaryPayload?: IUpdateBeneficiaryPayloadTypeResolver;
    UpdateCertificatePayload?: IUpdateCertificatePayloadTypeResolver;
    UpdateContactPayload?: IUpdateContactPayloadTypeResolver;
    UpdateContractorPayload?: IUpdateContractorPayloadTypeResolver;
    UpdateFeePayload?: IUpdateFeePayloadTypeResolver;
    UpdateInsurerCompanyPayload?: IUpdateInsurerCompanyPayloadTypeResolver;
    UpdateMerchandisePayload?: IUpdateMerchandisePayloadTypeResolver;
    UpdateMoneyPayload?: IUpdateMoneyPayloadTypeResolver;
    UpdatePolicyPayload?: IUpdatePolicyPayloadTypeResolver;
    AttendancePayload?: IAttendancePayloadTypeResolver;
    ClassroomPayload?: IClassroomPayloadTypeResolver;
    DayServicePayload?: IDayServicePayloadTypeResolver;
    GradePayload?: IGradePayloadTypeResolver;
    LevelPayload?: ILevelPayloadTypeResolver;
    SchoolPayload?: ISchoolPayloadTypeResolver;
    StudentPayload?: IStudentPayloadTypeResolver;
    CreateBulkStudentPayload?: ICreateBulkStudentPayloadTypeResolver;
    BeneficiariePayload?: IBeneficiariePayloadTypeResolver;
    FormAccidentDiseasePayload?: IFormAccidentDiseasePayloadTypeResolver;
    FormAutomobileDamagePayload?: IFormAutomobileDamagePayloadTypeResolver;
    FormCarCatalogPayload?: IFormCarCatalogPayloadTypeResolver;
    FormDamagePayload?: IFormDamagePayloadTypeResolver;
    FormLifePayload?: IFormLifePayloadTypeResolver;
    InvolvedReferrerPayload?: IInvolvedReferrerPayloadTypeResolver;
    OldPolicePayload?: IOldPolicePayloadTypeResolver;
    PersonalInformationPayload?: IPersonalInformationPayloadTypeResolver;
    PolicePayload?: IPolicePayloadTypeResolver;
    PoliceAssignPayload?: IPoliceAssignPayloadTypeResolver;
    PolicePendientPayload?: IPolicePendientPayloadTypeResolver;
    PoliceQuotePayload?: IPoliceQuotePayloadTypeResolver;
    PoliceQuotePrimaPayload?: IPoliceQuotePrimaPayloadTypeResolver;
    RelationShipPayload?: IRelationShipPayloadTypeResolver;
    SucursalPayload?: ISucursalPayloadTypeResolver;
    AgentKeyPayload?: IAgentKeyPayloadTypeResolver;
    AgentProviderContactPayload?: IAgentProviderContactPayloadTypeResolver;
    AgentProviderPayload?: IAgentProviderPayloadTypeResolver;
    BranchPayload?: IBranchPayloadTypeResolver;
    ComissionPayload?: IComissionPayloadTypeResolver;
    ContractorCelulaPayload?: IContractorCelulaPayloadTypeResolver;
    ContractorClassificationPayload?: IContractorClassificationPayloadTypeResolver;
    ContractorGroupingLevelPayload?: IContractorGroupingLevelPayloadTypeResolver;
    ContractorPayload?: IContractorPayloadTypeResolver;
    ContractorProcessDocumentPayload?: IContractorProcessDocumentPayloadTypeResolver;
    CoverageCoinsurancePayload?: ICoverageCoinsurancePayloadTypeResolver;
    CoverageDeductiblePayload?: ICoverageDeductiblePayloadTypeResolver;
    CoverageInPolicyPayload?: ICoverageInPolicyPayloadTypeResolver;
    CoveragePayload?: ICoveragePayloadTypeResolver;
    CoveragePackagePayload?: ICoveragePackagePayloadTypeResolver;
    CoverageSuminsuredPayload?: ICoverageSuminsuredPayloadTypeResolver;
    CoverageTopecoinsurancePayload?: ICoverageTopecoinsurancePayloadTypeResolver;
    ProcessDocumentPayload?: IProcessDocumentPayloadTypeResolver;
    ProjectAgentProviderBranchPayload?: IProjectAgentProviderBranchPayloadTypeResolver;
    ProjectAgentProviderPayload?: IProjectAgentProviderPayloadTypeResolver;
    ReferrerAccountStatePayload?: IReferrerAccountStatePayloadTypeResolver;
    ReferrerBranchPayload?: IReferrerBranchPayloadTypeResolver;
    ReferrerPayload?: IReferrerPayloadTypeResolver;
    ResponsableInvolvedPayload?: IResponsableInvolvedPayloadTypeResolver;
    SubBranchPayload?: ISubBranchPayloadTypeResolver;
    ProjectAgentProviderEmailReminderPayload?: IProjectAgentProviderEmailReminderPayloadTypeResolver;
    EndorsementPayload?: IEndorsementPayloadTypeResolver;
    EndorsementCertPayload?: IEndorsementCertPayloadTypeResolver;
    SinisterPayload?: ISinisterPayloadTypeResolver;
    SinisterAilingPayload?: ISinisterAilingPayloadTypeResolver;
    SinisterCarPayload?: ISinisterCarPayloadTypeResolver;
    SinisterCarContactPayload?: ISinisterCarContactPayloadTypeResolver;
    SinisterDamagePayload?: ISinisterDamagePayloadTypeResolver;
    SinisterDamageContactPayload?: ISinisterDamageContactPayloadTypeResolver;
    SinisterLifePayload?: ISinisterLifePayloadTypeResolver;
    SinisterLifeContactPayload?: ISinisterLifeContactPayloadTypeResolver;
    SinisterHospitalPayload?: ISinisterHospitalPayloadTypeResolver;
    SinisterFacturaPayload?: ISinisterFacturaPayloadTypeResolver;
    PoliceReceiptPayload?: IPoliceReceiptPayloadTypeResolver;
    PoliceReceiptAccountPayload?: IPoliceReceiptAccountPayloadTypeResolver;
    PoliceReceiptAccountStatePayload?: IPoliceReceiptAccountStatePayloadTypeResolver;
    PoliceReceiptFolioPayload?: IPoliceReceiptFolioPayloadTypeResolver;
    PoliceReceiptPaymentPayload?: IPoliceReceiptPaymentPayloadTypeResolver;
    PoliceFilePayload?: IPoliceFilePayloadTypeResolver;
    InsurerCommentPayload?: IInsurerCommentPayloadTypeResolver;
    InsurerFileReadingPayload?: IInsurerFileReadingPayloadTypeResolver;
    InsurerFileReadingTagPayload?: IInsurerFileReadingTagPayloadTypeResolver;
    InsurerBailTypePayload?: IInsurerBailTypePayloadTypeResolver;
    InsurerInvolvedPayload?: IInsurerInvolvedPayloadTypeResolver;
    InsurerLogPayload?: IInsurerLogPayloadTypeResolver;
    InsurerLogEmailPayload?: IInsurerLogEmailPayloadTypeResolver;
    InsurerOrgInfoPayload?: IInsurerOrgInfoPayloadTypeResolver;
    InsurerTicketPayload?: IInsurerTicketPayloadTypeResolver;
    InsurerSchedulePayload?: IInsurerSchedulePayloadTypeResolver;
    InsurerScheduleParticipantPayload?: IInsurerScheduleParticipantPayloadTypeResolver;
    InsurerNotificationPayload?: IInsurerNotificationPayloadTypeResolver;
    InsurerReminderPayload?: IInsurerReminderPayloadTypeResolver;
    InsurerReminderProjectAgentProviderPayload?: IInsurerReminderProjectAgentProviderPayloadTypeResolver;
    InsurerReminderRecordPayload?: IInsurerReminderRecordPayloadTypeResolver;
    InsurerReminderSubBranchPayload?: IInsurerReminderSubBranchPayloadTypeResolver;
    InsurerBirthDateTemplatePayload?: IInsurerBirthDateTemplatePayloadTypeResolver;
    InsurerDirectoryPayload?: IInsurerDirectoryPayloadTypeResolver;
    InsurerExpensePayload?: IInsurerExpensePayloadTypeResolver;
    InsurerIbisFormPayload?: IInsurerIbisFormPayloadTypeResolver;
    InsurerIbisProviderPayload?: IInsurerIbisProviderPayloadTypeResolver;
    InsurerSenderPayload?: IInsurerSenderPayloadTypeResolver;
    InsurerZipCodeSepomexPayload?: IInsurerZipCodeSepomexPayloadTypeResolver;
    AgentProviderBonoPayload?: IAgentProviderBonoPayloadTypeResolver;
    SendNotificationPayload?: ISendNotificationPayloadTypeResolver;
    MultipleNotificationPayload?: IMultipleNotificationPayloadTypeResolver;
    MultipleMemberNotificationPayload?: IMultipleMemberNotificationPayloadTypeResolver;
    MemberNotificationPayload?: IMemberNotificationPayloadTypeResolver;
    NotificationPayload?: INotificationPayloadTypeResolver;
    DevicePayload?: IDevicePayloadTypeResolver;
    SetCodeAsUnavailablePayload?: ISetCodeAsUnavailablePayloadTypeResolver;
    CreateAdminCodePayload?: ICreateAdminCodePayloadTypeResolver;
    AdminCode?: IAdminCodeTypeResolver;
    ScanCodePayload?: IScanCodePayloadTypeResolver;
    SendMessagePayload?: ISendMessagePayloadTypeResolver;
    LookForCodePayload?: ILookForCodePayloadTypeResolver;
    CreateCodePayload?: ICreateCodePayloadTypeResolver;
    CreatePrizeCategoryPayload?: ICreatePrizeCategoryPayloadTypeResolver;
    CreatePrizeCodePayload?: ICreatePrizeCodePayloadTypeResolver;
    DeleteCodePayload?: IDeleteCodePayloadTypeResolver;
    DeletePrizeCodePayload?: IDeletePrizeCodePayloadTypeResolver;
    ExchangeDotsPayload?: IExchangeDotsPayloadTypeResolver;
    CreateAdverseEventPayload?: ICreateAdverseEventPayloadTypeResolver;
    AdverseEvent?: IAdverseEventTypeResolver;
    DeleteAdverseEventPayload?: IDeleteAdverseEventPayloadTypeResolver;
    CreateBrandPayload?: ICreateBrandPayloadTypeResolver;
    Subscription?: ISubscriptionTypeResolver;
    exchange_CreateProviderPayload?: Iexchange_CreateProviderPayloadTypeResolver;
    UpdatePurchaseQuoteMutation?: IUpdatePurchaseQuoteMutationTypeResolver;
    UpdatePurchaseQuotePayload?: IUpdatePurchaseQuotePayloadTypeResolver;
    UpdateRouteMutation?: IUpdateRouteMutationTypeResolver;
    UpdateRoutePayload?: IUpdateRoutePayloadTypeResolver;
    docsreader_CreateTemplatePayload?: Idocsreader_CreateTemplatePayloadTypeResolver;
    CreateDettachedStripeSuscriptionMutation?: ICreateDettachedStripeSuscriptionMutationTypeResolver;
    CreateDettachedStripeSuscriptionPayload?: ICreateDettachedStripeSuscriptionPayloadTypeResolver;
    CreateStripeCustomerMutation?: ICreateStripeCustomerMutationTypeResolver;
    CreateStripeCustomerPayload?: ICreateStripeCustomerPayloadTypeResolver;
    StripeCustomer?: IStripeCustomerTypeResolver;
    AuthorizeDirective?: IAuthorizeDirectiveTypeResolver;
    itus_CreateOfficePayload?: Iitus_CreateOfficePayloadTypeResolver;
    Name?: GraphQLScalarType;
}
export interface IQueryTypeResolver<TParent = any> {
    listGroups?: QueryToListGroupsResolver<TParent>;
    groupById?: QueryToGroupByIdResolver<TParent>;
    currencies?: QueryToCurrenciesResolver<TParent>;
    currencyById?: QueryToCurrencyByIdResolver<TParent>;
    listNiches?: QueryToListNichesResolver<TParent>;
    listNicheServices?: QueryToListNicheServicesResolver<TParent>;
    tutorByName?: QueryToTutorByNameResolver<TParent>;
    pageManagerById?: QueryToPageManagerByIdResolver<TParent>;
    listPageManager?: QueryToListPageManagerResolver<TParent>;
    listViewManager?: QueryToListViewManagerResolver<TParent>;
    viewManagerBy?: QueryToViewManagerByResolver<TParent>;
    viewManagerById?: QueryToViewManagerByIdResolver<TParent>;
    viewBlockColumnById?: QueryToViewBlockColumnByIdResolver<TParent>;
    me?: QueryToMeResolver<TParent>;
    username?: QueryToUsernameResolver<TParent>;
    allStreams?: QueryToAllStreamsResolver<TParent>;
    meById?: QueryToMeByIdResolver<TParent>;
    meByIdPublic?: QueryToMeByIdPublicResolver<TParent>;
    referer?: QueryToRefererResolver<TParent>;
    projectByUrl?: QueryToProjectByUrlResolver<TParent>;
    countries?: QueryToCountriesResolver<TParent>;
    countriesList?: QueryToCountriesListResolver<TParent>;
    companies?: QueryToCompaniesResolver<TParent>;
    roles?: QueryToRolesResolver<TParent>;
    industries?: QueryToIndustriesResolver<TParent>;
    rolesByProject?: QueryToRolesByProjectResolver<TParent>;
    members?: QueryToMembersResolver<TParent>;
    memberById?: QueryToMemberByIdResolver<TParent>;
    deleteMyMembers?: QueryToDeleteMyMembersResolver<TParent>;
    membersByProject?: QueryToMembersByProjectResolver<TParent>;
    countryByCode?: QueryToCountryByCodeResolver<TParent>;
    listUsers?: QueryToListUsersResolver<TParent>;
    listIsMemberInSpace?: QueryToListIsMemberInSpaceResolver<TParent>;
    listIsMemberInBoard?: QueryToListIsMemberInBoardResolver<TParent>;
    listUsersLazyLoad?: QueryToListUsersLazyLoadResolver<TParent>;
    listUsersPublic?: QueryToListUsersPublicResolver<TParent>;
    projectsInfinite?: QueryToProjectsInfiniteResolver<TParent>;
    projects?: QueryToProjectsResolver<TParent>;
    projectById?: QueryToProjectByIdResolver<TParent>;
    projectByIdPublic?: QueryToProjectByIdPublicResolver<TParent>;
    conversationMemberBy?: QueryToConversationMemberByResolver<TParent>;
    memberNameBy?: QueryToMemberNameByResolver<TParent>;
    userById?: QueryToUserByIdResolver<TParent>;
    customMemberById?: QueryToCustomMemberByIdResolver<TParent>;
    plans?: QueryToPlansResolver<TParent>;
    planById?: QueryToPlanByIdResolver<TParent>;
    projectSocialNetworksByProjectId?: QueryToProjectSocialNetworksByProjectIdResolver<TParent>;
    recommendedProjects?: QueryToRecommendedProjectsResolver<TParent>;
    publicProjects?: QueryToPublicProjectsResolver<TParent>;
    listMemberRelations?: QueryToListMemberRelationsResolver<TParent>;
    memberRelationById?: QueryToMemberRelationByIdResolver<TParent>;
    projectTemplateById?: QueryToProjectTemplateByIdResolver<TParent>;
    projectTemplatesByProjectId?: QueryToProjectTemplatesByProjectIdResolver<TParent>;
    projectTemplates?: QueryToProjectTemplatesResolver<TParent>;
    countryById?: QueryToCountryByIdResolver<TParent>;
    columnTabs?: QueryToColumnTabsResolver<TParent>;
    columnTabsById?: QueryToColumnTabsByIdResolver<TParent>;
    rankingSeller?: QueryToRankingSellerResolver<TParent>;
    ranking?: QueryToRankingResolver<TParent>;
    sellByNominatorAndProspectId?: QueryToSellByNominatorAndProspectIdResolver<TParent>;
    nominatorSellById?: QueryToNominatorSellByIdResolver<TParent>;
    nominatorSellByMemberRelationId?: QueryToNominatorSellByMemberRelationIdResolver<TParent>;
    listNominatorSells?: QueryToListNominatorSellsResolver<TParent>;
    nominatorStat?: QueryToNominatorStatResolver<TParent>;
    sellStats?: QueryToSellStatsResolver<TParent>;
    sellById?: QueryToSellByIdResolver<TParent>;
    memberIndustries?: QueryToMemberIndustriesResolver<TParent>;
    memberIndustryById?: QueryToMemberIndustryByIdResolver<TParent>;
    stadisticsLogin?: QueryToStadisticsLoginResolver<TParent>;
    allStadisticsLogin?: QueryToAllStadisticsLoginResolver<TParent>;
    stadisticsLProjectsByCompany?: QueryToStadisticsLProjectsByCompanyResolver<TParent>;
    listMembersByBusinessId?: QueryToListMembersByBusinessIdResolver<TParent>;
    projectRoleById?: QueryToProjectRoleByIdResolver<TParent>;
    fAQs?: QueryToFAQsResolver<TParent>;
    topicDiseases?: QueryToTopicDiseasesResolver<TParent>;
    listInsuranceForms?: QueryToListInsuranceFormsResolver<TParent>;
    insuranceFormById?: QueryToInsuranceFormByIdResolver<TParent>;
    topicDiseaseById?: QueryToTopicDiseaseByIdResolver<TParent>;
    resultByMemberId?: QueryToResultByMemberIdResolver<TParent>;
    results?: QueryToResultsResolver<TParent>;
    answers?: QueryToAnswersResolver<TParent>;
    articles?: QueryToArticlesResolver<TParent>;
    listArticles?: QueryToListArticlesResolver<TParent>;
    fullArticles?: QueryToFullArticlesResolver<TParent>;
    listAddresses?: QueryToListAddressesResolver<TParent>;
    taxonomyById?: QueryToTaxonomyByIdResolver<TParent>;
    taxonomyBySlug?: QueryToTaxonomyBySlugResolver<TParent>;
    taxonomyBySlugProject?: QueryToTaxonomyBySlugProjectResolver<TParent>;
    listProducts?: QueryToListProductsResolver<TParent>;
    fullProducts?: QueryToFullProductsResolver<TParent>;
    taxonomiesByProject?: QueryToTaxonomiesByProjectResolver<TParent>;
    fullTaxonomies?: QueryToFullTaxonomiesResolver<TParent>;
    surveysByArticleId?: QueryToSurveysByArticleIdResolver<TParent>;
    shopById?: QueryToShopByIdResolver<TParent>;
    articleById?: QueryToArticleByIdResolver<TParent>;
    seoBySlug?: QueryToSeoBySlugResolver<TParent>;
    articleBySlug?: QueryToArticleBySlugResolver<TParent>;
    articleBySlugProject?: QueryToArticleBySlugProjectResolver<TParent>;
    productById?: QueryToProductByIdResolver<TParent>;
    courseById?: QueryToCourseByIdResolver<TParent>;
    coursesByProjectId?: QueryToCoursesByProjectIdResolver<TParent>;
    courseTaxonomiesByProjectId?: QueryToCourseTaxonomiesByProjectIdResolver<TParent>;
    coursesByTaxonomyId?: QueryToCoursesByTaxonomyIdResolver<TParent>;
    storeStocks?: QueryToStoreStocksResolver<TParent>;
    storeStocksByStoreId?: QueryToStoreStocksByStoreIdResolver<TParent>;
    storeTransfersByStoreId?: QueryToStoreTransfersByStoreIdResolver<TParent>;
    coursesByTaxonomyAndModality?: QueryToCoursesByTaxonomyAndModalityResolver<TParent>;
    productBySlug?: QueryToProductBySlugResolver<TParent>;
    productsBySlug?: QueryToProductsBySlugResolver<TParent>;
    productBySlugProject?: QueryToProductBySlugProjectResolver<TParent>;
    branchOfficesByIds?: QueryToBranchOfficesByIdsResolver<TParent>;
    productByIdResolver?: QueryToProductByIdResolverResolver<TParent>;
    addressById?: QueryToAddressByIdResolver<TParent>;
    branchOffices?: QueryToBranchOfficesResolver<TParent>;
    storeById?: QueryToStoreByIdResolver<TParent>;
    managers?: QueryToManagersResolver<TParent>;
    purchases?: QueryToPurchasesResolver<TParent>;
    productPurchases?: QueryToProductPurchasesResolver<TParent>;
    stores?: QueryToStoresResolver<TParent>;
    productPurchasesByPurchaseId?: QueryToProductPurchasesByPurchaseIdResolver<TParent>;
    managerByBranchOfficeId?: QueryToManagerByBranchOfficeIdResolver<TParent>;
    productProviders?: QueryToProductProvidersResolver<TParent>;
    purchaseById?: QueryToPurchaseByIdResolver<TParent>;
    branchOfficeById?: QueryToBranchOfficeByIdResolver<TParent>;
    storeTransferById?: QueryToStoreTransferByIdResolver<TParent>;
    storeStockByStoreIdAndProductId?: QueryToStoreStockByStoreIdAndProductIdResolver<TParent>;
    storeTransfers?: QueryToStoreTransfersResolver<TParent>;
    drugs?: QueryToDrugsResolver<TParent>;
    carriers?: QueryToCarriersResolver<TParent>;
    groups?: QueryToGroupsResolver<TParent>;
    pharmacyRadiusPricing?: QueryToPharmacyRadiusPricingResolver<TParent>;
    pharmaciesByZipCode?: QueryToPharmaciesByZipCodeResolver<TParent>;
    searchMembers?: QueryToSearchMembersResolver<TParent>;
    productsByNameAndZipCode?: QueryToProductsByNameAndZipCodeResolver<TParent>;
    transactions?: QueryToTransactionsResolver<TParent>;
    pricings?: QueryToPricingsResolver<TParent>;
    menus?: QueryToMenusResolver<TParent>;
    bbotRestaurants?: QueryToBbotRestaurantsResolver<TParent>;
    listByMemberId?: QueryToListByMemberIdResolver<TParent>;
    legalTerms?: QueryToLegalTermsResolver<TParent>;
    legalTermById?: QueryToLegalTermByIdResolver<TParent>;
    increaseLegalTermCounter?: QueryToIncreaseLegalTermCounterResolver<TParent>;
    stockAlerts?: QueryToStockAlertsResolver<TParent>;
    stockAlertById?: QueryToStockAlertByIdResolver<TParent>;
    stockAlertByProductId?: QueryToStockAlertByProductIdResolver<TParent>;
    purchaseQuoteById?: QueryToPurchaseQuoteByIdResolver<TParent>;
    purchaseQuotes?: QueryToPurchaseQuotesResolver<TParent>;
    taxes?: QueryToTaxesResolver<TParent>;
    productSells?: QueryToProductSellsResolver<TParent>;
    productSellById?: QueryToProductSellByIdResolver<TParent>;
    listRoutes?: QueryToListRoutesResolver<TParent>;
    routes?: QueryToRoutesResolver<TParent>;
    routeById?: QueryToRouteByIdResolver<TParent>;
    services?: QueryToServicesResolver<TParent>;
    fixUpdateNameService?: QueryToFixUpdateNameServiceResolver<TParent>;
    servicesByProject?: QueryToServicesByProjectResolver<TParent>;
    microServiceByCodeName?: QueryToMicroServiceByCodeNameResolver<TParent>;
    endOfDay?: QueryToEndOfDayResolver<TParent>;
    startOfDay?: QueryToStartOfDayResolver<TParent>;
    listSchedules?: QueryToListSchedulesResolver<TParent>;
    scheduleManagerByEventType?: QueryToScheduleManagerByEventTypeResolver<TParent>;
    availableEvents?: QueryToAvailableEventsResolver<TParent>;
    myEvents?: QueryToMyEventsResolver<TParent>;
    events?: QueryToEventsResolver<TParent>;
    filteredEvents?: QueryToFilteredEventsResolver<TParent>;
    currentDate?: QueryToCurrentDateResolver<TParent>;
    eventTypes?: QueryToEventTypesResolver<TParent>;
    subEventTypes?: QueryToSubEventTypesResolver<TParent>;
    eventById?: QueryToEventByIdResolver<TParent>;
    localTime?: QueryToLocalTimeResolver<TParent>;
    nextEvent?: QueryToNextEventResolver<TParent>;
    nextEventMembers?: QueryToNextEventMembersResolver<TParent>;
    membersEvents?: QueryToMembersEventsResolver<TParent>;
    associatedEvents?: QueryToAssociatedEventsResolver<TParent>;
    listHiring?: QueryToListHiringResolver<TParent>;
    listHiringType?: QueryToListHiringTypeResolver<TParent>;
    listShift?: QueryToListShiftResolver<TParent>;
    listDays?: QueryToListDaysResolver<TParent>;
    listResourceQuotes?: QueryToListResourceQuotesResolver<TParent>;
    resourceQuoteById?: QueryToResourceQuoteByIdResolver<TParent>;
    listResourceQuoteDetails?: QueryToListResourceQuoteDetailsResolver<TParent>;
    listProposal?: QueryToListProposalResolver<TParent>;
    proposalById?: QueryToProposalByIdResolver<TParent>;
    listCollaborators?: QueryToListCollaboratorsResolver<TParent>;
    listCollaboratorHours?: QueryToListCollaboratorHoursResolver<TParent>;
    housReportedProject?: QueryToHousReportedProjectResolver<TParent>;
    listEnumHiringType?: QueryToListEnumHiringTypeResolver<TParent>;
    hiringByMemberId?: QueryToHiringByMemberIdResolver<TParent>;
    shiftByMemberId?: QueryToShiftByMemberIdResolver<TParent>;
    resourceQuotesByMemberId?: QueryToResourceQuotesByMemberIdResolver<TParent>;
    collaboratorsByMemberId?: QueryToCollaboratorsByMemberIdResolver<TParent>;
    hiringServicesByServiceAreaId?: QueryToHiringServicesByServiceAreaIdResolver<TParent>;
    configs?: QueryToConfigsResolver<TParent>;
    configurationTemplateById?: QueryToConfigurationTemplateByIdResolver<TParent>;
    listComponents?: QueryToListComponentsResolver<TParent>;
    listWebsitePages?: QueryToListWebsitePagesResolver<TParent>;
    webSitePageById?: QueryToWebSitePageByIdResolver<TParent>;
    websitePageComponentById?: QueryToWebsitePageComponentByIdResolver<TParent>;
    listProjectPlanSubscriptions?: QueryToListProjectPlanSubscriptionsResolver<TParent>;
    projectPlanSubscriptionByMemberId?: QueryToProjectPlanSubscriptionByMemberIdResolver<TParent>;
    projectPlanSubscriptionsByMemberId?: QueryToProjectPlanSubscriptionsByMemberIdResolver<TParent>;
    listBusinesses?: QueryToListBusinessesResolver<TParent>;
    businesses?: QueryToBusinessesResolver<TParent>;
    businessTypes?: QueryToBusinessTypesResolver<TParent>;
    businessRules?: QueryToBusinessRulesResolver<TParent>;
    businessRuleById?: QueryToBusinessRuleByIdResolver<TParent>;
    businessTypeById?: QueryToBusinessTypeByIdResolver<TParent>;
    businessById?: QueryToBusinessByIdResolver<TParent>;
    listProjectPlans?: QueryToListProjectPlansResolver<TParent>;
    projectPlans?: QueryToProjectPlansResolver<TParent>;
    projectPlanById?: QueryToProjectPlanByIdResolver<TParent>;
    websitePageBySlug?: QueryToWebsitePageBySlugResolver<TParent>;
    listTemplates?: QueryToListTemplatesResolver<TParent>;
    templateById?: QueryToTemplateByIdResolver<TParent>;
    errorPages?: QueryToErrorPagesResolver<TParent>;
    errorPageById?: QueryToErrorPageByIdResolver<TParent>;
    errorPageValidations?: QueryToErrorPageValidationsResolver<TParent>;
    errorPageValidationById?: QueryToErrorPageValidationByIdResolver<TParent>;
    couponById?: QueryToCouponByIdResolver<TParent>;
    coupons?: QueryToCouponsResolver<TParent>;
    couponTemplates?: QueryToCouponTemplatesResolver<TParent>;
    listDocumentCategory?: QueryToListDocumentCategoryResolver<TParent>;
    listDocumentCategoryDetail?: QueryToListDocumentCategoryDetailResolver<TParent>;
    listDocument?: QueryToListDocumentResolver<TParent>;
    listDocumentTemplate?: QueryToListDocumentTemplateResolver<TParent>;
    listTemplatePage?: QueryToListTemplatePageResolver<TParent>;
    listDocumentTag?: QueryToListDocumentTagResolver<TParent>;
    listDocumentScan?: QueryToListDocumentScanResolver<TParent>;
    listDocumentRead?: QueryToListDocumentReadResolver<TParent>;
    verifyUserRoom?: QueryToVerifyUserRoomResolver<TParent>;
    verifyVideoRoom?: QueryToVerifyVideoRoomResolver<TParent>;
    roomTokenLiveKit2?: QueryToRoomTokenLiveKit2Resolver<TParent>;
    roomTokenLiveKit3?: QueryToRoomTokenLiveKit3Resolver<TParent>;
    startRecordRoom2?: QueryToStartRecordRoom2Resolver<TParent>;
    videoCalls?: QueryToVideoCallsResolver<TParent>;
    listVideoRooms?: QueryToListVideoRoomsResolver<TParent>;
    listRoomRecords?: QueryToListRoomRecordsResolver<TParent>;
    roomRecord?: QueryToRoomRecordResolver<TParent>;
    videoCallsByMember?: QueryToVideoCallsByMemberResolver<TParent>;
    videoCallById?: QueryToVideoCallByIdResolver<TParent>;
    videoCallBySessionId?: QueryToVideoCallBySessionIdResolver<TParent>;
    contactEmails?: QueryToContactEmailsResolver<TParent>;
    listServiceArea?: QueryToListServiceAreaResolver<TParent>;
    listArea?: QueryToListAreaResolver<TParent>;
    listServiceQuiz?: QueryToListServiceQuizResolver<TParent>;
    listQuiz?: QueryToListQuizResolver<TParent>;
    listQuizSection?: QueryToListQuizSectionResolver<TParent>;
    listQuizQuestion?: QueryToListQuizQuestionResolver<TParent>;
    listQuizQuestionAnswer?: QueryToListQuizQuestionAnswerResolver<TParent>;
    listQuizAnswer?: QueryToListQuizAnswerResolver<TParent>;
    listQuizMember?: QueryToListQuizMemberResolver<TParent>;
    listQuizMemberGrouped?: QueryToListQuizMemberGroupedResolver<TParent>;
    listQuizQuestionMember?: QueryToListQuizQuestionMemberResolver<TParent>;
    listQuizMemberAnswer?: QueryToListQuizMemberAnswerResolver<TParent>;
    listQuizMemberDescription?: QueryToListQuizMemberDescriptionResolver<TParent>;
    serviceAreaById?: QueryToServiceAreaByIdResolver<TParent>;
    areaById?: QueryToAreaByIdResolver<TParent>;
    serviceAreaMemberByMemberId?: QueryToServiceAreaMemberByMemberIdResolver<TParent>;
    catalogAarco?: QueryToCatalogAarcoResolver<TParent>;
    quotationByIdPeticionAarco?: QueryToQuotationByIdPeticionAarcoResolver<TParent>;
    coverageAarco?: QueryToCoverageAarcoResolver<TParent>;
    payment_transactions?: QueryToPayment_transactionsResolver<TParent>;
    methodPayments?: QueryToMethodPaymentsResolver<TParent>;
    plan?: QueryToPlanResolver<TParent>;
    listInvoices?: QueryToListInvoicesResolver<TParent>;
    invoiceById?: QueryToInvoiceByIdResolver<TParent>;
    listInvoiceAddress?: QueryToListInvoiceAddressResolver<TParent>;
    listInvoiceDetailProduct?: QueryToListInvoiceDetailProductResolver<TParent>;
    invoicesByMemberId?: QueryToInvoicesByMemberIdResolver<TParent>;
    customerSuscriptions?: QueryToCustomerSuscriptionsResolver<TParent>;
    productStripeByProductId?: QueryToProductStripeByProductIdResolver<TParent>;
    planByProductId?: QueryToPlanByProductIdResolver<TParent>;
    listAccountKey?: QueryToListAccountKeyResolver<TParent>;
    accountKeysByMemberId?: QueryToAccountKeysByMemberIdResolver<TParent>;
    paymentMethodByMemberId?: QueryToPaymentMethodByMemberIdResolver<TParent>;
    memberWithStripePaymentMethod?: QueryToMemberWithStripePaymentMethodResolver<TParent>;
    methodPaymentById?: QueryToMethodPaymentByIdResolver<TParent>;
    subscriptionStatus?: QueryToSubscriptionStatusResolver<TParent>;
    paymentMethodsStripe?: QueryToPaymentMethodsStripeResolver<TParent>;
    vehiclesCarcatalogHdiCodeYearsCarId?: QueryToVehiclesCarcatalogHdiCodeYearsCarIdResolver<TParent>;
    vehiclesCarcatalogMapfreeCodeYearsCarId?: QueryToVehiclesCarcatalogMapfreeCodeYearsCarIdResolver<TParent>;
    vehiclesCarcatalogQualitasCodeYearsCarId?: QueryToVehiclesCarcatalogQualitasCodeYearsCarIdResolver<TParent>;
    vehiclesCarcatalogZurichCodeYearsCarId?: QueryToVehiclesCarcatalogZurichCodeYearsCarIdResolver<TParent>;
    quoteCoverages?: QueryToQuoteCoveragesResolver<TParent>;
    quoteCoverageById?: QueryToQuoteCoverageByIdResolver<TParent>;
    listStaffQuote?: QueryToListStaffQuoteResolver<TParent>;
    multiquoter_listProposal?: QueryToMultiquoter_listProposalResolver<TParent>;
    listCollaborator?: QueryToListCollaboratorResolver<TParent>;
    coverageByProject?: QueryToCoverageByProjectResolver<TParent>;
    packages?: QueryToPackagesResolver<TParent>;
    coverages?: QueryToCoveragesResolver<TParent>;
    runServiceQuoteFetch?: QueryToRunServiceQuoteFetchResolver<TParent>;
    stadistics?: QueryToStadisticsResolver<TParent>;
    stadisticsQualitas?: QueryToStadisticsQualitasResolver<TParent>;
    listRQuoterProfilesByProjectId?: QueryToListRQuoterProfilesByProjectIdResolver<TParent>;
    listRQuoterProfilesInsurerByProjectId?: QueryToListRQuoterProfilesInsurerByProjectIdResolver<TParent>;
    homologated?: QueryToHomologatedResolver<TParent>;
    listInsurerServiceCredentials?: QueryToListInsurerServiceCredentialsResolver<TParent>;
    listInsurerService?: QueryToListInsurerServiceResolver<TParent>;
    listInsurerService2?: QueryToListInsurerService2Resolver<TParent>;
    listRelations?: QueryToListRelationsResolver<TParent>;
    quotes?: QueryToQuotesResolver<TParent>;
    listQuotesAlt?: QueryToListQuotesAltResolver<TParent>;
    listQuotes?: QueryToListQuotesResolver<TParent>;
    quotesByMember?: QueryToQuotesByMemberResolver<TParent>;
    listRegistrations?: QueryToListRegistrationsResolver<TParent>;
    quoteById?: QueryToQuoteByIdResolver<TParent>;
    listQuoteServices?: QueryToListQuoteServicesResolver<TParent>;
    listGenders?: QueryToListGendersResolver<TParent>;
    listCars?: QueryToListCarsResolver<TParent>;
    listCarType?: QueryToListCarTypeResolver<TParent>;
    listCarBrand?: QueryToListCarBrandResolver<TParent>;
    listCarSuBbrand?: QueryToListCarSuBbrandResolver<TParent>;
    listModel?: QueryToListModelResolver<TParent>;
    car?: QueryToCarResolver<TParent>;
    relationCars?: QueryToRelationCarsResolver<TParent>;
    colony?: QueryToColonyResolver<TParent>;
    listCoverages?: QueryToListCoveragesResolver<TParent>;
    catalogById?: QueryToCatalogByIdResolver<TParent>;
    catalogs?: QueryToCatalogsResolver<TParent>;
    catalogByYears?: QueryToCatalogByYearsResolver<TParent>;
    insurers?: QueryToInsurersResolver<TParent>;
    offices?: QueryToOfficesResolver<TParent>;
    quatorProfiles?: QueryToQuatorProfilesResolver<TParent>;
    quoterProfileById?: QueryToQuoterProfileByIdResolver<TParent>;
    vehiclesCarCatalogAbas?: QueryToVehiclesCarCatalogAbasResolver<TParent>;
    vehiclesCarCatalogAbasByBrand?: QueryToVehiclesCarCatalogAbasByBrandResolver<TParent>;
    vehiclesCarCatalogAbasBySubBrand?: QueryToVehiclesCarCatalogAbasBySubBrandResolver<TParent>;
    vehiclesCarCatalogAfirme?: QueryToVehiclesCarCatalogAfirmeResolver<TParent>;
    vehiclesCarCatalogAfirmebyBrand?: QueryToVehiclesCarCatalogAfirmebyBrandResolver<TParent>;
    vehiclesCarCatalogAfirmebySubrand?: QueryToVehiclesCarCatalogAfirmebySubrandResolver<TParent>;
    vehiclesCarCatalogAig?: QueryToVehiclesCarCatalogAigResolver<TParent>;
    vehiclesCarCatalogAigByBrand?: QueryToVehiclesCarCatalogAigByBrandResolver<TParent>;
    vehiclesCarCatalogAigBySubBrand?: QueryToVehiclesCarCatalogAigBySubBrandResolver<TParent>;
    vehiclesCarCatalogAnas?: QueryToVehiclesCarCatalogAnasResolver<TParent>;
    vehiclesCarCatalogAnasByBrand?: QueryToVehiclesCarCatalogAnasByBrandResolver<TParent>;
    vehiclesCarCatalogAnasbySubbrand?: QueryToVehiclesCarCatalogAnasbySubbrandResolver<TParent>;
    vehiclesAtlas?: QueryToVehiclesAtlasResolver<TParent>;
    vehiclesAtlasByBrand?: QueryToVehiclesAtlasByBrandResolver<TParent>;
    vehiclesAtlasBySubbrand?: QueryToVehiclesAtlasBySubbrandResolver<TParent>;
    vehiclesAxa?: QueryToVehiclesAxaResolver<TParent>;
    vehiclesAxaByBrand?: QueryToVehiclesAxaByBrandResolver<TParent>;
    vehiclesAxaBySubbrand?: QueryToVehiclesAxaBySubbrandResolver<TParent>;
    vehiclesBanorte?: QueryToVehiclesBanorteResolver<TParent>;
    vehiclesBanorteByBrand?: QueryToVehiclesBanorteByBrandResolver<TParent>;
    vehiclesBanorteBySubbrand?: QueryToVehiclesBanorteBySubbrandResolver<TParent>;
    vehiclesGrip?: QueryToVehiclesGripResolver<TParent>;
    vehiclesGripByBrand?: QueryToVehiclesGripByBrandResolver<TParent>;
    vehiclesGripBySubbrand?: QueryToVehiclesGripBySubbrandResolver<TParent>;
    vehiclesHdi?: QueryToVehiclesHdiResolver<TParent>;
    vehiclesHdiByBrand?: QueryToVehiclesHdiByBrandResolver<TParent>;
    vehiclesHdiBySubbrand?: QueryToVehiclesHdiBySubbrandResolver<TParent>;
    vehiclesMapfree?: QueryToVehiclesMapfreeResolver<TParent>;
    vehiclesMapfreeByBrand?: QueryToVehiclesMapfreeByBrandResolver<TParent>;
    vehiclesMapfreeBySubbrand?: QueryToVehiclesMapfreeBySubbrandResolver<TParent>;
    vehiclesP?: QueryToVehiclesPResolver<TParent>;
    vehiclesPByBrand?: QueryToVehiclesPByBrandResolver<TParent>;
    vehiclesPBySubbrand?: QueryToVehiclesPBySubbrandResolver<TParent>;
    vehiclesPotosi?: QueryToVehiclesPotosiResolver<TParent>;
    vehiclesPotosiByBrand?: QueryToVehiclesPotosiByBrandResolver<TParent>;
    vehiclesPotosiBySubbrand?: QueryToVehiclesPotosiBySubbrandResolver<TParent>;
    vehiclesQualitas?: QueryToVehiclesQualitasResolver<TParent>;
    vehiclesQualitasByBrand?: QueryToVehiclesQualitasByBrandResolver<TParent>;
    vehiclesQualitasBySubbrand?: QueryToVehiclesQualitasBySubbrandResolver<TParent>;
    vehiclesZurich?: QueryToVehiclesZurichResolver<TParent>;
    vehiclesZurichByBrand?: QueryToVehiclesZurichByBrandResolver<TParent>;
    vehiclesZurichBySubbrand?: QueryToVehiclesZurichBySubbrandResolver<TParent>;
    vehiclesCarcatalogAbaCodeYearsCarId?: QueryToVehiclesCarcatalogAbaCodeYearsCarIdResolver<TParent>;
    vehiclesCarcatalogAfirmeCodeYearsCarId?: QueryToVehiclesCarcatalogAfirmeCodeYearsCarIdResolver<TParent>;
    vehiclesCarcatalogAxaCodeYearsCarId?: QueryToVehiclesCarcatalogAxaCodeYearsCarIdResolver<TParent>;
    vehiclesCarcatalogAtlasCodeYearsCarId?: QueryToVehiclesCarcatalogAtlasCodeYearsCarIdResolver<TParent>;
    vehiclesCarcatalogBanorteCodeYearsCarId?: QueryToVehiclesCarcatalogBanorteCodeYearsCarIdResolver<TParent>;
    vehiclesCarcatalogGnpCodeYearsCarId?: QueryToVehiclesCarcatalogGnpCodeYearsCarIdResolver<TParent>;
    apiServices?: QueryToApiServicesResolver<TParent>;
    apiServiceBySecretAndProjectId?: QueryToApiServiceBySecretAndProjectIdResolver<TParent>;
    listDynamicPage?: QueryToListDynamicPageResolver<TParent>;
    listDynamicBlock?: QueryToListDynamicBlockResolver<TParent>;
    listDynamicSection?: QueryToListDynamicSectionResolver<TParent>;
    listDynamicTab?: QueryToListDynamicTabResolver<TParent>;
    listDynamicSectionBlock?: QueryToListDynamicSectionBlockResolver<TParent>;
    listDynamicCustomMeta?: QueryToListDynamicCustomMetaResolver<TParent>;
    listDynamicCustomValue?: QueryToListDynamicCustomValueResolver<TParent>;
    listCharges?: QueryToListChargesResolver<TParent>;
    listClinicHistory?: QueryToListClinicHistoryResolver<TParent>;
    listConsult?: QueryToListConsultResolver<TParent>;
    listFisicExam?: QueryToListFisicExamResolver<TParent>;
    listMedicalBackgrounds?: QueryToListMedicalBackgroundsResolver<TParent>;
    listMedicBackgroundDetails?: QueryToListMedicBackgroundDetailsResolver<TParent>;
    listClinicHistory_MedicalBackgroundDetails?: QueryToListClinicHistory_MedicalBackgroundDetailsResolver<TParent>;
    listMedicines?: QueryToListMedicinesResolver<TParent>;
    listMedicalServices?: QueryToListMedicalServicesResolver<TParent>;
    listVaccines?: QueryToListVaccinesResolver<TParent>;
    listVitalSigns?: QueryToListVitalSignsResolver<TParent>;
    listMedicalConfigs?: QueryToListMedicalConfigsResolver<TParent>;
    listRegistSesions?: QueryToListRegistSesionsResolver<TParent>;
    listTherapy?: QueryToListTherapyResolver<TParent>;
    listRecipeConfig?: QueryToListRecipeConfigResolver<TParent>;
    listMedicRecipe?: QueryToListMedicRecipeResolver<TParent>;
    listConsultNotes?: QueryToListConsultNotesResolver<TParent>;
    listPacientNote?: QueryToListPacientNoteResolver<TParent>;
    listDiagnostic?: QueryToListDiagnosticResolver<TParent>;
    listPacientMedicalBackground?: QueryToListPacientMedicalBackgroundResolver<TParent>;
    listBillingRequests?: QueryToListBillingRequestsResolver<TParent>;
    listFormats?: QueryToListFormatsResolver<TParent>;
    listPatientResponses?: QueryToListPatientResponsesResolver<TParent>;
    medicalBackgroundsByFormatId?: QueryToMedicalBackgroundsByFormatIdResolver<TParent>;
    consultInfo?: QueryToConsultInfoResolver<TParent>;
    listChagesForPacient?: QueryToListChagesForPacientResolver<TParent>;
    listPacientMedicalBackgroundById?: QueryToListPacientMedicalBackgroundByIdResolver<TParent>;
    listEventDetailsByMemberId?: QueryToListEventDetailsByMemberIdResolver<TParent>;
    listFisicExamsByMemberId?: QueryToListFisicExamsByMemberIdResolver<TParent>;
    listMedicalBackgroundByMemberId?: QueryToListMedicalBackgroundByMemberIdResolver<TParent>;
    listMedicRecipesByMemberId?: QueryToListMedicRecipesByMemberIdResolver<TParent>;
    listPatientNotesByMemberId?: QueryToListPatientNotesByMemberIdResolver<TParent>;
    listVitalSignsByMemberId?: QueryToListVitalSignsByMemberIdResolver<TParent>;
    listVaccinesByMemberId?: QueryToListVaccinesByMemberIdResolver<TParent>;
    listDiagnosticByEventId?: QueryToListDiagnosticByEventIdResolver<TParent>;
    listEnumInsideType?: QueryToListEnumInsideTypeResolver<TParent>;
    listSpace?: QueryToListSpaceResolver<TParent>;
    listBoardStatus?: QueryToListBoardStatusResolver<TParent>;
    listBoard?: QueryToListBoardResolver<TParent>;
    listBoardList?: QueryToListBoardListResolver<TParent>;
    listCardReply?: QueryToListCardReplyResolver<TParent>;
    listCard?: QueryToListCardResolver<TParent>;
    listNestedFiles?: QueryToListNestedFilesResolver<TParent>;
    listMemberCard?: QueryToListMemberCardResolver<TParent>;
    listMemberBoard?: QueryToListMemberBoardResolver<TParent>;
    listMemberSpace?: QueryToListMemberSpaceResolver<TParent>;
    listMemberSpaceOnValue?: QueryToListMemberSpaceOnValueResolver<TParent>;
    listMemberSpaceOnCard?: QueryToListMemberSpaceOnCardResolver<TParent>;
    listMemberBoardOnValue?: QueryToListMemberBoardOnValueResolver<TParent>;
    listMemberBoardOnCard?: QueryToListMemberBoardOnCardResolver<TParent>;
    listBoardColumnTypes?: QueryToListBoardColumnTypesResolver<TParent>;
    listMemberSpaceAccess?: QueryToListMemberSpaceAccessResolver<TParent>;
    listCardColumnValue?: QueryToListCardColumnValueResolver<TParent>;
    listBoardMemberReference?: QueryToListBoardMemberReferenceResolver<TParent>;
    memberBoardByMember?: QueryToMemberBoardByMemberResolver<TParent>;
    memberSpaceByMember?: QueryToMemberSpaceByMemberResolver<TParent>;
    isMembersInspace?: QueryToIsMembersInspaceResolver<TParent>;
    isMembersInBoard?: QueryToIsMembersInBoardResolver<TParent>;
    attributeById?: QueryToAttributeByIdResolver<TParent>;
    attributeValueById?: QueryToAttributeValueByIdResolver<TParent>;
    buildingSiteAddressById?: QueryToBuildingSiteAddressByIdResolver<TParent>;
    customerById?: QueryToCustomerByIdResolver<TParent>;
    madreQuotationById?: QueryToMadreQuotationByIdResolver<TParent>;
    materialById?: QueryToMaterialByIdResolver<TParent>;
    materialCategoryById?: QueryToMaterialCategoryByIdResolver<TParent>;
    materialCombinationById?: QueryToMaterialCombinationByIdResolver<TParent>;
    materialCombinationAttributeById?: QueryToMaterialCombinationAttributeByIdResolver<TParent>;
    materialModuleById?: QueryToMaterialModuleByIdResolver<TParent>;
    materialQuotationById?: QueryToMaterialQuotationByIdResolver<TParent>;
    materialStockById?: QueryToMaterialStockByIdResolver<TParent>;
    materialStockMeasureById?: QueryToMaterialStockMeasureByIdResolver<TParent>;
    materialVariableModuleById?: QueryToMaterialVariableModuleByIdResolver<TParent>;
    materialVariableQuotationById?: QueryToMaterialVariableQuotationByIdResolver<TParent>;
    measureById?: QueryToMeasureByIdResolver<TParent>;
    measureUnityById?: QueryToMeasureUnityByIdResolver<TParent>;
    measureUnityTwoById?: QueryToMeasureUnityTwoByIdResolver<TParent>;
    measureValueById?: QueryToMeasureValueByIdResolver<TParent>;
    moduleById?: QueryToModuleByIdResolver<TParent>;
    moduleCategoryById?: QueryToModuleCategoryByIdResolver<TParent>;
    quotationById?: QueryToQuotationByIdResolver<TParent>;
    quotationModuleById?: QueryToQuotationModuleByIdResolver<TParent>;
    userCustomerByMemberId?: QueryToUserCustomerByMemberIdResolver<TParent>;
    variableById?: QueryToVariableByIdResolver<TParent>;
    attributes?: QueryToAttributesResolver<TParent>;
    attributeValues?: QueryToAttributeValuesResolver<TParent>;
    buildingSiteAddresses?: QueryToBuildingSiteAddressesResolver<TParent>;
    customers?: QueryToCustomersResolver<TParent>;
    madreQuotations?: QueryToMadreQuotationsResolver<TParent>;
    materials?: QueryToMaterialsResolver<TParent>;
    materialCategories?: QueryToMaterialCategoriesResolver<TParent>;
    materialCombinations?: QueryToMaterialCombinationsResolver<TParent>;
    materialCombinationAttributes?: QueryToMaterialCombinationAttributesResolver<TParent>;
    materialModules?: QueryToMaterialModulesResolver<TParent>;
    materialQuotations?: QueryToMaterialQuotationsResolver<TParent>;
    materialStocks?: QueryToMaterialStocksResolver<TParent>;
    materialStockMeasures?: QueryToMaterialStockMeasuresResolver<TParent>;
    materialVariableModules?: QueryToMaterialVariableModulesResolver<TParent>;
    materialVariableQuotations?: QueryToMaterialVariableQuotationsResolver<TParent>;
    measures?: QueryToMeasuresResolver<TParent>;
    measureUnities?: QueryToMeasureUnitiesResolver<TParent>;
    measureUnityTwos?: QueryToMeasureUnityTwosResolver<TParent>;
    measureValues?: QueryToMeasureValuesResolver<TParent>;
    modules?: QueryToModulesResolver<TParent>;
    moduleCategories?: QueryToModuleCategoriesResolver<TParent>;
    quotations?: QueryToQuotationsResolver<TParent>;
    quotationModules?: QueryToQuotationModulesResolver<TParent>;
    variables?: QueryToVariablesResolver<TParent>;
    brandHermer?: QueryToBrandHermerResolver<TParent>;
    modelsHermer?: QueryToModelsHermerResolver<TParent>;
    yearHermer?: QueryToYearHermerResolver<TParent>;
    modelLobato?: QueryToModelLobatoResolver<TParent>;
    modelsMercadoLibre?: QueryToModelsMercadoLibreResolver<TParent>;
    listConsultHermer?: QueryToListConsultHermerResolver<TParent>;
    listConsultAllHermer?: QueryToListConsultAllHermerResolver<TParent>;
    listConsultLastAnalysisHermer?: QueryToListConsultLastAnalysisHermerResolver<TParent>;
    getConsultHermer?: QueryToGetConsultHermerResolver<TParent>;
    downloadFile?: QueryToDownloadFileResolver<TParent>;
    listFolders?: QueryToListFoldersResolver<TParent>;
    foldersList?: QueryToFoldersListResolver<TParent>;
    folderAllowedMembers?: QueryToFolderAllowedMembersResolver<TParent>;
    fileAllowedMembers?: QueryToFileAllowedMembersResolver<TParent>;
    sharedFilesFromFolder?: QueryToSharedFilesFromFolderResolver<TParent>;
    listFiles?: QueryToListFilesResolver<TParent>;
    listFilesByMemberId?: QueryToListFilesByMemberIdResolver<TParent>;
    listFoldersByMemberId?: QueryToListFoldersByMemberIdResolver<TParent>;
    outstandingFoldersByMemberId?: QueryToOutstandingFoldersByMemberIdResolver<TParent>;
    sharedFilesByMemberId?: QueryToSharedFilesByMemberIdResolver<TParent>;
    sharedFilesAmongstMembers?: QueryToSharedFilesAmongstMembersResolver<TParent>;
    sharedFoldersByMemberId?: QueryToSharedFoldersByMemberIdResolver<TParent>;
    folderById?: QueryToFolderByIdResolver<TParent>;
    fileById?: QueryToFileByIdResolver<TParent>;
    outstandingFilesByMemberId?: QueryToOutstandingFilesByMemberIdResolver<TParent>;
    conversationsByToMemberId?: QueryToConversationsByToMemberIdResolver<TParent>;
    conversationsByMemberId?: QueryToConversationsByMemberIdResolver<TParent>;
    listWallets?: QueryToListWalletsResolver<TParent>;
    walletById?: QueryToWalletByIdResolver<TParent>;
    listMemberWallets?: QueryToListMemberWalletsResolver<TParent>;
    listWalletTransaction?: QueryToListWalletTransactionResolver<TParent>;
    walletTransactionById?: QueryToWalletTransactionByIdResolver<TParent>;
    listWalletTransactionStatus?: QueryToListWalletTransactionStatusResolver<TParent>;
    listWalletTransactionMember?: QueryToListWalletTransactionMemberResolver<TParent>;
    listWalletTransactionMemberDetail?: QueryToListWalletTransactionMemberDetailResolver<TParent>;
    investmentVsEarning?: QueryToInvestmentVsEarningResolver<TParent>;
    walletTransactionDetail?: QueryToWalletTransactionDetailResolver<TParent>;
    listMemberWalletsByMember?: QueryToListMemberWalletsByMemberResolver<TParent>;
    certificateMovements?: QueryToCertificateMovementsResolver<TParent>;
    countryRequests?: QueryToCountryRequestsResolver<TParent>;
    certificates?: QueryToCertificatesResolver<TParent>;
    certificatesNotPaginated?: QueryToCertificatesNotPaginatedResolver<TParent>;
    fees?: QueryToFeesResolver<TParent>;
    beneficiaries?: QueryToBeneficiariesResolver<TParent>;
    insurerCompanies?: QueryToInsurerCompaniesResolver<TParent>;
    merchandises?: QueryToMerchandisesResolver<TParent>;
    merchandiseCategories?: QueryToMerchandiseCategoriesResolver<TParent>;
    merchandiseDetails?: QueryToMerchandiseDetailsResolver<TParent>;
    contacts?: QueryToContactsResolver<TParent>;
    contractors?: QueryToContractorsResolver<TParent>;
    trafficDetails?: QueryToTrafficDetailsResolver<TParent>;
    money?: QueryToMoneyResolver<TParent>;
    policies?: QueryToPoliciesResolver<TParent>;
    contractorBranchOffices?: QueryToContractorBranchOfficesResolver<TParent>;
    contractorContacts?: QueryToContractorContactsResolver<TParent>;
    contractorPolicies?: QueryToContractorPoliciesResolver<TParent>;
    contactById?: QueryToContactByIdResolver<TParent>;
    contractorById?: QueryToContractorByIdResolver<TParent>;
    contractorContactById?: QueryToContractorContactByIdResolver<TParent>;
    contractorPolicyById?: QueryToContractorPolicyByIdResolver<TParent>;
    insurerCompanyById?: QueryToInsurerCompanyByIdResolver<TParent>;
    moneyById?: QueryToMoneyByIdResolver<TParent>;
    certificateById?: QueryToCertificateByIdResolver<TParent>;
    contractorOfficeById?: QueryToContractorOfficeByIdResolver<TParent>;
    policyModules?: QueryToPolicyModulesResolver<TParent>;
    policyModuleById?: QueryToPolicyModuleByIdResolver<TParent>;
    insurerModules?: QueryToInsurerModulesResolver<TParent>;
    insurerModuleById?: QueryToInsurerModuleByIdResolver<TParent>;
    beneficiaryById?: QueryToBeneficiaryByIdResolver<TParent>;
    merchandiseById?: QueryToMerchandiseByIdResolver<TParent>;
    insurerFeeById?: QueryToInsurerFeeByIdResolver<TParent>;
    insurerFees?: QueryToInsurerFeesResolver<TParent>;
    listSchool?: QueryToListSchoolResolver<TParent>;
    schoolById?: QueryToSchoolByIdResolver<TParent>;
    listClassroom?: QueryToListClassroomResolver<TParent>;
    classroomById?: QueryToClassroomByIdResolver<TParent>;
    listLevel?: QueryToListLevelResolver<TParent>;
    levelById?: QueryToLevelByIdResolver<TParent>;
    levelByName?: QueryToLevelByNameResolver<TParent>;
    gradeByName?: QueryToGradeByNameResolver<TParent>;
    classroomByName?: QueryToClassroomByNameResolver<TParent>;
    listGrade?: QueryToListGradeResolver<TParent>;
    gradeById?: QueryToGradeByIdResolver<TParent>;
    listStudent?: QueryToListStudentResolver<TParent>;
    studentById?: QueryToStudentByIdResolver<TParent>;
    listStudentByLastAttendance?: QueryToListStudentByLastAttendanceResolver<TParent>;
    listAttendanceStudent?: QueryToListAttendanceStudentResolver<TParent>;
    attendanceStudentById?: QueryToAttendanceStudentByIdResolver<TParent>;
    listStudentTutorMemberId?: QueryToListStudentTutorMemberIdResolver<TParent>;
    listClassroomTeacherMemberId?: QueryToListClassroomTeacherMemberIdResolver<TParent>;
    chatBotConversations?: QueryToChatBotConversationsResolver<TParent>;
    listAgentProviderBonos?: QueryToListAgentProviderBonosResolver<TParent>;
    listBeneficiaries?: QueryToListBeneficiariesResolver<TParent>;
    listFormAccidentDiseases?: QueryToListFormAccidentDiseasesResolver<TParent>;
    listFormAutomobileDamages?: QueryToListFormAutomobileDamagesResolver<TParent>;
    listFormCarCatalogs?: QueryToListFormCarCatalogsResolver<TParent>;
    listFormDamages?: QueryToListFormDamagesResolver<TParent>;
    listFormLifes?: QueryToListFormLifesResolver<TParent>;
    listInvolvedReferrers?: QueryToListInvolvedReferrersResolver<TParent>;
    listOldPolices?: QueryToListOldPolicesResolver<TParent>;
    listPersonalInformations?: QueryToListPersonalInformationsResolver<TParent>;
    listPolices?: QueryToListPolicesResolver<TParent>;
    listPoliceAssigns?: QueryToListPoliceAssignsResolver<TParent>;
    listPolicePendients?: QueryToListPolicePendientsResolver<TParent>;
    listPoliceQuotes?: QueryToListPoliceQuotesResolver<TParent>;
    listPoliceQuotePrimas?: QueryToListPoliceQuotePrimasResolver<TParent>;
    listRelationShips?: QueryToListRelationShipsResolver<TParent>;
    listSucursals?: QueryToListSucursalsResolver<TParent>;
    listEndorsements?: QueryToListEndorsementsResolver<TParent>;
    listEndorsementCerts?: QueryToListEndorsementCertsResolver<TParent>;
    listSinisters?: QueryToListSinistersResolver<TParent>;
    listSinisterAccidents?: QueryToListSinisterAccidentsResolver<TParent>;
    listSinisterAilings?: QueryToListSinisterAilingsResolver<TParent>;
    listSinisterCars?: QueryToListSinisterCarsResolver<TParent>;
    listSinisterCarContacts?: QueryToListSinisterCarContactsResolver<TParent>;
    listSinisterDamages?: QueryToListSinisterDamagesResolver<TParent>;
    listSinisterDamageContacts?: QueryToListSinisterDamageContactsResolver<TParent>;
    listSinisterFacturas?: QueryToListSinisterFacturasResolver<TParent>;
    listSinisterHospitals?: QueryToListSinisterHospitalsResolver<TParent>;
    listSinisterLifes?: QueryToListSinisterLifesResolver<TParent>;
    listSinisterLifeContacts?: QueryToListSinisterLifeContactsResolver<TParent>;
    listPoliceReceipts?: QueryToListPoliceReceiptsResolver<TParent>;
    listPoliceReceiptAccounts?: QueryToListPoliceReceiptAccountsResolver<TParent>;
    listPoliceReceiptAccountStates?: QueryToListPoliceReceiptAccountStatesResolver<TParent>;
    listPoliceReceiptFolios?: QueryToListPoliceReceiptFoliosResolver<TParent>;
    listPoliceReceiptPayments?: QueryToListPoliceReceiptPaymentsResolver<TParent>;
    listPoliceFiles?: QueryToListPoliceFilesResolver<TParent>;
    listInsurerComments?: QueryToListInsurerCommentsResolver<TParent>;
    listInsurerFileReadings?: QueryToListInsurerFileReadingsResolver<TParent>;
    listInsurerFileReadingTags?: QueryToListInsurerFileReadingTagsResolver<TParent>;
    listInsurerInvolveds?: QueryToListInsurerInvolvedsResolver<TParent>;
    listInsurerLogs?: QueryToListInsurerLogsResolver<TParent>;
    listInsurerLogEmails?: QueryToListInsurerLogEmailsResolver<TParent>;
    listInsurerOrgInfos?: QueryToListInsurerOrgInfosResolver<TParent>;
    listInsurerTickets?: QueryToListInsurerTicketsResolver<TParent>;
    listInsurerSchedules?: QueryToListInsurerSchedulesResolver<TParent>;
    listInsurerScheduleParticipants?: QueryToListInsurerScheduleParticipantsResolver<TParent>;
    listInsurerNotifications?: QueryToListInsurerNotificationsResolver<TParent>;
    listInsurerReminders?: QueryToListInsurerRemindersResolver<TParent>;
    listInsurerReminderProjectAgentProviders?: QueryToListInsurerReminderProjectAgentProvidersResolver<TParent>;
    listInsurerReminderRecords?: QueryToListInsurerReminderRecordsResolver<TParent>;
    listInsurerReminderSubBranches?: QueryToListInsurerReminderSubBranchesResolver<TParent>;
    listInsurerBailTypes?: QueryToListInsurerBailTypesResolver<TParent>;
    listInsurerBirthDateTemplates?: QueryToListInsurerBirthDateTemplatesResolver<TParent>;
    listInsurerDirectories?: QueryToListInsurerDirectoriesResolver<TParent>;
    listInsurerExpenses?: QueryToListInsurerExpensesResolver<TParent>;
    listInsurerIbisForms?: QueryToListInsurerIbisFormsResolver<TParent>;
    listInsurerIbisProviders?: QueryToListInsurerIbisProvidersResolver<TParent>;
    listInsurerSenders?: QueryToListInsurerSendersResolver<TParent>;
    listInsurerZipCodeSepomexs?: QueryToListInsurerZipCodeSepomexsResolver<TParent>;
    listComissions?: QueryToListComissionsResolver<TParent>;
    listCoverageTopecoinsurances?: QueryToListCoverageTopecoinsurancesResolver<TParent>;
    listCoverageSuminsureds?: QueryToListCoverageSuminsuredsResolver<TParent>;
    listCoveragePackages?: QueryToListCoveragePackagesResolver<TParent>;
    saam_listCoverages?: QueryToSaam_listCoveragesResolver<TParent>;
    listCoverageInPolicies?: QueryToListCoverageInPoliciesResolver<TParent>;
    listCoverageDeductibles?: QueryToListCoverageDeductiblesResolver<TParent>;
    listCoverageCoinsurances?: QueryToListCoverageCoinsurancesResolver<TParent>;
    listResponsableInvolveds?: QueryToListResponsableInvolvedsResolver<TParent>;
    listProjectAgentProviderEmailReminders?: QueryToListProjectAgentProviderEmailRemindersResolver<TParent>;
    listProjectAgentProviders?: QueryToListProjectAgentProvidersResolver<TParent>;
    listAgentProviderContacts?: QueryToListAgentProviderContactsResolver<TParent>;
    listAgentProviders?: QueryToListAgentProvidersResolver<TParent>;
    listAgentKeys?: QueryToListAgentKeysResolver<TParent>;
    listReferrers?: QueryToListReferrersResolver<TParent>;
    listReferrerBranches?: QueryToListReferrerBranchesResolver<TParent>;
    listReferrerAccountStates?: QueryToListReferrerAccountStatesResolver<TParent>;
    listContractors?: QueryToListContractorsResolver<TParent>;
    listContractorCelulas?: QueryToListContractorCelulasResolver<TParent>;
    listContractorGroups?: QueryToListContractorGroupsResolver<TParent>;
    listContractorGroupingLevels?: QueryToListContractorGroupingLevelsResolver<TParent>;
    listContractorClassifications?: QueryToListContractorClassificationsResolver<TParent>;
    listContractorProcessDocuments?: QueryToListContractorProcessDocumentsResolver<TParent>;
    listProcessDocuments?: QueryToListProcessDocumentsResolver<TParent>;
    listBranches?: QueryToListBranchesResolver<TParent>;
    listSubBranches?: QueryToListSubBranchesResolver<TParent>;
    listProjectAgentProviderBranches?: QueryToListProjectAgentProviderBranchesResolver<TParent>;
    listDevices?: QueryToListDevicesResolver<TParent>;
    deviceById?: QueryToDeviceByIdResolver<TParent>;
    listNotifications?: QueryToListNotificationsResolver<TParent>;
    notificationsById?: QueryToNotificationsByIdResolver<TParent>;
    devicesByMemberId?: QueryToDevicesByMemberIdResolver<TParent>;
    listNotificationByMemberId?: QueryToListNotificationByMemberIdResolver<TParent>;
    codes?: QueryToCodesResolver<TParent>;
    brandsByProjectId?: QueryToBrandsByProjectIdResolver<TParent>;
    providers?: QueryToProvidersResolver<TParent>;
    scanCode?: QueryToScanCodeResolver<TParent>;
    availableDots?: QueryToAvailableDotsResolver<TParent>;
    exchangeMovements?: QueryToExchangeMovementsResolver<TParent>;
    dotMovementsByMemberId?: QueryToDotMovementsByMemberIdResolver<TParent>;
    lookForAdminCode?: QueryToLookForAdminCodeResolver<TParent>;
    prizeCategories?: QueryToPrizeCategoriesResolver<TParent>;
    prizeCodes?: QueryToPrizeCodesResolver<TParent>;
    prizeCategoryById?: QueryToPrizeCategoryByIdResolver<TParent>;
    dotMovementById?: QueryToDotMovementByIdResolver<TParent>;
}
export interface QueryToListGroupsArgs {
    skip?: number;
    take?: number;
    filter?: IGroupFilterInput;
    order?: Array<IGroupSortInput>;
}
export interface QueryToListGroupsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListGroupsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToGroupByIdArgs {
    id: IUUID;
}
export interface QueryToGroupByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToGroupByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCurrenciesArgs {
    filter?: ICurrencyFilterInput;
}
export interface QueryToCurrenciesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCurrenciesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCurrencyByIdArgs {
    id: IUUID;
}
export interface QueryToCurrencyByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCurrencyByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListNichesArgs {
    skip?: number;
    take?: number;
    filter?: INicheFilterInput;
    order?: Array<INicheSortInput>;
}
export interface QueryToListNichesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListNichesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListNicheServicesArgs {
    skip?: number;
    take?: number;
    filter?: INicheServiceFilterInput;
    order?: Array<INicheServiceSortInput>;
}
export interface QueryToListNicheServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListNicheServicesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToTutorByNameArgs {
    projectId: IUUID;
    name: string;
}
export interface QueryToTutorByNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToTutorByNameArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPageManagerByIdArgs {
    projectId: IUUID;
    pageName: string;
}
export interface QueryToPageManagerByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPageManagerByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListPageManagerArgs {
    projectId: IUUID;
}
export interface QueryToListPageManagerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListPageManagerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListViewManagerArgs {
    pageManagerId: IUUID;
}
export interface QueryToListViewManagerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListViewManagerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToViewManagerByArgs {
    filter?: IViewManagerFilterInput;
    order?: Array<IViewManagerSortInput>;
}
export interface QueryToViewManagerByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToViewManagerByArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToViewManagerByIdArgs {
    id: IUUID;
}
export interface QueryToViewManagerByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToViewManagerByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToViewBlockColumnByIdArgs {
    id: IUUID;
}
export interface QueryToViewBlockColumnByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToViewBlockColumnByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToUsernameArgs {
    username: string;
}
export interface QueryToUsernameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToUsernameArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToAllStreamsArgs {
    projectId: IUUID;
}
export interface QueryToAllStreamsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToAllStreamsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMeByIdArgs {
    id: IUUID;
}
export interface QueryToMeByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMeByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMeByIdPublicArgs {
    id: IUUID;
}
export interface QueryToMeByIdPublicResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMeByIdPublicArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToRefererResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProjectByUrlArgs {
    url: string;
}
export interface QueryToProjectByUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProjectByUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCountriesArgs {
    filter?: ICountryFilterInput;
    order?: Array<ICountrySortInput>;
}
export interface QueryToCountriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCountriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCountriesListArgs {
    skip?: number;
    take?: number;
    filter?: ICountryFilterInput;
}
export interface QueryToCountriesListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCountriesListArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCompaniesArgs {
    order?: Array<ICompanySortInput>;
}
export interface QueryToCompaniesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCompaniesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToRolesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToIndustriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToRolesByProjectArgs {
    id: IUUID;
}
export interface QueryToRolesByProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToRolesByProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMembersArgs {
    filter?: IMemberFilterInput;
}
export interface QueryToMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMembersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMemberByIdArgs {
    id?: IUUID;
}
export interface QueryToMemberByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMemberByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToDeleteMyMembersArgs {
    projectId: IUUID;
}
export interface QueryToDeleteMyMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToDeleteMyMembersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMembersByProjectArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IMemberProjectFilterInput;
    order?: Array<IMemberProjectSortInput>;
}
export interface QueryToMembersByProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMembersByProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCountryByCodeArgs {
    code: string;
}
export interface QueryToCountryByCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCountryByCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListUsersArgs {
    skip?: number;
    take?: number;
    filter?: IMemberFilterInput;
    order?: Array<IMemberSortInput>;
}
export interface QueryToListUsersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListIsMemberInSpaceArgs {
    skip?: number;
    take?: number;
    spaceId: IUUID;
    projectId: IUUID;
    filter?: IMemberInSpaceFilterInput;
    order?: Array<IMemberInSpaceSortInput>;
}
export interface QueryToListIsMemberInSpaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListIsMemberInSpaceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListIsMemberInBoardArgs {
    skip?: number;
    take?: number;
    boardId: IUUID;
    projectId: IUUID;
    filter?: IMemberInBoardFilterInput;
    order?: Array<IMemberInBoardSortInput>;
}
export interface QueryToListIsMemberInBoardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListIsMemberInBoardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListUsersLazyLoadArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    filter?: IMemberFilterInput;
    order?: Array<IMemberSortInput>;
}
export interface QueryToListUsersLazyLoadResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListUsersLazyLoadArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListUsersPublicArgs {
    projectId: IUUID;
    isActive?: boolean;
    filter?: IMemberFilterInput;
    order?: Array<IMemberSortInput>;
}
export interface QueryToListUsersPublicResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListUsersPublicArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProjectsInfiniteArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    filter?: IProjectFilterInput;
    order?: Array<IProjectSortInput>;
}
export interface QueryToProjectsInfiniteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProjectsInfiniteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProjectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProjectByIdArgs {
    id: IUUID;
}
export interface QueryToProjectByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProjectByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProjectByIdPublicArgs {
    id: IUUID;
}
export interface QueryToProjectByIdPublicResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProjectByIdPublicArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToConversationMemberByArgs {
    id: IUUID;
}
export interface QueryToConversationMemberByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToConversationMemberByArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMemberNameByArgs {
    id: IUUID;
}
export interface QueryToMemberNameByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMemberNameByArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToUserByIdArgs {
    url: string;
}
export interface QueryToUserByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToUserByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCustomMemberByIdArgs {
    id: IUUID;
}
export interface QueryToCustomMemberByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCustomMemberByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPlansResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPlanByIdArgs {
    id: IUUID;
}
export interface QueryToPlanByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPlanByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProjectSocialNetworksByProjectIdArgs {
    projectId: IUUID;
}
export interface QueryToProjectSocialNetworksByProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProjectSocialNetworksByProjectIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToRecommendedProjectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPublicProjectsArgs {
    skip?: number;
    take?: number;
}
export interface QueryToPublicProjectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPublicProjectsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMemberRelationsArgs {
    skip?: number;
    take?: number;
    filter?: IMemberRelationFilterInput;
    order?: Array<IMemberRelationSortInput>;
}
export interface QueryToListMemberRelationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMemberRelationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMemberRelationByIdArgs {
    id?: IUUID;
}
export interface QueryToMemberRelationByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMemberRelationByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProjectTemplateByIdArgs {
    id: IUUID;
}
export interface QueryToProjectTemplateByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProjectTemplateByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProjectTemplatesByProjectIdArgs {
    projectId: IUUID;
}
export interface QueryToProjectTemplatesByProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProjectTemplatesByProjectIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProjectTemplatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCountryByIdArgs {
    id: IUUID;
}
export interface QueryToCountryByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCountryByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToColumnTabsArgs {
    filter?: IColumnTabFilterInput;
}
export interface QueryToColumnTabsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToColumnTabsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToColumnTabsByIdArgs {
    id: IUUID;
}
export interface QueryToColumnTabsByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToColumnTabsByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToRankingSellerArgs {
    skip?: number;
    take?: number;
    businessId: IUUID;
    projectId: IUUID;
    beginDate?: IDateTime;
    endDate?: IDateTime;
    filter?: IRankingDTOFilterInput;
}
export interface QueryToRankingSellerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToRankingSellerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToRankingArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    beginDate?: IDateTime;
    endDate?: IDateTime;
    filter?: IRankingDTOFilterInput;
}
export interface QueryToRankingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToRankingArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToSellByNominatorAndProspectIdArgs {
    nominatorId: IUUID;
    prospectId: IUUID;
}
export interface QueryToSellByNominatorAndProspectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSellByNominatorAndProspectIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToNominatorSellByIdArgs {
    id?: IUUID;
}
export interface QueryToNominatorSellByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToNominatorSellByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToNominatorSellByMemberRelationIdArgs {
    memberRelationId?: IUUID;
}
export interface QueryToNominatorSellByMemberRelationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToNominatorSellByMemberRelationIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListNominatorSellsArgs {
    skip?: number;
    take?: number;
    filter?: ISellFilterInput;
    order?: Array<ISellSortInput>;
}
export interface QueryToListNominatorSellsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListNominatorSellsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToNominatorStatArgs {
    id: IUUID;
}
export interface QueryToNominatorStatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToNominatorStatArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToSellStatsArgs {
    id: IUUID;
}
export interface QueryToSellStatsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSellStatsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToSellByIdArgs {
    id: IUUID;
}
export interface QueryToSellByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSellByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMemberIndustriesArgs {
    filter?: IMemberIndustryFilterInput;
}
export interface QueryToMemberIndustriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMemberIndustriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMemberIndustryByIdArgs {
    id: IUUID;
}
export interface QueryToMemberIndustryByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMemberIndustryByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToStadisticsLoginArgs {
    skip?: number;
    take?: number;
    companyId: IUUID;
    filter?: IMemberCompanyDtoFilterInput;
    order?: Array<IMemberCompanyDtoSortInput>;
}
export interface QueryToStadisticsLoginResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToStadisticsLoginArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToAllStadisticsLoginArgs {
    companyId: IUUID;
}
export interface QueryToAllStadisticsLoginResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToAllStadisticsLoginArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToStadisticsLProjectsByCompanyArgs {
    companyId: IUUID;
}
export interface QueryToStadisticsLProjectsByCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToStadisticsLProjectsByCompanyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMembersByBusinessIdArgs {
    businessId: IUUID;
}
export interface QueryToListMembersByBusinessIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMembersByBusinessIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProjectRoleByIdArgs {
    id?: IUUID;
}
export interface QueryToProjectRoleByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProjectRoleByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToFAQsArgs {
    projectId: IUUID;
}
export interface QueryToFAQsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToFAQsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToTopicDiseasesArgs {
    projectId: IUUID;
}
export interface QueryToTopicDiseasesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToTopicDiseasesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsuranceFormsArgs {
    skip?: number;
    take?: number;
    filter?: IInsuranceFormFilterInput;
    order?: Array<IInsuranceFormSortInput>;
}
export interface QueryToListInsuranceFormsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsuranceFormsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToInsuranceFormByIdArgs {
    id: IUUID;
}
export interface QueryToInsuranceFormByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToInsuranceFormByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToTopicDiseaseByIdArgs {
    id: IUUID;
    month: number;
}
export interface QueryToTopicDiseaseByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToTopicDiseaseByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToResultByMemberIdArgs {
    surveyId: IUUID;
    memberId: IUUID;
}
export interface QueryToResultByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToResultByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToResultsArgs {
    surveyId: IUUID;
}
export interface QueryToResultsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToResultsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToAnswersArgs {
    surveyId: IUUID;
}
export interface QueryToAnswersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToAnswersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToArticlesArgs {
    language?: IArticleLanguage;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    filter?: IArticleFilterInput;
    order?: Array<IArticleSortInput>;
}
export interface QueryToArticlesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToArticlesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListArticlesArgs {
    skip?: number;
    take?: number;
    language?: IArticleLanguage;
    filter?: IArticleFilterInput;
    order?: Array<IArticleSortInput>;
}
export interface QueryToListArticlesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListArticlesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToFullArticlesArgs {
    language?: IArticleLanguage;
    projectId: IUUID;
}
export interface QueryToFullArticlesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToFullArticlesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListAddressesArgs {
    id: IUUID;
}
export interface QueryToListAddressesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListAddressesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToTaxonomyByIdArgs {
    id: IUUID;
}
export interface QueryToTaxonomyByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToTaxonomyByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToTaxonomyBySlugArgs {
    slug: string;
}
export interface QueryToTaxonomyBySlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToTaxonomyBySlugArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToTaxonomyBySlugProjectArgs {
    slug: string;
    projectId: IUUID;
}
export interface QueryToTaxonomyBySlugProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToTaxonomyBySlugProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListProductsArgs {
    skip?: number;
    take?: number;
    year?: number;
    month?: number;
    filter?: IProductFilterInput;
    order?: Array<IProductSortInput>;
}
export interface QueryToListProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToFullProductsArgs {
    projectId: IUUID;
}
export interface QueryToFullProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToFullProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToTaxonomiesByProjectArgs {
    skip?: number;
    take?: number;
    filter?: ITaxonomyFilterInput;
    order?: Array<ITaxonomySortInput>;
}
export interface QueryToTaxonomiesByProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToTaxonomiesByProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToFullTaxonomiesArgs {
    projectId: IUUID;
    filter?: ITaxonomyFilterInput;
}
export interface QueryToFullTaxonomiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToFullTaxonomiesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToSurveysByArticleIdArgs {
    articleId: IUUID;
}
export interface QueryToSurveysByArticleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSurveysByArticleIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToShopByIdArgs {
    projectId: IUUID;
}
export interface QueryToShopByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToShopByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToArticleByIdArgs {
    id: IUUID;
    viewed: boolean;
}
export interface QueryToArticleByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToArticleByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToSeoBySlugArgs {
    slug: string;
    projectId: IUUID;
}
export interface QueryToSeoBySlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSeoBySlugArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToArticleBySlugArgs {
    slug: string;
    viewed: boolean;
}
export interface QueryToArticleBySlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToArticleBySlugArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToArticleBySlugProjectArgs {
    projectId: IUUID;
    slug: string;
    viewed: boolean;
}
export interface QueryToArticleBySlugProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToArticleBySlugProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProductByIdArgs {
    id: IUUID;
}
export interface QueryToProductByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCourseByIdArgs {
    id: IUUID;
}
export interface QueryToCourseByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCourseByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCoursesByProjectIdArgs {
    projectId: IUUID;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
}
export interface QueryToCoursesByProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCoursesByProjectIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCourseTaxonomiesByProjectIdArgs {
    projectId: IUUID;
}
export interface QueryToCourseTaxonomiesByProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCourseTaxonomiesByProjectIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCoursesByTaxonomyIdArgs {
    taxonomyId: IUUID;
}
export interface QueryToCoursesByTaxonomyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCoursesByTaxonomyIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToStoreStocksArgs {
    projectId: IUUID;
}
export interface QueryToStoreStocksResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToStoreStocksArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToStoreStocksByStoreIdArgs {
    storeId: IUUID;
    filter?: IStoreStockFilterInput;
}
export interface QueryToStoreStocksByStoreIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToStoreStocksByStoreIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToStoreTransfersByStoreIdArgs {
    storeId: IUUID;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
}
export interface QueryToStoreTransfersByStoreIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToStoreTransfersByStoreIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCoursesByTaxonomyAndModalityArgs {
    projectId: IUUID;
    taxonomyId?: IUUID;
    courseModality?: ICourseModality;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
}
export interface QueryToCoursesByTaxonomyAndModalityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCoursesByTaxonomyAndModalityArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProductBySlugArgs {
    slug: string;
}
export interface QueryToProductBySlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductBySlugArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProductsBySlugArgs {
    slug: string;
}
export interface QueryToProductsBySlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductsBySlugArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProductBySlugProjectArgs {
    projectId: IUUID;
    slug: string;
}
export interface QueryToProductBySlugProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductBySlugProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToBranchOfficesByIdsArgs {
    ids?: Array<IUUID>;
}
export interface QueryToBranchOfficesByIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToBranchOfficesByIdsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProductByIdResolverArgs {
    id: IUUID;
}
export interface QueryToProductByIdResolverResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductByIdResolverArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToAddressByIdArgs {
    id: IUUID;
}
export interface QueryToAddressByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToAddressByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToBranchOfficesArgs {
    projectId: IUUID;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    filter?: IBranchOfficeFilterInput;
}
export interface QueryToBranchOfficesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToBranchOfficesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToStoreByIdArgs {
    id: IUUID;
}
export interface QueryToStoreByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToStoreByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToManagersArgs {
    projectId: IUUID;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
}
export interface QueryToManagersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToManagersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPurchasesArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IPurchaseFilterInput;
    order?: Array<IPurchaseSortInput>;
}
export interface QueryToPurchasesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPurchasesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProductPurchasesArgs {
    projectId: IUUID;
}
export interface QueryToProductPurchasesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductPurchasesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToStoresArgs {
    projectId: IUUID;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
}
export interface QueryToStoresResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToStoresArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProductPurchasesByPurchaseIdArgs {
    purchaseId: IUUID;
}
export interface QueryToProductPurchasesByPurchaseIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductPurchasesByPurchaseIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToManagerByBranchOfficeIdArgs {
    branchOfficeId: IUUID;
}
export interface QueryToManagerByBranchOfficeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToManagerByBranchOfficeIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProductProvidersArgs {
    projectId: IUUID;
}
export interface QueryToProductProvidersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductProvidersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPurchaseByIdArgs {
    id: IUUID;
}
export interface QueryToPurchaseByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPurchaseByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToBranchOfficeByIdArgs {
    id: IUUID;
}
export interface QueryToBranchOfficeByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToBranchOfficeByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToStoreTransferByIdArgs {
    id: IUUID;
}
export interface QueryToStoreTransferByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToStoreTransferByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToStoreStockByStoreIdAndProductIdArgs {
    productId: IUUID;
    storeId: IUUID;
}
export interface QueryToStoreStockByStoreIdAndProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToStoreStockByStoreIdAndProductIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToStoreTransfersArgs {
    projectId: IUUID;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
}
export interface QueryToStoreTransfersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToStoreTransfersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToDrugsArgs {
    skip?: number;
    take?: number;
    name: string;
    filter?: IDrugFilterInput;
}
export interface QueryToDrugsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToDrugsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCarriersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToGroupsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPharmacyRadiusPricingArgs {
    memberNumber: string;
    personCode: string;
    ndc: string;
    quantity: number;
    daysSupply: number;
    groupNum: string;
    radius: number;
    zip: string;
    maxRecords: number;
    filter?: IPharmacyRadiusResponseFilterInput;
}
export interface QueryToPharmacyRadiusPricingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPharmacyRadiusPricingArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPharmaciesByZipCodeArgs {
    groupNum: string;
    radius: number;
    zipCode: string;
}
export interface QueryToPharmaciesByZipCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPharmaciesByZipCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToSearchMembersArgs {
    chid: string;
    firstName: string;
    lastName: string;
    dob: string;
}
export interface QueryToSearchMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSearchMembersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProductsByNameAndZipCodeArgs {
    name: string;
    zipCode: string;
    memberNumber: string;
    personCode: string;
    quantity: number;
    daysSupply: number;
    groupNum: string;
    radius: number;
    maxRecords: number;
}
export interface QueryToProductsByNameAndZipCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductsByNameAndZipCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToTransactionsArgs {
    memberId?: string;
    memberKey: string;
    personCode: string;
    senderId?: string;
    dateStartRange: IDateTime;
    dateEndRange: IDateTime;
}
export interface QueryToTransactionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToTransactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPricingsArgs {
    requestId?: string;
    bin: string;
    npi: string;
    pcn?: string;
    groupNumber?: string;
    ndc: string;
    quantity: number;
    daysSupply: number;
    firstName: string;
    lastName: string;
    dos: string;
    dob?: string;
    dateWritten?: string;
    gender?: number;
    chid: string;
    personCode?: string;
    compoundCode?: number;
    rxNumber?: string;
    daw?: string;
    occ?: string;
    prescriberNpi?: string;
    ingredientCost?: number;
    dispensingFee?: number;
    usualAndCustomary?: number;
    grossAmountDue?: number;
    ignoreAcumulators?: boolean;
    jobRunId?: number;
}
export interface QueryToPricingsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPricingsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMenusArgs {
    restaurantId: string;
    menuId?: string;
}
export interface QueryToMenusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMenusArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToBbotRestaurantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToListByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToLegalTermsArgs {
    skip?: number;
    take?: number;
    filter?: ILegalTermFilterInput;
    order?: Array<ILegalTermSortInput>;
}
export interface QueryToLegalTermsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToLegalTermsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToLegalTermByIdArgs {
    id: IUUID;
}
export interface QueryToLegalTermByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToLegalTermByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToIncreaseLegalTermCounterArgs {
    id: IUUID;
}
export interface QueryToIncreaseLegalTermCounterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToIncreaseLegalTermCounterArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToStockAlertsArgs {
    skip?: number;
    take?: number;
    filter?: IStockAlertFilterInput;
}
export interface QueryToStockAlertsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToStockAlertsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToStockAlertByIdArgs {
    id: IUUID;
}
export interface QueryToStockAlertByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToStockAlertByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToStockAlertByProductIdArgs {
    productId: IUUID;
}
export interface QueryToStockAlertByProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToStockAlertByProductIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPurchaseQuoteByIdArgs {
    id: IUUID;
}
export interface QueryToPurchaseQuoteByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPurchaseQuoteByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPurchaseQuotesArgs {
    skip?: number;
    take?: number;
    filter?: IPurchaseQuoteFilterInput;
}
export interface QueryToPurchaseQuotesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPurchaseQuotesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToTaxesArgs {
    filter?: ITaxFilterInput;
}
export interface QueryToTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToTaxesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProductSellsArgs {
    skip?: number;
    take?: number;
    filter?: IProductSellFilterInput;
}
export interface QueryToProductSellsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductSellsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProductSellByIdArgs {
    id: IUUID;
}
export interface QueryToProductSellByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductSellByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListRoutesArgs {
    skip?: number;
    take?: number;
    filter?: IRouteFilterInput;
}
export interface QueryToListRoutesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListRoutesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToRoutesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToRouteByIdArgs {
    id: IUUID;
}
export interface QueryToRouteByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToRouteByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToFixUpdateNameServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToServicesByProjectArgs {
    id: IUUID;
}
export interface QueryToServicesByProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToServicesByProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMicroServiceByCodeNameArgs {
    codeName: string;
}
export interface QueryToMicroServiceByCodeNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMicroServiceByCodeNameArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToEndOfDayArgs {
    date: IDateTime;
}
export interface QueryToEndOfDayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToEndOfDayArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToStartOfDayArgs {
    date: IDateTime;
}
export interface QueryToStartOfDayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToStartOfDayArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListSchedulesArgs {
    projectId: IUUID;
    memberId: IUUID;
}
export interface QueryToListSchedulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListSchedulesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToScheduleManagerByEventTypeArgs {
    projectId: IUUID;
    memberId: IUUID;
    eventTypeId: IUUID;
}
export interface QueryToScheduleManagerByEventTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToScheduleManagerByEventTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToAvailableEventsArgs {
    projectId: IUUID;
    eventTypeId: IUUID;
    day: number;
    month: number;
    hour: number;
    year: number;
}
export interface QueryToAvailableEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToAvailableEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMyEventsArgs {
    projectId: IUUID;
    id: IUUID;
    month: number;
    eventTypeId?: IUUID;
    year: number;
}
export interface QueryToMyEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMyEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToEventsArgs {
    projectId: IUUID;
    month: number;
    year: number;
    visibility: IEventVisibility;
    filter?: IEventFilterInput;
    order?: Array<IEventSortInput>;
}
export interface QueryToEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToFilteredEventsArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    memberId: IUUID;
    filter?: IEventFilterInput;
    order?: Array<IEventSortInput>;
}
export interface QueryToFilteredEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToFilteredEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCurrentDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToEventTypesArgs {
    projectId: IUUID;
}
export interface QueryToEventTypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToEventTypesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToSubEventTypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToEventByIdArgs {
    projectId: IUUID;
    id: IUUID;
}
export interface QueryToEventByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToEventByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToLocalTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToNextEventArgs {
    projectId: IUUID;
    memberId: IUUID;
    quantity?: number;
    day?: number;
    month?: number;
    year?: number;
    eventVisibility?: IEventVisibility;
    filter?: IEventFilterInput;
}
export interface QueryToNextEventResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToNextEventArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToNextEventMembersArgs {
    projectId: IUUID;
    memberId: IUUID;
    quantity?: number;
    eventVisibility?: IEventVisibility;
    filter?: IEventFilterInput;
}
export interface QueryToNextEventMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToNextEventMembersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMembersEventsArgs {
    projectId: IUUID;
    membersId?: Array<string>;
    eventTypeId?: IUUID;
    eventMode?: IEventMode;
}
export interface QueryToMembersEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMembersEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToAssociatedEventsArgs {
    projectId: IUUID;
    memberId: IUUID;
    membersId: Array<string>;
}
export interface QueryToAssociatedEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToAssociatedEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListHiringArgs {
    projectId: IUUID;
    filter?: IHiringFilterInput;
    order?: Array<IHiringSortInput>;
}
export interface QueryToListHiringResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListHiringArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListHiringTypeArgs {
    projectId: IUUID;
    filter?: IHiringTypeFilterInput;
    order?: Array<IHiringTypeSortInput>;
}
export interface QueryToListHiringTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListHiringTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListShiftArgs {
    projectId: IUUID;
    filter?: IShiftFilterInput;
    order?: Array<IShiftSortInput>;
}
export interface QueryToListShiftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListShiftArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListDaysArgs {
    filter?: IDayFilterInput;
    order?: Array<IDaySortInput>;
}
export interface QueryToListDaysResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListDaysArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListResourceQuotesArgs {
    skip?: number;
    take?: number;
    filter?: IResourceQuoteFilterInput;
    order?: Array<IResourceQuoteSortInput>;
}
export interface QueryToListResourceQuotesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListResourceQuotesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToResourceQuoteByIdArgs {
    id: IUUID;
}
export interface QueryToResourceQuoteByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToResourceQuoteByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListResourceQuoteDetailsArgs {
    skip?: number;
    take?: number;
    filter?: IResourceQuoteDetailFilterInput;
    order?: Array<IResourceQuoteDetailSortInput>;
}
export interface QueryToListResourceQuoteDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListResourceQuoteDetailsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListProposalArgs {
    skip?: number;
    take?: number;
    filter?: IProposalFilterInput;
    order?: Array<IProposalSortInput>;
}
export interface QueryToListProposalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListProposalArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProposalByIdArgs {
    id: IUUID;
}
export interface QueryToProposalByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProposalByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListCollaboratorsArgs {
    skip?: number;
    take?: number;
    filter?: ICollaboratorFilterInput;
    order?: Array<ICollaboratorSortInput>;
}
export interface QueryToListCollaboratorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListCollaboratorsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListCollaboratorHoursArgs {
    skip?: number;
    take?: number;
    filter?: ICollaboratorHoursFilterInput;
    order?: Array<ICollaboratorHoursSortInput>;
}
export interface QueryToListCollaboratorHoursResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListCollaboratorHoursArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToHousReportedProjectArgs {
    projectId: IUUID;
}
export interface QueryToHousReportedProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToHousReportedProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListEnumHiringTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToHiringByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToHiringByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToHiringByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToShiftByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToShiftByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToShiftByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToResourceQuotesByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToResourceQuotesByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToResourceQuotesByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCollaboratorsByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToCollaboratorsByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCollaboratorsByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToHiringServicesByServiceAreaIdArgs {
    serviceId: IUUID;
}
export interface QueryToHiringServicesByServiceAreaIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToHiringServicesByServiceAreaIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToConfigsArgs {
    id: IUUID;
}
export interface QueryToConfigsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToConfigsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToConfigurationTemplateByIdArgs {
    projectId: IUUID;
    templateType: ITemplateType;
}
export interface QueryToConfigurationTemplateByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToConfigurationTemplateByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListComponentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListWebsitePagesArgs {
    projectId?: IUUID;
    order?: Array<IWebsitePageSortInput>;
}
export interface QueryToListWebsitePagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListWebsitePagesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToWebSitePageByIdArgs {
    id: IUUID;
}
export interface QueryToWebSitePageByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToWebSitePageByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToWebsitePageComponentByIdArgs {
    id: IUUID;
}
export interface QueryToWebsitePageComponentByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToWebsitePageComponentByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListProjectPlanSubscriptionsArgs {
    skip?: number;
    take?: number;
    filter?: IProjectPlanSubscriptionFilterInput;
}
export interface QueryToListProjectPlanSubscriptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListProjectPlanSubscriptionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProjectPlanSubscriptionByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToProjectPlanSubscriptionByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProjectPlanSubscriptionByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProjectPlanSubscriptionsByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToProjectPlanSubscriptionsByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProjectPlanSubscriptionsByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListBusinessesArgs {
    filter?: IBusinessFilterInput;
}
export interface QueryToListBusinessesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListBusinessesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToBusinessesArgs {
    skip?: number;
    take?: number;
    filter?: IBusinessFilterInput;
}
export interface QueryToBusinessesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToBusinessesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToBusinessTypesArgs {
    skip?: number;
    take?: number;
    filter?: IBusinessTypeFilterInput;
}
export interface QueryToBusinessTypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToBusinessTypesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToBusinessRulesArgs {
    skip?: number;
    take?: number;
    filter?: IBusinessRuleFilterInput;
}
export interface QueryToBusinessRulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToBusinessRulesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToBusinessRuleByIdArgs {
    id: IUUID;
}
export interface QueryToBusinessRuleByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToBusinessRuleByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToBusinessTypeByIdArgs {
    id: IUUID;
}
export interface QueryToBusinessTypeByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToBusinessTypeByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToBusinessByIdArgs {
    id?: IUUID;
}
export interface QueryToBusinessByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToBusinessByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListProjectPlansArgs {
    filter?: IProjectPlanFilterInput;
}
export interface QueryToListProjectPlansResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListProjectPlansArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProjectPlansArgs {
    skip?: number;
    take?: number;
    filter?: IProjectPlanFilterInput;
}
export interface QueryToProjectPlansResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProjectPlansArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProjectPlanByIdArgs {
    id: IUUID;
}
export interface QueryToProjectPlanByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProjectPlanByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToWebsitePageBySlugArgs {
    slug: string;
    projectId: IUUID;
}
export interface QueryToWebsitePageBySlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToWebsitePageBySlugArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListTemplatesArgs {
    filter?: ITemplateFilterInput;
}
export interface QueryToListTemplatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListTemplatesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToTemplateByIdArgs {
    id: IUUID;
}
export interface QueryToTemplateByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToTemplateByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToErrorPagesArgs {
    filter?: IErrorPageFilterInput;
}
export interface QueryToErrorPagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToErrorPagesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToErrorPageByIdArgs {
    id: IUUID;
}
export interface QueryToErrorPageByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToErrorPageByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToErrorPageValidationsArgs {
    filter?: IErrorPageValidationFilterInput;
}
export interface QueryToErrorPageValidationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToErrorPageValidationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToErrorPageValidationByIdArgs {
    id: IUUID;
}
export interface QueryToErrorPageValidationByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToErrorPageValidationByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCouponByIdArgs {
    id: IUUID;
}
export interface QueryToCouponByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCouponByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCouponsArgs {
    filter?: ICouponFilterInput;
}
export interface QueryToCouponsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCouponsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCouponTemplatesArgs {
    filter?: ICouponTemplateFilterInput;
}
export interface QueryToCouponTemplatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCouponTemplatesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListDocumentCategoryArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IDocumentCategoryFilterInput;
    order?: Array<IDocumentCategorySortInput>;
}
export interface QueryToListDocumentCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListDocumentCategoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListDocumentCategoryDetailArgs {
    projectId: IUUID;
    filter?: IDocumentCategoryDetailFilterInput;
    order?: Array<IDocumentCategoryDetailSortInput>;
}
export interface QueryToListDocumentCategoryDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListDocumentCategoryDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListDocumentArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IDocumentFilterInput;
    order?: Array<IDocumentSortInput>;
}
export interface QueryToListDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListDocumentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListDocumentTemplateArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IDocumentTemplateFilterInput;
    order?: Array<IDocumentTemplateSortInput>;
}
export interface QueryToListDocumentTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListDocumentTemplateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListTemplatePageArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: ITemplatePageFilterInput;
    order?: Array<ITemplatePageSortInput>;
}
export interface QueryToListTemplatePageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListTemplatePageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListDocumentTagArgs {
    projectId: IUUID;
    filter?: IDocumentTagFilterInput;
    order?: Array<IDocumentTagSortInput>;
}
export interface QueryToListDocumentTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListDocumentTagArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListDocumentScanArgs {
    projectId: IUUID;
    filter?: IDocumentScanFilterInput;
    order?: Array<IDocumentScanSortInput>;
}
export interface QueryToListDocumentScanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListDocumentScanArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListDocumentReadArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IDocumentReadFilterInput;
    order?: Array<IDocumentReadSortInput>;
}
export interface QueryToListDocumentReadResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListDocumentReadArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVerifyUserRoomArgs {
    projectId: IUUID;
    sessionName: string;
}
export interface QueryToVerifyUserRoomResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVerifyUserRoomArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVerifyVideoRoomArgs {
    projectId: IUUID;
    sessionName: string;
}
export interface QueryToVerifyVideoRoomResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVerifyVideoRoomArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToRoomTokenLiveKit2Args {
    projectId: IUUID;
    sessionName: string;
    participantName: string;
    photo?: string;
    memberId?: string;
}
export interface QueryToRoomTokenLiveKit2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToRoomTokenLiveKit2Args, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToRoomTokenLiveKit3Args {
    projectId: IUUID;
    sessionName: string;
    participantName: string;
    memberId?: string;
}
export interface QueryToRoomTokenLiveKit3Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToRoomTokenLiveKit3Args, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToStartRecordRoom2Args {
    memberId: IUUID;
    name: string;
    roomName?: string;
}
export interface QueryToStartRecordRoom2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToStartRecordRoom2Args, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVideoCallsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListVideoRoomsArgs {
    projectId: IUUID;
}
export interface QueryToListVideoRoomsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListVideoRoomsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListRoomRecordsArgs {
    roomName: string;
}
export interface QueryToListRoomRecordsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListRoomRecordsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToRoomRecordArgs {
    videoRoomRecordId: IUUID;
}
export interface QueryToRoomRecordResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToRoomRecordArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVideoCallsByMemberArgs {
    memberId: IUUID;
    projectId: IUUID;
}
export interface QueryToVideoCallsByMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVideoCallsByMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVideoCallByIdArgs {
    id: IUUID;
}
export interface QueryToVideoCallByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVideoCallByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVideoCallBySessionIdArgs {
    sessionId: string;
}
export interface QueryToVideoCallBySessionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVideoCallBySessionIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToContactEmailsArgs {
    projectId: IUUID;
}
export interface QueryToContactEmailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToContactEmailsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListServiceAreaArgs {
    skip?: number;
    take?: number;
    filter?: IServiceFilterInput;
    order?: Array<IServiceSortInput>;
}
export interface QueryToListServiceAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListServiceAreaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListAreaArgs {
    skip?: number;
    take?: number;
    filter?: IAreaFilterInput;
    order?: Array<IAreaSortInput>;
}
export interface QueryToListAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListAreaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListServiceQuizArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IServiceQuizFilterInput;
    order?: Array<IServiceQuizSortInput>;
}
export interface QueryToListServiceQuizResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListServiceQuizArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListQuizArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IQuizFilterInput;
    order?: Array<IQuizSortInput>;
}
export interface QueryToListQuizResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListQuizArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListQuizSectionArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IQuizSectionFilterInput;
    order?: Array<IQuizSectionSortInput>;
}
export interface QueryToListQuizSectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListQuizSectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListQuizQuestionArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IQuizQuestionFilterInput;
    order?: Array<IQuizQuestionSortInput>;
}
export interface QueryToListQuizQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListQuizQuestionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListQuizQuestionAnswerArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IQuizQuestionAnswerFilterInput;
    order?: Array<IQuizQuestionAnswerSortInput>;
}
export interface QueryToListQuizQuestionAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListQuizQuestionAnswerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListQuizAnswerArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IQuizAnswerFilterInput;
    order?: Array<IQuizAnswerSortInput>;
}
export interface QueryToListQuizAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListQuizAnswerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListQuizMemberArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IQuizMemberFilterInput;
    order?: Array<IQuizMemberSortInput>;
}
export interface QueryToListQuizMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListQuizMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListQuizMemberGroupedArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    quizId?: IUUID;
    filter?: IQuizMemberGroupedFilterInput;
    order?: Array<IQuizMemberGroupedSortInput>;
}
export interface QueryToListQuizMemberGroupedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListQuizMemberGroupedArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListQuizQuestionMemberArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IQuizQuestionMemberFilterInput;
    order?: Array<IQuizQuestionMemberSortInput>;
}
export interface QueryToListQuizQuestionMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListQuizQuestionMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListQuizMemberAnswerArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IQuizMemberAnswerFilterInput;
    order?: Array<IQuizMemberAnswerSortInput>;
}
export interface QueryToListQuizMemberAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListQuizMemberAnswerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListQuizMemberDescriptionArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IQuizMemberDescriptionFilterInput;
    order?: Array<IQuizMemberDescriptionSortInput>;
}
export interface QueryToListQuizMemberDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListQuizMemberDescriptionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToServiceAreaByIdArgs {
    id: IUUID;
}
export interface QueryToServiceAreaByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToServiceAreaByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToAreaByIdArgs {
    id: IUUID;
}
export interface QueryToAreaByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToAreaByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToServiceAreaMemberByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToServiceAreaMemberByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToServiceAreaMemberByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCatalogAarcoArgs {
    projectId: IUUID;
    nameCatalog: IEnumNameCatalog;
    filter: string;
    filter2?: boolean;
    token: string;
}
export interface QueryToCatalogAarcoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCatalogAarcoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToQuotationByIdPeticionAarcoArgs {
    projectId: IUUID;
    token: string;
    idPeticion: number;
}
export interface QueryToQuotationByIdPeticionAarcoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToQuotationByIdPeticionAarcoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCoverageAarcoArgs {
    projectId: IUUID;
    token: string;
    idCotizacion: number;
    formasPago: Array<IEnumFormsPayment>;
    idProducto: number;
    productos: Array<number>;
    aseguradoras: number;
}
export interface QueryToCoverageAarcoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCoverageAarcoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPayment_transactionsArgs {
    skip?: number;
    take?: number;
    filter?: ITransactionFilterInput;
    order?: Array<ITransactionSortInput>;
}
export interface QueryToPayment_transactionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPayment_transactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMethodPaymentsArgs {
    skip?: number;
    take?: number;
    filter?: IMethodPaymentFilterInput;
    order?: Array<IMethodPaymentSortInput>;
}
export interface QueryToMethodPaymentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMethodPaymentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPlanArgs {
    skip?: number;
    take?: number;
    filter?: IPlanFilterInput;
    order?: Array<IPlanSortInput>;
}
export interface QueryToPlanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPlanArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInvoicesArgs {
    skip?: number;
    take?: number;
    filter?: IInvoiceFilterInput;
    order?: Array<IInvoiceSortInput>;
}
export interface QueryToListInvoicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInvoicesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToInvoiceByIdArgs {
    id: IUUID;
}
export interface QueryToInvoiceByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToInvoiceByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInvoiceAddressArgs {
    addressId: IUUID;
}
export interface QueryToListInvoiceAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInvoiceAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInvoiceDetailProductArgs {
    productId: IUUID;
}
export interface QueryToListInvoiceDetailProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInvoiceDetailProductArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToInvoicesByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToInvoicesByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToInvoicesByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCustomerSuscriptionsArgs {
    filter?: ICustomerSuscriptionFilterInput;
}
export interface QueryToCustomerSuscriptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCustomerSuscriptionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProductStripeByProductIdArgs {
    id: IUUID;
}
export interface QueryToProductStripeByProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProductStripeByProductIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPlanByProductIdArgs {
    productId: IUUID;
}
export interface QueryToPlanByProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPlanByProductIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListAccountKeyArgs {
    skip?: number;
    take?: number;
    filter?: IAccountKeyFilterInput;
    order?: Array<IAccountKeySortInput>;
}
export interface QueryToListAccountKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListAccountKeyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToAccountKeysByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToAccountKeysByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToAccountKeysByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPaymentMethodByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToPaymentMethodByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPaymentMethodByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMemberWithStripePaymentMethodArgs {
    memberId: IUUID;
}
export interface QueryToMemberWithStripePaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMemberWithStripePaymentMethodArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMethodPaymentByIdArgs {
    id: IUUID;
}
export interface QueryToMethodPaymentByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMethodPaymentByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToSubscriptionStatusArgs {
    memberId: IUUID;
    projectId: IUUID;
}
export interface QueryToSubscriptionStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSubscriptionStatusArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPaymentMethodsStripeArgs {
    memberId: IUUID;
    projectId: IUUID;
}
export interface QueryToPaymentMethodsStripeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPaymentMethodsStripeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarcatalogHdiCodeYearsCarIdArgs {
    carId: number;
    filter?: IVehiclesCarCatalogHdiCodeYearFilterInput;
    order?: Array<IVehiclesCarCatalogHdiCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogHdiCodeYearsCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarcatalogHdiCodeYearsCarIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarcatalogMapfreeCodeYearsCarIdArgs {
    carId: number;
    filter?: IVehiclesCarCatalogMapfreCodeYearFilterInput;
    order?: Array<IVehiclesCarCatalogMapfreCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogMapfreeCodeYearsCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarcatalogMapfreeCodeYearsCarIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarcatalogQualitasCodeYearsCarIdArgs {
    carId: number;
    filter?: IVehiclesCarCatalogQualitasCodeYearFilterInput;
    order?: Array<IVehiclesCarCatalogQualitasCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogQualitasCodeYearsCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarcatalogQualitasCodeYearsCarIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarcatalogZurichCodeYearsCarIdArgs {
    carId: number;
    filter?: IVehiclesCarCatalogZurichCodeYearFilterInput;
    order?: Array<IVehiclesCarCatalogZurichCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogZurichCodeYearsCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarcatalogZurichCodeYearsCarIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToQuoteCoveragesArgs {
    filter?: IQuotationCoverageFilterInput;
    order?: Array<IQuotationCoverageSortInput>;
}
export interface QueryToQuoteCoveragesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToQuoteCoveragesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToQuoteCoverageByIdArgs {
    id: IUUID;
}
export interface QueryToQuoteCoverageByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToQuoteCoverageByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListStaffQuoteArgs {
    projectId: IUUID;
    filter?: IStaffQuoteFilterInput;
    order?: Array<IStaffQuoteSortInput>;
}
export interface QueryToListStaffQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListStaffQuoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMultiquoter_listProposalArgs {
    projectId: IUUID;
    filter?: IProposalFilterInput;
    order?: Array<IProposalSortInput>;
}
export interface QueryToMultiquoter_listProposalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMultiquoter_listProposalArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListCollaboratorArgs {
    projectId: IUUID;
    filter?: ICollaboratorFilterInput;
    order?: Array<ICollaboratorSortInput>;
}
export interface QueryToListCollaboratorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListCollaboratorArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCoverageByProjectArgs {
    projectId: IUUID;
    insurerName: string;
    packageStatus: IInsurerPackageStatus;
}
export interface QueryToCoverageByProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCoverageByProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPackagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCoveragesArgs {
    insurer: string;
}
export interface QueryToCoveragesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCoveragesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToRunServiceQuoteFetchArgs {
    input: IQuoterRequestInput;
}
export interface QueryToRunServiceQuoteFetchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToRunServiceQuoteFetchArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToStadisticsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToStadisticsQualitasResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListRQuoterProfilesByProjectIdArgs {
    projectId: IUUID;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    filter?: IQuoterProfileFilterInput;
    order?: Array<IQuoterProfileSortInput>;
}
export interface QueryToListRQuoterProfilesByProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListRQuoterProfilesByProjectIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListRQuoterProfilesInsurerByProjectIdArgs {
    projectId: IUUID;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    filter?: IQuoterProfileInsurerFilterInput;
    order?: Array<IQuoterProfileInsurerSortInput>;
}
export interface QueryToListRQuoterProfilesInsurerByProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListRQuoterProfilesInsurerByProjectIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToHomologatedArgs {
    code: string;
}
export interface QueryToHomologatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToHomologatedArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerServiceCredentialsArgs {
    projectId: IUUID;
}
export interface QueryToListInsurerServiceCredentialsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerServiceCredentialsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerService2Args {
    name: string;
}
export interface QueryToListInsurerService2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerService2Args, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListRelationsArgs {
    carId: number;
}
export interface QueryToListRelationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListRelationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToQuotesArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    status: IQuoteStatus;
    filter?: IQuoteFilterInput;
    order?: Array<IQuoteSortInput>;
}
export interface QueryToQuotesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToQuotesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListQuotesAltArgs {
    skip?: number;
    take?: number;
    filter?: IQuoteFilterInput;
    order?: Array<IQuoteSortInput>;
}
export interface QueryToListQuotesAltResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListQuotesAltArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListQuotesArgs {
    projectId: IUUID;
    filter?: IQuoteFilterInput;
}
export interface QueryToListQuotesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListQuotesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToQuotesByMemberArgs {
    memberId: IUUID;
    status: IQuoteStatus;
}
export interface QueryToQuotesByMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToQuotesByMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListRegistrationsArgs {
    projectId: IUUID;
    filter?: IRegistrationFilterInput;
    order?: Array<IRegistrationSortInput>;
}
export interface QueryToListRegistrationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListRegistrationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToQuoteByIdArgs {
    id: IUUID;
}
export interface QueryToQuoteByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToQuoteByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListQuoteServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListGendersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListCarsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListCarTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListCarBrandArgs {
    type: string;
    insurer?: string;
}
export interface QueryToListCarBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListCarBrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListCarSuBbrandArgs {
    type: string;
    insurer?: string;
    brand: string;
}
export interface QueryToListCarSuBbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListCarSuBbrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListModelArgs {
    type: string;
    insurer?: string;
    brand: string;
    subbrand: string;
}
export interface QueryToListModelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListModelArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCarArgs {
    type: string;
    insurer?: string;
    brand: string;
    subbrand: string;
    year: ILong;
}
export interface QueryToCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCarArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToRelationCarsArgs {
    qualitasCode: string;
}
export interface QueryToRelationCarsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToRelationCarsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToColonyArgs {
    zipcode: string;
}
export interface QueryToColonyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToColonyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListCoveragesArgs {
    coverage: string;
    owner?: string;
    type?: string;
    insurance?: string;
}
export interface QueryToListCoveragesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListCoveragesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCatalogByIdArgs {
    catalogId: IUUID;
}
export interface QueryToCatalogByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCatalogByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCatalogsArgs {
    skip?: number;
    take?: number;
    filter?: ICatalogFilterInput;
    order?: Array<ICatalogSortInput>;
}
export interface QueryToCatalogsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCatalogsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCatalogByYearsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToInsurersArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IInsurerFilterInput;
    order?: Array<IInsurerSortInput>;
}
export interface QueryToInsurersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToInsurersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToOfficesArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IOfficeFilterInput;
    order?: Array<IOfficeSortInput>;
}
export interface QueryToOfficesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToOfficesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToQuatorProfilesArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IQuoterProfileFilterInput;
    order?: Array<IQuoterProfileSortInput>;
}
export interface QueryToQuatorProfilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToQuatorProfilesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToQuoterProfileByIdArgs {
    quoterProfileId: IUUID;
}
export interface QueryToQuoterProfileByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToQuoterProfileByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarCatalogAbasArgs {
    brand: string;
    subbrand: string;
    filter?: IVehiclesCarCatalogAbaFilterInput;
    order?: Array<IVehiclesCarCatalogAbaSortInput>;
}
export interface QueryToVehiclesCarCatalogAbasResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarCatalogAbasArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarCatalogAbasByBrandArgs {
    brand: string;
    filter?: IVehiclesCarCatalogAbaFilterInput;
    order?: Array<IVehiclesCarCatalogAbaSortInput>;
}
export interface QueryToVehiclesCarCatalogAbasByBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarCatalogAbasByBrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarCatalogAbasBySubBrandArgs {
    subbrand: string;
    filter?: IVehiclesCarCatalogAbaFilterInput;
    order?: Array<IVehiclesCarCatalogAbaSortInput>;
}
export interface QueryToVehiclesCarCatalogAbasBySubBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarCatalogAbasBySubBrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarCatalogAfirmeArgs {
    filter?: IVehiclesCarCatalogAfirmeFilterInput;
    order?: Array<IVehiclesCarCatalogAfirmeSortInput>;
}
export interface QueryToVehiclesCarCatalogAfirmeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarCatalogAfirmeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarCatalogAfirmebyBrandArgs {
    brand: string;
    filter?: IVehiclesCarCatalogAfirmeFilterInput;
    order?: Array<IVehiclesCarCatalogAfirmeSortInput>;
}
export interface QueryToVehiclesCarCatalogAfirmebyBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarCatalogAfirmebyBrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarCatalogAfirmebySubrandArgs {
    subbrand: string;
    filter?: IVehiclesCarCatalogAfirmeFilterInput;
    order?: Array<IVehiclesCarCatalogAfirmeSortInput>;
}
export interface QueryToVehiclesCarCatalogAfirmebySubrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarCatalogAfirmebySubrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarCatalogAigArgs {
    filter?: IVehiclesCarCatalogAigFilterInput;
    order?: Array<IVehiclesCarCatalogAigSortInput>;
}
export interface QueryToVehiclesCarCatalogAigResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarCatalogAigArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarCatalogAigByBrandArgs {
    brand: string;
    filter?: IVehiclesCarCatalogAigFilterInput;
    order?: Array<IVehiclesCarCatalogAigSortInput>;
}
export interface QueryToVehiclesCarCatalogAigByBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarCatalogAigByBrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarCatalogAigBySubBrandArgs {
    subbrand: string;
    filter?: IVehiclesCarCatalogAigFilterInput;
    order?: Array<IVehiclesCarCatalogAigSortInput>;
}
export interface QueryToVehiclesCarCatalogAigBySubBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarCatalogAigBySubBrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarCatalogAnasArgs {
    filter?: IVehiclesCarCatalogAnaFilterInput;
    order?: Array<IVehiclesCarCatalogAnaSortInput>;
}
export interface QueryToVehiclesCarCatalogAnasResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarCatalogAnasArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarCatalogAnasByBrandArgs {
    brand: string;
    filter?: IVehiclesCarCatalogAnaFilterInput;
    order?: Array<IVehiclesCarCatalogAnaSortInput>;
}
export interface QueryToVehiclesCarCatalogAnasByBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarCatalogAnasByBrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarCatalogAnasbySubbrandArgs {
    subbrand: string;
    filter?: IVehiclesCarCatalogAnaFilterInput;
    order?: Array<IVehiclesCarCatalogAnaSortInput>;
}
export interface QueryToVehiclesCarCatalogAnasbySubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarCatalogAnasbySubbrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesAtlasArgs {
    filter?: IVehiclesCarCatalogAtlaFilterInput;
    order?: Array<IVehiclesCarCatalogAtlaSortInput>;
}
export interface QueryToVehiclesAtlasResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesAtlasArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesAtlasByBrandArgs {
    brand: string;
    filter?: IVehiclesCarCatalogAtlaFilterInput;
    order?: Array<IVehiclesCarCatalogAtlaSortInput>;
}
export interface QueryToVehiclesAtlasByBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesAtlasByBrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesAtlasBySubbrandArgs {
    subbrand: string;
    filter?: IVehiclesCarCatalogAtlaFilterInput;
    order?: Array<IVehiclesCarCatalogAtlaSortInput>;
}
export interface QueryToVehiclesAtlasBySubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesAtlasBySubbrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesAxaArgs {
    filter?: IVehiclesCarCatalogAxaFilterInput;
    order?: Array<IVehiclesCarCatalogAxaSortInput>;
}
export interface QueryToVehiclesAxaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesAxaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesAxaByBrandArgs {
    brand: string;
    filter?: IVehiclesCarCatalogAxaFilterInput;
    order?: Array<IVehiclesCarCatalogAxaSortInput>;
}
export interface QueryToVehiclesAxaByBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesAxaByBrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesAxaBySubbrandArgs {
    subbrand: string;
    filter?: IVehiclesCarCatalogAxaFilterInput;
    order?: Array<IVehiclesCarCatalogAxaSortInput>;
}
export interface QueryToVehiclesAxaBySubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesAxaBySubbrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesBanorteArgs {
    filter?: IVehiclesCarCatalogBanorteFilterInput;
    order?: Array<IVehiclesCarCatalogBanorteSortInput>;
}
export interface QueryToVehiclesBanorteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesBanorteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesBanorteByBrandArgs {
    brand: string;
    filter?: IVehiclesCarCatalogBanorteFilterInput;
    order?: Array<IVehiclesCarCatalogBanorteSortInput>;
}
export interface QueryToVehiclesBanorteByBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesBanorteByBrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesBanorteBySubbrandArgs {
    subbrand: string;
    filter?: IVehiclesCarCatalogBanorteFilterInput;
    order?: Array<IVehiclesCarCatalogBanorteSortInput>;
}
export interface QueryToVehiclesBanorteBySubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesBanorteBySubbrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesGripArgs {
    filter?: IVehiclesCarCatalogGnpFilterInput;
    order?: Array<IVehiclesCarCatalogGnpSortInput>;
}
export interface QueryToVehiclesGripResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesGripArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesGripByBrandArgs {
    brand: string;
    filter?: IVehiclesCarCatalogGnpFilterInput;
    order?: Array<IVehiclesCarCatalogGnpSortInput>;
}
export interface QueryToVehiclesGripByBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesGripByBrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesGripBySubbrandArgs {
    subbrand: string;
    filter?: IVehiclesCarCatalogGnpFilterInput;
    order?: Array<IVehiclesCarCatalogGnpSortInput>;
}
export interface QueryToVehiclesGripBySubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesGripBySubbrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesHdiArgs {
    filter?: IVehiclesCarCatalogHdiFilterInput;
    order?: Array<IVehiclesCarCatalogHdiSortInput>;
}
export interface QueryToVehiclesHdiResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesHdiArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesHdiByBrandArgs {
    brand: string;
    filter?: IVehiclesCarCatalogHdiFilterInput;
    order?: Array<IVehiclesCarCatalogHdiSortInput>;
}
export interface QueryToVehiclesHdiByBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesHdiByBrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesHdiBySubbrandArgs {
    subbrand: string;
    filter?: IVehiclesCarCatalogHdiFilterInput;
    order?: Array<IVehiclesCarCatalogHdiSortInput>;
}
export interface QueryToVehiclesHdiBySubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesHdiBySubbrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesMapfreeArgs {
    filter?: IVehiclesCarCatalogMapfreFilterInput;
    order?: Array<IVehiclesCarCatalogMapfreSortInput>;
}
export interface QueryToVehiclesMapfreeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesMapfreeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesMapfreeByBrandArgs {
    brand: string;
    filter?: IVehiclesCarCatalogMapfreFilterInput;
    order?: Array<IVehiclesCarCatalogMapfreSortInput>;
}
export interface QueryToVehiclesMapfreeByBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesMapfreeByBrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesMapfreeBySubbrandArgs {
    subbrand: string;
    filter?: IVehiclesCarCatalogMapfreFilterInput;
    order?: Array<IVehiclesCarCatalogMapfreSortInput>;
}
export interface QueryToVehiclesMapfreeBySubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesMapfreeBySubbrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesPArgs {
    filter?: IVehiclesCarCatalogPFilterInput;
    order?: Array<IVehiclesCarCatalogPSortInput>;
}
export interface QueryToVehiclesPResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesPArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesPByBrandArgs {
    brand: string;
    filter?: IVehiclesCarCatalogPFilterInput;
    order?: Array<IVehiclesCarCatalogPSortInput>;
}
export interface QueryToVehiclesPByBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesPByBrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesPBySubbrandArgs {
    subbrand: string;
    filter?: IVehiclesCarCatalogPFilterInput;
    order?: Array<IVehiclesCarCatalogPSortInput>;
}
export interface QueryToVehiclesPBySubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesPBySubbrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesPotosiArgs {
    filter?: IVehiclesCarCatalogPotosiFilterInput;
    order?: Array<IVehiclesCarCatalogPotosiSortInput>;
}
export interface QueryToVehiclesPotosiResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesPotosiArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesPotosiByBrandArgs {
    brand: string;
    filter?: IVehiclesCarCatalogPotosiFilterInput;
    order?: Array<IVehiclesCarCatalogPotosiSortInput>;
}
export interface QueryToVehiclesPotosiByBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesPotosiByBrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesPotosiBySubbrandArgs {
    subbrand: string;
    filter?: IVehiclesCarCatalogPotosiFilterInput;
    order?: Array<IVehiclesCarCatalogPotosiSortInput>;
}
export interface QueryToVehiclesPotosiBySubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesPotosiBySubbrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesQualitasArgs {
    filter?: IVehiclesCarCatalogQualitaFilterInput;
    order?: Array<IVehiclesCarCatalogQualitaSortInput>;
}
export interface QueryToVehiclesQualitasResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesQualitasArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesQualitasByBrandArgs {
    brand: string;
    filter?: IVehiclesCarCatalogQualitaFilterInput;
    order?: Array<IVehiclesCarCatalogQualitaSortInput>;
}
export interface QueryToVehiclesQualitasByBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesQualitasByBrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesQualitasBySubbrandArgs {
    subbrand: string;
    filter?: IVehiclesCarCatalogQualitaFilterInput;
    order?: Array<IVehiclesCarCatalogQualitaSortInput>;
}
export interface QueryToVehiclesQualitasBySubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesQualitasBySubbrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesZurichArgs {
    filter?: IVehiclesCarCatalogZurichFilterInput;
    order?: Array<IVehiclesCarCatalogZurichSortInput>;
}
export interface QueryToVehiclesZurichResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesZurichArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesZurichByBrandArgs {
    brand: string;
    filter?: IVehiclesCarCatalogZurichFilterInput;
    order?: Array<IVehiclesCarCatalogZurichSortInput>;
}
export interface QueryToVehiclesZurichByBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesZurichByBrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesZurichBySubbrandArgs {
    subbrand: string;
    filter?: IVehiclesCarCatalogZurichFilterInput;
    order?: Array<IVehiclesCarCatalogZurichSortInput>;
}
export interface QueryToVehiclesZurichBySubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesZurichBySubbrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarcatalogAbaCodeYearsCarIdArgs {
    carId: number;
    filter?: IVehiclesCarCatalogAbaCodeYearFilterInput;
    order?: Array<IVehiclesCarCatalogAbaCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogAbaCodeYearsCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarcatalogAbaCodeYearsCarIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarcatalogAfirmeCodeYearsCarIdArgs {
    carId: number;
    filter?: IVehiclesCarCatalogAfirmeCodeYearFilterInput;
    order?: Array<IVehiclesCarCatalogAfirmeCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogAfirmeCodeYearsCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarcatalogAfirmeCodeYearsCarIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarcatalogAxaCodeYearsCarIdArgs {
    carId: number;
    filter?: IVehiclesCarCatalogAxaCodeYearFilterInput;
    order?: Array<IVehiclesCarCatalogAxaCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogAxaCodeYearsCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarcatalogAxaCodeYearsCarIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarcatalogAtlasCodeYearsCarIdArgs {
    carId: number;
    filter?: IVehiclesCarCatalogAtlasCodeYearFilterInput;
    order?: Array<IVehiclesCarCatalogAtlasCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogAtlasCodeYearsCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarcatalogAtlasCodeYearsCarIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarcatalogBanorteCodeYearsCarIdArgs {
    carId: number;
    filter?: IVehiclesCarCatalogBanorteCodeYearFilterInput;
    order?: Array<IVehiclesCarCatalogBanorteCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogBanorteCodeYearsCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarcatalogBanorteCodeYearsCarIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVehiclesCarcatalogGnpCodeYearsCarIdArgs {
    carId: number;
    filter?: IVehiclesCarCatalogGnpCodeYearFilterInput;
    order?: Array<IVehiclesCarCatalogGnpCodeYearSortInput>;
}
export interface QueryToVehiclesCarcatalogGnpCodeYearsCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVehiclesCarcatalogGnpCodeYearsCarIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToApiServicesArgs {
    projectId: IUUID;
}
export interface QueryToApiServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToApiServicesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToApiServiceBySecretAndProjectIdArgs {
    projectId: IUUID;
    secretkey: string;
}
export interface QueryToApiServiceBySecretAndProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToApiServiceBySecretAndProjectIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListDynamicPageArgs {
    projectId: IUUID;
    filter?: IDynamicPageFilterInput;
    order?: Array<IDynamicPageSortInput>;
}
export interface QueryToListDynamicPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListDynamicPageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListDynamicBlockArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IDynamicBlockFilterInput;
    order?: Array<IDynamicBlockSortInput>;
}
export interface QueryToListDynamicBlockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListDynamicBlockArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListDynamicSectionArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IDynamicSectionFilterInput;
    order?: Array<IDynamicSectionSortInput>;
}
export interface QueryToListDynamicSectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListDynamicSectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListDynamicTabArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IDynamicTabFilterInput;
    order?: Array<IDynamicTabSortInput>;
}
export interface QueryToListDynamicTabResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListDynamicTabArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListDynamicSectionBlockArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IDynamicSectionBlockFilterInput;
    order?: Array<IDynamicSectionBlockSortInput>;
}
export interface QueryToListDynamicSectionBlockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListDynamicSectionBlockArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListDynamicCustomMetaArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IDynamicCustomMetaFilterInput;
    order?: Array<IDynamicCustomMetaSortInput>;
}
export interface QueryToListDynamicCustomMetaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListDynamicCustomMetaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListDynamicCustomValueArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IDynamicCustomValueFilterInput;
    order?: Array<IDynamicCustomValueSortInput>;
}
export interface QueryToListDynamicCustomValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListDynamicCustomValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListChargesArgs {
    skip?: number;
    take?: number;
    filter?: IChargeFilterInput;
    order?: Array<IChargeSortInput>;
}
export interface QueryToListChargesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListChargesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListClinicHistoryArgs {
    filter?: IClinicHistoryFilterInput;
    order?: Array<IClinicHistorySortInput>;
}
export interface QueryToListClinicHistoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListClinicHistoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListConsultArgs {
    skip?: number;
    take?: number;
    filter?: IEventDetailFilterInput;
    order?: Array<IEventDetailSortInput>;
}
export interface QueryToListConsultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListConsultArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListFisicExamArgs {
    filter?: IFisicExamFilterInput;
    order?: Array<IFisicExamSortInput>;
}
export interface QueryToListFisicExamResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListFisicExamArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMedicalBackgroundsArgs {
    projectId: IUUID;
    memberId: IUUID;
    eventTypeId: IUUID;
    filter?: IMedicalBackgroundFilterInput;
    order?: Array<IMedicalBackgroundSortInput>;
}
export interface QueryToListMedicalBackgroundsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMedicalBackgroundsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMedicBackgroundDetailsArgs {
    filter?: IMedicalBackgroundDetailFilterInput;
    order?: Array<IMedicalBackgroundDetailSortInput>;
}
export interface QueryToListMedicBackgroundDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMedicBackgroundDetailsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListClinicHistory_MedicalBackgroundDetailsArgs {
    filter?: IClinicHistoryMedicalBackgroundDetailFilterInput;
    order?: Array<IClinicHistoryMedicalBackgroundDetailSortInput>;
}
export interface QueryToListClinicHistory_MedicalBackgroundDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListClinicHistory_MedicalBackgroundDetailsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMedicinesArgs {
    eventId: IUUID;
    filter?: IMedicineFilterInput;
    order?: Array<IMedicineSortInput>;
}
export interface QueryToListMedicinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMedicinesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMedicalServicesArgs {
    filter?: IMedicalServiceFilterInput;
    order?: Array<IMedicalServiceSortInput>;
}
export interface QueryToListMedicalServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMedicalServicesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListVaccinesArgs {
    filter?: IVaccineFilterInput;
    order?: Array<IVaccineSortInput>;
}
export interface QueryToListVaccinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListVaccinesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListVitalSignsArgs {
    filter?: IVitalSignFilterInput;
    order?: Array<IVitalSignSortInput>;
}
export interface QueryToListVitalSignsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListVitalSignsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMedicalConfigsArgs {
    filter?: IMedicalConfigFilterInput;
    order?: Array<IMedicalConfigSortInput>;
}
export interface QueryToListMedicalConfigsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMedicalConfigsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListRegistSesionsArgs {
    filter?: IRegistSesionFilterInput;
    order?: Array<IRegistSesionSortInput>;
}
export interface QueryToListRegistSesionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListRegistSesionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListTherapyArgs {
    skip?: number;
    take?: number;
    filter?: ITherapyFilterInput;
    order?: Array<ITherapySortInput>;
}
export interface QueryToListTherapyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListTherapyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListRecipeConfigArgs {
    filter?: IRecipeConfigFilterInput;
    order?: Array<IRecipeConfigSortInput>;
}
export interface QueryToListRecipeConfigResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListRecipeConfigArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMedicRecipeArgs {
    filter?: IMedicRecipeFilterInput;
    order?: Array<IMedicRecipeSortInput>;
}
export interface QueryToListMedicRecipeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMedicRecipeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListConsultNotesArgs {
    filter?: IConsultNoteFilterInput;
    order?: Array<IConsultNoteSortInput>;
}
export interface QueryToListConsultNotesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListConsultNotesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListPacientNoteArgs {
    filter?: IPacientNoteFilterInput;
    order?: Array<IPacientNoteSortInput>;
}
export interface QueryToListPacientNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListPacientNoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListDiagnosticArgs {
    filter?: IDiagnosticFilterInput;
    order?: Array<IDiagnosticSortInput>;
}
export interface QueryToListDiagnosticResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListDiagnosticArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListPacientMedicalBackgroundArgs {
    filter?: IPacientMedicalBackgroundFilterInput;
    order?: Array<IPacientMedicalBackgroundSortInput>;
}
export interface QueryToListPacientMedicalBackgroundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListPacientMedicalBackgroundArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListBillingRequestsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListFormatsArgs {
    filter?: IFormatFilterInput;
    order?: Array<IFormatSortInput>;
}
export interface QueryToListFormatsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListFormatsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListPatientResponsesArgs {
    filter?: IPatientVitalSignsResponseFilterInput;
    order?: Array<IPatientVitalSignsResponseSortInput>;
}
export interface QueryToListPatientResponsesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListPatientResponsesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMedicalBackgroundsByFormatIdArgs {
    formatId: IUUID;
}
export interface QueryToMedicalBackgroundsByFormatIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMedicalBackgroundsByFormatIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToConsultInfoArgs {
    eventId: IUUID;
}
export interface QueryToConsultInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToConsultInfoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListChagesForPacientArgs {
    skip?: number;
    take?: number;
    memberId: IUUID;
    filter?: IEventDetailFilterInput;
    order?: Array<IEventDetailSortInput>;
}
export interface QueryToListChagesForPacientResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListChagesForPacientArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListPacientMedicalBackgroundByIdArgs {
    memberId: IUUID;
}
export interface QueryToListPacientMedicalBackgroundByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListPacientMedicalBackgroundByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListEventDetailsByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToListEventDetailsByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListEventDetailsByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListFisicExamsByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToListFisicExamsByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListFisicExamsByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMedicalBackgroundByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToListMedicalBackgroundByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMedicalBackgroundByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMedicRecipesByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToListMedicRecipesByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMedicRecipesByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListPatientNotesByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToListPatientNotesByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListPatientNotesByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListVitalSignsByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToListVitalSignsByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListVitalSignsByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListVaccinesByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToListVaccinesByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListVaccinesByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListDiagnosticByEventIdArgs {
    eventId: IUUID;
}
export interface QueryToListDiagnosticByEventIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListDiagnosticByEventIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListEnumInsideTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListSpaceArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: ISpaceFilterInput;
    order?: Array<ISpaceSortInput>;
}
export interface QueryToListSpaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListSpaceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListBoardStatusArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IBoardStatusFilterInput;
    order?: Array<IBoardStatusSortInput>;
}
export interface QueryToListBoardStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListBoardStatusArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListBoardArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IBoardFilterInput;
    order?: Array<IBoardSortInput>;
}
export interface QueryToListBoardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListBoardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListBoardListArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IBoardListFilterInput;
    order?: Array<IBoardListSortInput>;
}
export interface QueryToListBoardListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListBoardListArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListCardReplyArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: ICardReplyFilterInput;
    order?: Array<ICardReplySortInput>;
}
export interface QueryToListCardReplyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListCardReplyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListCardArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: ICardFilterInput;
    order?: Array<ICardSortInput>;
}
export interface QueryToListCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListNestedFilesArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: INestedFileFilterInput;
    order?: Array<INestedFileSortInput>;
}
export interface QueryToListNestedFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListNestedFilesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMemberCardArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IMemberCardFilterInput;
    order?: Array<IMemberCardSortInput>;
}
export interface QueryToListMemberCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMemberCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMemberBoardArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IMemberBoardFilterInput;
    order?: Array<IMemberBoardSortInput>;
}
export interface QueryToListMemberBoardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMemberBoardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMemberSpaceArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IMemberSpaceFilterInput;
    order?: Array<IMemberSpaceSortInput>;
}
export interface QueryToListMemberSpaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMemberSpaceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMemberSpaceOnValueArgs {
    spaceId: IUUID;
    boardColumnValueId: IUUID;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    order?: Array<IMemberSpaceSortInput>;
}
export interface QueryToListMemberSpaceOnValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMemberSpaceOnValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMemberSpaceOnCardArgs {
    spaceId: IUUID;
    cardId: IUUID;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    order?: Array<IMemberSpaceSortInput>;
}
export interface QueryToListMemberSpaceOnCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMemberSpaceOnCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMemberBoardOnValueArgs {
    boardId: IUUID;
    boardColumnValueId: IUUID;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    order?: Array<IMemberBoardSortInput>;
}
export interface QueryToListMemberBoardOnValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMemberBoardOnValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMemberBoardOnCardArgs {
    boardId: IUUID;
    cardId: IUUID;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    order?: Array<IMemberBoardSortInput>;
}
export interface QueryToListMemberBoardOnCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMemberBoardOnCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListBoardColumnTypesArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IBoardColumnTypeFilterInput;
    order?: Array<IBoardColumnTypeSortInput>;
}
export interface QueryToListBoardColumnTypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListBoardColumnTypesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMemberSpaceAccessArgs {
    spaceId: IUUID;
}
export interface QueryToListMemberSpaceAccessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMemberSpaceAccessArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListCardColumnValueArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: ICardColumnValueFilterInput;
    order?: Array<ICardColumnValueSortInput>;
}
export interface QueryToListCardColumnValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListCardColumnValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListBoardMemberReferenceArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IBoardMemberReferenceFilterInput;
    order?: Array<IBoardMemberReferenceSortInput>;
}
export interface QueryToListBoardMemberReferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListBoardMemberReferenceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMemberBoardByMemberArgs {
    memberId: IUUID;
}
export interface QueryToMemberBoardByMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMemberBoardByMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMemberSpaceByMemberArgs {
    memberId: IUUID;
}
export interface QueryToMemberSpaceByMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMemberSpaceByMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToIsMembersInspaceArgs {
    memberId: IUUID;
    spaceId: IUUID;
}
export interface QueryToIsMembersInspaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToIsMembersInspaceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToIsMembersInBoardArgs {
    memberId: IUUID;
    boardId: IUUID;
}
export interface QueryToIsMembersInBoardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToIsMembersInBoardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToAttributeByIdArgs {
    id: IUUID;
}
export interface QueryToAttributeByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToAttributeByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToAttributeValueByIdArgs {
    id: IUUID;
}
export interface QueryToAttributeValueByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToAttributeValueByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToBuildingSiteAddressByIdArgs {
    id: IUUID;
}
export interface QueryToBuildingSiteAddressByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToBuildingSiteAddressByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCustomerByIdArgs {
    id: IUUID;
}
export interface QueryToCustomerByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCustomerByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMadreQuotationByIdArgs {
    id: IUUID;
}
export interface QueryToMadreQuotationByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMadreQuotationByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialByIdArgs {
    id: IUUID;
}
export interface QueryToMaterialByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialCategoryByIdArgs {
    id: IUUID;
}
export interface QueryToMaterialCategoryByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialCategoryByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialCombinationByIdArgs {
    id: IUUID;
}
export interface QueryToMaterialCombinationByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialCombinationByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialCombinationAttributeByIdArgs {
    id: IUUID;
}
export interface QueryToMaterialCombinationAttributeByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialCombinationAttributeByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialModuleByIdArgs {
    id: IUUID;
}
export interface QueryToMaterialModuleByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialModuleByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialQuotationByIdArgs {
    id: IUUID;
}
export interface QueryToMaterialQuotationByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialQuotationByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialStockByIdArgs {
    id: IUUID;
}
export interface QueryToMaterialStockByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialStockByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialStockMeasureByIdArgs {
    id: IUUID;
}
export interface QueryToMaterialStockMeasureByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialStockMeasureByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialVariableModuleByIdArgs {
    id: IUUID;
}
export interface QueryToMaterialVariableModuleByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialVariableModuleByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialVariableQuotationByIdArgs {
    id: IUUID;
}
export interface QueryToMaterialVariableQuotationByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialVariableQuotationByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMeasureByIdArgs {
    id: IUUID;
}
export interface QueryToMeasureByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMeasureByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMeasureUnityByIdArgs {
    id: IUUID;
}
export interface QueryToMeasureUnityByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMeasureUnityByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMeasureUnityTwoByIdArgs {
    id: IUUID;
}
export interface QueryToMeasureUnityTwoByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMeasureUnityTwoByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMeasureValueByIdArgs {
    id: IUUID;
}
export interface QueryToMeasureValueByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMeasureValueByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToModuleByIdArgs {
    id: IUUID;
}
export interface QueryToModuleByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToModuleByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToModuleCategoryByIdArgs {
    id: IUUID;
}
export interface QueryToModuleCategoryByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToModuleCategoryByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToQuotationByIdArgs {
    id: IUUID;
}
export interface QueryToQuotationByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToQuotationByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToQuotationModuleByIdArgs {
    id: IUUID;
}
export interface QueryToQuotationModuleByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToQuotationModuleByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToUserCustomerByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToUserCustomerByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToUserCustomerByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVariableByIdArgs {
    id: IUUID;
}
export interface QueryToVariableByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVariableByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToAttributesArgs {
    projectId: IUUID;
}
export interface QueryToAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToAttributesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToAttributeValuesArgs {
    projectId: IUUID;
}
export interface QueryToAttributeValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToAttributeValuesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToBuildingSiteAddressesArgs {
    projectId: IUUID;
}
export interface QueryToBuildingSiteAddressesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToBuildingSiteAddressesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCustomersArgs {
    projectId: IUUID;
}
export interface QueryToCustomersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCustomersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMadreQuotationsArgs {
    projectId: IUUID;
}
export interface QueryToMadreQuotationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMadreQuotationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialsArgs {
    projectId: IUUID;
}
export interface QueryToMaterialsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialCategoriesArgs {
    projectId: IUUID;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
}
export interface QueryToMaterialCategoriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialCategoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialCombinationsArgs {
    projectId: IUUID;
}
export interface QueryToMaterialCombinationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialCombinationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialCombinationAttributesArgs {
    projectId: IUUID;
}
export interface QueryToMaterialCombinationAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialCombinationAttributesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialModulesArgs {
    projectId: IUUID;
}
export interface QueryToMaterialModulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialModulesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialQuotationsArgs {
    projectId: IUUID;
}
export interface QueryToMaterialQuotationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialQuotationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialStocksArgs {
    projectId: IUUID;
}
export interface QueryToMaterialStocksResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialStocksArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialStockMeasuresArgs {
    projectId: IUUID;
}
export interface QueryToMaterialStockMeasuresResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialStockMeasuresArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialVariableModulesArgs {
    projectId: IUUID;
}
export interface QueryToMaterialVariableModulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialVariableModulesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMaterialVariableQuotationsArgs {
    projectId: IUUID;
}
export interface QueryToMaterialVariableQuotationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMaterialVariableQuotationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMeasuresArgs {
    projectId: IUUID;
}
export interface QueryToMeasuresResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMeasuresArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMeasureUnitiesArgs {
    projectId: IUUID;
}
export interface QueryToMeasureUnitiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMeasureUnitiesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMeasureUnityTwosArgs {
    projectId: IUUID;
}
export interface QueryToMeasureUnityTwosResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMeasureUnityTwosArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMeasureValuesArgs {
    projectId: IUUID;
}
export interface QueryToMeasureValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMeasureValuesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToModulesArgs {
    projectId: IUUID;
}
export interface QueryToModulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToModulesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToModuleCategoriesArgs {
    projectId: IUUID;
}
export interface QueryToModuleCategoriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToModuleCategoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToQuotationsArgs {
    projectId: IUUID;
}
export interface QueryToQuotationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToQuotationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToQuotationModulesArgs {
    projectId: IUUID;
}
export interface QueryToQuotationModulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToQuotationModulesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToVariablesArgs {
    projectId: IUUID;
}
export interface QueryToVariablesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToVariablesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToBrandHermerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToModelsHermerArgs {
    brand: string;
}
export interface QueryToModelsHermerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToModelsHermerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToYearHermerArgs {
    brand: string;
    subbrand: string;
}
export interface QueryToYearHermerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToYearHermerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToModelLobatoArgs {
    brand: string;
    model: string;
    year: number;
    feature: Array<string>;
}
export interface QueryToModelLobatoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToModelLobatoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToModelsMercadoLibreArgs {
    consultId: number;
}
export interface QueryToModelsMercadoLibreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToModelsMercadoLibreArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListConsultHermerArgs {
    page?: number;
    brand?: string;
}
export interface QueryToListConsultHermerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListConsultHermerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListConsultAllHermerArgs {
    page?: number;
    brand?: string;
}
export interface QueryToListConsultAllHermerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListConsultAllHermerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListConsultLastAnalysisHermerArgs {
    page?: number;
    brand?: string;
    appraisal?: string;
}
export interface QueryToListConsultLastAnalysisHermerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListConsultLastAnalysisHermerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToGetConsultHermerArgs {
    id: number;
}
export interface QueryToGetConsultHermerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToGetConsultHermerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToDownloadFileArgs {
    token: string;
}
export interface QueryToDownloadFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToDownloadFileArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListFoldersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    filter?: IFolderFilterInput;
    order?: Array<IFolderSortInput>;
}
export interface QueryToListFoldersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListFoldersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToFoldersListArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    filter?: IFolderFilterInput;
    order?: Array<IFolderSortInput>;
}
export interface QueryToFoldersListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToFoldersListArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToFolderAllowedMembersArgs {
    folderId: IUUID;
}
export interface QueryToFolderAllowedMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToFolderAllowedMembersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToFileAllowedMembersArgs {
    fileId: IUUID;
}
export interface QueryToFileAllowedMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToFileAllowedMembersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToSharedFilesFromFolderArgs {
    folderId: IUUID;
}
export interface QueryToSharedFilesFromFolderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSharedFilesFromFolderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListFilesArgs {
    skip?: number;
    take?: number;
    filter?: IFileFilterInput;
    order?: Array<IFileSortInput>;
}
export interface QueryToListFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListFilesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListFilesByMemberIdArgs {
    memberId: IUUID;
    filter?: IFileFilterInput;
    order?: Array<IFileSortInput>;
}
export interface QueryToListFilesByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListFilesByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListFoldersByMemberIdArgs {
    memberId: IUUID;
    filter?: IFolderFilterInput;
    order?: Array<IFolderSortInput>;
}
export interface QueryToListFoldersByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListFoldersByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToOutstandingFoldersByMemberIdArgs {
    skip?: number;
    take?: number;
    memberId: IUUID;
    filter?: IFolderFilterInput;
}
export interface QueryToOutstandingFoldersByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToOutstandingFoldersByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToSharedFilesByMemberIdArgs {
    memberId: IUUID;
    filter?: ISharedFileFilterInput;
}
export interface QueryToSharedFilesByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSharedFilesByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToSharedFilesAmongstMembersArgs {
    memberIds: Array<IUUID>;
}
export interface QueryToSharedFilesAmongstMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSharedFilesAmongstMembersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToSharedFoldersByMemberIdArgs {
    memberId: IUUID;
    filter?: ISharedFolderFilterInput;
}
export interface QueryToSharedFoldersByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSharedFoldersByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToFolderByIdArgs {
    id: IUUID;
}
export interface QueryToFolderByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToFolderByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToFileByIdArgs {
    id: IUUID;
}
export interface QueryToFileByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToFileByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToOutstandingFilesByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToOutstandingFilesByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToOutstandingFilesByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToConversationsByToMemberIdArgs {
    conversationId: IUUID;
}
export interface QueryToConversationsByToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToConversationsByToMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToConversationsByMemberIdArgs {
    memberId: IUUID;
    projectId: IUUID;
}
export interface QueryToConversationsByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToConversationsByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListWalletsArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IEWalletFilterInput;
    order?: Array<IEWalletSortInput>;
}
export interface QueryToListWalletsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListWalletsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToWalletByIdArgs {
    id: IUUID;
}
export interface QueryToWalletByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToWalletByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMemberWalletsArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IMemberWalletFilterInput;
    order?: Array<IMemberWalletSortInput>;
}
export interface QueryToListMemberWalletsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMemberWalletsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListWalletTransactionArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IWalletTransactionFilterInput;
    order?: Array<IWalletTransactionSortInput>;
}
export interface QueryToListWalletTransactionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListWalletTransactionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToWalletTransactionByIdArgs {
    id?: IUUID;
}
export interface QueryToWalletTransactionByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToWalletTransactionByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListWalletTransactionStatusArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IWalletTransactionStatusFilterInput;
    order?: Array<IWalletTransactionStatusSortInput>;
}
export interface QueryToListWalletTransactionStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListWalletTransactionStatusArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListWalletTransactionMemberArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IWalletTransactionMemberRelationFilterInput;
    order?: Array<IWalletTransactionMemberRelationSortInput>;
}
export interface QueryToListWalletTransactionMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListWalletTransactionMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListWalletTransactionMemberDetailArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IWalletTransactionMemberDetailFilterInput;
    order?: Array<IWalletTransactionMemberDetailSortInput>;
}
export interface QueryToListWalletTransactionMemberDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListWalletTransactionMemberDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToInvestmentVsEarningArgs {
    eWalletId: IUUID;
    receptorId: IUUID;
}
export interface QueryToInvestmentVsEarningResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToInvestmentVsEarningArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToWalletTransactionDetailArgs {
    walletId?: IUUID;
    receptorId?: IUUID;
}
export interface QueryToWalletTransactionDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToWalletTransactionDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListMemberWalletsByMemberArgs {
    memberId: IUUID;
}
export interface QueryToListMemberWalletsByMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListMemberWalletsByMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCertificateMovementsArgs {
    filter?: ICertificateMovementFilterInput;
}
export interface QueryToCertificateMovementsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCertificateMovementsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCountryRequestsArgs {
    filter?: ICountryRequestFilterInput;
}
export interface QueryToCountryRequestsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCountryRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCertificatesArgs {
    skip?: number;
    take?: number;
    filter?: ICertificateFilterInput;
}
export interface QueryToCertificatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCertificatesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCertificatesNotPaginatedArgs {
    filter?: ICertificateFilterInput;
}
export interface QueryToCertificatesNotPaginatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCertificatesNotPaginatedArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToFeesArgs {
    filter?: IFeeFilterInput;
}
export interface QueryToFeesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToFeesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToBeneficiariesArgs {
    skip?: number;
    take?: number;
    filter?: IBeneficiaryFilterInput;
}
export interface QueryToBeneficiariesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToBeneficiariesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToInsurerCompaniesArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerCompanyFilterInput;
}
export interface QueryToInsurerCompaniesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToInsurerCompaniesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMerchandisesArgs {
    skip?: number;
    take?: number;
    filter?: IMerchandiseFilterInput;
}
export interface QueryToMerchandisesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMerchandisesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMerchandiseCategoriesArgs {
    filter?: IMerchandiseCategoryFilterInput;
}
export interface QueryToMerchandiseCategoriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMerchandiseCategoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMerchandiseDetailsArgs {
    filter?: IMerchandiseDetailFilterInput;
}
export interface QueryToMerchandiseDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMerchandiseDetailsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToContactsArgs {
    filter?: IContactFilterInput;
}
export interface QueryToContactsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToContactsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToContractorsArgs {
    filter?: IContractorFilterInput;
}
export interface QueryToContractorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToContractorsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToTrafficDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMoneyArgs {
    filter?: IMoneyFilterInput;
}
export interface QueryToMoneyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMoneyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPoliciesArgs {
    filter?: IPolicyFilterInput;
}
export interface QueryToPoliciesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPoliciesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToContractorBranchOfficesArgs {
    filter?: IContractorOfficeFilterInput;
}
export interface QueryToContractorBranchOfficesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToContractorBranchOfficesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToContractorContactsArgs {
    filter?: IContractorContactFilterInput;
}
export interface QueryToContractorContactsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToContractorContactsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToContractorPoliciesArgs {
    filter?: IContractorPolicyFilterInput;
}
export interface QueryToContractorPoliciesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToContractorPoliciesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToContactByIdArgs {
    id: IUUID;
}
export interface QueryToContactByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToContactByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToContractorByIdArgs {
    id: IUUID;
}
export interface QueryToContractorByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToContractorByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToContractorContactByIdArgs {
    id: IUUID;
}
export interface QueryToContractorContactByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToContractorContactByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToContractorPolicyByIdArgs {
    id: IUUID;
}
export interface QueryToContractorPolicyByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToContractorPolicyByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToInsurerCompanyByIdArgs {
    id: IUUID;
}
export interface QueryToInsurerCompanyByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToInsurerCompanyByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMoneyByIdArgs {
    id: IUUID;
}
export interface QueryToMoneyByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMoneyByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCertificateByIdArgs {
    id: IUUID;
}
export interface QueryToCertificateByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCertificateByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToContractorOfficeByIdArgs {
    id: IUUID;
}
export interface QueryToContractorOfficeByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToContractorOfficeByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPolicyModulesArgs {
    skip?: number;
    take?: number;
    filter?: IPolicyModuleFilterInput;
}
export interface QueryToPolicyModulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPolicyModulesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPolicyModuleByIdArgs {
    id: IUUID;
}
export interface QueryToPolicyModuleByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPolicyModuleByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToInsurerModulesArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerModuleFilterInput;
}
export interface QueryToInsurerModulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToInsurerModulesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToInsurerModuleByIdArgs {
    id: IUUID;
}
export interface QueryToInsurerModuleByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToInsurerModuleByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToBeneficiaryByIdArgs {
    id: IUUID;
}
export interface QueryToBeneficiaryByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToBeneficiaryByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToMerchandiseByIdArgs {
    id: IUUID;
}
export interface QueryToMerchandiseByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToMerchandiseByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToInsurerFeeByIdArgs {
    id: IUUID;
}
export interface QueryToInsurerFeeByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToInsurerFeeByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToInsurerFeesArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerFeeFilterInput;
}
export interface QueryToInsurerFeesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToInsurerFeesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListSchoolArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: ISchoolFilterInput;
    order?: Array<ISchoolSortInput>;
}
export interface QueryToListSchoolResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListSchoolArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToSchoolByIdArgs {
    id: IUUID;
    projectId: IUUID;
}
export interface QueryToSchoolByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSchoolByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListClassroomArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IClassroomFilterInput;
    order?: Array<IClassroomSortInput>;
}
export interface QueryToListClassroomResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListClassroomArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToClassroomByIdArgs {
    id: IUUID;
    projectId: IUUID;
}
export interface QueryToClassroomByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToClassroomByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListLevelArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: ILevelFilterInput;
    order?: Array<ILevelSortInput>;
}
export interface QueryToListLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListLevelArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToLevelByIdArgs {
    id: IUUID;
    projectId: IUUID;
}
export interface QueryToLevelByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToLevelByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToLevelByNameArgs {
    projectId: IUUID;
    name: string;
}
export interface QueryToLevelByNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToLevelByNameArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToGradeByNameArgs {
    projectId: IUUID;
    levelId: IUUID;
    name: string;
}
export interface QueryToGradeByNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToGradeByNameArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToClassroomByNameArgs {
    projectId: IUUID;
    levelId: IUUID;
    gradeId: IUUID;
    teacherMemberId: IUUID;
    name: string;
}
export interface QueryToClassroomByNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToClassroomByNameArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListGradeArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IGradeFilterInput;
    order?: Array<IGradeSortInput>;
}
export interface QueryToListGradeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListGradeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToGradeByIdArgs {
    id: IUUID;
    projectId: IUUID;
}
export interface QueryToGradeByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToGradeByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListStudentArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IStudentFilterInput;
    order?: Array<IStudentSortInput>;
}
export interface QueryToListStudentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListStudentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToStudentByIdArgs {
    id: IUUID;
    projectId: IUUID;
}
export interface QueryToStudentByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToStudentByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListStudentByLastAttendanceArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IStudentFilterInput;
    order?: Array<IStudentSortInput>;
}
export interface QueryToListStudentByLastAttendanceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListStudentByLastAttendanceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListAttendanceStudentArgs {
    skip?: number;
    take?: number;
    projectId: IUUID;
    filter?: IAttendanceFilterInput;
    order?: Array<IAttendanceSortInput>;
}
export interface QueryToListAttendanceStudentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListAttendanceStudentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToAttendanceStudentByIdArgs {
    id: IUUID;
    projectId: IUUID;
}
export interface QueryToAttendanceStudentByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToAttendanceStudentByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListStudentTutorMemberIdArgs {
    tutorMemberId: IUUID;
}
export interface QueryToListStudentTutorMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListStudentTutorMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListClassroomTeacherMemberIdArgs {
    teacherMemberId: IUUID;
}
export interface QueryToListClassroomTeacherMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListClassroomTeacherMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToChatBotConversationsArgs {
    skip?: number;
    take?: number;
    filter?: IMyConversationFilterInput;
    order?: Array<IMyConversationSortInput>;
}
export interface QueryToChatBotConversationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToChatBotConversationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListAgentProviderBonosArgs {
    skip?: number;
    take?: number;
    filter?: IAgentProviderBonoFilterInput;
    order?: Array<IAgentProviderBonoSortInput>;
}
export interface QueryToListAgentProviderBonosResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListAgentProviderBonosArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListBeneficiariesArgs {
    skip?: number;
    take?: number;
    filter?: IBeneficiarieFilterInput;
    order?: Array<IBeneficiarieSortInput>;
}
export interface QueryToListBeneficiariesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListBeneficiariesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListFormAccidentDiseasesArgs {
    skip?: number;
    take?: number;
    filter?: IFormAccidentDiseaseFilterInput;
    order?: Array<IFormAccidentDiseaseSortInput>;
}
export interface QueryToListFormAccidentDiseasesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListFormAccidentDiseasesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListFormAutomobileDamagesArgs {
    skip?: number;
    take?: number;
    filter?: IFormAutomobileDamageFilterInput;
    order?: Array<IFormAutomobileDamageSortInput>;
}
export interface QueryToListFormAutomobileDamagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListFormAutomobileDamagesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListFormCarCatalogsArgs {
    skip?: number;
    take?: number;
    filter?: IFormCarCatalogFilterInput;
    order?: Array<IFormCarCatalogSortInput>;
}
export interface QueryToListFormCarCatalogsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListFormCarCatalogsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListFormDamagesArgs {
    skip?: number;
    take?: number;
    filter?: IFormDamageFilterInput;
    order?: Array<IFormDamageSortInput>;
}
export interface QueryToListFormDamagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListFormDamagesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListFormLifesArgs {
    skip?: number;
    take?: number;
    filter?: IFormLifeFilterInput;
    order?: Array<IFormLifeSortInput>;
}
export interface QueryToListFormLifesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListFormLifesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInvolvedReferrersArgs {
    skip?: number;
    take?: number;
    filter?: IInvolvedReferrerFilterInput;
    order?: Array<IInvolvedReferrerSortInput>;
}
export interface QueryToListInvolvedReferrersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInvolvedReferrersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListOldPolicesArgs {
    skip?: number;
    take?: number;
    filter?: IOldPoliceFilterInput;
    order?: Array<IOldPoliceSortInput>;
}
export interface QueryToListOldPolicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListOldPolicesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListPersonalInformationsArgs {
    skip?: number;
    take?: number;
    filter?: IPersonalInformationFilterInput;
    order?: Array<IPersonalInformationSortInput>;
}
export interface QueryToListPersonalInformationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListPersonalInformationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListPolicesArgs {
    skip?: number;
    take?: number;
    filter?: IPoliceFilterInput;
    order?: Array<IPoliceSortInput>;
}
export interface QueryToListPolicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListPolicesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListPoliceAssignsArgs {
    skip?: number;
    take?: number;
    filter?: IPoliceAssignFilterInput;
    order?: Array<IPoliceAssignSortInput>;
}
export interface QueryToListPoliceAssignsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListPoliceAssignsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListPolicePendientsArgs {
    skip?: number;
    take?: number;
    filter?: IPolicePendientFilterInput;
    order?: Array<IPolicePendientSortInput>;
}
export interface QueryToListPolicePendientsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListPolicePendientsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListPoliceQuotesArgs {
    skip?: number;
    take?: number;
    filter?: IPoliceQuoteFilterInput;
    order?: Array<IPoliceQuoteSortInput>;
}
export interface QueryToListPoliceQuotesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListPoliceQuotesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListPoliceQuotePrimasArgs {
    skip?: number;
    take?: number;
    filter?: IPoliceQuotePrimaFilterInput;
    order?: Array<IPoliceQuotePrimaSortInput>;
}
export interface QueryToListPoliceQuotePrimasResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListPoliceQuotePrimasArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListRelationShipsArgs {
    skip?: number;
    take?: number;
    filter?: IRelationShipFilterInput;
    order?: Array<IRelationShipSortInput>;
}
export interface QueryToListRelationShipsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListRelationShipsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListSucursalsArgs {
    skip?: number;
    take?: number;
    filter?: ISucursalFilterInput;
    order?: Array<ISucursalSortInput>;
}
export interface QueryToListSucursalsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListSucursalsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListEndorsementsArgs {
    skip?: number;
    take?: number;
    filter?: IEndorsementFilterInput;
    order?: Array<IEndorsementSortInput>;
}
export interface QueryToListEndorsementsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListEndorsementsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListEndorsementCertsArgs {
    skip?: number;
    take?: number;
    filter?: IEndorsementCertFilterInput;
    order?: Array<IEndorsementCertSortInput>;
}
export interface QueryToListEndorsementCertsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListEndorsementCertsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListSinistersArgs {
    skip?: number;
    take?: number;
    filter?: ISinisterFilterInput;
    order?: Array<ISinisterSortInput>;
}
export interface QueryToListSinistersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListSinistersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListSinisterAccidentsArgs {
    skip?: number;
    take?: number;
    filter?: ISinisterAccidentFilterInput;
    order?: Array<ISinisterAccidentSortInput>;
}
export interface QueryToListSinisterAccidentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListSinisterAccidentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListSinisterAilingsArgs {
    skip?: number;
    take?: number;
    filter?: ISinisterAilingFilterInput;
    order?: Array<ISinisterAilingSortInput>;
}
export interface QueryToListSinisterAilingsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListSinisterAilingsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListSinisterCarsArgs {
    skip?: number;
    take?: number;
    filter?: ISinisterCarFilterInput;
    order?: Array<ISinisterCarSortInput>;
}
export interface QueryToListSinisterCarsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListSinisterCarsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListSinisterCarContactsArgs {
    skip?: number;
    take?: number;
    filter?: ISinisterCarContactFilterInput;
    order?: Array<ISinisterCarContactSortInput>;
}
export interface QueryToListSinisterCarContactsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListSinisterCarContactsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListSinisterDamagesArgs {
    skip?: number;
    take?: number;
    filter?: ISinisterDamageFilterInput;
    order?: Array<ISinisterDamageSortInput>;
}
export interface QueryToListSinisterDamagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListSinisterDamagesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListSinisterDamageContactsArgs {
    skip?: number;
    take?: number;
    filter?: ISinisterDamageContactFilterInput;
    order?: Array<ISinisterDamageContactSortInput>;
}
export interface QueryToListSinisterDamageContactsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListSinisterDamageContactsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListSinisterFacturasArgs {
    skip?: number;
    take?: number;
    filter?: ISinisterFacturaFilterInput;
    order?: Array<ISinisterFacturaSortInput>;
}
export interface QueryToListSinisterFacturasResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListSinisterFacturasArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListSinisterHospitalsArgs {
    skip?: number;
    take?: number;
    filter?: ISinisterHospitalFilterInput;
    order?: Array<ISinisterHospitalSortInput>;
}
export interface QueryToListSinisterHospitalsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListSinisterHospitalsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListSinisterLifesArgs {
    skip?: number;
    take?: number;
    filter?: ISinisterLifeFilterInput;
    order?: Array<ISinisterLifeSortInput>;
}
export interface QueryToListSinisterLifesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListSinisterLifesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListSinisterLifeContactsArgs {
    skip?: number;
    take?: number;
    filter?: ISinisterLifeContactFilterInput;
    order?: Array<ISinisterLifeContactSortInput>;
}
export interface QueryToListSinisterLifeContactsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListSinisterLifeContactsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListPoliceReceiptsArgs {
    skip?: number;
    take?: number;
    filter?: IPoliceReceiptFilterInput;
    order?: Array<IPoliceReceiptSortInput>;
}
export interface QueryToListPoliceReceiptsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListPoliceReceiptsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListPoliceReceiptAccountsArgs {
    skip?: number;
    take?: number;
    filter?: IPoliceReceiptAccountFilterInput;
    order?: Array<IPoliceReceiptAccountSortInput>;
}
export interface QueryToListPoliceReceiptAccountsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListPoliceReceiptAccountsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListPoliceReceiptAccountStatesArgs {
    skip?: number;
    take?: number;
    filter?: IPoliceReceiptAccountStateFilterInput;
    order?: Array<IPoliceReceiptAccountStateSortInput>;
}
export interface QueryToListPoliceReceiptAccountStatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListPoliceReceiptAccountStatesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListPoliceReceiptFoliosArgs {
    skip?: number;
    take?: number;
    filter?: IPoliceReceiptFolioFilterInput;
    order?: Array<IPoliceReceiptFolioSortInput>;
}
export interface QueryToListPoliceReceiptFoliosResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListPoliceReceiptFoliosArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListPoliceReceiptPaymentsArgs {
    skip?: number;
    take?: number;
    filter?: IPoliceReceiptPaymentFilterInput;
    order?: Array<IPoliceReceiptPaymentSortInput>;
}
export interface QueryToListPoliceReceiptPaymentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListPoliceReceiptPaymentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListPoliceFilesArgs {
    skip?: number;
    take?: number;
    filter?: IPoliceFileFilterInput;
    order?: Array<IPoliceFileSortInput>;
}
export interface QueryToListPoliceFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListPoliceFilesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerCommentsArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerCommentFilterInput;
    order?: Array<IInsurerCommentSortInput>;
}
export interface QueryToListInsurerCommentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerFileReadingsArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerFileReadingFilterInput;
    order?: Array<IInsurerFileReadingSortInput>;
}
export interface QueryToListInsurerFileReadingsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerFileReadingsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerFileReadingTagsArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerFileReadingTagFilterInput;
    order?: Array<IInsurerFileReadingTagSortInput>;
}
export interface QueryToListInsurerFileReadingTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerFileReadingTagsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerInvolvedsArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerInvolvedFilterInput;
    order?: Array<IInsurerInvolvedSortInput>;
}
export interface QueryToListInsurerInvolvedsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerInvolvedsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerLogsArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerLogFilterInput;
    order?: Array<IInsurerLogSortInput>;
}
export interface QueryToListInsurerLogsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerLogsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerLogEmailsArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerLogEmailFilterInput;
    order?: Array<IInsurerLogEmailSortInput>;
}
export interface QueryToListInsurerLogEmailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerLogEmailsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerOrgInfosArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerOrgInfoFilterInput;
    order?: Array<IInsurerOrgInfoSortInput>;
}
export interface QueryToListInsurerOrgInfosResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerOrgInfosArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerTicketsArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerTicketFilterInput;
    order?: Array<IInsurerTicketSortInput>;
}
export interface QueryToListInsurerTicketsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerTicketsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerSchedulesArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerScheduleFilterInput;
    order?: Array<IInsurerScheduleSortInput>;
}
export interface QueryToListInsurerSchedulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerSchedulesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerScheduleParticipantsArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerScheduleParticipantFilterInput;
    order?: Array<IInsurerScheduleParticipantSortInput>;
}
export interface QueryToListInsurerScheduleParticipantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerScheduleParticipantsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerNotificationsArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerNotificationFilterInput;
    order?: Array<IInsurerNotificationSortInput>;
}
export interface QueryToListInsurerNotificationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerNotificationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerRemindersArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerReminderFilterInput;
    order?: Array<IInsurerReminderSortInput>;
}
export interface QueryToListInsurerRemindersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerRemindersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerReminderProjectAgentProvidersArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerReminderProjectAgentProviderFilterInput;
    order?: Array<IInsurerReminderProjectAgentProviderSortInput>;
}
export interface QueryToListInsurerReminderProjectAgentProvidersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerReminderProjectAgentProvidersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerReminderRecordsArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerReminderRecordFilterInput;
    order?: Array<IInsurerReminderRecordSortInput>;
}
export interface QueryToListInsurerReminderRecordsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerReminderRecordsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerReminderSubBranchesArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerReminderSubBranchFilterInput;
    order?: Array<IInsurerReminderSubBranchSortInput>;
}
export interface QueryToListInsurerReminderSubBranchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerReminderSubBranchesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerBailTypesArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerBailTypeFilterInput;
    order?: Array<IInsurerBailTypeSortInput>;
}
export interface QueryToListInsurerBailTypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerBailTypesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerBirthDateTemplatesArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerBirthDateTemplateFilterInput;
    order?: Array<IInsurerBirthDateTemplateSortInput>;
}
export interface QueryToListInsurerBirthDateTemplatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerBirthDateTemplatesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerDirectoriesArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerDirectoryFilterInput;
    order?: Array<IInsurerDirectorySortInput>;
}
export interface QueryToListInsurerDirectoriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerDirectoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerExpensesArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerExpenseFilterInput;
    order?: Array<IInsurerExpenseSortInput>;
}
export interface QueryToListInsurerExpensesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerExpensesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerIbisFormsArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerIbisFormFilterInput;
    order?: Array<IInsurerIbisFormSortInput>;
}
export interface QueryToListInsurerIbisFormsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerIbisFormsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerIbisProvidersArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerIbisProviderFilterInput;
    order?: Array<IInsurerIbisProviderSortInput>;
}
export interface QueryToListInsurerIbisProvidersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerIbisProvidersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerSendersArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerSenderFilterInput;
    order?: Array<IInsurerSenderSortInput>;
}
export interface QueryToListInsurerSendersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerSendersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListInsurerZipCodeSepomexsArgs {
    skip?: number;
    take?: number;
    filter?: IInsurerZipCodeSepomexFilterInput;
    order?: Array<IInsurerZipCodeSepomexSortInput>;
}
export interface QueryToListInsurerZipCodeSepomexsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListInsurerZipCodeSepomexsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListComissionsArgs {
    skip?: number;
    take?: number;
    filter?: IComissionFilterInput;
    order?: Array<IComissionSortInput>;
}
export interface QueryToListComissionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListComissionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListCoverageTopecoinsurancesArgs {
    skip?: number;
    take?: number;
    filter?: ICoverageTopecoinsuranceFilterInput;
    order?: Array<ICoverageTopecoinsuranceSortInput>;
}
export interface QueryToListCoverageTopecoinsurancesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListCoverageTopecoinsurancesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListCoverageSuminsuredsArgs {
    skip?: number;
    take?: number;
    filter?: ICoverageSuminsuredFilterInput;
    order?: Array<ICoverageSuminsuredSortInput>;
}
export interface QueryToListCoverageSuminsuredsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListCoverageSuminsuredsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListCoveragePackagesArgs {
    skip?: number;
    take?: number;
    filter?: ICoveragePackageFilterInput;
    order?: Array<ICoveragePackageSortInput>;
}
export interface QueryToListCoveragePackagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListCoveragePackagesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToSaam_listCoveragesArgs {
    skip?: number;
    take?: number;
    filter?: ICoverageFilterInput;
    order?: Array<ICoverageSortInput>;
}
export interface QueryToSaam_listCoveragesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSaam_listCoveragesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListCoverageInPoliciesArgs {
    skip?: number;
    take?: number;
    filter?: ICoverageInPolicyFilterInput;
    order?: Array<ICoverageInPolicySortInput>;
}
export interface QueryToListCoverageInPoliciesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListCoverageInPoliciesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListCoverageDeductiblesArgs {
    skip?: number;
    take?: number;
    filter?: ICoverageDeductibleFilterInput;
    order?: Array<ICoverageDeductibleSortInput>;
}
export interface QueryToListCoverageDeductiblesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListCoverageDeductiblesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListCoverageCoinsurancesArgs {
    skip?: number;
    take?: number;
    filter?: ICoverageCoinsuranceFilterInput;
    order?: Array<ICoverageCoinsuranceSortInput>;
}
export interface QueryToListCoverageCoinsurancesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListCoverageCoinsurancesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListResponsableInvolvedsArgs {
    skip?: number;
    take?: number;
    filter?: IResponsableInvolvedFilterInput;
    order?: Array<IResponsableInvolvedSortInput>;
}
export interface QueryToListResponsableInvolvedsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListResponsableInvolvedsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListProjectAgentProviderEmailRemindersArgs {
    skip?: number;
    take?: number;
    filter?: IProjectAgentProviderEmailReminderFilterInput;
    order?: Array<IProjectAgentProviderEmailReminderSortInput>;
}
export interface QueryToListProjectAgentProviderEmailRemindersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListProjectAgentProviderEmailRemindersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListProjectAgentProvidersArgs {
    skip?: number;
    take?: number;
    filter?: IProjectAgentProviderFilterInput;
    order?: Array<IProjectAgentProviderSortInput>;
}
export interface QueryToListProjectAgentProvidersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListProjectAgentProvidersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListAgentProviderContactsArgs {
    skip?: number;
    take?: number;
    filter?: IAgentProviderContactFilterInput;
    order?: Array<IAgentProviderContactSortInput>;
}
export interface QueryToListAgentProviderContactsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListAgentProviderContactsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListAgentProvidersArgs {
    skip?: number;
    take?: number;
    filter?: IAgentProviderFilterInput;
    order?: Array<IAgentProviderSortInput>;
}
export interface QueryToListAgentProvidersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListAgentProvidersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListAgentKeysArgs {
    skip?: number;
    take?: number;
    filter?: IAgentKeyFilterInput;
    order?: Array<IAgentKeySortInput>;
}
export interface QueryToListAgentKeysResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListAgentKeysArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListReferrersArgs {
    skip?: number;
    take?: number;
    filter?: IReferrerFilterInput;
    order?: Array<IReferrerSortInput>;
}
export interface QueryToListReferrersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListReferrersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListReferrerBranchesArgs {
    skip?: number;
    take?: number;
    filter?: IReferrerBranchFilterInput;
    order?: Array<IReferrerBranchSortInput>;
}
export interface QueryToListReferrerBranchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListReferrerBranchesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListReferrerAccountStatesArgs {
    skip?: number;
    take?: number;
    filter?: IReferrerAccountStateFilterInput;
    order?: Array<IReferrerAccountStateSortInput>;
}
export interface QueryToListReferrerAccountStatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListReferrerAccountStatesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListContractorsArgs {
    skip?: number;
    take?: number;
    filter?: IContractorFilterInput;
    order?: Array<IContractorSortInput>;
}
export interface QueryToListContractorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListContractorsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListContractorCelulasArgs {
    skip?: number;
    take?: number;
    filter?: IContractorCelulaFilterInput;
    order?: Array<IContractorCelulaSortInput>;
}
export interface QueryToListContractorCelulasResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListContractorCelulasArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListContractorGroupsArgs {
    skip?: number;
    take?: number;
    filter?: IContractorGroupFilterInput;
    order?: Array<IContractorGroupSortInput>;
}
export interface QueryToListContractorGroupsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListContractorGroupsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListContractorGroupingLevelsArgs {
    skip?: number;
    take?: number;
    filter?: IContractorGroupingLevelFilterInput;
    order?: Array<IContractorGroupingLevelSortInput>;
}
export interface QueryToListContractorGroupingLevelsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListContractorGroupingLevelsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListContractorClassificationsArgs {
    skip?: number;
    take?: number;
    filter?: IContractorClassificationFilterInput;
    order?: Array<IContractorClassificationSortInput>;
}
export interface QueryToListContractorClassificationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListContractorClassificationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListContractorProcessDocumentsArgs {
    skip?: number;
    take?: number;
    filter?: IContractorProcessDocumentFilterInput;
    order?: Array<IContractorProcessDocumentSortInput>;
}
export interface QueryToListContractorProcessDocumentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListContractorProcessDocumentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListProcessDocumentsArgs {
    skip?: number;
    take?: number;
    filter?: IProcessDocumentFilterInput;
    order?: Array<IProcessDocumentSortInput>;
}
export interface QueryToListProcessDocumentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListProcessDocumentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListBranchesArgs {
    skip?: number;
    take?: number;
    filter?: IBranchFilterInput;
    order?: Array<IBranchSortInput>;
}
export interface QueryToListBranchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListBranchesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListSubBranchesArgs {
    skip?: number;
    take?: number;
    filter?: ISubBranchFilterInput;
    order?: Array<ISubBranchSortInput>;
}
export interface QueryToListSubBranchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListSubBranchesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListProjectAgentProviderBranchesArgs {
    skip?: number;
    take?: number;
    filter?: IProjectAgentProviderBranchFilterInput;
    order?: Array<IProjectAgentProviderBranchSortInput>;
}
export interface QueryToListProjectAgentProviderBranchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListProjectAgentProviderBranchesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListDevicesArgs {
    skip?: number;
    take?: number;
    filter?: IDeviceFilterInput;
    order?: Array<IDeviceSortInput>;
}
export interface QueryToListDevicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListDevicesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToDeviceByIdArgs {
    id: IUUID;
}
export interface QueryToDeviceByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToDeviceByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListNotificationsArgs {
    skip?: number;
    take?: number;
    filter?: INotificationFilterInput;
    order?: Array<INotificationSortInput>;
}
export interface QueryToListNotificationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListNotificationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToNotificationsByIdArgs {
    id: IUUID;
}
export interface QueryToNotificationsByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToNotificationsByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToDevicesByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToDevicesByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToDevicesByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToListNotificationByMemberIdArgs {
    memberId: IUUID;
}
export interface QueryToListNotificationByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToListNotificationByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToCodesArgs {
    projectId: IUUID;
}
export interface QueryToCodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToCodesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToBrandsByProjectIdArgs {
    projectId: IUUID;
    filter?: IBrandFilterInput;
}
export interface QueryToBrandsByProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToBrandsByProjectIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToProvidersArgs {
    projectId: IUUID;
}
export interface QueryToProvidersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToProvidersArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToScanCodeArgs {
    code: string;
}
export interface QueryToScanCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToScanCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToAvailableDotsArgs {
    memberId: IUUID;
}
export interface QueryToAvailableDotsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToAvailableDotsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToExchangeMovementsArgs {
    memberId: IUUID;
    filter?: IDotMovementFilterInput;
}
export interface QueryToExchangeMovementsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToExchangeMovementsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToDotMovementsByMemberIdArgs {
    memberId: IUUID;
    filter?: IDotMovementFilterInput;
    order?: Array<IDotMovementSortInput>;
}
export interface QueryToDotMovementsByMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToDotMovementsByMemberIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToLookForAdminCodeArgs {
    code: string;
}
export interface QueryToLookForAdminCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToLookForAdminCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPrizeCategoriesArgs {
    projectId: IUUID;
}
export interface QueryToPrizeCategoriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPrizeCategoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPrizeCodesArgs {
    projectId: IUUID;
}
export interface QueryToPrizeCodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPrizeCodesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToPrizeCategoryByIdArgs {
    id: IUUID;
}
export interface QueryToPrizeCategoryByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToPrizeCategoryByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QueryToDotMovementByIdArgs {
    id: IUUID;
}
export interface QueryToDotMovementByIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToDotMovementByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IGroupCollectionSegmentTypeResolver<TParent = any> {
    items?: GroupCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: GroupCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: GroupCollectionSegmentToTotalCountResolver<TParent>;
}
export interface GroupCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GroupCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GroupCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IGroupTypeResolver<TParent = any> {
    projectId?: GroupToProjectIdResolver<TParent>;
    project?: GroupToProjectResolver<TParent>;
    name?: GroupToNameResolver<TParent>;
    description?: GroupToDescriptionResolver<TParent>;
    members?: GroupToMembersResolver<TParent>;
    groupTaxonomies?: GroupToGroupTaxonomiesResolver<TParent>;
    id?: GroupToIdResolver<TParent>;
    createdAt?: GroupToCreatedAtResolver<TParent>;
    updatedAt?: GroupToUpdatedAtResolver<TParent>;
}
export interface GroupToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GroupToProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GroupToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GroupToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GroupToMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GroupToGroupTaxonomiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GroupToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GroupToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GroupToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectTypeResolver<TParent = any> {
    name?: ProjectToNameResolver<TParent>;
    description?: ProjectToDescriptionResolver<TParent>;
    logo?: ProjectToLogoResolver<TParent>;
    tagLine?: ProjectToTagLineResolver<TParent>;
    isAPublicPlatform?: ProjectToIsAPublicPlatformResolver<TParent>;
    isReady?: ProjectToIsReadyResolver<TParent>;
    url?: ProjectToUrlResolver<TParent>;
    onProduction?: ProjectToOnProductionResolver<TParent>;
    industryId?: ProjectToIndustryIdResolver<TParent>;
    industry?: ProjectToIndustryResolver<TParent>;
    companyId?: ProjectToCompanyIdResolver<TParent>;
    company?: ProjectToCompanyResolver<TParent>;
    projectRoles?: ProjectToProjectRolesResolver<TParent>;
    memberProjects?: ProjectToMemberProjectsResolver<TParent>;
    projectSocialNetworks?: ProjectToProjectSocialNetworksResolver<TParent>;
    groups?: ProjectToGroupsResolver<TParent>;
    nicheId?: ProjectToNicheIdResolver<TParent>;
    niche?: ProjectToNicheResolver<TParent>;
    id?: ProjectToIdResolver<TParent>;
    createdAt?: ProjectToCreatedAtResolver<TParent>;
    updatedAt?: ProjectToUpdatedAtResolver<TParent>;
    shop?: ProjectToShopResolver<TParent>;
    services?: ProjectToServicesResolver<TParent>;
    site?: ProjectToSiteResolver<TParent>;
}
export interface ProjectToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToLogoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToTagLineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToIsAPublicPlatformResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToIsReadyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToOnProductionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToIndustryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToIndustryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToCompanyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToProjectRolesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToMemberProjectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToProjectSocialNetworksResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToGroupsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToNicheIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToNicheResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectToSiteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IIndustryTypeResolver<TParent = any> {
    name?: IndustryToNameResolver<TParent>;
    slug?: IndustryToSlugResolver<TParent>;
    projects?: IndustryToProjectsResolver<TParent>;
    companies?: IndustryToCompaniesResolver<TParent>;
    id?: IndustryToIdResolver<TParent>;
    createdAt?: IndustryToCreatedAtResolver<TParent>;
    updatedAt?: IndustryToUpdatedAtResolver<TParent>;
}
export interface IndustryToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IndustryToSlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IndustryToProjectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IndustryToCompaniesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IndustryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IndustryToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IndustryToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICompanyTypeResolver<TParent = any> {
    name?: CompanyToNameResolver<TParent>;
    numberEmployees?: CompanyToNumberEmployeesResolver<TParent>;
    countryId?: CompanyToCountryIdResolver<TParent>;
    country?: CompanyToCountryResolver<TParent>;
    photo?: CompanyToPhotoResolver<TParent>;
    tagLine?: CompanyToTagLineResolver<TParent>;
    industryId?: CompanyToIndustryIdResolver<TParent>;
    industry?: CompanyToIndustryResolver<TParent>;
    memberCompanies?: CompanyToMemberCompaniesResolver<TParent>;
    projects?: CompanyToProjectsResolver<TParent>;
    id?: CompanyToIdResolver<TParent>;
    createdAt?: CompanyToCreatedAtResolver<TParent>;
    updatedAt?: CompanyToUpdatedAtResolver<TParent>;
}
export interface CompanyToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CompanyToNumberEmployeesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CompanyToCountryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CompanyToCountryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CompanyToPhotoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CompanyToTagLineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CompanyToIndustryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CompanyToIndustryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CompanyToMemberCompaniesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CompanyToProjectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CompanyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CompanyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CompanyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICountryTypeResolver<TParent = any> {
    name?: CountryToNameResolver<TParent>;
    code?: CountryToCodeResolver<TParent>;
    phoneCode?: CountryToPhoneCodeResolver<TParent>;
    currencyId?: CountryToCurrencyIdResolver<TParent>;
    currency?: CountryToCurrencyResolver<TParent>;
    profile?: CountryToProfileResolver<TParent>;
    id?: CountryToIdResolver<TParent>;
    createdAt?: CountryToCreatedAtResolver<TParent>;
    updatedAt?: CountryToUpdatedAtResolver<TParent>;
}
export interface CountryToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CountryToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CountryToPhoneCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CountryToCurrencyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CountryToCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CountryToProfileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CountryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CountryToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CountryToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICurrencyTypeResolver<TParent = any> {
    name?: CurrencyToNameResolver<TParent>;
    symbol?: CurrencyToSymbolResolver<TParent>;
    code?: CurrencyToCodeResolver<TParent>;
    exchangeRate?: CurrencyToExchangeRateResolver<TParent>;
    id?: CurrencyToIdResolver<TParent>;
    createdAt?: CurrencyToCreatedAtResolver<TParent>;
    updatedAt?: CurrencyToUpdatedAtResolver<TParent>;
}
export interface CurrencyToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CurrencyToSymbolResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CurrencyToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CurrencyToExchangeRateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CurrencyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CurrencyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CurrencyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProfileTypeResolver<TParent = any> {
    firstName?: ProfileToFirstNameResolver<TParent>;
    lastName?: ProfileToLastNameResolver<TParent>;
    postalCode?: ProfileToPostalCodeResolver<TParent>;
    address?: ProfileToAddressResolver<TParent>;
    town?: ProfileToTownResolver<TParent>;
    city?: ProfileToCityResolver<TParent>;
    colony?: ProfileToColonyResolver<TParent>;
    street?: ProfileToStreetResolver<TParent>;
    houseNumber?: ProfileToHouseNumberResolver<TParent>;
    periodInvoice?: ProfileToPeriodInvoiceResolver<TParent>;
    billingForm?: ProfileToBillingFormResolver<TParent>;
    paymentTerm?: ProfileToPaymentTermResolver<TParent>;
    dialCode?: ProfileToDialCodeResolver<TParent>;
    fullName?: ProfileToFullNameResolver<TParent>;
    photo?: ProfileToPhotoResolver<TParent>;
    memberId?: ProfileToMemberIdResolver<TParent>;
    member?: ProfileToMemberResolver<TParent>;
    countryId?: ProfileToCountryIdResolver<TParent>;
    country?: ProfileToCountryResolver<TParent>;
    phone?: ProfileToPhoneResolver<TParent>;
    cURP?: ProfileToCURPResolver<TParent>;
    rFC?: ProfileToRFCResolver<TParent>;
    nSS?: ProfileToNSSResolver<TParent>;
    infonavitCredit?: ProfileToInfonavitCreditResolver<TParent>;
    nationality?: ProfileToNationalityResolver<TParent>;
    age?: ProfileToAgeResolver<TParent>;
    gender?: ProfileToGenderResolver<TParent>;
    dateOfBirth?: ProfileToDateOfBirthResolver<TParent>;
    maritalStatus?: ProfileToMaritalStatusResolver<TParent>;
    biography?: ProfileToBiographyResolver<TParent>;
    siteLogo?: ProfileToSiteLogoResolver<TParent>;
    siteUrl?: ProfileToSiteUrlResolver<TParent>;
    quatorProfileId?: ProfileToQuatorProfileIdResolver<TParent>;
    state?: ProfileToStateResolver<TParent>;
    institution?: ProfileToInstitutionResolver<TParent>;
    hospital?: ProfileToHospitalResolver<TParent>;
    id?: ProfileToIdResolver<TParent>;
    createdAt?: ProfileToCreatedAtResolver<TParent>;
    updatedAt?: ProfileToUpdatedAtResolver<TParent>;
}
export interface ProfileToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToPostalCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToTownResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToColonyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToStreetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToHouseNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToPeriodInvoiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToBillingFormResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToPaymentTermResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToDialCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToFullNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToPhotoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToCountryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToCountryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToCURPResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToRFCResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToNSSResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToInfonavitCreditResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToNationalityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToAgeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToGenderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToDateOfBirthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToMaritalStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToBiographyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToSiteLogoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToSiteUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToQuatorProfileIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToInstitutionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToHospitalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProfileToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberTypeResolver<TParent = any> {
    username?: MemberToUsernameResolver<TParent>;
    email?: MemberToEmailResolver<TParent>;
    recoverToken?: MemberToRecoverTokenResolver<TParent>;
    recoverRegister?: MemberToRecoverRegisterResolver<TParent>;
    isActive?: MemberToIsActiveResolver<TParent>;
    firstTime?: MemberToFirstTimeResolver<TParent>;
    loginCount?: MemberToLoginCountResolver<TParent>;
    rFC?: MemberToRFCResolver<TParent>;
    businessName?: MemberToBusinessNameResolver<TParent>;
    useBilling?: MemberToUseBillingResolver<TParent>;
    socialReason?: MemberToSocialReasonResolver<TParent>;
    adminCode?: MemberToAdminCodeResolver<TParent>;
    canifarmaQRCodeOne?: MemberToCanifarmaQRCodeOneResolver<TParent>;
    canifarmaQRCodeTwo?: MemberToCanifarmaQRCodeTwoResolver<TParent>;
    consecutive?: MemberToConsecutiveResolver<TParent>;
    businessId?: MemberToBusinessIdResolver<TParent>;
    memberCompanies?: MemberToMemberCompaniesResolver<TParent>;
    memberRoles?: MemberToMemberRolesResolver<TParent>;
    memberProjects?: MemberToMemberProjectsResolver<TParent>;
    profile?: MemberToProfileResolver<TParent>;
    memberStream?: MemberToMemberStreamResolver<TParent>;
    lastLogin?: MemberToLastLoginResolver<TParent>;
    groups?: MemberToGroupsResolver<TParent>;
    taxonomies?: MemberToTaxonomiesResolver<TParent>;
    healthInsurance?: MemberToHealthInsuranceResolver<TParent>;
    companyData?: MemberToCompanyDataResolver<TParent>;
    billingData?: MemberToBillingDataResolver<TParent>;
    sells?: MemberToSellsResolver<TParent>;
    sellsList?: MemberToSellsListResolver<TParent>;
    sellsProspectList?: MemberToSellsProspectListResolver<TParent>;
    sellersSellList?: MemberToSellersSellListResolver<TParent>;
    memberRelations?: MemberToMemberRelationsResolver<TParent>;
    memberBusinesses?: MemberToMemberBusinessesResolver<TParent>;
    slugs?: MemberToSlugsResolver<TParent>;
    memberIndustryId?: MemberToMemberIndustryIdResolver<TParent>;
    memberIndustry?: MemberToMemberIndustryResolver<TParent>;
    branchOfficeIds?: MemberToBranchOfficeIdsResolver<TParent>;
    id?: MemberToIdResolver<TParent>;
    createdAt?: MemberToCreatedAtResolver<TParent>;
    updatedAt?: MemberToUpdatedAtResolver<TParent>;
    addresses?: MemberToAddressesResolver<TParent>;
    hiring?: MemberToHiringResolver<TParent>;
    shift?: MemberToShiftResolver<TParent>;
    resourceQuotes?: MemberToResourceQuotesResolver<TParent>;
    collaborator?: MemberToCollaboratorResolver<TParent>;
    business?: MemberToBusinessResolver<TParent>;
    projectPlanSuscriptions?: MemberToProjectPlanSuscriptionsResolver<TParent>;
    serviceMember?: MemberToServiceMemberResolver<TParent>;
    accountKeys?: MemberToAccountKeysResolver<TParent>;
    paymentMethod?: MemberToPaymentMethodResolver<TParent>;
    listEventDetails?: MemberToListEventDetailsResolver<TParent>;
    listFisicExams?: MemberToListFisicExamsResolver<TParent>;
    listMedicalBackgrounds?: MemberToListMedicalBackgroundsResolver<TParent>;
    listMedicRecipes?: MemberToListMedicRecipesResolver<TParent>;
    listPatientNotes?: MemberToListPatientNotesResolver<TParent>;
    listVitalSigns?: MemberToListVitalSignsResolver<TParent>;
    listVaccines?: MemberToListVaccinesResolver<TParent>;
    memberBoards?: MemberToMemberBoardsResolver<TParent>;
    memberSpaces?: MemberToMemberSpacesResolver<TParent>;
    files?: MemberToFilesResolver<TParent>;
    folders?: MemberToFoldersResolver<TParent>;
    sharedFiles?: MemberToSharedFilesResolver<TParent>;
    sharedFolders?: MemberToSharedFoldersResolver<TParent>;
    memberWallets?: MemberToMemberWalletsResolver<TParent>;
    devices?: MemberToDevicesResolver<TParent>;
    notifications?: MemberToNotificationsResolver<TParent>;
}
export interface MemberToUsernameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToRecoverTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToRecoverRegisterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToFirstTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToLoginCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToRFCResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToBusinessNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToUseBillingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToSocialReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToAdminCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToCanifarmaQRCodeOneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToCanifarmaQRCodeTwoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToConsecutiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToBusinessIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToMemberCompaniesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToMemberRolesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToMemberProjectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToProfileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToMemberStreamResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToLastLoginResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToGroupsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToTaxonomiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToHealthInsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToCompanyDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToBillingDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToSellsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToSellsListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToSellsProspectListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToSellersSellListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToMemberRelationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToMemberBusinessesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToSlugsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToMemberIndustryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToMemberIndustryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToBranchOfficeIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToAddressesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToHiringResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToShiftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToResourceQuotesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToCollaboratorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToBusinessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToProjectPlanSuscriptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToServiceMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToAccountKeysResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToListEventDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToListFisicExamsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToListMedicalBackgroundsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToListMedicRecipesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToListPatientNotesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToListVitalSignsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToListVaccinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToMemberBoardsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToMemberSpacesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToFoldersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToSharedFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToSharedFoldersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToMemberWalletsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToDevicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberToNotificationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberCompanyTypeResolver<TParent = any> {
    companyId?: MemberCompanyToCompanyIdResolver<TParent>;
    company?: MemberCompanyToCompanyResolver<TParent>;
    memberId?: MemberCompanyToMemberIdResolver<TParent>;
    member?: MemberCompanyToMemberResolver<TParent>;
    isDefault?: MemberCompanyToIsDefaultResolver<TParent>;
    id?: MemberCompanyToIdResolver<TParent>;
    createdAt?: MemberCompanyToCreatedAtResolver<TParent>;
    updatedAt?: MemberCompanyToUpdatedAtResolver<TParent>;
}
export interface MemberCompanyToCompanyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCompanyToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCompanyToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCompanyToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCompanyToIsDefaultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCompanyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCompanyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCompanyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberRoleTypeResolver<TParent = any> {
    companyId?: MemberRoleToCompanyIdResolver<TParent>;
    company?: MemberRoleToCompanyResolver<TParent>;
    roleId?: MemberRoleToRoleIdResolver<TParent>;
    role?: MemberRoleToRoleResolver<TParent>;
    memberId?: MemberRoleToMemberIdResolver<TParent>;
    member?: MemberRoleToMemberResolver<TParent>;
    id?: MemberRoleToIdResolver<TParent>;
    createdAt?: MemberRoleToCreatedAtResolver<TParent>;
    updatedAt?: MemberRoleToUpdatedAtResolver<TParent>;
}
export interface MemberRoleToCompanyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRoleToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRoleToRoleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRoleToRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRoleToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRoleToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRoleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRoleToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRoleToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRoleTypeResolver<TParent = any> {
    name?: RoleToNameResolver<TParent>;
    codeName?: RoleToCodeNameResolver<TParent>;
    description?: RoleToDescriptionResolver<TParent>;
    memberRoles?: RoleToMemberRolesResolver<TParent>;
    id?: RoleToIdResolver<TParent>;
    createdAt?: RoleToCreatedAtResolver<TParent>;
    updatedAt?: RoleToUpdatedAtResolver<TParent>;
}
export interface RoleToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RoleToCodeNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RoleToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RoleToMemberRolesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RoleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RoleToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RoleToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberProjectTypeResolver<TParent = any> {
    memberId?: MemberProjectToMemberIdResolver<TParent>;
    member?: MemberProjectToMemberResolver<TParent>;
    projectId?: MemberProjectToProjectIdResolver<TParent>;
    project?: MemberProjectToProjectResolver<TParent>;
    memberProjectRoleProject?: MemberProjectToMemberProjectRoleProjectResolver<TParent>;
    id?: MemberProjectToIdResolver<TParent>;
    createdAt?: MemberProjectToCreatedAtResolver<TParent>;
    updatedAt?: MemberProjectToUpdatedAtResolver<TParent>;
}
export interface MemberProjectToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberProjectToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberProjectToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberProjectToProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberProjectToMemberProjectRoleProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberProjectToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberProjectToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberProjectToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberProjectRoleProjectTypeResolver<TParent = any> {
    memberProjectId?: MemberProjectRoleProjectToMemberProjectIdResolver<TParent>;
    memberProject?: MemberProjectRoleProjectToMemberProjectResolver<TParent>;
    projectRoleId?: MemberProjectRoleProjectToProjectRoleIdResolver<TParent>;
    projectRole?: MemberProjectRoleProjectToProjectRoleResolver<TParent>;
    id?: MemberProjectRoleProjectToIdResolver<TParent>;
    createdAt?: MemberProjectRoleProjectToCreatedAtResolver<TParent>;
    updatedAt?: MemberProjectRoleProjectToUpdatedAtResolver<TParent>;
}
export interface MemberProjectRoleProjectToMemberProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberProjectRoleProjectToMemberProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberProjectRoleProjectToProjectRoleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberProjectRoleProjectToProjectRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberProjectRoleProjectToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberProjectRoleProjectToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberProjectRoleProjectToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectRoleTypeResolver<TParent = any> {
    name?: ProjectRoleToNameResolver<TParent>;
    codeName?: ProjectRoleToCodeNameResolver<TParent>;
    label?: ProjectRoleToLabelResolver<TParent>;
    description?: ProjectRoleToDescriptionResolver<TParent>;
    isActive?: ProjectRoleToIsActiveResolver<TParent>;
    permission?: ProjectRoleToPermissionResolver<TParent>;
    projectId?: ProjectRoleToProjectIdResolver<TParent>;
    project?: ProjectRoleToProjectResolver<TParent>;
    viewManagers?: ProjectRoleToViewManagersResolver<TParent>;
    id?: ProjectRoleToIdResolver<TParent>;
    createdAt?: ProjectRoleToCreatedAtResolver<TParent>;
    updatedAt?: ProjectRoleToUpdatedAtResolver<TParent>;
}
export interface ProjectRoleToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectRoleToCodeNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectRoleToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectRoleToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectRoleToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectRoleToPermissionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectRoleToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectRoleToProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectRoleToViewManagersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectRoleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectRoleToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectRoleToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPermissionTypeResolver<TParent = any> {
    projectId?: PermissionToProjectIdResolver<TParent>;
    project?: PermissionToProjectResolver<TParent>;
    projectRoleId?: PermissionToProjectRoleIdResolver<TParent>;
    projectRole?: PermissionToProjectRoleResolver<TParent>;
    rules?: PermissionToRulesResolver<TParent>;
    id?: PermissionToIdResolver<TParent>;
    createdAt?: PermissionToCreatedAtResolver<TParent>;
    updatedAt?: PermissionToUpdatedAtResolver<TParent>;
}
export interface PermissionToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PermissionToProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PermissionToProjectRoleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PermissionToProjectRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PermissionToRulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PermissionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PermissionToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PermissionToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IViewManagerTypeResolver<TParent = any> {
    pageManagerId?: ViewManagerToPageManagerIdResolver<TParent>;
    pageManager?: ViewManagerToPageManagerResolver<TParent>;
    name?: ViewManagerToNameResolver<TParent>;
    default?: ViewManagerToDefaultResolver<TParent>;
    config?: ViewManagerToConfigResolver<TParent>;
    projectRoleId?: ViewManagerToProjectRoleIdResolver<TParent>;
    projectRole?: ViewManagerToProjectRoleResolver<TParent>;
    viewColumns?: ViewManagerToViewColumnsResolver<TParent>;
    id?: ViewManagerToIdResolver<TParent>;
    createdAt?: ViewManagerToCreatedAtResolver<TParent>;
    updatedAt?: ViewManagerToUpdatedAtResolver<TParent>;
}
export interface ViewManagerToPageManagerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewManagerToPageManagerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewManagerToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewManagerToDefaultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewManagerToConfigResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewManagerToProjectRoleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewManagerToProjectRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewManagerToViewColumnsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewManagerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewManagerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewManagerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPageManagerTypeResolver<TParent = any> {
    projectId?: PageManagerToProjectIdResolver<TParent>;
    project?: PageManagerToProjectResolver<TParent>;
    pageName?: PageManagerToPageNameResolver<TParent>;
    config?: PageManagerToConfigResolver<TParent>;
    viewManagers?: PageManagerToViewManagersResolver<TParent>;
    id?: PageManagerToIdResolver<TParent>;
    createdAt?: PageManagerToCreatedAtResolver<TParent>;
    updatedAt?: PageManagerToUpdatedAtResolver<TParent>;
}
export interface PageManagerToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PageManagerToProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PageManagerToPageNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PageManagerToConfigResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PageManagerToViewManagersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PageManagerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PageManagerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PageManagerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IViewColumnTypeResolver<TParent = any> {
    viewManagerId?: ViewColumnToViewManagerIdResolver<TParent>;
    viewManager?: ViewColumnToViewManagerResolver<TParent>;
    isDefault?: ViewColumnToIsDefaultResolver<TParent>;
    position?: ViewColumnToPositionResolver<TParent>;
    config?: ViewColumnToConfigResolver<TParent>;
    viewBlockColumns?: ViewColumnToViewBlockColumnsResolver<TParent>;
    id?: ViewColumnToIdResolver<TParent>;
    createdAt?: ViewColumnToCreatedAtResolver<TParent>;
    updatedAt?: ViewColumnToUpdatedAtResolver<TParent>;
}
export interface ViewColumnToViewManagerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewColumnToViewManagerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewColumnToIsDefaultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewColumnToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewColumnToConfigResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewColumnToViewBlockColumnsArgs {
    order?: Array<IViewBlockColumnSortInput>;
}
export interface ViewColumnToViewBlockColumnsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ViewColumnToViewBlockColumnsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewColumnToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewColumnToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewColumnToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IViewBlockColumnTypeResolver<TParent = any> {
    keyName?: ViewBlockColumnToKeyNameResolver<TParent>;
    name?: ViewBlockColumnToNameResolver<TParent>;
    config?: ViewBlockColumnToConfigResolver<TParent>;
    position?: ViewBlockColumnToPositionResolver<TParent>;
    viewColumnId?: ViewBlockColumnToViewColumnIdResolver<TParent>;
    viewColumn?: ViewBlockColumnToViewColumnResolver<TParent>;
    columnTabId?: ViewBlockColumnToColumnTabIdResolver<TParent>;
    columnTab?: ViewBlockColumnToColumnTabResolver<TParent>;
    id?: ViewBlockColumnToIdResolver<TParent>;
    createdAt?: ViewBlockColumnToCreatedAtResolver<TParent>;
    updatedAt?: ViewBlockColumnToUpdatedAtResolver<TParent>;
}
export interface ViewBlockColumnToKeyNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewBlockColumnToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewBlockColumnToConfigResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewBlockColumnToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewBlockColumnToViewColumnIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewBlockColumnToViewColumnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewBlockColumnToColumnTabIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewBlockColumnToColumnTabResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewBlockColumnToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewBlockColumnToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewBlockColumnToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IColumnTabTypeResolver<TParent = any> {
    isDefault?: ColumnTabToIsDefaultResolver<TParent>;
    name?: ColumnTabToNameResolver<TParent>;
    position?: ColumnTabToPositionResolver<TParent>;
    config?: ColumnTabToConfigResolver<TParent>;
    columnId?: ColumnTabToColumnIdResolver<TParent>;
    viewColumn?: ColumnTabToViewColumnResolver<TParent>;
    blockColumns?: ColumnTabToBlockColumnsResolver<TParent>;
    id?: ColumnTabToIdResolver<TParent>;
    createdAt?: ColumnTabToCreatedAtResolver<TParent>;
    updatedAt?: ColumnTabToUpdatedAtResolver<TParent>;
}
export interface ColumnTabToIsDefaultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ColumnTabToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ColumnTabToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ColumnTabToConfigResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ColumnTabToColumnIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ColumnTabToViewColumnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ColumnTabToBlockColumnsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ColumnTabToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ColumnTabToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ColumnTabToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberStreamTypeResolver<TParent = any> {
    memberId?: MemberStreamToMemberIdResolver<TParent>;
    member?: MemberStreamToMemberResolver<TParent>;
    userName?: MemberStreamToUserNameResolver<TParent>;
    firstName?: MemberStreamToFirstNameResolver<TParent>;
    lastName?: MemberStreamToLastNameResolver<TParent>;
    image?: MemberStreamToImageResolver<TParent>;
    isOnline?: MemberStreamToIsOnlineResolver<TParent>;
    description?: MemberStreamToDescriptionResolver<TParent>;
    id?: MemberStreamToIdResolver<TParent>;
    createdAt?: MemberStreamToCreatedAtResolver<TParent>;
    updatedAt?: MemberStreamToUpdatedAtResolver<TParent>;
}
export interface MemberStreamToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberStreamToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberStreamToUserNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberStreamToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberStreamToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberStreamToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberStreamToIsOnlineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberStreamToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberStreamToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberStreamToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberStreamToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberTaxonomyTypeResolver<TParent = any> {
    memberId?: MemberTaxonomyToMemberIdResolver<TParent>;
    member?: MemberTaxonomyToMemberResolver<TParent>;
    taxonomyId?: MemberTaxonomyToTaxonomyIdResolver<TParent>;
}
export interface MemberTaxonomyToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberTaxonomyToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberTaxonomyToTaxonomyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IHealthInsuranceTypeResolver<TParent = any> {
    memberId?: HealthInsuranceToMemberIdResolver<TParent>;
    member?: HealthInsuranceToMemberResolver<TParent>;
    nSS?: HealthInsuranceToNSSResolver<TParent>;
    insuranceMajorMedicalExpenses?: HealthInsuranceToInsuranceMajorMedicalExpensesResolver<TParent>;
    typeInsurance?: HealthInsuranceToTypeInsuranceResolver<TParent>;
    insuranceCarrier?: HealthInsuranceToInsuranceCarrierResolver<TParent>;
    policyNumber?: HealthInsuranceToPolicyNumberResolver<TParent>;
    dischargeDate?: HealthInsuranceToDischargeDateResolver<TParent>;
    expirationDate?: HealthInsuranceToExpirationDateResolver<TParent>;
    id?: HealthInsuranceToIdResolver<TParent>;
    createdAt?: HealthInsuranceToCreatedAtResolver<TParent>;
    updatedAt?: HealthInsuranceToUpdatedAtResolver<TParent>;
}
export interface HealthInsuranceToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HealthInsuranceToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HealthInsuranceToNSSResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HealthInsuranceToInsuranceMajorMedicalExpensesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HealthInsuranceToTypeInsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HealthInsuranceToInsuranceCarrierResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HealthInsuranceToPolicyNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HealthInsuranceToDischargeDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HealthInsuranceToExpirationDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HealthInsuranceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HealthInsuranceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HealthInsuranceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEnterpriseDataTypeResolver<TParent = any> {
    memberId?: EnterpriseDataToMemberIdResolver<TParent>;
    member?: EnterpriseDataToMemberResolver<TParent>;
    companyName?: EnterpriseDataToCompanyNameResolver<TParent>;
    companyCategory?: EnterpriseDataToCompanyCategoryResolver<TParent>;
    sucursal?: EnterpriseDataToSucursalResolver<TParent>;
    phones?: EnterpriseDataToPhonesResolver<TParent>;
    webSite?: EnterpriseDataToWebSiteResolver<TParent>;
    id?: EnterpriseDataToIdResolver<TParent>;
    createdAt?: EnterpriseDataToCreatedAtResolver<TParent>;
    updatedAt?: EnterpriseDataToUpdatedAtResolver<TParent>;
}
export interface EnterpriseDataToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EnterpriseDataToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EnterpriseDataToCompanyNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EnterpriseDataToCompanyCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EnterpriseDataToSucursalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EnterpriseDataToPhonesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EnterpriseDataToWebSiteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EnterpriseDataToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EnterpriseDataToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EnterpriseDataToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBillingDataTypeResolver<TParent = any> {
    memberId?: BillingDataToMemberIdResolver<TParent>;
    member?: BillingDataToMemberResolver<TParent>;
    person?: BillingDataToPersonResolver<TParent>;
    businessName?: BillingDataToBusinessNameResolver<TParent>;
    rFC?: BillingDataToRFCResolver<TParent>;
    useCDFI?: BillingDataToUseCDFIResolver<TParent>;
    paymentMethod?: BillingDataToPaymentMethodResolver<TParent>;
    paymentTerm?: BillingDataToPaymentTermResolver<TParent>;
    taxSituation?: BillingDataToTaxSituationResolver<TParent>;
    id?: BillingDataToIdResolver<TParent>;
    createdAt?: BillingDataToCreatedAtResolver<TParent>;
    updatedAt?: BillingDataToUpdatedAtResolver<TParent>;
}
export interface BillingDataToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingDataToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingDataToPersonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingDataToBusinessNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingDataToRFCResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingDataToUseCDFIResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingDataToPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingDataToPaymentTermResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingDataToTaxSituationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingDataToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingDataToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingDataToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISellTypeResolver<TParent = any> {
    nominatorId?: SellToNominatorIdResolver<TParent>;
    nominator?: SellToNominatorResolver<TParent>;
    prospectId?: SellToProspectIdResolver<TParent>;
    prospect?: SellToProspectResolver<TParent>;
    sellerId?: SellToSellerIdResolver<TParent>;
    seller?: SellToSellerResolver<TParent>;
    memberRelationId?: SellToMemberRelationIdResolver<TParent>;
    memberRelation?: SellToMemberRelationResolver<TParent>;
    concept?: SellToConceptResolver<TParent>;
    amount?: SellToAmountResolver<TParent>;
    status?: SellToStatusResolver<TParent>;
    description?: SellToDescriptionResolver<TParent>;
    walletTransactionId?: SellToWalletTransactionIdResolver<TParent>;
    id?: SellToIdResolver<TParent>;
    createdAt?: SellToCreatedAtResolver<TParent>;
    updatedAt?: SellToUpdatedAtResolver<TParent>;
    walletTransaction?: SellToWalletTransactionResolver<TParent>;
}
export interface SellToNominatorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellToNominatorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellToProspectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellToProspectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellToSellerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellToSellerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellToMemberRelationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellToMemberRelationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellToConceptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellToWalletTransactionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellToWalletTransactionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberRelationTypeResolver<TParent = any> {
    status?: MemberRelationToStatusResolver<TParent>;
    parentNodeId?: MemberRelationToParentNodeIdResolver<TParent>;
    parentNode?: MemberRelationToParentNodeResolver<TParent>;
    childNodeId?: MemberRelationToChildNodeIdResolver<TParent>;
    childNode?: MemberRelationToChildNodeResolver<TParent>;
    isActive?: MemberRelationToIsActiveResolver<TParent>;
    parentRelationId?: MemberRelationToParentRelationIdResolver<TParent>;
    parentRelation?: MemberRelationToParentRelationResolver<TParent>;
    memberRelations?: MemberRelationToMemberRelationsResolver<TParent>;
    sells?: MemberRelationToSellsResolver<TParent>;
    id?: MemberRelationToIdResolver<TParent>;
    createdAt?: MemberRelationToCreatedAtResolver<TParent>;
    updatedAt?: MemberRelationToUpdatedAtResolver<TParent>;
}
export interface MemberRelationToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRelationToParentNodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRelationToParentNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRelationToChildNodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRelationToChildNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRelationToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRelationToParentRelationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRelationToParentRelationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRelationToMemberRelationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRelationToSellsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRelationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRelationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRelationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IWalletTransactionTypeResolver<TParent = any> {
    walletTransactionStatus?: WalletTransactionToWalletTransactionStatusResolver<TParent>;
    receptor?: WalletTransactionToReceptorResolver<TParent>;
    eWallet?: WalletTransactionToEWalletResolver<TParent>;
    service?: WalletTransactionToServiceResolver<TParent>;
    paymentServiceId?: WalletTransactionToPaymentServiceIdResolver<TParent>;
    paymentServiceToken?: WalletTransactionToPaymentServiceTokenResolver<TParent>;
    amount?: WalletTransactionToAmountResolver<TParent>;
    detainedAmount?: WalletTransactionToDetainedAmountResolver<TParent>;
    concept?: WalletTransactionToConceptResolver<TParent>;
    description?: WalletTransactionToDescriptionResolver<TParent>;
    projectWalletKeyId?: WalletTransactionToProjectWalletKeyIdResolver<TParent>;
    memberId?: WalletTransactionToMemberIdResolver<TParent>;
    eWalletId?: WalletTransactionToEWalletIdResolver<TParent>;
    receptorId?: WalletTransactionToReceptorIdResolver<TParent>;
    type?: WalletTransactionToTypeResolver<TParent>;
    walletTransactionMember?: WalletTransactionToWalletTransactionMemberResolver<TParent>;
    id?: WalletTransactionToIdResolver<TParent>;
    createdAt?: WalletTransactionToCreatedAtResolver<TParent>;
    updatedAt?: WalletTransactionToUpdatedAtResolver<TParent>;
    member?: WalletTransactionToMemberResolver<TParent>;
}
export interface WalletTransactionToWalletTransactionStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionToReceptorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionToEWalletResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionToServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionToPaymentServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionToPaymentServiceTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionToDetainedAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionToConceptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionToProjectWalletKeyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionToEWalletIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionToReceptorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionToWalletTransactionMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IWalletTransactionStatusTypeResolver<TParent = any> {
    walletTransaction?: WalletTransactionStatusToWalletTransactionResolver<TParent>;
    status?: WalletTransactionStatusToStatusResolver<TParent>;
    description?: WalletTransactionStatusToDescriptionResolver<TParent>;
    walletTransactionId?: WalletTransactionStatusToWalletTransactionIdResolver<TParent>;
    id?: WalletTransactionStatusToIdResolver<TParent>;
    createdAt?: WalletTransactionStatusToCreatedAtResolver<TParent>;
    updatedAt?: WalletTransactionStatusToUpdatedAtResolver<TParent>;
}
export interface WalletTransactionStatusToWalletTransactionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionStatusToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionStatusToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionStatusToWalletTransactionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionStatusToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionStatusToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionStatusToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEWalletTypeResolver<TParent = any> {
    balance?: EWalletToBalanceResolver<TParent>;
    detained?: EWalletToDetainedResolver<TParent>;
    eWalletTransactions?: EWalletToEWalletTransactionsResolver<TParent>;
    eWalletRetrieves?: EWalletToEWalletRetrievesResolver<TParent>;
    memberWallets?: EWalletToMemberWalletsResolver<TParent>;
    projectId?: EWalletToProjectIdResolver<TParent>;
    principal?: EWalletToPrincipalResolver<TParent>;
    detainedManual?: EWalletToDetainedManualResolver<TParent>;
    automaticPayment?: EWalletToAutomaticPaymentResolver<TParent>;
    id?: EWalletToIdResolver<TParent>;
    createdAt?: EWalletToCreatedAtResolver<TParent>;
    updatedAt?: EWalletToUpdatedAtResolver<TParent>;
}
export interface EWalletToBalanceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EWalletToDetainedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EWalletToEWalletTransactionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EWalletToEWalletRetrievesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EWalletToMemberWalletsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EWalletToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EWalletToPrincipalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EWalletToDetainedManualResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EWalletToAutomaticPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EWalletToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EWalletToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EWalletToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberWalletTypeResolver<TParent = any> {
    eWallet?: MemberWalletToEWalletResolver<TParent>;
    memberId?: MemberWalletToMemberIdResolver<TParent>;
    eWalletId?: MemberWalletToEWalletIdResolver<TParent>;
    id?: MemberWalletToIdResolver<TParent>;
    createdAt?: MemberWalletToCreatedAtResolver<TParent>;
    updatedAt?: MemberWalletToUpdatedAtResolver<TParent>;
    member?: MemberWalletToMemberResolver<TParent>;
}
export interface MemberWalletToEWalletResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberWalletToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberWalletToEWalletIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberWalletToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberWalletToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberWalletToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberWalletToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IWalletTransactionMemberRelationTypeResolver<TParent = any> {
    walletTransaction?: WalletTransactionMemberRelationToWalletTransactionResolver<TParent>;
    walletTransactionMemberDetails?: WalletTransactionMemberRelationToWalletTransactionMemberDetailsResolver<TParent>;
    memberRelationId?: WalletTransactionMemberRelationToMemberRelationIdResolver<TParent>;
    walletTransactionId?: WalletTransactionMemberRelationToWalletTransactionIdResolver<TParent>;
    id?: WalletTransactionMemberRelationToIdResolver<TParent>;
    createdAt?: WalletTransactionMemberRelationToCreatedAtResolver<TParent>;
    updatedAt?: WalletTransactionMemberRelationToUpdatedAtResolver<TParent>;
}
export interface WalletTransactionMemberRelationToWalletTransactionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionMemberRelationToWalletTransactionMemberDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionMemberRelationToMemberRelationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionMemberRelationToWalletTransactionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionMemberRelationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionMemberRelationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionMemberRelationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IWalletTransactionMemberDetailTypeResolver<TParent = any> {
    walletTransactionMember?: WalletTransactionMemberDetailToWalletTransactionMemberResolver<TParent>;
    amount?: WalletTransactionMemberDetailToAmountResolver<TParent>;
    description?: WalletTransactionMemberDetailToDescriptionResolver<TParent>;
    walletTransactionMemberId?: WalletTransactionMemberDetailToWalletTransactionMemberIdResolver<TParent>;
    id?: WalletTransactionMemberDetailToIdResolver<TParent>;
    createdAt?: WalletTransactionMemberDetailToCreatedAtResolver<TParent>;
    updatedAt?: WalletTransactionMemberDetailToUpdatedAtResolver<TParent>;
}
export interface WalletTransactionMemberDetailToWalletTransactionMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionMemberDetailToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionMemberDetailToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionMemberDetailToWalletTransactionMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionMemberDetailToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionMemberDetailToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionMemberDetailToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberBusinessTypeResolver<TParent = any> {
    memberId?: MemberBusinessToMemberIdResolver<TParent>;
    member?: MemberBusinessToMemberResolver<TParent>;
    businessId?: MemberBusinessToBusinessIdResolver<TParent>;
    id?: MemberBusinessToIdResolver<TParent>;
    createdAt?: MemberBusinessToCreatedAtResolver<TParent>;
    updatedAt?: MemberBusinessToUpdatedAtResolver<TParent>;
}
export interface MemberBusinessToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberBusinessToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberBusinessToBusinessIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberBusinessToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberBusinessToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberBusinessToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberIndustryTypeResolver<TParent = any> {
    name?: MemberIndustryToNameResolver<TParent>;
    projectId?: MemberIndustryToProjectIdResolver<TParent>;
    members?: MemberIndustryToMembersResolver<TParent>;
    id?: MemberIndustryToIdResolver<TParent>;
    createdAt?: MemberIndustryToCreatedAtResolver<TParent>;
    updatedAt?: MemberIndustryToUpdatedAtResolver<TParent>;
}
export interface MemberIndustryToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberIndustryToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberIndustryToMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberIndustryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberIndustryToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberIndustryToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAddressTypeResolver<TParent = any> {
    projectId?: AddressToProjectIdResolver<TParent>;
    memberId?: AddressToMemberIdResolver<TParent>;
    rFC?: AddressToRFCResolver<TParent>;
    businessName?: AddressToBusinessNameResolver<TParent>;
    addressType?: AddressToAddressTypeResolver<TParent>;
    firstName?: AddressToFirstNameResolver<TParent>;
    lastName?: AddressToLastNameResolver<TParent>;
    countryName?: AddressToCountryNameResolver<TParent>;
    state?: AddressToStateResolver<TParent>;
    city?: AddressToCityResolver<TParent>;
    subUrb?: AddressToSubUrbResolver<TParent>;
    zipCode?: AddressToZipCodeResolver<TParent>;
    addressLine1?: AddressToAddressLine1Resolver<TParent>;
    addressLine2?: AddressToAddressLine2Resolver<TParent>;
    phone?: AddressToPhoneResolver<TParent>;
    number?: AddressToNumberResolver<TParent>;
    municipality?: AddressToMunicipalityResolver<TParent>;
    addressDetails?: AddressToAddressDetailsResolver<TParent>;
    isPrincipal?: AddressToIsPrincipalResolver<TParent>;
    id?: AddressToIdResolver<TParent>;
    createdAt?: AddressToCreatedAtResolver<TParent>;
    updatedAt?: AddressToUpdatedAtResolver<TParent>;
    invoice?: AddressToInvoiceResolver<TParent>;
}
export interface AddressToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToRFCResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToBusinessNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToAddressTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToCountryNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToSubUrbResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToZipCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToAddressLine1Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToAddressLine2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToMunicipalityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToAddressDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToIsPrincipalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AddressToInvoiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInvoiceTypeResolver<TParent = any> {
    invoiceNumber?: InvoiceToInvoiceNumberResolver<TParent>;
    invoiceStatus?: InvoiceToInvoiceStatusResolver<TParent>;
    projectId?: InvoiceToProjectIdResolver<TParent>;
    memberId?: InvoiceToMemberIdResolver<TParent>;
    invoiceDate?: InvoiceToInvoiceDateResolver<TParent>;
    observations?: InvoiceToObservationsResolver<TParent>;
    subTotal?: InvoiceToSubTotalResolver<TParent>;
    shippingSale?: InvoiceToShippingSaleResolver<TParent>;
    discount?: InvoiceToDiscountResolver<TParent>;
    total?: InvoiceToTotalResolver<TParent>;
    addressId?: InvoiceToAddressIdResolver<TParent>;
    details?: InvoiceToDetailsResolver<TParent>;
    id?: InvoiceToIdResolver<TParent>;
    createdAt?: InvoiceToCreatedAtResolver<TParent>;
    updatedAt?: InvoiceToUpdatedAtResolver<TParent>;
    member?: InvoiceToMemberResolver<TParent>;
    address?: InvoiceToAddressResolver<TParent>;
}
export interface InvoiceToInvoiceNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceToInvoiceStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceToInvoiceDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceToObservationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceToSubTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceToShippingSaleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceToTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceToAddressIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceToDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceToAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInvoiceDetailTypeResolver<TParent = any> {
    invoiceId?: InvoiceDetailToInvoiceIdResolver<TParent>;
    invoice?: InvoiceDetailToInvoiceResolver<TParent>;
    productId?: InvoiceDetailToProductIdResolver<TParent>;
    quantity?: InvoiceDetailToQuantityResolver<TParent>;
    salePrice?: InvoiceDetailToSalePriceResolver<TParent>;
    totalPrice?: InvoiceDetailToTotalPriceResolver<TParent>;
    id?: InvoiceDetailToIdResolver<TParent>;
    createdAt?: InvoiceDetailToCreatedAtResolver<TParent>;
    updatedAt?: InvoiceDetailToUpdatedAtResolver<TParent>;
    product?: InvoiceDetailToProductResolver<TParent>;
}
export interface InvoiceDetailToInvoiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceDetailToInvoiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceDetailToProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceDetailToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceDetailToSalePriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceDetailToTotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceDetailToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceDetailToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceDetailToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceDetailToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProductTypeResolver<TParent = any> {
    projectId?: ProductToProjectIdResolver<TParent>;
    memberId?: ProductToMemberIdResolver<TParent>;
    title?: ProductToTitleResolver<TParent>;
    photo?: ProductToPhotoResolver<TParent>;
    slug?: ProductToSlugResolver<TParent>;
    sku?: ProductToSkuResolver<TParent>;
    price?: ProductToPriceResolver<TParent>;
    offerPrice?: ProductToOfferPriceResolver<TParent>;
    stock?: ProductToStockResolver<TParent>;
    active?: ProductToActiveResolver<TParent>;
    shippingType?: ProductToShippingTypeResolver<TParent>;
    shippingPrice?: ProductToShippingPriceResolver<TParent>;
    description?: ProductToDescriptionResolver<TParent>;
    publishDate?: ProductToPublishDateResolver<TParent>;
    views?: ProductToViewsResolver<TParent>;
    status?: ProductToStatusResolver<TParent>;
    seoProduct?: ProductToSeoProductResolver<TParent>;
    subCategories?: ProductToSubCategoriesResolver<TParent>;
    categories?: ProductToCategoriesResolver<TParent>;
    details?: ProductToDetailsResolver<TParent>;
    images?: ProductToImagesResolver<TParent>;
    shopType?: ProductToShopTypeResolver<TParent>;
    code?: ProductToCodeResolver<TParent>;
    purchasePrice?: ProductToPurchasePriceResolver<TParent>;
    sellPrice?: ProductToSellPriceResolver<TParent>;
    storeId?: ProductToStoreIdResolver<TParent>;
    store?: ProductToStoreResolver<TParent>;
    measure?: ProductToMeasureResolver<TParent>;
    utility?: ProductToUtilityResolver<TParent>;
    measureType?: ProductToMeasureTypeResolver<TParent>;
    origin?: ProductToOriginResolver<TParent>;
    productType?: ProductToProductTypeResolver<TParent>;
    planId?: ProductToPlanIdResolver<TParent>;
    barcode?: ProductToBarcodeResolver<TParent>;
    brand?: ProductToBrandResolver<TParent>;
    family?: ProductToFamilyResolver<TParent>;
    line?: ProductToLineResolver<TParent>;
    subFamily?: ProductToSubFamilyResolver<TParent>;
    key?: ProductToKeyResolver<TParent>;
    onStore?: ProductToOnStoreResolver<TParent>;
    onCatalog?: ProductToOnCatalogResolver<TParent>;
    sellMeasure?: ProductToSellMeasureResolver<TParent>;
    costType?: ProductToCostTypeResolver<TParent>;
    purchaseMeasure?: ProductToPurchaseMeasureResolver<TParent>;
    costingType?: ProductToCostingTypeResolver<TParent>;
    productModality?: ProductToProductModalityResolver<TParent>;
    stockAlertId?: ProductToStockAlertIdResolver<TParent>;
    stockAlert?: ProductToStockAlertResolver<TParent>;
    providers?: ProductToProvidersResolver<TParent>;
    prices?: ProductToPricesResolver<TParent>;
    discounts?: ProductToDiscountsResolver<TParent>;
    partNumber?: ProductToPartNumberResolver<TParent>;
    fee?: ProductToFeeResolver<TParent>;
    dataSheet?: ProductToDataSheetResolver<TParent>;
    ecommerceTitle?: ProductToEcommerceTitleResolver<TParent>;
    ecommerceDescription?: ProductToEcommerceDescriptionResolver<TParent>;
    ecommerceInstructions?: ProductToEcommerceInstructionsResolver<TParent>;
    id?: ProductToIdResolver<TParent>;
    createdAt?: ProductToCreatedAtResolver<TParent>;
    updatedAt?: ProductToUpdatedAtResolver<TParent>;
    invoiceDetail?: ProductToInvoiceDetailResolver<TParent>;
}
export interface ProductToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToPhotoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToSlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToSkuResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToOfferPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToStockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToShippingTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToShippingPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToPublishDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToViewsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToSeoProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToSubCategoriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToCategoriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToImagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToShopTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToPurchasePriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToSellPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToStoreIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToStoreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToMeasureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToUtilityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToMeasureTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToOriginResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToProductTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToPlanIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToBarcodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToFamilyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToLineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToSubFamilyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToOnStoreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToOnCatalogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToSellMeasureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToCostTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToPurchaseMeasureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToCostingTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToProductModalityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToStockAlertIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToStockAlertResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToProvidersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToPricesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToDiscountsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToPartNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToDataSheetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToEcommerceTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToEcommerceDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToEcommerceInstructionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductToInvoiceDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ITaxonomyTypeResolver<TParent = any> {
    projectId?: TaxonomyToProjectIdResolver<TParent>;
    name?: TaxonomyToNameResolver<TParent>;
    slug?: TaxonomyToSlugResolver<TParent>;
    description?: TaxonomyToDescriptionResolver<TParent>;
    termGroup?: TaxonomyToTermGroupResolver<TParent>;
    photo?: TaxonomyToPhotoResolver<TParent>;
    tagLine?: TaxonomyToTagLineResolver<TParent>;
    tagLine2?: TaxonomyToTagLine2Resolver<TParent>;
    parentId?: TaxonomyToParentIdResolver<TParent>;
    parent?: TaxonomyToParentResolver<TParent>;
    subCategories?: TaxonomyToSubCategoriesResolver<TParent>;
    isPublic?: TaxonomyToIsPublicResolver<TParent>;
    articles?: TaxonomyToArticlesResolver<TParent>;
    groupArticles?: TaxonomyToGroupArticlesResolver<TParent>;
    products?: TaxonomyToProductsResolver<TParent>;
    seoTaxonomy?: TaxonomyToSeoTaxonomyResolver<TParent>;
    id?: TaxonomyToIdResolver<TParent>;
    createdAt?: TaxonomyToCreatedAtResolver<TParent>;
    updatedAt?: TaxonomyToUpdatedAtResolver<TParent>;
}
export interface TaxonomyToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyToSlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyToTermGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyToPhotoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyToTagLineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyToTagLine2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyToParentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyToParentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyToSubCategoriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyToIsPublicResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyToArticlesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyToGroupArticlesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyToSeoTaxonomyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IArticleTypeResolver<TParent = any> {
    projectId?: ArticleToProjectIdResolver<TParent>;
    memberId?: ArticleToMemberIdResolver<TParent>;
    title?: ArticleToTitleResolver<TParent>;
    photo?: ArticleToPhotoResolver<TParent>;
    slug?: ArticleToSlugResolver<TParent>;
    resume?: ArticleToResumeResolver<TParent>;
    content?: ArticleToContentResolver<TParent>;
    active?: ArticleToActiveResolver<TParent>;
    views?: ArticleToViewsResolver<TParent>;
    status?: ArticleToStatusResolver<TParent>;
    releaseDate?: ArticleToReleaseDateResolver<TParent>;
    seoTitle?: ArticleToSeoTitleResolver<TParent>;
    seoDescription?: ArticleToSeoDescriptionResolver<TParent>;
    seoKeywords?: ArticleToSeoKeywordsResolver<TParent>;
    structuredMarking?: ArticleToStructuredMarkingResolver<TParent>;
    imageAlt?: ArticleToImageAltResolver<TParent>;
    seoArticle?: ArticleToSeoArticleResolver<TParent>;
    typeContent?: ArticleToTypeContentResolver<TParent>;
    embedContent?: ArticleToEmbedContentResolver<TParent>;
    groupId?: ArticleToGroupIdResolver<TParent>;
    group?: ArticleToGroupResolver<TParent>;
    language?: ArticleToLanguageResolver<TParent>;
    parentId?: ArticleToParentIdResolver<TParent>;
    parent?: ArticleToParentResolver<TParent>;
    variants?: ArticleToVariantsResolver<TParent>;
    subCategories?: ArticleToSubCategoriesResolver<TParent>;
    categories?: ArticleToCategoriesResolver<TParent>;
    tags?: ArticleToTagsResolver<TParent>;
    surveys?: ArticleToSurveysResolver<TParent>;
    id?: ArticleToIdResolver<TParent>;
    createdAt?: ArticleToCreatedAtResolver<TParent>;
    updatedAt?: ArticleToUpdatedAtResolver<TParent>;
    author?: ArticleToAuthorResolver<TParent>;
}
export interface ArticleToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToPhotoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToSlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToResumeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToContentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToViewsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToReleaseDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToSeoTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToSeoDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToSeoKeywordsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToStructuredMarkingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToImageAltResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToSeoArticleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToTypeContentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToEmbedContentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToGroupIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToParentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToParentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToSubCategoriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToCategoriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToSurveysResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleToAuthorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISurveyTypeResolver<TParent = any> {
    title?: SurveyToTitleResolver<TParent>;
    description?: SurveyToDescriptionResolver<TParent>;
    isActive?: SurveyToIsActiveResolver<TParent>;
    thankYouMessage?: SurveyToThankYouMessageResolver<TParent>;
    articles?: SurveyToArticlesResolver<TParent>;
    questions?: SurveyToQuestionsResolver<TParent>;
    id?: SurveyToIdResolver<TParent>;
    createdAt?: SurveyToCreatedAtResolver<TParent>;
    updatedAt?: SurveyToUpdatedAtResolver<TParent>;
}
export interface SurveyToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SurveyToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SurveyToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SurveyToThankYouMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SurveyToArticlesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SurveyToQuestionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SurveyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SurveyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SurveyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuestionTypeResolver<TParent = any> {
    surveyId?: QuestionToSurveyIdResolver<TParent>;
    survey?: QuestionToSurveyResolver<TParent>;
    title?: QuestionToTitleResolver<TParent>;
    type?: QuestionToTypeResolver<TParent>;
    image?: QuestionToImageResolver<TParent>;
    isRequired?: QuestionToIsRequiredResolver<TParent>;
    position?: QuestionToPositionResolver<TParent>;
    allowsFileUpload?: QuestionToAllowsFileUploadResolver<TParent>;
    options?: QuestionToOptionsResolver<TParent>;
    answers?: QuestionToAnswersResolver<TParent>;
    id?: QuestionToIdResolver<TParent>;
    createdAt?: QuestionToCreatedAtResolver<TParent>;
    updatedAt?: QuestionToUpdatedAtResolver<TParent>;
}
export interface QuestionToSurveyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuestionToSurveyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuestionToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuestionToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuestionToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuestionToIsRequiredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuestionToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuestionToAllowsFileUploadResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuestionToOptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuestionToAnswersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuestionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuestionToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuestionToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IOptionTypeResolver<TParent = any> {
    questionId?: OptionToQuestionIdResolver<TParent>;
    question?: OptionToQuestionResolver<TParent>;
    title?: OptionToTitleResolver<TParent>;
    position?: OptionToPositionResolver<TParent>;
    count?: OptionToCountResolver<TParent>;
    answers?: OptionToAnswersResolver<TParent>;
    id?: OptionToIdResolver<TParent>;
    createdAt?: OptionToCreatedAtResolver<TParent>;
    updatedAt?: OptionToUpdatedAtResolver<TParent>;
}
export interface OptionToQuestionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OptionToQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OptionToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OptionToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OptionToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OptionToAnswersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OptionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OptionToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OptionToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAnswerTypeResolver<TParent = any> {
    memberId?: AnswerToMemberIdResolver<TParent>;
    questionId?: AnswerToQuestionIdResolver<TParent>;
    question?: AnswerToQuestionResolver<TParent>;
    optionId?: AnswerToOptionIdResolver<TParent>;
    option?: AnswerToOptionResolver<TParent>;
    uploadFile?: AnswerToUploadFileResolver<TParent>;
    responseText?: AnswerToResponseTextResolver<TParent>;
    id?: AnswerToIdResolver<TParent>;
    createdAt?: AnswerToCreatedAtResolver<TParent>;
    updatedAt?: AnswerToUpdatedAtResolver<TParent>;
    member?: AnswerToMemberResolver<TParent>;
}
export interface AnswerToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnswerToQuestionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnswerToQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnswerToOptionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnswerToOptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnswerToUploadFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnswerToResponseTextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnswerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnswerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnswerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnswerToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProductDetailTypeResolver<TParent = any> {
    productId?: ProductDetailToProductIdResolver<TParent>;
    product?: ProductDetailToProductResolver<TParent>;
    key?: ProductDetailToKeyResolver<TParent>;
    value?: ProductDetailToValueResolver<TParent>;
    id?: ProductDetailToIdResolver<TParent>;
    createdAt?: ProductDetailToCreatedAtResolver<TParent>;
    updatedAt?: ProductDetailToUpdatedAtResolver<TParent>;
}
export interface ProductDetailToProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductDetailToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductDetailToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductDetailToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductDetailToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductDetailToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductDetailToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IImageTypeResolver<TParent = any> {
    projectId?: ImageToProjectIdResolver<TParent>;
    original?: ImageToOriginalResolver<TParent>;
    title?: ImageToTitleResolver<TParent>;
    products?: ImageToProductsResolver<TParent>;
    id?: ImageToIdResolver<TParent>;
    createdAt?: ImageToCreatedAtResolver<TParent>;
    updatedAt?: ImageToUpdatedAtResolver<TParent>;
}
export interface ImageToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ImageToOriginalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ImageToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ImageToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ImageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ImageToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ImageToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStoreTypeResolver<TParent = any> {
    projectId?: StoreToProjectIdResolver<TParent>;
    name?: StoreToNameResolver<TParent>;
    branchOfficeId?: StoreToBranchOfficeIdResolver<TParent>;
    branchOffice?: StoreToBranchOfficeResolver<TParent>;
    code?: StoreToCodeResolver<TParent>;
    storeType?: StoreToStoreTypeResolver<TParent>;
    sellerId?: StoreToSellerIdResolver<TParent>;
    stocks?: StoreToStocksResolver<TParent>;
    id?: StoreToIdResolver<TParent>;
    createdAt?: StoreToCreatedAtResolver<TParent>;
    updatedAt?: StoreToUpdatedAtResolver<TParent>;
    seller?: StoreToSellerResolver<TParent>;
}
export interface StoreToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreToBranchOfficeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreToBranchOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreToStoreTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreToSellerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreToStocksResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreToSellerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBranchOfficeTypeResolver<TParent = any> {
    projectId?: BranchOfficeToProjectIdResolver<TParent>;
    isActive?: BranchOfficeToIsActiveResolver<TParent>;
    name?: BranchOfficeToNameResolver<TParent>;
    countryId?: BranchOfficeToCountryIdResolver<TParent>;
    state?: BranchOfficeToStateResolver<TParent>;
    municipality?: BranchOfficeToMunicipalityResolver<TParent>;
    email?: BranchOfficeToEmailResolver<TParent>;
    phone?: BranchOfficeToPhoneResolver<TParent>;
    postalCode?: BranchOfficeToPostalCodeResolver<TParent>;
    street?: BranchOfficeToStreetResolver<TParent>;
    number?: BranchOfficeToNumberResolver<TParent>;
    managerId?: BranchOfficeToManagerIdResolver<TParent>;
    manager?: BranchOfficeToManagerResolver<TParent>;
    id?: BranchOfficeToIdResolver<TParent>;
    createdAt?: BranchOfficeToCreatedAtResolver<TParent>;
    updatedAt?: BranchOfficeToUpdatedAtResolver<TParent>;
    country?: BranchOfficeToCountryResolver<TParent>;
}
export interface BranchOfficeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficeToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficeToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficeToCountryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficeToStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficeToMunicipalityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficeToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficeToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficeToPostalCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficeToStreetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficeToNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficeToManagerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficeToManagerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficeToCountryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IManagerTypeResolver<TParent = any> {
    projectId?: ManagerToProjectIdResolver<TParent>;
    memberId?: ManagerToMemberIdResolver<TParent>;
    branchOfficeId?: ManagerToBranchOfficeIdResolver<TParent>;
    branchOffice?: ManagerToBranchOfficeResolver<TParent>;
    id?: ManagerToIdResolver<TParent>;
    createdAt?: ManagerToCreatedAtResolver<TParent>;
    updatedAt?: ManagerToUpdatedAtResolver<TParent>;
}
export interface ManagerToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ManagerToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ManagerToBranchOfficeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ManagerToBranchOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ManagerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ManagerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ManagerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStoreStockTypeResolver<TParent = any> {
    projectId?: StoreStockToProjectIdResolver<TParent>;
    productId?: StoreStockToProductIdResolver<TParent>;
    storeId?: StoreStockToStoreIdResolver<TParent>;
    store?: StoreStockToStoreResolver<TParent>;
    product?: StoreStockToProductResolver<TParent>;
    stock?: StoreStockToStockResolver<TParent>;
    id?: StoreStockToIdResolver<TParent>;
    createdAt?: StoreStockToCreatedAtResolver<TParent>;
    updatedAt?: StoreStockToUpdatedAtResolver<TParent>;
}
export interface StoreStockToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreStockToProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreStockToStoreIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreStockToStoreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreStockToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreStockToStockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreStockToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreStockToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreStockToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStockAlertTypeResolver<TParent = any> {
    projectId?: StockAlertToProjectIdResolver<TParent>;
    productId?: StockAlertToProductIdResolver<TParent>;
    product?: StockAlertToProductResolver<TParent>;
    lowestQuantity?: StockAlertToLowestQuantityResolver<TParent>;
    middleQuantity?: StockAlertToMiddleQuantityResolver<TParent>;
    highestQuantity?: StockAlertToHighestQuantityResolver<TParent>;
    id?: StockAlertToIdResolver<TParent>;
    createdAt?: StockAlertToCreatedAtResolver<TParent>;
    updatedAt?: StockAlertToUpdatedAtResolver<TParent>;
}
export interface StockAlertToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StockAlertToProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StockAlertToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StockAlertToLowestQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StockAlertToMiddleQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StockAlertToHighestQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StockAlertToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StockAlertToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StockAlertToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProductProvTypeResolver<TParent = any> {
    productId?: ProductProvToProductIdResolver<TParent>;
    providerId?: ProductProvToProviderIdResolver<TParent>;
    product?: ProductProvToProductResolver<TParent>;
    provider?: ProductProvToProviderResolver<TParent>;
    projectId?: ProductProvToProjectIdResolver<TParent>;
    id?: ProductProvToIdResolver<TParent>;
    createdAt?: ProductProvToCreatedAtResolver<TParent>;
    updatedAt?: ProductProvToUpdatedAtResolver<TParent>;
}
export interface ProductProvToProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProvToProviderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProvToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProvToProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProvToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProvToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProvToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProvToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProductProviderTypeResolver<TParent = any> {
    projectId?: ProductProviderToProjectIdResolver<TParent>;
    name?: ProductProviderToNameResolver<TParent>;
    rfc?: ProductProviderToRfcResolver<TParent>;
    socialReason?: ProductProviderToSocialReasonResolver<TParent>;
    address?: ProductProviderToAddressResolver<TParent>;
    purchase?: ProductProviderToPurchaseResolver<TParent>;
    creditDays?: ProductProviderToCreditDaysResolver<TParent>;
    afectaDiot?: ProductProviderToAfectaDiotResolver<TParent>;
    city?: ProductProviderToCityResolver<TParent>;
    credit?: ProductProviderToCreditResolver<TParent>;
    balance?: ProductProviderToBalanceResolver<TParent>;
    providerType?: ProductProviderToProviderTypeResolver<TParent>;
    id?: ProductProviderToIdResolver<TParent>;
    createdAt?: ProductProviderToCreatedAtResolver<TParent>;
    updatedAt?: ProductProviderToUpdatedAtResolver<TParent>;
}
export interface ProductProviderToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProviderToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProviderToRfcResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProviderToSocialReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProviderToAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProviderToPurchaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProviderToCreditDaysResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProviderToAfectaDiotResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProviderToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProviderToCreditResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProviderToBalanceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProviderToProviderTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProviderToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProviderToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductProviderToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPurchaseTypeResolver<TParent = any> {
    projectId?: PurchaseToProjectIdResolver<TParent>;
    invoice?: PurchaseToInvoiceResolver<TParent>;
    invoiceDate?: PurchaseToInvoiceDateResolver<TParent>;
    expirationDate?: PurchaseToExpirationDateResolver<TParent>;
    branchOfficeId?: PurchaseToBranchOfficeIdResolver<TParent>;
    storeId?: PurchaseToStoreIdResolver<TParent>;
    providerId?: PurchaseToProviderIdResolver<TParent>;
    total?: PurchaseToTotalResolver<TParent>;
    currencyId?: PurchaseToCurrencyIdResolver<TParent>;
    hasBuyer?: PurchaseToHasBuyerResolver<TParent>;
    globalDiscount?: PurchaseToGlobalDiscountResolver<TParent>;
    buyerId?: PurchaseToBuyerIdResolver<TParent>;
    isActive?: PurchaseToIsActiveResolver<TParent>;
    discount?: PurchaseToDiscountResolver<TParent>;
    subTotal?: PurchaseToSubTotalResolver<TParent>;
    provider?: PurchaseToProviderResolver<TParent>;
    store?: PurchaseToStoreResolver<TParent>;
    branchOffice?: PurchaseToBranchOfficeResolver<TParent>;
    productPurchases?: PurchaseToProductPurchasesResolver<TParent>;
    files?: PurchaseToFilesResolver<TParent>;
    id?: PurchaseToIdResolver<TParent>;
    createdAt?: PurchaseToCreatedAtResolver<TParent>;
    updatedAt?: PurchaseToUpdatedAtResolver<TParent>;
}
export interface PurchaseToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToInvoiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToInvoiceDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToExpirationDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToBranchOfficeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToStoreIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToProviderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToCurrencyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToHasBuyerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToGlobalDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToBuyerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToSubTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToStoreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToBranchOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToProductPurchasesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProductPurchaseTypeResolver<TParent = any> {
    projectId?: ProductPurchaseToProjectIdResolver<TParent>;
    productId?: ProductPurchaseToProductIdResolver<TParent>;
    purchaseId?: ProductPurchaseToPurchaseIdResolver<TParent>;
    quantity?: ProductPurchaseToQuantityResolver<TParent>;
    price?: ProductPurchaseToPriceResolver<TParent>;
    discount?: ProductPurchaseToDiscountResolver<TParent>;
    taxes?: ProductPurchaseToTaxesResolver<TParent>;
    product?: ProductPurchaseToProductResolver<TParent>;
    purchase?: ProductPurchaseToPurchaseResolver<TParent>;
    id?: ProductPurchaseToIdResolver<TParent>;
    createdAt?: ProductPurchaseToCreatedAtResolver<TParent>;
    updatedAt?: ProductPurchaseToUpdatedAtResolver<TParent>;
}
export interface ProductPurchaseToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductPurchaseToProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductPurchaseToPurchaseIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductPurchaseToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductPurchaseToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductPurchaseToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductPurchaseToTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductPurchaseToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductPurchaseToPurchaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductPurchaseToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductPurchaseToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductPurchaseToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPurchaseFileTypeResolver<TParent = any> {
    fileid?: PurchaseFileToFileidResolver<TParent>;
    purchaseId?: PurchaseFileToPurchaseIdResolver<TParent>;
    purchase?: PurchaseFileToPurchaseResolver<TParent>;
    id?: PurchaseFileToIdResolver<TParent>;
    createdAt?: PurchaseFileToCreatedAtResolver<TParent>;
    updatedAt?: PurchaseFileToUpdatedAtResolver<TParent>;
}
export interface PurchaseFileToFileidResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseFileToPurchaseIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseFileToPurchaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseFileToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseFileToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseFileToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProductPriceTypeResolver<TParent = any> {
    price?: ProductPriceToPriceResolver<TParent>;
    productId?: ProductPriceToProductIdResolver<TParent>;
    product?: ProductPriceToProductResolver<TParent>;
    utility?: ProductPriceToUtilityResolver<TParent>;
    setPrice?: ProductPriceToSetPriceResolver<TParent>;
    id?: ProductPriceToIdResolver<TParent>;
    createdAt?: ProductPriceToCreatedAtResolver<TParent>;
    updatedAt?: ProductPriceToUpdatedAtResolver<TParent>;
}
export interface ProductPriceToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductPriceToProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductPriceToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductPriceToUtilityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductPriceToSetPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductPriceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductPriceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductPriceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IHiringTypeResolver<TParent = any> {
    hiringType?: HiringToHiringTypeResolver<TParent>;
    collaborators?: HiringToCollaboratorsResolver<TParent>;
    hiringServices?: HiringToHiringServicesResolver<TParent>;
    projectRoleId?: HiringToProjectRoleIdResolver<TParent>;
    memberId?: HiringToMemberIdResolver<TParent>;
    dateStart?: HiringToDateStartResolver<TParent>;
    dateEnd?: HiringToDateEndResolver<TParent>;
    job?: HiringToJobResolver<TParent>;
    description?: HiringToDescriptionResolver<TParent>;
    amount?: HiringToAmountResolver<TParent>;
    amountWritted?: HiringToAmountWrittedResolver<TParent>;
    amountPerHour?: HiringToAmountPerHourResolver<TParent>;
    vacationDays?: HiringToVacationDaysResolver<TParent>;
    professionalLicense?: HiringToProfessionalLicenseResolver<TParent>;
    cURP?: HiringToCURPResolver<TParent>;
    iNE?: HiringToINEResolver<TParent>;
    infonavit?: HiringToInfonavitResolver<TParent>;
    nationality?: HiringToNationalityResolver<TParent>;
    birthNationality?: HiringToBirthNationalityResolver<TParent>;
    civilState?: HiringToCivilStateResolver<TParent>;
    benefits?: HiringToBenefitsResolver<TParent>;
    enumHiringType?: HiringToEnumHiringTypeResolver<TParent>;
    hiringTypeId?: HiringToHiringTypeIdResolver<TParent>;
    id?: HiringToIdResolver<TParent>;
    createdAt?: HiringToCreatedAtResolver<TParent>;
    updatedAt?: HiringToUpdatedAtResolver<TParent>;
}
export interface HiringToHiringTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToCollaboratorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToHiringServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToProjectRoleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToDateStartResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToDateEndResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToAmountWrittedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToAmountPerHourResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToVacationDaysResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToProfessionalLicenseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToCURPResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToINEResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToInfonavitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToNationalityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToBirthNationalityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToCivilStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToBenefitsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToEnumHiringTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToHiringTypeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IHiringTypeTypeResolver<TParent = any> {
    projectId?: HiringTypeToProjectIdResolver<TParent>;
    name?: HiringTypeToNameResolver<TParent>;
    hirings?: HiringTypeToHiringsResolver<TParent>;
    id?: HiringTypeToIdResolver<TParent>;
    createdAt?: HiringTypeToCreatedAtResolver<TParent>;
    updatedAt?: HiringTypeToUpdatedAtResolver<TParent>;
}
export interface HiringTypeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringTypeToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringTypeToHiringsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringTypeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringTypeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringTypeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICollaboratorTypeResolver<TParent = any> {
    resourceQuoteDetail?: CollaboratorToResourceQuoteDetailResolver<TParent>;
    hiring?: CollaboratorToHiringResolver<TParent>;
    reportedHours?: CollaboratorToReportedHoursResolver<TParent>;
    hours?: CollaboratorToHoursResolver<TParent>;
    costByHour?: CollaboratorToCostByHourResolver<TParent>;
    role?: CollaboratorToRoleResolver<TParent>;
    projectRoleId?: CollaboratorToProjectRoleIdResolver<TParent>;
    timeEstimated?: CollaboratorToTimeEstimatedResolver<TParent>;
    amount?: CollaboratorToAmountResolver<TParent>;
    memberId?: CollaboratorToMemberIdResolver<TParent>;
    resourceQuoteDetailId?: CollaboratorToResourceQuoteDetailIdResolver<TParent>;
    hiringId?: CollaboratorToHiringIdResolver<TParent>;
    collaboratorHours?: CollaboratorToCollaboratorHoursResolver<TParent>;
    id?: CollaboratorToIdResolver<TParent>;
    createdAt?: CollaboratorToCreatedAtResolver<TParent>;
    updatedAt?: CollaboratorToUpdatedAtResolver<TParent>;
    member?: CollaboratorToMemberResolver<TParent>;
}
export interface CollaboratorToResourceQuoteDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorToHiringResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorToReportedHoursResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorToHoursResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorToCostByHourResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorToRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorToProjectRoleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorToTimeEstimatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorToResourceQuoteDetailIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorToHiringIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorToCollaboratorHoursResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IResourceQuoteDetailTypeResolver<TParent = any> {
    resourceQuote?: ResourceQuoteDetailToResourceQuoteResolver<TParent>;
    resourceQuoteDetailBoardRow?: ResourceQuoteDetailToResourceQuoteDetailBoardRowResolver<TParent>;
    collaborators?: ResourceQuoteDetailToCollaboratorsResolver<TParent>;
    totalCost?: ResourceQuoteDetailToTotalCostResolver<TParent>;
    totalHours?: ResourceQuoteDetailToTotalHoursResolver<TParent>;
    totalEarnings?: ResourceQuoteDetailToTotalEarningsResolver<TParent>;
    totalReportedHours?: ResourceQuoteDetailToTotalReportedHoursResolver<TParent>;
    title?: ResourceQuoteDetailToTitleResolver<TParent>;
    serviceId?: ResourceQuoteDetailToServiceIdResolver<TParent>;
    resourceQuoteId?: ResourceQuoteDetailToResourceQuoteIdResolver<TParent>;
    description?: ResourceQuoteDetailToDescriptionResolver<TParent>;
    nomenclature?: ResourceQuoteDetailToNomenclatureResolver<TParent>;
    consecutive?: ResourceQuoteDetailToConsecutiveResolver<TParent>;
    earningPercentage?: ResourceQuoteDetailToEarningPercentageResolver<TParent>;
    id?: ResourceQuoteDetailToIdResolver<TParent>;
    createdAt?: ResourceQuoteDetailToCreatedAtResolver<TParent>;
    updatedAt?: ResourceQuoteDetailToUpdatedAtResolver<TParent>;
    service?: ResourceQuoteDetailToServiceResolver<TParent>;
}
export interface ResourceQuoteDetailToResourceQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailToResourceQuoteDetailBoardRowResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailToCollaboratorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailToTotalCostResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailToTotalHoursResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailToTotalEarningsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailToTotalReportedHoursResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailToServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailToResourceQuoteIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailToNomenclatureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailToConsecutiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailToEarningPercentageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailToServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IResourceQuoteTypeResolver<TParent = any> {
    proposals?: ResourceQuoteToProposalsResolver<TParent>;
    resourceQuoteDetails?: ResourceQuoteToResourceQuoteDetailsResolver<TParent>;
    totalCostServices?: ResourceQuoteToTotalCostServicesResolver<TParent>;
    totalHoursServices?: ResourceQuoteToTotalHoursServicesResolver<TParent>;
    totalEarnings?: ResourceQuoteToTotalEarningsResolver<TParent>;
    totalReportedHours?: ResourceQuoteToTotalReportedHoursResolver<TParent>;
    calculatedClosingDate?: ResourceQuoteToCalculatedClosingDateResolver<TParent>;
    memberId?: ResourceQuoteToMemberIdResolver<TParent>;
    projectId?: ResourceQuoteToProjectIdResolver<TParent>;
    title?: ResourceQuoteToTitleResolver<TParent>;
    areaId?: ResourceQuoteToAreaIdResolver<TParent>;
    approvedDate?: ResourceQuoteToApprovedDateResolver<TParent>;
    status?: ResourceQuoteToStatusResolver<TParent>;
    id?: ResourceQuoteToIdResolver<TParent>;
    createdAt?: ResourceQuoteToCreatedAtResolver<TParent>;
    updatedAt?: ResourceQuoteToUpdatedAtResolver<TParent>;
    member?: ResourceQuoteToMemberResolver<TParent>;
    area?: ResourceQuoteToAreaResolver<TParent>;
}
export interface ResourceQuoteToProposalsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteToResourceQuoteDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteToTotalCostServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteToTotalHoursServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteToTotalEarningsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteToTotalReportedHoursResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteToCalculatedClosingDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteToAreaIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteToApprovedDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteToAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProposalTypeResolver<TParent = any> {
    resourceQuote?: ProposalToResourceQuoteResolver<TParent>;
    title?: ProposalToTitleResolver<TParent>;
    state?: ProposalToStateResolver<TParent>;
    city?: ProposalToCityResolver<TParent>;
    pDF?: ProposalToPDFResolver<TParent>;
    introduction?: ProposalToIntroductionResolver<TParent>;
    summary?: ProposalToSummaryResolver<TParent>;
    methodology?: ProposalToMethodologyResolver<TParent>;
    timeEstimate?: ProposalToTimeEstimateResolver<TParent>;
    finishDate?: ProposalToFinishDateResolver<TParent>;
    discount?: ProposalToDiscountResolver<TParent>;
    discountType?: ProposalToDiscountTypeResolver<TParent>;
    tax?: ProposalToTaxResolver<TParent>;
    taxType?: ProposalToTaxTypeResolver<TParent>;
    status?: ProposalToStatusResolver<TParent>;
    total?: ProposalToTotalResolver<TParent>;
    resourceQuoteId?: ProposalToResourceQuoteIdResolver<TParent>;
    id?: ProposalToIdResolver<TParent>;
    createdAt?: ProposalToCreatedAtResolver<TParent>;
    updatedAt?: ProposalToUpdatedAtResolver<TParent>;
}
export interface ProposalToResourceQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalToStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalToPDFResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalToIntroductionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalToSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalToMethodologyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalToTimeEstimateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalToFinishDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalToDiscountTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalToTaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalToTaxTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalToTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalToResourceQuoteIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAreaTypeResolver<TParent = any> {
    services?: AreaToServicesResolver<TParent>;
    name?: AreaToNameResolver<TParent>;
    description?: AreaToDescriptionResolver<TParent>;
    code?: AreaToCodeResolver<TParent>;
    active?: AreaToActiveResolver<TParent>;
    projectId?: AreaToProjectIdResolver<TParent>;
    id?: AreaToIdResolver<TParent>;
    createdAt?: AreaToCreatedAtResolver<TParent>;
    updatedAt?: AreaToUpdatedAtResolver<TParent>;
}
export interface AreaToServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AreaToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AreaToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AreaToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AreaToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AreaToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AreaToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AreaToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AreaToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IServiceAreaTypeResolver<TParent = any> {
    serviceQuizes?: ServiceAreaToServiceQuizesResolver<TParent>;
    serviceMembers?: ServiceAreaToServiceMembersResolver<TParent>;
    area?: ServiceAreaToAreaResolver<TParent>;
    name?: ServiceAreaToNameResolver<TParent>;
    description?: ServiceAreaToDescriptionResolver<TParent>;
    code?: ServiceAreaToCodeResolver<TParent>;
    active?: ServiceAreaToActiveResolver<TParent>;
    areaId?: ServiceAreaToAreaIdResolver<TParent>;
    id?: ServiceAreaToIdResolver<TParent>;
    createdAt?: ServiceAreaToCreatedAtResolver<TParent>;
    updatedAt?: ServiceAreaToUpdatedAtResolver<TParent>;
    hiringService?: ServiceAreaToHiringServiceResolver<TParent>;
}
export interface ServiceAreaToServiceQuizesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceAreaToServiceMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceAreaToAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceAreaToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceAreaToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceAreaToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceAreaToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceAreaToAreaIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceAreaToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceAreaToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceAreaToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceAreaToHiringServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IServiceQuizTypeResolver<TParent = any> {
    quiz?: ServiceQuizToQuizResolver<TParent>;
    service?: ServiceQuizToServiceResolver<TParent>;
    serviceId?: ServiceQuizToServiceIdResolver<TParent>;
    quizId?: ServiceQuizToQuizIdResolver<TParent>;
    id?: ServiceQuizToIdResolver<TParent>;
    createdAt?: ServiceQuizToCreatedAtResolver<TParent>;
    updatedAt?: ServiceQuizToUpdatedAtResolver<TParent>;
}
export interface ServiceQuizToQuizResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceQuizToServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceQuizToServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceQuizToQuizIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceQuizToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceQuizToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceQuizToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizTypeResolver<TParent = any> {
    serviceQuizes?: QuizToServiceQuizesResolver<TParent>;
    quizSections?: QuizToQuizSectionsResolver<TParent>;
    quizMembers?: QuizToQuizMembersResolver<TParent>;
    timesAnswered?: QuizToTimesAnsweredResolver<TParent>;
    name?: QuizToNameResolver<TParent>;
    description?: QuizToDescriptionResolver<TParent>;
    note?: QuizToNoteResolver<TParent>;
    projectId?: QuizToProjectIdResolver<TParent>;
    answerableOnlyOnce?: QuizToAnswerableOnlyOnceResolver<TParent>;
    maxTimesAnswerable?: QuizToMaxTimesAnswerableResolver<TParent>;
    mailInterviewed?: QuizToMailInterviewedResolver<TParent>;
    mailCreator?: QuizToMailCreatorResolver<TParent>;
    saveSend?: QuizToSaveSendResolver<TParent>;
    tagPosition?: QuizToTagPositionResolver<TParent>;
    quizStatus?: QuizToQuizStatusResolver<TParent>;
    id?: QuizToIdResolver<TParent>;
    createdAt?: QuizToCreatedAtResolver<TParent>;
    updatedAt?: QuizToUpdatedAtResolver<TParent>;
}
export interface QuizToServiceQuizesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizToQuizSectionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizToQuizMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizToTimesAnsweredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizToNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizToAnswerableOnlyOnceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizToMaxTimesAnswerableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizToMailInterviewedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizToMailCreatorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizToSaveSendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizToTagPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizToQuizStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizSectionTypeResolver<TParent = any> {
    quizQuestions?: QuizSectionToQuizQuestionsResolver<TParent>;
    quiz?: QuizSectionToQuizResolver<TParent>;
    name?: QuizSectionToNameResolver<TParent>;
    description?: QuizSectionToDescriptionResolver<TParent>;
    order?: QuizSectionToOrderResolver<TParent>;
    quizId?: QuizSectionToQuizIdResolver<TParent>;
    id?: QuizSectionToIdResolver<TParent>;
    createdAt?: QuizSectionToCreatedAtResolver<TParent>;
    updatedAt?: QuizSectionToUpdatedAtResolver<TParent>;
}
export interface QuizSectionToQuizQuestionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizSectionToQuizResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizSectionToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizSectionToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizSectionToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizSectionToQuizIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizSectionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizSectionToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizSectionToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizQuestionTypeResolver<TParent = any> {
    quizSection?: QuizQuestionToQuizSectionResolver<TParent>;
    quizQuestionAnswers?: QuizQuestionToQuizQuestionAnswersResolver<TParent>;
    quizQuestionMembers?: QuizQuestionToQuizQuestionMembersResolver<TParent>;
    quizQuestionNesteds?: QuizQuestionToQuizQuestionNestedsResolver<TParent>;
    question?: QuizQuestionToQuestionResolver<TParent>;
    questionType?: QuizQuestionToQuestionTypeResolver<TParent>;
    description?: QuizQuestionToDescriptionResolver<TParent>;
    helpText?: QuizQuestionToHelpTextResolver<TParent>;
    placeHolder?: QuizQuestionToPlaceHolderResolver<TParent>;
    required?: QuizQuestionToRequiredResolver<TParent>;
    requireConfimation?: QuizQuestionToRequireConfimationResolver<TParent>;
    maxCharacters?: QuizQuestionToMaxCharactersResolver<TParent>;
    memberId?: QuizQuestionToMemberIdResolver<TParent>;
    tagPosition?: QuizQuestionToTagPositionResolver<TParent>;
    order?: QuizQuestionToOrderResolver<TParent>;
    active?: QuizQuestionToActiveResolver<TParent>;
    quizSectionId?: QuizQuestionToQuizSectionIdResolver<TParent>;
    quizQuestionPrefabId?: QuizQuestionToQuizQuestionPrefabIdResolver<TParent>;
    quizQuestionPrefab?: QuizQuestionToQuizQuestionPrefabResolver<TParent>;
    id?: QuizQuestionToIdResolver<TParent>;
    createdAt?: QuizQuestionToCreatedAtResolver<TParent>;
    updatedAt?: QuizQuestionToUpdatedAtResolver<TParent>;
}
export interface QuizQuestionToQuizSectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToQuizQuestionAnswersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToQuizQuestionMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToQuizQuestionNestedsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToQuestionTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToHelpTextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToPlaceHolderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToRequiredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToRequireConfimationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToMaxCharactersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToTagPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToQuizSectionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToQuizQuestionPrefabIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToQuizQuestionPrefabResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizQuestionAnswerTypeResolver<TParent = any> {
    quizAnswer?: QuizQuestionAnswerToQuizAnswerResolver<TParent>;
    quizQuestion?: QuizQuestionAnswerToQuizQuestionResolver<TParent>;
    quizQuestionId?: QuizQuestionAnswerToQuizQuestionIdResolver<TParent>;
    quizAnswerId?: QuizQuestionAnswerToQuizAnswerIdResolver<TParent>;
    order?: QuizQuestionAnswerToOrderResolver<TParent>;
    value?: QuizQuestionAnswerToValueResolver<TParent>;
    calc?: QuizQuestionAnswerToCalcResolver<TParent>;
    id?: QuizQuestionAnswerToIdResolver<TParent>;
    createdAt?: QuizQuestionAnswerToCreatedAtResolver<TParent>;
    updatedAt?: QuizQuestionAnswerToUpdatedAtResolver<TParent>;
}
export interface QuizQuestionAnswerToQuizAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionAnswerToQuizQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionAnswerToQuizQuestionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionAnswerToQuizAnswerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionAnswerToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionAnswerToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionAnswerToCalcResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionAnswerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionAnswerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionAnswerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizAnswerTypeResolver<TParent = any> {
    quizQuestionAnswers?: QuizAnswerToQuizQuestionAnswersResolver<TParent>;
    description?: QuizAnswerToDescriptionResolver<TParent>;
    active?: QuizAnswerToActiveResolver<TParent>;
    projectId?: QuizAnswerToProjectIdResolver<TParent>;
    id?: QuizAnswerToIdResolver<TParent>;
    createdAt?: QuizAnswerToCreatedAtResolver<TParent>;
    updatedAt?: QuizAnswerToUpdatedAtResolver<TParent>;
}
export interface QuizAnswerToQuizQuestionAnswersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizAnswerToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizAnswerToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizAnswerToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizAnswerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizAnswerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizAnswerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizQuestionMemberTypeResolver<TParent = any> {
    quizMember?: QuizQuestionMemberToQuizMemberResolver<TParent>;
    quizMemberDescriptions?: QuizQuestionMemberToQuizMemberDescriptionsResolver<TParent>;
    quizMemberAnswers?: QuizQuestionMemberToQuizMemberAnswersResolver<TParent>;
    quizQuestion?: QuizQuestionMemberToQuizQuestionResolver<TParent>;
    quizMemberId?: QuizQuestionMemberToQuizMemberIdResolver<TParent>;
    quizQuestionId?: QuizQuestionMemberToQuizQuestionIdResolver<TParent>;
    active?: QuizQuestionMemberToActiveResolver<TParent>;
    id?: QuizQuestionMemberToIdResolver<TParent>;
    createdAt?: QuizQuestionMemberToCreatedAtResolver<TParent>;
    updatedAt?: QuizQuestionMemberToUpdatedAtResolver<TParent>;
}
export interface QuizQuestionMemberToQuizMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionMemberToQuizMemberDescriptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionMemberToQuizMemberAnswersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionMemberToQuizQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionMemberToQuizMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionMemberToQuizQuestionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionMemberToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionMemberToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionMemberToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionMemberToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizMemberTypeResolver<TParent = any> {
    quiz?: QuizMemberToQuizResolver<TParent>;
    quizQuestionMembers?: QuizMemberToQuizQuestionMembersResolver<TParent>;
    quizId?: QuizMemberToQuizIdResolver<TParent>;
    email?: QuizMemberToEmailResolver<TParent>;
    projectId?: QuizMemberToProjectIdResolver<TParent>;
    memberId?: QuizMemberToMemberIdResolver<TParent>;
    quizStatus?: QuizMemberToQuizStatusResolver<TParent>;
    active?: QuizMemberToActiveResolver<TParent>;
    id?: QuizMemberToIdResolver<TParent>;
    createdAt?: QuizMemberToCreatedAtResolver<TParent>;
    updatedAt?: QuizMemberToUpdatedAtResolver<TParent>;
}
export interface QuizMemberToQuizResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberToQuizQuestionMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberToQuizIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberToQuizStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizMemberDescriptionTypeResolver<TParent = any> {
    quizQuestionMember?: QuizMemberDescriptionToQuizQuestionMemberResolver<TParent>;
    quizQuestionMemberId?: QuizMemberDescriptionToQuizQuestionMemberIdResolver<TParent>;
    description?: QuizMemberDescriptionToDescriptionResolver<TParent>;
    active?: QuizMemberDescriptionToActiveResolver<TParent>;
    id?: QuizMemberDescriptionToIdResolver<TParent>;
    createdAt?: QuizMemberDescriptionToCreatedAtResolver<TParent>;
    updatedAt?: QuizMemberDescriptionToUpdatedAtResolver<TParent>;
}
export interface QuizMemberDescriptionToQuizQuestionMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberDescriptionToQuizQuestionMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberDescriptionToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberDescriptionToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberDescriptionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberDescriptionToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberDescriptionToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizMemberAnswerTypeResolver<TParent = any> {
    quizQuestionMember?: QuizMemberAnswerToQuizQuestionMemberResolver<TParent>;
    quizAnswer?: QuizMemberAnswerToQuizAnswerResolver<TParent>;
    quizQuestionMemberId?: QuizMemberAnswerToQuizQuestionMemberIdResolver<TParent>;
    quizAnswerId?: QuizMemberAnswerToQuizAnswerIdResolver<TParent>;
    active?: QuizMemberAnswerToActiveResolver<TParent>;
    id?: QuizMemberAnswerToIdResolver<TParent>;
    createdAt?: QuizMemberAnswerToCreatedAtResolver<TParent>;
    updatedAt?: QuizMemberAnswerToUpdatedAtResolver<TParent>;
}
export interface QuizMemberAnswerToQuizQuestionMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberAnswerToQuizAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberAnswerToQuizQuestionMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberAnswerToQuizAnswerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberAnswerToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberAnswerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberAnswerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberAnswerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizQuestionNestedTypeResolver<TParent = any> {
    quizQuestion?: QuizQuestionNestedToQuizQuestionResolver<TParent>;
    name?: QuizQuestionNestedToNameResolver<TParent>;
    description?: QuizQuestionNestedToDescriptionResolver<TParent>;
    url?: QuizQuestionNestedToUrlResolver<TParent>;
    show?: QuizQuestionNestedToShowResolver<TParent>;
    order?: QuizQuestionNestedToOrderResolver<TParent>;
    quizQuestionId?: QuizQuestionNestedToQuizQuestionIdResolver<TParent>;
    id?: QuizQuestionNestedToIdResolver<TParent>;
    createdAt?: QuizQuestionNestedToCreatedAtResolver<TParent>;
    updatedAt?: QuizQuestionNestedToUpdatedAtResolver<TParent>;
}
export interface QuizQuestionNestedToQuizQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionNestedToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionNestedToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionNestedToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionNestedToShowResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionNestedToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionNestedToQuizQuestionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionNestedToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionNestedToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionNestedToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizQuestionPrefabTypeResolver<TParent = any> {
    name?: QuizQuestionPrefabToNameResolver<TParent>;
    icon?: QuizQuestionPrefabToIconResolver<TParent>;
    code?: QuizQuestionPrefabToCodeResolver<TParent>;
    quizQuestionPrefabGroupId?: QuizQuestionPrefabToQuizQuestionPrefabGroupIdResolver<TParent>;
    quizQuestionPrefabGroup?: QuizQuestionPrefabToQuizQuestionPrefabGroupResolver<TParent>;
    quizQuestions?: QuizQuestionPrefabToQuizQuestionsResolver<TParent>;
    quizQuestionPrefabFeatureds?: QuizQuestionPrefabToQuizQuestionPrefabFeaturedsResolver<TParent>;
    id?: QuizQuestionPrefabToIdResolver<TParent>;
    createdAt?: QuizQuestionPrefabToCreatedAtResolver<TParent>;
    updatedAt?: QuizQuestionPrefabToUpdatedAtResolver<TParent>;
}
export interface QuizQuestionPrefabToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionPrefabToIconResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionPrefabToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionPrefabToQuizQuestionPrefabGroupIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionPrefabToQuizQuestionPrefabGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionPrefabToQuizQuestionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionPrefabToQuizQuestionPrefabFeaturedsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionPrefabToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionPrefabToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionPrefabToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizQuestionPrefabGroupTypeResolver<TParent = any> {
    name?: QuizQuestionPrefabGroupToNameResolver<TParent>;
    quizQuestionPrefabs?: QuizQuestionPrefabGroupToQuizQuestionPrefabsResolver<TParent>;
    id?: QuizQuestionPrefabGroupToIdResolver<TParent>;
    createdAt?: QuizQuestionPrefabGroupToCreatedAtResolver<TParent>;
    updatedAt?: QuizQuestionPrefabGroupToUpdatedAtResolver<TParent>;
}
export interface QuizQuestionPrefabGroupToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionPrefabGroupToQuizQuestionPrefabsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionPrefabGroupToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionPrefabGroupToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionPrefabGroupToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizQuestionPrefabFeaturedTypeResolver<TParent = any> {
    outstand?: QuizQuestionPrefabFeaturedToOutstandResolver<TParent>;
    projectId?: QuizQuestionPrefabFeaturedToProjectIdResolver<TParent>;
    quizQuestionPrefabId?: QuizQuestionPrefabFeaturedToQuizQuestionPrefabIdResolver<TParent>;
    quizQuestionPrefab?: QuizQuestionPrefabFeaturedToQuizQuestionPrefabResolver<TParent>;
    id?: QuizQuestionPrefabFeaturedToIdResolver<TParent>;
    createdAt?: QuizQuestionPrefabFeaturedToCreatedAtResolver<TParent>;
    updatedAt?: QuizQuestionPrefabFeaturedToUpdatedAtResolver<TParent>;
}
export interface QuizQuestionPrefabFeaturedToOutstandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionPrefabFeaturedToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionPrefabFeaturedToQuizQuestionPrefabIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionPrefabFeaturedToQuizQuestionPrefabResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionPrefabFeaturedToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionPrefabFeaturedToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionPrefabFeaturedToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IServiceMemberTypeResolver<TParent = any> {
    service?: ServiceMemberToServiceResolver<TParent>;
    memberId?: ServiceMemberToMemberIdResolver<TParent>;
    serviceId?: ServiceMemberToServiceIdResolver<TParent>;
    id?: ServiceMemberToIdResolver<TParent>;
    createdAt?: ServiceMemberToCreatedAtResolver<TParent>;
    updatedAt?: ServiceMemberToUpdatedAtResolver<TParent>;
    member?: ServiceMemberToMemberResolver<TParent>;
}
export interface ServiceMemberToServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceMemberToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceMemberToServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceMemberToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceMemberToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceMemberToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceMemberToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IHiringServiceTypeResolver<TParent = any> {
    hiring?: HiringServiceToHiringResolver<TParent>;
    serviceId?: HiringServiceToServiceIdResolver<TParent>;
    hiringId?: HiringServiceToHiringIdResolver<TParent>;
    id?: HiringServiceToIdResolver<TParent>;
    createdAt?: HiringServiceToCreatedAtResolver<TParent>;
    updatedAt?: HiringServiceToUpdatedAtResolver<TParent>;
    service?: HiringServiceToServiceResolver<TParent>;
}
export interface HiringServiceToHiringResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringServiceToServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringServiceToHiringIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringServiceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringServiceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringServiceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HiringServiceToServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IResourceQuoteDetailBoardRowTypeResolver<TParent = any> {
    resourceQuoteDetail?: ResourceQuoteDetailBoardRowToResourceQuoteDetailResolver<TParent>;
    boardRowId?: ResourceQuoteDetailBoardRowToBoardRowIdResolver<TParent>;
    resourceQuoteDetailId?: ResourceQuoteDetailBoardRowToResourceQuoteDetailIdResolver<TParent>;
    id?: ResourceQuoteDetailBoardRowToIdResolver<TParent>;
    createdAt?: ResourceQuoteDetailBoardRowToCreatedAtResolver<TParent>;
    updatedAt?: ResourceQuoteDetailBoardRowToUpdatedAtResolver<TParent>;
}
export interface ResourceQuoteDetailBoardRowToResourceQuoteDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailBoardRowToBoardRowIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailBoardRowToResourceQuoteDetailIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailBoardRowToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailBoardRowToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailBoardRowToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICollaboratorHoursTypeResolver<TParent = any> {
    collaborator?: CollaboratorHoursToCollaboratorResolver<TParent>;
    totalHours?: CollaboratorHoursToTotalHoursResolver<TParent>;
    date?: CollaboratorHoursToDateResolver<TParent>;
    initialHour?: CollaboratorHoursToInitialHourResolver<TParent>;
    finalHour?: CollaboratorHoursToFinalHourResolver<TParent>;
    collaboratorId?: CollaboratorHoursToCollaboratorIdResolver<TParent>;
    id?: CollaboratorHoursToIdResolver<TParent>;
    createdAt?: CollaboratorHoursToCreatedAtResolver<TParent>;
    updatedAt?: CollaboratorHoursToUpdatedAtResolver<TParent>;
}
export interface CollaboratorHoursToCollaboratorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorHoursToTotalHoursResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorHoursToDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorHoursToInitialHourResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorHoursToFinalHourResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorHoursToCollaboratorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorHoursToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorHoursToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorHoursToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IShiftTypeResolver<TParent = any> {
    day?: ShiftToDayResolver<TParent>;
    projectId?: ShiftToProjectIdResolver<TParent>;
    memberId?: ShiftToMemberIdResolver<TParent>;
    timeStart?: ShiftToTimeStartResolver<TParent>;
    timeEnd?: ShiftToTimeEndResolver<TParent>;
    dayId?: ShiftToDayIdResolver<TParent>;
    id?: ShiftToIdResolver<TParent>;
    createdAt?: ShiftToCreatedAtResolver<TParent>;
    updatedAt?: ShiftToUpdatedAtResolver<TParent>;
}
export interface ShiftToDayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ShiftToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ShiftToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ShiftToTimeStartResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ShiftToTimeEndResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ShiftToDayIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ShiftToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ShiftToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ShiftToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDayTypeResolver<TParent = any> {
    shifts?: DayToShiftsResolver<TParent>;
    name?: DayToNameResolver<TParent>;
    codeDay?: DayToCodeDayResolver<TParent>;
    id?: DayToIdResolver<TParent>;
    createdAt?: DayToCreatedAtResolver<TParent>;
    updatedAt?: DayToUpdatedAtResolver<TParent>;
}
export interface DayToShiftsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DayToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DayToCodeDayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DayToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DayToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DayToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBusinessTypeResolver<TParent = any> {
    projectId?: BusinessToProjectIdResolver<TParent>;
    name?: BusinessToNameResolver<TParent>;
    description?: BusinessToDescriptionResolver<TParent>;
    slogan?: BusinessToSloganResolver<TParent>;
    image?: BusinessToImageResolver<TParent>;
    businessTypeId?: BusinessToBusinessTypeIdResolver<TParent>;
    businessType?: BusinessToBusinessTypeResolver<TParent>;
    businessRuleProjectPlans?: BusinessToBusinessRuleProjectPlansResolver<TParent>;
    id?: BusinessToIdResolver<TParent>;
    createdAt?: BusinessToCreatedAtResolver<TParent>;
    updatedAt?: BusinessToUpdatedAtResolver<TParent>;
}
export interface BusinessToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessToSloganResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessToBusinessTypeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessToBusinessTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessToBusinessRuleProjectPlansResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBusinessTypeTypeResolver<TParent = any> {
    projectId?: BusinessTypeToProjectIdResolver<TParent>;
    image?: BusinessTypeToImageResolver<TParent>;
    name?: BusinessTypeToNameResolver<TParent>;
    description?: BusinessTypeToDescriptionResolver<TParent>;
    id?: BusinessTypeToIdResolver<TParent>;
    createdAt?: BusinessTypeToCreatedAtResolver<TParent>;
    updatedAt?: BusinessTypeToUpdatedAtResolver<TParent>;
    members?: BusinessTypeToMembersResolver<TParent>;
}
export interface BusinessTypeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessTypeToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessTypeToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessTypeToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessTypeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessTypeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessTypeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessTypeToMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBusinessRuleProjectPlanTypeResolver<TParent = any> {
    businessRuleId?: BusinessRuleProjectPlanToBusinessRuleIdResolver<TParent>;
    businessId?: BusinessRuleProjectPlanToBusinessIdResolver<TParent>;
    bussines?: BusinessRuleProjectPlanToBussinesResolver<TParent>;
    businessRule?: BusinessRuleProjectPlanToBusinessRuleResolver<TParent>;
    projectPlanId?: BusinessRuleProjectPlanToProjectPlanIdResolver<TParent>;
    projectPlan?: BusinessRuleProjectPlanToProjectPlanResolver<TParent>;
    commission?: BusinessRuleProjectPlanToCommissionResolver<TParent>;
    commissionSell?: BusinessRuleProjectPlanToCommissionSellResolver<TParent>;
    commissionProspect?: BusinessRuleProjectPlanToCommissionProspectResolver<TParent>;
    commissionInterested?: BusinessRuleProjectPlanToCommissionInterestedResolver<TParent>;
    id?: BusinessRuleProjectPlanToIdResolver<TParent>;
    createdAt?: BusinessRuleProjectPlanToCreatedAtResolver<TParent>;
    updatedAt?: BusinessRuleProjectPlanToUpdatedAtResolver<TParent>;
}
export interface BusinessRuleProjectPlanToBusinessRuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleProjectPlanToBusinessIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleProjectPlanToBussinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleProjectPlanToBusinessRuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleProjectPlanToProjectPlanIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleProjectPlanToProjectPlanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleProjectPlanToCommissionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleProjectPlanToCommissionSellResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleProjectPlanToCommissionProspectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleProjectPlanToCommissionInterestedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleProjectPlanToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleProjectPlanToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleProjectPlanToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBusinessRuleTypeResolver<TParent = any> {
    projectId?: BusinessRuleToProjectIdResolver<TParent>;
    businessId?: BusinessRuleToBusinessIdResolver<TParent>;
    business?: BusinessRuleToBusinessResolver<TParent>;
    title?: BusinessRuleToTitleResolver<TParent>;
    commissionNominator?: BusinessRuleToCommissionNominatorResolver<TParent>;
    potentialProspectLimit?: BusinessRuleToPotentialProspectLimitResolver<TParent>;
    allowExtraBonus?: BusinessRuleToAllowExtraBonusResolver<TParent>;
    minimumBalance?: BusinessRuleToMinimumBalanceResolver<TParent>;
    idealBalance?: BusinessRuleToIdealBalanceResolver<TParent>;
    id?: BusinessRuleToIdResolver<TParent>;
    createdAt?: BusinessRuleToCreatedAtResolver<TParent>;
    updatedAt?: BusinessRuleToUpdatedAtResolver<TParent>;
}
export interface BusinessRuleToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleToBusinessIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleToBusinessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleToCommissionNominatorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleToPotentialProspectLimitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleToAllowExtraBonusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleToMinimumBalanceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleToIdealBalanceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectPlanTypeResolver<TParent = any> {
    projectId?: ProjectPlanToProjectIdResolver<TParent>;
    title?: ProjectPlanToTitleResolver<TParent>;
    description?: ProjectPlanToDescriptionResolver<TParent>;
    cost?: ProjectPlanToCostResolver<TParent>;
    serviceProductId?: ProjectPlanToServiceProductIdResolver<TParent>;
    currency?: ProjectPlanToCurrencyResolver<TParent>;
    changeNominators?: ProjectPlanToChangeNominatorsResolver<TParent>;
    default?: ProjectPlanToDefaultResolver<TParent>;
    rateBase?: ProjectPlanToRateBaseResolver<TParent>;
    frequencyPayment?: ProjectPlanToFrequencyPaymentResolver<TParent>;
    availableNominators?: ProjectPlanToAvailableNominatorsResolver<TParent>;
    accessExternalNominators?: ProjectPlanToAccessExternalNominatorsResolver<TParent>;
    accessExternalProspects?: ProjectPlanToAccessExternalProspectsResolver<TParent>;
    vendorRakingDisplay?: ProjectPlanToVendorRakingDisplayResolver<TParent>;
    accessConnectionProspectsWhatsapp?: ProjectPlanToAccessConnectionProspectsWhatsappResolver<TParent>;
    serviceSupport?: ProjectPlanToServiceSupportResolver<TParent>;
    fee?: ProjectPlanToFeeResolver<TParent>;
    projectPlanSubscriptions?: ProjectPlanToProjectPlanSubscriptionsResolver<TParent>;
    businessRuleProjectPlans?: ProjectPlanToBusinessRuleProjectPlansResolver<TParent>;
    id?: ProjectPlanToIdResolver<TParent>;
    createdAt?: ProjectPlanToCreatedAtResolver<TParent>;
    updatedAt?: ProjectPlanToUpdatedAtResolver<TParent>;
}
export interface ProjectPlanToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToCostResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToServiceProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToChangeNominatorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToDefaultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToRateBaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToFrequencyPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToAvailableNominatorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToAccessExternalNominatorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToAccessExternalProspectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToVendorRakingDisplayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToAccessConnectionProspectsWhatsappResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToServiceSupportResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToProjectPlanSubscriptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToBusinessRuleProjectPlansResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectPlanSubscriptionTypeResolver<TParent = any> {
    projectPlanId?: ProjectPlanSubscriptionToProjectPlanIdResolver<TParent>;
    projectPlan?: ProjectPlanSubscriptionToProjectPlanResolver<TParent>;
    projectId?: ProjectPlanSubscriptionToProjectIdResolver<TParent>;
    memberId?: ProjectPlanSubscriptionToMemberIdResolver<TParent>;
    active?: ProjectPlanSubscriptionToActiveResolver<TParent>;
    id?: ProjectPlanSubscriptionToIdResolver<TParent>;
    createdAt?: ProjectPlanSubscriptionToCreatedAtResolver<TParent>;
    updatedAt?: ProjectPlanSubscriptionToUpdatedAtResolver<TParent>;
    member?: ProjectPlanSubscriptionToMemberResolver<TParent>;
}
export interface ProjectPlanSubscriptionToProjectPlanIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanSubscriptionToProjectPlanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanSubscriptionToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanSubscriptionToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanSubscriptionToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanSubscriptionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanSubscriptionToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanSubscriptionToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanSubscriptionToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAccountKeyTypeResolver<TParent = any> {
    detailsSubmitted?: AccountKeyToDetailsSubmittedResolver<TParent>;
    paymentMethods?: AccountKeyToPaymentMethodsResolver<TParent>;
    projectId?: AccountKeyToProjectIdResolver<TParent>;
    memberId?: AccountKeyToMemberIdResolver<TParent>;
    accountServiceId?: AccountKeyToAccountServiceIdResolver<TParent>;
    customerServiceId?: AccountKeyToCustomerServiceIdResolver<TParent>;
    servicePayment?: AccountKeyToServicePaymentResolver<TParent>;
    id?: AccountKeyToIdResolver<TParent>;
    createdAt?: AccountKeyToCreatedAtResolver<TParent>;
    updatedAt?: AccountKeyToUpdatedAtResolver<TParent>;
}
export interface AccountKeyToDetailsSubmittedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AccountKeyToPaymentMethodsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AccountKeyToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AccountKeyToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AccountKeyToAccountServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AccountKeyToCustomerServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AccountKeyToServicePaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AccountKeyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AccountKeyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AccountKeyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPaymentMethodTypeResolver<TParent = any> {
    memberId?: PaymentMethodToMemberIdResolver<TParent>;
    projectId?: PaymentMethodToProjectIdResolver<TParent>;
    paymentToken?: PaymentMethodToPaymentTokenResolver<TParent>;
    default?: PaymentMethodToDefaultResolver<TParent>;
    lastNumbers?: PaymentMethodToLastNumbersResolver<TParent>;
    accountKeyId?: PaymentMethodToAccountKeyIdResolver<TParent>;
    accountKey?: PaymentMethodToAccountKeyResolver<TParent>;
    id?: PaymentMethodToIdResolver<TParent>;
    createdAt?: PaymentMethodToCreatedAtResolver<TParent>;
    updatedAt?: PaymentMethodToUpdatedAtResolver<TParent>;
}
export interface PaymentMethodToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PaymentMethodToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PaymentMethodToPaymentTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PaymentMethodToDefaultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PaymentMethodToLastNumbersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PaymentMethodToAccountKeyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PaymentMethodToAccountKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PaymentMethodToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PaymentMethodToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PaymentMethodToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEventDetailTypeResolver<TParent = any> {
    projectId?: EventDetailToProjectIdResolver<TParent>;
    memberId?: EventDetailToMemberIdResolver<TParent>;
    eventId?: EventDetailToEventIdResolver<TParent>;
    subTotal?: EventDetailToSubTotalResolver<TParent>;
    descuento?: EventDetailToDescuentoResolver<TParent>;
    tax?: EventDetailToTaxResolver<TParent>;
    total?: EventDetailToTotalResolver<TParent>;
    id?: EventDetailToIdResolver<TParent>;
    createdAt?: EventDetailToCreatedAtResolver<TParent>;
    updatedAt?: EventDetailToUpdatedAtResolver<TParent>;
}
export interface EventDetailToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventDetailToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventDetailToEventIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventDetailToSubTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventDetailToDescuentoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventDetailToTaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventDetailToTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventDetailToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventDetailToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventDetailToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFisicExamTypeResolver<TParent = any> {
    projectId?: FisicExamToProjectIdResolver<TParent>;
    memberId?: FisicExamToMemberIdResolver<TParent>;
    eventId?: FisicExamToEventIdResolver<TParent>;
    title?: FisicExamToTitleResolver<TParent>;
    content?: FisicExamToContentResolver<TParent>;
    isVisible?: FisicExamToIsVisibleResolver<TParent>;
    position?: FisicExamToPositionResolver<TParent>;
    id?: FisicExamToIdResolver<TParent>;
    createdAt?: FisicExamToCreatedAtResolver<TParent>;
    updatedAt?: FisicExamToUpdatedAtResolver<TParent>;
    member?: FisicExamToMemberResolver<TParent>;
}
export interface FisicExamToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FisicExamToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FisicExamToEventIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FisicExamToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FisicExamToContentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FisicExamToIsVisibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FisicExamToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FisicExamToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FisicExamToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FisicExamToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FisicExamToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMedicalBackgroundTypeResolver<TParent = any> {
    format?: MedicalBackgroundToFormatResolver<TParent>;
    projectId?: MedicalBackgroundToProjectIdResolver<TParent>;
    formatId?: MedicalBackgroundToFormatIdResolver<TParent>;
    label?: MedicalBackgroundToLabelResolver<TParent>;
    isVisible?: MedicalBackgroundToIsVisibleResolver<TParent>;
    position?: MedicalBackgroundToPositionResolver<TParent>;
    pacientMedicalBackground?: MedicalBackgroundToPacientMedicalBackgroundResolver<TParent>;
    medicalBackgroundDetails?: MedicalBackgroundToMedicalBackgroundDetailsResolver<TParent>;
    id?: MedicalBackgroundToIdResolver<TParent>;
    createdAt?: MedicalBackgroundToCreatedAtResolver<TParent>;
    updatedAt?: MedicalBackgroundToUpdatedAtResolver<TParent>;
    member?: MedicalBackgroundToMemberResolver<TParent>;
}
export interface MedicalBackgroundToFormatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundToFormatIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundToIsVisibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundToPacientMedicalBackgroundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundToMedicalBackgroundDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFormatTypeResolver<TParent = any> {
    projectId?: FormatToProjectIdResolver<TParent>;
    memberId?: FormatToMemberIdResolver<TParent>;
    eventTypeId?: FormatToEventTypeIdResolver<TParent>;
    nameFormat?: FormatToNameFormatResolver<TParent>;
    id?: FormatToIdResolver<TParent>;
    createdAt?: FormatToCreatedAtResolver<TParent>;
    updatedAt?: FormatToUpdatedAtResolver<TParent>;
}
export interface FormatToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormatToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormatToEventTypeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormatToNameFormatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormatToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormatToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormatToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPacientMedicalBackgroundTypeResolver<TParent = any> {
    medicalBackgroundDetail?: PacientMedicalBackgroundToMedicalBackgroundDetailResolver<TParent>;
    medicalBackgroundDetailId?: PacientMedicalBackgroundToMedicalBackgroundDetailIdResolver<TParent>;
    projectId?: PacientMedicalBackgroundToProjectIdResolver<TParent>;
    memberId?: PacientMedicalBackgroundToMemberIdResolver<TParent>;
    eventId?: PacientMedicalBackgroundToEventIdResolver<TParent>;
    text?: PacientMedicalBackgroundToTextResolver<TParent>;
    isResponse?: PacientMedicalBackgroundToIsResponseResolver<TParent>;
    id?: PacientMedicalBackgroundToIdResolver<TParent>;
    createdAt?: PacientMedicalBackgroundToCreatedAtResolver<TParent>;
    updatedAt?: PacientMedicalBackgroundToUpdatedAtResolver<TParent>;
}
export interface PacientMedicalBackgroundToMedicalBackgroundDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PacientMedicalBackgroundToMedicalBackgroundDetailIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PacientMedicalBackgroundToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PacientMedicalBackgroundToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PacientMedicalBackgroundToEventIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PacientMedicalBackgroundToTextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PacientMedicalBackgroundToIsResponseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PacientMedicalBackgroundToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PacientMedicalBackgroundToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PacientMedicalBackgroundToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMedicalBackgroundDetailTypeResolver<TParent = any> {
    medicalBackground?: MedicalBackgroundDetailToMedicalBackgroundResolver<TParent>;
    clinicHistoryMedicalBackgroundDetails?: MedicalBackgroundDetailToClinicHistoryMedicalBackgroundDetailsResolver<TParent>;
    projectId?: MedicalBackgroundDetailToProjectIdResolver<TParent>;
    medicalBackgroundId?: MedicalBackgroundDetailToMedicalBackgroundIdResolver<TParent>;
    label?: MedicalBackgroundDetailToLabelResolver<TParent>;
    backgroundTypeOption?: MedicalBackgroundDetailToBackgroundTypeOptionResolver<TParent>;
    isOption?: MedicalBackgroundDetailToIsOptionResolver<TParent>;
    isVisible?: MedicalBackgroundDetailToIsVisibleResolver<TParent>;
    position?: MedicalBackgroundDetailToPositionResolver<TParent>;
    pacientMedicalBackgrounds?: MedicalBackgroundDetailToPacientMedicalBackgroundsResolver<TParent>;
    id?: MedicalBackgroundDetailToIdResolver<TParent>;
    createdAt?: MedicalBackgroundDetailToCreatedAtResolver<TParent>;
    updatedAt?: MedicalBackgroundDetailToUpdatedAtResolver<TParent>;
}
export interface MedicalBackgroundDetailToMedicalBackgroundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundDetailToClinicHistoryMedicalBackgroundDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundDetailToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundDetailToMedicalBackgroundIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundDetailToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundDetailToBackgroundTypeOptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundDetailToIsOptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundDetailToIsVisibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundDetailToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundDetailToPacientMedicalBackgroundsArgs {
    filter?: IPacientMedicalBackgroundFilterInput;
}
export interface MedicalBackgroundDetailToPacientMedicalBackgroundsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MedicalBackgroundDetailToPacientMedicalBackgroundsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundDetailToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundDetailToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalBackgroundDetailToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IClinicHistoryMedicalBackgroundDetailTypeResolver<TParent = any> {
    medicalBackgroundDetail?: ClinicHistoryMedicalBackgroundDetailToMedicalBackgroundDetailResolver<TParent>;
    medicalBackgroundDetailId?: ClinicHistoryMedicalBackgroundDetailToMedicalBackgroundDetailIdResolver<TParent>;
    backgroundType?: ClinicHistoryMedicalBackgroundDetailToBackgroundTypeResolver<TParent>;
    id?: ClinicHistoryMedicalBackgroundDetailToIdResolver<TParent>;
    createdAt?: ClinicHistoryMedicalBackgroundDetailToCreatedAtResolver<TParent>;
    updatedAt?: ClinicHistoryMedicalBackgroundDetailToUpdatedAtResolver<TParent>;
}
export interface ClinicHistoryMedicalBackgroundDetailToMedicalBackgroundDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClinicHistoryMedicalBackgroundDetailToMedicalBackgroundDetailIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClinicHistoryMedicalBackgroundDetailToBackgroundTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClinicHistoryMedicalBackgroundDetailToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClinicHistoryMedicalBackgroundDetailToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClinicHistoryMedicalBackgroundDetailToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMedicRecipeTypeResolver<TParent = any> {
    projectId?: MedicRecipeToProjectIdResolver<TParent>;
    memberId?: MedicRecipeToMemberIdResolver<TParent>;
    profesionalCell?: MedicRecipeToProfesionalCellResolver<TParent>;
    speciality?: MedicRecipeToSpecialityResolver<TParent>;
    institute?: MedicRecipeToInstituteResolver<TParent>;
    electronicSing?: MedicRecipeToElectronicSingResolver<TParent>;
    isCorrect?: MedicRecipeToIsCorrectResolver<TParent>;
    id?: MedicRecipeToIdResolver<TParent>;
    createdAt?: MedicRecipeToCreatedAtResolver<TParent>;
    updatedAt?: MedicRecipeToUpdatedAtResolver<TParent>;
    member?: MedicRecipeToMemberResolver<TParent>;
}
export interface MedicRecipeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicRecipeToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicRecipeToProfesionalCellResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicRecipeToSpecialityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicRecipeToInstituteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicRecipeToElectronicSingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicRecipeToIsCorrectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicRecipeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicRecipeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicRecipeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicRecipeToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPacientNoteTypeResolver<TParent = any> {
    memberId?: PacientNoteToMemberIdResolver<TParent>;
    projectId?: PacientNoteToProjectIdResolver<TParent>;
    eventId?: PacientNoteToEventIdResolver<TParent>;
    note?: PacientNoteToNoteResolver<TParent>;
    id?: PacientNoteToIdResolver<TParent>;
    createdAt?: PacientNoteToCreatedAtResolver<TParent>;
    updatedAt?: PacientNoteToUpdatedAtResolver<TParent>;
    member?: PacientNoteToMemberResolver<TParent>;
}
export interface PacientNoteToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PacientNoteToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PacientNoteToEventIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PacientNoteToNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PacientNoteToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PacientNoteToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PacientNoteToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PacientNoteToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVitalSignTypeResolver<TParent = any> {
    projectId?: VitalSignToProjectIdResolver<TParent>;
    labelNameVt?: VitalSignToLabelNameVtResolver<TParent>;
    isVisible?: VitalSignToIsVisibleResolver<TParent>;
    position?: VitalSignToPositionResolver<TParent>;
    patientVitalSignsResponse?: VitalSignToPatientVitalSignsResponseResolver<TParent>;
    id?: VitalSignToIdResolver<TParent>;
    createdAt?: VitalSignToCreatedAtResolver<TParent>;
    updatedAt?: VitalSignToUpdatedAtResolver<TParent>;
    member?: VitalSignToMemberResolver<TParent>;
}
export interface VitalSignToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VitalSignToLabelNameVtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VitalSignToIsVisibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VitalSignToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VitalSignToPatientVitalSignsResponseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VitalSignToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VitalSignToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VitalSignToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VitalSignToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPatientVitalSignsResponseTypeResolver<TParent = any> {
    vitalSignId?: PatientVitalSignsResponseToVitalSignIdResolver<TParent>;
    vitalSign?: PatientVitalSignsResponseToVitalSignResolver<TParent>;
    eventId?: PatientVitalSignsResponseToEventIdResolver<TParent>;
    memberId?: PatientVitalSignsResponseToMemberIdResolver<TParent>;
    value?: PatientVitalSignsResponseToValueResolver<TParent>;
    id?: PatientVitalSignsResponseToIdResolver<TParent>;
    createdAt?: PatientVitalSignsResponseToCreatedAtResolver<TParent>;
    updatedAt?: PatientVitalSignsResponseToUpdatedAtResolver<TParent>;
}
export interface PatientVitalSignsResponseToVitalSignIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PatientVitalSignsResponseToVitalSignResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PatientVitalSignsResponseToEventIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PatientVitalSignsResponseToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PatientVitalSignsResponseToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PatientVitalSignsResponseToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PatientVitalSignsResponseToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PatientVitalSignsResponseToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVaccineTypeResolver<TParent = any> {
    projectId?: VaccineToProjectIdResolver<TParent>;
    memberId?: VaccineToMemberIdResolver<TParent>;
    nameVac?: VaccineToNameVacResolver<TParent>;
    dateAplicationVac?: VaccineToDateAplicationVacResolver<TParent>;
    nextVac?: VaccineToNextVacResolver<TParent>;
    notesVac?: VaccineToNotesVacResolver<TParent>;
    position?: VaccineToPositionResolver<TParent>;
    id?: VaccineToIdResolver<TParent>;
    createdAt?: VaccineToCreatedAtResolver<TParent>;
    updatedAt?: VaccineToUpdatedAtResolver<TParent>;
    member?: VaccineToMemberResolver<TParent>;
}
export interface VaccineToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VaccineToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VaccineToNameVacResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VaccineToDateAplicationVacResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VaccineToNextVacResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VaccineToNotesVacResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VaccineToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VaccineToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VaccineToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VaccineToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VaccineToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberBoardTypeResolver<TParent = any> {
    board?: MemberBoardToBoardResolver<TParent>;
    memberId?: MemberBoardToMemberIdResolver<TParent>;
    boardId?: MemberBoardToBoardIdResolver<TParent>;
    outstading?: MemberBoardToOutstadingResolver<TParent>;
    order?: MemberBoardToOrderResolver<TParent>;
    active?: MemberBoardToActiveResolver<TParent>;
    id?: MemberBoardToIdResolver<TParent>;
    createdAt?: MemberBoardToCreatedAtResolver<TParent>;
    updatedAt?: MemberBoardToUpdatedAtResolver<TParent>;
    member?: MemberBoardToMemberResolver<TParent>;
}
export interface MemberBoardToBoardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberBoardToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberBoardToBoardIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberBoardToOutstadingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberBoardToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberBoardToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberBoardToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberBoardToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberBoardToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberBoardToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardTypeResolver<TParent = any> {
    boardLists?: BoardToBoardListsResolver<TParent>;
    space?: BoardToSpaceResolver<TParent>;
    memberBoards?: BoardToMemberBoardsResolver<TParent>;
    boardStatus?: BoardToBoardStatusResolver<TParent>;
    name?: BoardToNameResolver<TParent>;
    description?: BoardToDescriptionResolver<TParent>;
    memberId?: BoardToMemberIdResolver<TParent>;
    order?: BoardToOrderResolver<TParent>;
    color?: BoardToColorResolver<TParent>;
    active?: BoardToActiveResolver<TParent>;
    serviceId?: BoardToServiceIdResolver<TParent>;
    spaceId?: BoardToSpaceIdResolver<TParent>;
    id?: BoardToIdResolver<TParent>;
    createdAt?: BoardToCreatedAtResolver<TParent>;
    updatedAt?: BoardToUpdatedAtResolver<TParent>;
    service?: BoardToServiceResolver<TParent>;
}
export interface BoardToBoardListsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardToSpaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardToMemberBoardsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardToBoardStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardToColorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardToServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardToSpaceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardToServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardListTypeResolver<TParent = any> {
    boards?: BoardListToBoardsResolver<TParent>;
    cards?: BoardListToCardsResolver<TParent>;
    boardGroupColumn?: BoardListToBoardGroupColumnResolver<TParent>;
    boardRows?: BoardListToBoardRowsResolver<TParent>;
    name?: BoardListToNameResolver<TParent>;
    description?: BoardListToDescriptionResolver<TParent>;
    order?: BoardListToOrderResolver<TParent>;
    color?: BoardListToColorResolver<TParent>;
    active?: BoardListToActiveResolver<TParent>;
    boardId?: BoardListToBoardIdResolver<TParent>;
    id?: BoardListToIdResolver<TParent>;
    createdAt?: BoardListToCreatedAtResolver<TParent>;
    updatedAt?: BoardListToUpdatedAtResolver<TParent>;
}
export interface BoardListToBoardsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardListToCardsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardListToBoardGroupColumnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardListToBoardRowsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardListToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardListToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardListToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardListToColorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardListToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardListToBoardIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardListToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardListToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardListToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICardTypeResolver<TParent = any> {
    boardList?: CardToBoardListResolver<TParent>;
    cardReplies?: CardToCardRepliesResolver<TParent>;
    nestedFiles?: CardToNestedFilesResolver<TParent>;
    memberCards?: CardToMemberCardsResolver<TParent>;
    cardColumnValues?: CardToCardColumnValuesResolver<TParent>;
    cardChecklists?: CardToCardChecklistsResolver<TParent>;
    boardStatus?: CardToBoardStatusResolver<TParent>;
    name?: CardToNameResolver<TParent>;
    description?: CardToDescriptionResolver<TParent>;
    active?: CardToActiveResolver<TParent>;
    progress?: CardToProgressResolver<TParent>;
    priority?: CardToPriorityResolver<TParent>;
    startDate?: CardToStartDateResolver<TParent>;
    endDate?: CardToEndDateResolver<TParent>;
    projectId?: CardToProjectIdResolver<TParent>;
    boardStatusId?: CardToBoardStatusIdResolver<TParent>;
    boardListId?: CardToBoardListIdResolver<TParent>;
    id?: CardToIdResolver<TParent>;
    createdAt?: CardToCreatedAtResolver<TParent>;
    updatedAt?: CardToUpdatedAtResolver<TParent>;
}
export interface CardToBoardListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardToCardRepliesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardToNestedFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardToMemberCardsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardToCardColumnValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardToCardChecklistsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardToBoardStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardToProgressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardToPriorityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardToStartDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardToEndDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardToBoardStatusIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardToBoardListIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICardReplyTypeResolver<TParent = any> {
    card?: CardReplyToCardResolver<TParent>;
    cardId?: CardReplyToCardIdResolver<TParent>;
    memberId?: CardReplyToMemberIdResolver<TParent>;
    description?: CardReplyToDescriptionResolver<TParent>;
    active?: CardReplyToActiveResolver<TParent>;
    id?: CardReplyToIdResolver<TParent>;
    createdAt?: CardReplyToCreatedAtResolver<TParent>;
    updatedAt?: CardReplyToUpdatedAtResolver<TParent>;
    member?: CardReplyToMemberResolver<TParent>;
}
export interface CardReplyToCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardReplyToCardIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardReplyToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardReplyToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardReplyToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardReplyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardReplyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardReplyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardReplyToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface INestedFileTypeResolver<TParent = any> {
    card?: NestedFileToCardResolver<TParent>;
    name?: NestedFileToNameResolver<TParent>;
    show?: NestedFileToShowResolver<TParent>;
    url?: NestedFileToUrlResolver<TParent>;
    cardId?: NestedFileToCardIdResolver<TParent>;
    id?: NestedFileToIdResolver<TParent>;
    createdAt?: NestedFileToCreatedAtResolver<TParent>;
    updatedAt?: NestedFileToUpdatedAtResolver<TParent>;
}
export interface NestedFileToCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NestedFileToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NestedFileToShowResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NestedFileToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NestedFileToCardIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NestedFileToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NestedFileToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NestedFileToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberCardTypeResolver<TParent = any> {
    card?: MemberCardToCardResolver<TParent>;
    cardId?: MemberCardToCardIdResolver<TParent>;
    memberId?: MemberCardToMemberIdResolver<TParent>;
    active?: MemberCardToActiveResolver<TParent>;
    id?: MemberCardToIdResolver<TParent>;
    createdAt?: MemberCardToCreatedAtResolver<TParent>;
    updatedAt?: MemberCardToUpdatedAtResolver<TParent>;
    member?: MemberCardToMemberResolver<TParent>;
}
export interface MemberCardToCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCardToCardIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCardToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCardToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCardToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCardToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCardToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCardToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICardColumnValueTypeResolver<TParent = any> {
    card?: CardColumnValueToCardResolver<TParent>;
    boardColumnValue?: CardColumnValueToBoardColumnValueResolver<TParent>;
    cardId?: CardColumnValueToCardIdResolver<TParent>;
    boardColumnValueId?: CardColumnValueToBoardColumnValueIdResolver<TParent>;
    id?: CardColumnValueToIdResolver<TParent>;
    createdAt?: CardColumnValueToCreatedAtResolver<TParent>;
    updatedAt?: CardColumnValueToUpdatedAtResolver<TParent>;
}
export interface CardColumnValueToCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardColumnValueToBoardColumnValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardColumnValueToCardIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardColumnValueToBoardColumnValueIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardColumnValueToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardColumnValueToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardColumnValueToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardColumnValueTypeResolver<TParent = any> {
    boardGroupColumn?: BoardColumnValueToBoardGroupColumnResolver<TParent>;
    boardRow?: BoardColumnValueToBoardRowResolver<TParent>;
    boardMemberReferece?: BoardColumnValueToBoardMemberRefereceResolver<TParent>;
    cardColumnValues?: BoardColumnValueToCardColumnValuesResolver<TParent>;
    value?: BoardColumnValueToValueResolver<TParent>;
    boardGroupColumnId?: BoardColumnValueToBoardGroupColumnIdResolver<TParent>;
    boardRowId?: BoardColumnValueToBoardRowIdResolver<TParent>;
    id?: BoardColumnValueToIdResolver<TParent>;
    createdAt?: BoardColumnValueToCreatedAtResolver<TParent>;
    updatedAt?: BoardColumnValueToUpdatedAtResolver<TParent>;
}
export interface BoardColumnValueToBoardGroupColumnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnValueToBoardRowResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnValueToBoardMemberRefereceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnValueToCardColumnValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnValueToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnValueToBoardGroupColumnIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnValueToBoardRowIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnValueToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnValueToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnValueToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardGroupColumnTypeResolver<TParent = any> {
    boardList?: BoardGroupColumnToBoardListResolver<TParent>;
    boardColumnValues?: BoardGroupColumnToBoardColumnValuesResolver<TParent>;
    boardColumnType?: BoardGroupColumnToBoardColumnTypeResolver<TParent>;
    name?: BoardGroupColumnToNameResolver<TParent>;
    order?: BoardGroupColumnToOrderResolver<TParent>;
    boardListId?: BoardGroupColumnToBoardListIdResolver<TParent>;
    boardColumnTypeId?: BoardGroupColumnToBoardColumnTypeIdResolver<TParent>;
    id?: BoardGroupColumnToIdResolver<TParent>;
    createdAt?: BoardGroupColumnToCreatedAtResolver<TParent>;
    updatedAt?: BoardGroupColumnToUpdatedAtResolver<TParent>;
}
export interface BoardGroupColumnToBoardListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardGroupColumnToBoardColumnValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardGroupColumnToBoardColumnTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardGroupColumnToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardGroupColumnToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardGroupColumnToBoardListIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardGroupColumnToBoardColumnTypeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardGroupColumnToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardGroupColumnToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardGroupColumnToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardColumnTypeTypeResolver<TParent = any> {
    boardGroupColumns?: BoardColumnTypeToBoardGroupColumnsResolver<TParent>;
    name?: BoardColumnTypeToNameResolver<TParent>;
    description?: BoardColumnTypeToDescriptionResolver<TParent>;
    dataType?: BoardColumnTypeToDataTypeResolver<TParent>;
    insideType?: BoardColumnTypeToInsideTypeResolver<TParent>;
    active?: BoardColumnTypeToActiveResolver<TParent>;
    projectId?: BoardColumnTypeToProjectIdResolver<TParent>;
    id?: BoardColumnTypeToIdResolver<TParent>;
    createdAt?: BoardColumnTypeToCreatedAtResolver<TParent>;
    updatedAt?: BoardColumnTypeToUpdatedAtResolver<TParent>;
}
export interface BoardColumnTypeToBoardGroupColumnsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnTypeToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnTypeToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnTypeToDataTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnTypeToInsideTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnTypeToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnTypeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnTypeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnTypeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnTypeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardRowTypeResolver<TParent = any> {
    boardList?: BoardRowToBoardListResolver<TParent>;
    boardColumnValues?: BoardRowToBoardColumnValuesResolver<TParent>;
    title?: BoardRowToTitleResolver<TParent>;
    description?: BoardRowToDescriptionResolver<TParent>;
    order?: BoardRowToOrderResolver<TParent>;
    active?: BoardRowToActiveResolver<TParent>;
    boardListId?: BoardRowToBoardListIdResolver<TParent>;
    id?: BoardRowToIdResolver<TParent>;
    createdAt?: BoardRowToCreatedAtResolver<TParent>;
    updatedAt?: BoardRowToUpdatedAtResolver<TParent>;
}
export interface BoardRowToBoardListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardRowToBoardColumnValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardRowToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardRowToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardRowToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardRowToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardRowToBoardListIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardRowToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardRowToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardRowToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardMemberReferenceTypeResolver<TParent = any> {
    boardColumnValue?: BoardMemberReferenceToBoardColumnValueResolver<TParent>;
    memberId?: BoardMemberReferenceToMemberIdResolver<TParent>;
    description?: BoardMemberReferenceToDescriptionResolver<TParent>;
    active?: BoardMemberReferenceToActiveResolver<TParent>;
    boardColumnValueId?: BoardMemberReferenceToBoardColumnValueIdResolver<TParent>;
    id?: BoardMemberReferenceToIdResolver<TParent>;
    createdAt?: BoardMemberReferenceToCreatedAtResolver<TParent>;
    updatedAt?: BoardMemberReferenceToUpdatedAtResolver<TParent>;
    member?: BoardMemberReferenceToMemberResolver<TParent>;
}
export interface BoardMemberReferenceToBoardColumnValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardMemberReferenceToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardMemberReferenceToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardMemberReferenceToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardMemberReferenceToBoardColumnValueIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardMemberReferenceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardMemberReferenceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardMemberReferenceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardMemberReferenceToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICardChecklistTypeResolver<TParent = any> {
    card?: CardChecklistToCardResolver<TParent>;
    cardCheckComponents?: CardChecklistToCardCheckComponentsResolver<TParent>;
    name?: CardChecklistToNameResolver<TParent>;
    cardId?: CardChecklistToCardIdResolver<TParent>;
    id?: CardChecklistToIdResolver<TParent>;
    createdAt?: CardChecklistToCreatedAtResolver<TParent>;
    updatedAt?: CardChecklistToUpdatedAtResolver<TParent>;
}
export interface CardChecklistToCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardChecklistToCardCheckComponentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardChecklistToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardChecklistToCardIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardChecklistToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardChecklistToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardChecklistToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICardCheckComponentTypeResolver<TParent = any> {
    cardChecklist?: CardCheckComponentToCardChecklistResolver<TParent>;
    description?: CardCheckComponentToDescriptionResolver<TParent>;
    selected?: CardCheckComponentToSelectedResolver<TParent>;
    order?: CardCheckComponentToOrderResolver<TParent>;
    cardChecklistId?: CardCheckComponentToCardChecklistIdResolver<TParent>;
    id?: CardCheckComponentToIdResolver<TParent>;
    createdAt?: CardCheckComponentToCreatedAtResolver<TParent>;
    updatedAt?: CardCheckComponentToUpdatedAtResolver<TParent>;
}
export interface CardCheckComponentToCardChecklistResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardCheckComponentToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardCheckComponentToSelectedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardCheckComponentToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardCheckComponentToCardChecklistIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardCheckComponentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardCheckComponentToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardCheckComponentToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardStatusTypeResolver<TParent = any> {
    board?: BoardStatusToBoardResolver<TParent>;
    name?: BoardStatusToNameResolver<TParent>;
    description?: BoardStatusToDescriptionResolver<TParent>;
    color?: BoardStatusToColorResolver<TParent>;
    code?: BoardStatusToCodeResolver<TParent>;
    active?: BoardStatusToActiveResolver<TParent>;
    projectId?: BoardStatusToProjectIdResolver<TParent>;
    boardId?: BoardStatusToBoardIdResolver<TParent>;
    cards?: BoardStatusToCardsResolver<TParent>;
    id?: BoardStatusToIdResolver<TParent>;
    createdAt?: BoardStatusToCreatedAtResolver<TParent>;
    updatedAt?: BoardStatusToUpdatedAtResolver<TParent>;
}
export interface BoardStatusToBoardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardStatusToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardStatusToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardStatusToColorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardStatusToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardStatusToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardStatusToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardStatusToBoardIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardStatusToCardsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardStatusToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardStatusToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardStatusToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISpaceTypeResolver<TParent = any> {
    boards?: SpaceToBoardsResolver<TParent>;
    memberSpaces?: SpaceToMemberSpacesResolver<TParent>;
    name?: SpaceToNameResolver<TParent>;
    description?: SpaceToDescriptionResolver<TParent>;
    image?: SpaceToImageResolver<TParent>;
    projectId?: SpaceToProjectIdResolver<TParent>;
    areaId?: SpaceToAreaIdResolver<TParent>;
    visibility?: SpaceToVisibilityResolver<TParent>;
    active?: SpaceToActiveResolver<TParent>;
    id?: SpaceToIdResolver<TParent>;
    createdAt?: SpaceToCreatedAtResolver<TParent>;
    updatedAt?: SpaceToUpdatedAtResolver<TParent>;
    area?: SpaceToAreaResolver<TParent>;
}
export interface SpaceToBoardsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpaceToMemberSpacesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpaceToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpaceToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpaceToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpaceToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpaceToAreaIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpaceToVisibilityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpaceToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpaceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpaceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpaceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpaceToAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberSpaceTypeResolver<TParent = any> {
    space?: MemberSpaceToSpaceResolver<TParent>;
    memberId?: MemberSpaceToMemberIdResolver<TParent>;
    spaceId?: MemberSpaceToSpaceIdResolver<TParent>;
    order?: MemberSpaceToOrderResolver<TParent>;
    outstading?: MemberSpaceToOutstadingResolver<TParent>;
    access?: MemberSpaceToAccessResolver<TParent>;
    active?: MemberSpaceToActiveResolver<TParent>;
    id?: MemberSpaceToIdResolver<TParent>;
    createdAt?: MemberSpaceToCreatedAtResolver<TParent>;
    updatedAt?: MemberSpaceToUpdatedAtResolver<TParent>;
    member?: MemberSpaceToMemberResolver<TParent>;
}
export interface MemberSpaceToSpaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberSpaceToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberSpaceToSpaceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberSpaceToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberSpaceToOutstadingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberSpaceToAccessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberSpaceToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberSpaceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberSpaceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberSpaceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberSpaceToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFileTypeResolver<TParent = any> {
    folderId?: FileToFolderIdResolver<TParent>;
    folder?: FileToFolderResolver<TParent>;
    memberId?: FileToMemberIdResolver<TParent>;
    isProfile?: FileToIsProfileResolver<TParent>;
    token?: FileToTokenResolver<TParent>;
    name?: FileToNameResolver<TParent>;
    url?: FileToUrlResolver<TParent>;
    description?: FileToDescriptionResolver<TParent>;
    isActive?: FileToIsActiveResolver<TParent>;
    isOutstanding?: FileToIsOutstandingResolver<TParent>;
    partialUrl?: FileToPartialUrlResolver<TParent>;
    sharedFiles?: FileToSharedFilesResolver<TParent>;
    id?: FileToIdResolver<TParent>;
    createdAt?: FileToCreatedAtResolver<TParent>;
    updatedAt?: FileToUpdatedAtResolver<TParent>;
    member?: FileToMemberResolver<TParent>;
}
export interface FileToFolderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FileToFolderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FileToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FileToIsProfileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FileToTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FileToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FileToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FileToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FileToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FileToIsOutstandingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FileToPartialUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FileToSharedFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FileToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FileToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FileToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FileToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFolderTypeResolver<TParent = any> {
    isActive?: FolderToIsActiveResolver<TParent>;
    projectId?: FolderToProjectIdResolver<TParent>;
    memberId?: FolderToMemberIdResolver<TParent>;
    label?: FolderToLabelResolver<TParent>;
    background?: FolderToBackgroundResolver<TParent>;
    parentId?: FolderToParentIdResolver<TParent>;
    path?: FolderToPathResolver<TParent>;
    folderType?: FolderToFolderTypeResolver<TParent>;
    isPersonal?: FolderToIsPersonalResolver<TParent>;
    isOutstanding?: FolderToIsOutstandingResolver<TParent>;
    parent?: FolderToParentResolver<TParent>;
    subFolders?: FolderToSubFoldersResolver<TParent>;
    files?: FolderToFilesResolver<TParent>;
    id?: FolderToIdResolver<TParent>;
    createdAt?: FolderToCreatedAtResolver<TParent>;
    updatedAt?: FolderToUpdatedAtResolver<TParent>;
    member?: FolderToMemberResolver<TParent>;
}
export interface FolderToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FolderToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FolderToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FolderToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FolderToBackgroundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FolderToParentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FolderToPathResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FolderToFolderTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FolderToIsPersonalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FolderToIsOutstandingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FolderToParentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FolderToSubFoldersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FolderToFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FolderToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FolderToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FolderToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FolderToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISharedFileTypeResolver<TParent = any> {
    fileId?: SharedFileToFileIdResolver<TParent>;
    file?: SharedFileToFileResolver<TParent>;
    memberId?: SharedFileToMemberIdResolver<TParent>;
    id?: SharedFileToIdResolver<TParent>;
    createdAt?: SharedFileToCreatedAtResolver<TParent>;
    updatedAt?: SharedFileToUpdatedAtResolver<TParent>;
    member?: SharedFileToMemberResolver<TParent>;
}
export interface SharedFileToFileIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SharedFileToFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SharedFileToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SharedFileToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SharedFileToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SharedFileToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SharedFileToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISharedFolderTypeResolver<TParent = any> {
    folderId?: SharedFolderToFolderIdResolver<TParent>;
    folder?: SharedFolderToFolderResolver<TParent>;
    memberId?: SharedFolderToMemberIdResolver<TParent>;
    id?: SharedFolderToIdResolver<TParent>;
    createdAt?: SharedFolderToCreatedAtResolver<TParent>;
    updatedAt?: SharedFolderToUpdatedAtResolver<TParent>;
    member?: SharedFolderToMemberResolver<TParent>;
}
export interface SharedFolderToFolderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SharedFolderToFolderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SharedFolderToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SharedFolderToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SharedFolderToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SharedFolderToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SharedFolderToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeviceTypeResolver<TParent = any> {
    deviceNotifications?: DeviceToDeviceNotificationsResolver<TParent>;
    memberId?: DeviceToMemberIdResolver<TParent>;
    projectId?: DeviceToProjectIdResolver<TParent>;
    token?: DeviceToTokenResolver<TParent>;
    unique?: DeviceToUniqueResolver<TParent>;
    avalible?: DeviceToAvalibleResolver<TParent>;
    id?: DeviceToIdResolver<TParent>;
    createdAt?: DeviceToCreatedAtResolver<TParent>;
    updatedAt?: DeviceToUpdatedAtResolver<TParent>;
    member?: DeviceToMemberResolver<TParent>;
}
export interface DeviceToDeviceNotificationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DeviceToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DeviceToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DeviceToTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DeviceToUniqueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DeviceToAvalibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DeviceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DeviceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DeviceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DeviceToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeviceNotificationTypeResolver<TParent = any> {
    device?: DeviceNotificationToDeviceResolver<TParent>;
    notification?: DeviceNotificationToNotificationResolver<TParent>;
    deviceId?: DeviceNotificationToDeviceIdResolver<TParent>;
    notificationId?: DeviceNotificationToNotificationIdResolver<TParent>;
    id?: DeviceNotificationToIdResolver<TParent>;
    createdAt?: DeviceNotificationToCreatedAtResolver<TParent>;
    updatedAt?: DeviceNotificationToUpdatedAtResolver<TParent>;
}
export interface DeviceNotificationToDeviceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DeviceNotificationToNotificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DeviceNotificationToDeviceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DeviceNotificationToNotificationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DeviceNotificationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DeviceNotificationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DeviceNotificationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface INotificationTypeResolver<TParent = any> {
    deviceNotifications?: NotificationToDeviceNotificationsResolver<TParent>;
    title?: NotificationToTitleResolver<TParent>;
    description?: NotificationToDescriptionResolver<TParent>;
    data?: NotificationToDataResolver<TParent>;
    enabled?: NotificationToEnabledResolver<TParent>;
    view?: NotificationToViewResolver<TParent>;
    date?: NotificationToDateResolver<TParent>;
    memberId?: NotificationToMemberIdResolver<TParent>;
    id?: NotificationToIdResolver<TParent>;
    createdAt?: NotificationToCreatedAtResolver<TParent>;
    updatedAt?: NotificationToUpdatedAtResolver<TParent>;
    member?: NotificationToMemberResolver<TParent>;
}
export interface NotificationToDeviceNotificationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NotificationToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NotificationToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NotificationToDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NotificationToEnabledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NotificationToViewResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NotificationToDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NotificationToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NotificationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NotificationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NotificationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NotificationToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectSocialNetworkTypeResolver<TParent = any> {
    projectId?: ProjectSocialNetworkToProjectIdResolver<TParent>;
    project?: ProjectSocialNetworkToProjectResolver<TParent>;
    socialNetworkType?: ProjectSocialNetworkToSocialNetworkTypeResolver<TParent>;
    value?: ProjectSocialNetworkToValueResolver<TParent>;
    id?: ProjectSocialNetworkToIdResolver<TParent>;
    createdAt?: ProjectSocialNetworkToCreatedAtResolver<TParent>;
    updatedAt?: ProjectSocialNetworkToUpdatedAtResolver<TParent>;
}
export interface ProjectSocialNetworkToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectSocialNetworkToProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectSocialNetworkToSocialNetworkTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectSocialNetworkToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectSocialNetworkToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectSocialNetworkToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectSocialNetworkToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface INicheTypeResolver<TParent = any> {
    name?: NicheToNameResolver<TParent>;
    description?: NicheToDescriptionResolver<TParent>;
    nicheServices?: NicheToNicheServicesResolver<TParent>;
    projects?: NicheToProjectsResolver<TParent>;
    id?: NicheToIdResolver<TParent>;
    createdAt?: NicheToCreatedAtResolver<TParent>;
    updatedAt?: NicheToUpdatedAtResolver<TParent>;
}
export interface NicheToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NicheToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NicheToNicheServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NicheToProjectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NicheToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NicheToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NicheToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface INicheServiceTypeResolver<TParent = any> {
    nicheId?: NicheServiceToNicheIdResolver<TParent>;
    niche?: NicheServiceToNicheResolver<TParent>;
    codeName?: NicheServiceToCodeNameResolver<TParent>;
    id?: NicheServiceToIdResolver<TParent>;
    createdAt?: NicheServiceToCreatedAtResolver<TParent>;
    updatedAt?: NicheServiceToUpdatedAtResolver<TParent>;
    microservice?: NicheServiceToMicroserviceResolver<TParent>;
}
export interface NicheServiceToNicheIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NicheServiceToNicheResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NicheServiceToCodeNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NicheServiceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NicheServiceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NicheServiceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NicheServiceToMicroserviceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMicroserviceTypeResolver<TParent = any> {
    name?: MicroserviceToNameResolver<TParent>;
    codeName?: MicroserviceToCodeNameResolver<TParent>;
    image?: MicroserviceToImageResolver<TParent>;
    description?: MicroserviceToDescriptionResolver<TParent>;
    priority?: MicroserviceToPriorityResolver<TParent>;
    isPublic?: MicroserviceToIsPublicResolver<TParent>;
    projectMicroservices?: MicroserviceToProjectMicroservicesResolver<TParent>;
    functions?: MicroserviceToFunctionsResolver<TParent>;
    id?: MicroserviceToIdResolver<TParent>;
    createdAt?: MicroserviceToCreatedAtResolver<TParent>;
    updatedAt?: MicroserviceToUpdatedAtResolver<TParent>;
}
export interface MicroserviceToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MicroserviceToCodeNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MicroserviceToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MicroserviceToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MicroserviceToPriorityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MicroserviceToIsPublicResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MicroserviceToProjectMicroservicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MicroserviceToFunctionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MicroserviceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MicroserviceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MicroserviceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectMicroserviceTypeResolver<TParent = any> {
    microserviceId?: ProjectMicroserviceToMicroserviceIdResolver<TParent>;
    microservice?: ProjectMicroserviceToMicroserviceResolver<TParent>;
    isActive?: ProjectMicroserviceToIsActiveResolver<TParent>;
    label?: ProjectMicroserviceToLabelResolver<TParent>;
    projectId?: ProjectMicroserviceToProjectIdResolver<TParent>;
    id?: ProjectMicroserviceToIdResolver<TParent>;
    createdAt?: ProjectMicroserviceToCreatedAtResolver<TParent>;
    updatedAt?: ProjectMicroserviceToUpdatedAtResolver<TParent>;
}
export interface ProjectMicroserviceToMicroserviceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectMicroserviceToMicroserviceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectMicroserviceToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectMicroserviceToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectMicroserviceToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectMicroserviceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectMicroserviceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectMicroserviceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFunctionTypeResolver<TParent = any> {
    name?: FunctionToNameResolver<TParent>;
    codeName?: FunctionToCodeNameResolver<TParent>;
    functionType?: FunctionToFunctionTypeResolver<TParent>;
    microserviceId?: FunctionToMicroserviceIdResolver<TParent>;
    microservice?: FunctionToMicroserviceResolver<TParent>;
    id?: FunctionToIdResolver<TParent>;
    createdAt?: FunctionToCreatedAtResolver<TParent>;
    updatedAt?: FunctionToUpdatedAtResolver<TParent>;
}
export interface FunctionToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FunctionToCodeNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FunctionToFunctionTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FunctionToMicroserviceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FunctionToMicroserviceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FunctionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FunctionToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FunctionToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IShopTypeResolver<TParent = any> {
    projectId?: ShopToProjectIdResolver<TParent>;
    shopType?: ShopToShopTypeResolver<TParent>;
    profileUrl?: ShopToProfileUrlResolver<TParent>;
    id?: ShopToIdResolver<TParent>;
    createdAt?: ShopToCreatedAtResolver<TParent>;
    updatedAt?: ShopToUpdatedAtResolver<TParent>;
}
export interface ShopToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ShopToShopTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ShopToProfileUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ShopToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ShopToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ShopToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IServiceHelperTypeResolver<TParent = any> {
    id?: ServiceHelperToIdResolver<TParent>;
    name?: ServiceHelperToNameResolver<TParent>;
    label?: ServiceHelperToLabelResolver<TParent>;
    isActive?: ServiceHelperToIsActiveResolver<TParent>;
    codeName?: ServiceHelperToCodeNameResolver<TParent>;
    image?: ServiceHelperToImageResolver<TParent>;
    description?: ServiceHelperToDescriptionResolver<TParent>;
    priority?: ServiceHelperToPriorityResolver<TParent>;
    createdAt?: ServiceHelperToCreatedAtResolver<TParent>;
    updatedAt?: ServiceHelperToUpdatedAtResolver<TParent>;
    projectMicroservices?: ServiceHelperToProjectMicroservicesResolver<TParent>;
    functions?: ServiceHelperToFunctionsResolver<TParent>;
}
export interface ServiceHelperToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceHelperToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceHelperToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceHelperToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceHelperToCodeNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceHelperToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceHelperToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceHelperToPriorityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceHelperToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceHelperToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceHelperToProjectMicroservicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceHelperToFunctionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IConfigurationTypeResolver<TParent = any> {
    projectId?: ConfigurationToProjectIdResolver<TParent>;
    key?: ConfigurationToKeyResolver<TParent>;
    value?: ConfigurationToValueResolver<TParent>;
    id?: ConfigurationToIdResolver<TParent>;
    createdAt?: ConfigurationToCreatedAtResolver<TParent>;
    updatedAt?: ConfigurationToUpdatedAtResolver<TParent>;
}
export interface ConfigurationToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConfigurationToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConfigurationToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConfigurationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConfigurationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConfigurationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IGroupTaxonomyTypeResolver<TParent = any> {
    taxonomyId?: GroupTaxonomyToTaxonomyIdResolver<TParent>;
    groupId?: GroupTaxonomyToGroupIdResolver<TParent>;
    group?: GroupTaxonomyToGroupResolver<TParent>;
    taxonomy?: GroupTaxonomyToTaxonomyResolver<TParent>;
}
export interface GroupTaxonomyToTaxonomyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GroupTaxonomyToGroupIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GroupTaxonomyToGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GroupTaxonomyToTaxonomyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICollectionSegmentInfoTypeResolver<TParent = any> {
    hasNextPage?: CollectionSegmentInfoToHasNextPageResolver<TParent>;
    hasPreviousPage?: CollectionSegmentInfoToHasPreviousPageResolver<TParent>;
}
export interface CollectionSegmentInfoToHasNextPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollectionSegmentInfoToHasPreviousPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface INicheCollectionSegmentTypeResolver<TParent = any> {
    items?: NicheCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: NicheCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: NicheCollectionSegmentToTotalCountResolver<TParent>;
}
export interface NicheCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NicheCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NicheCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface INicheServiceCollectionSegmentTypeResolver<TParent = any> {
    items?: NicheServiceCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: NicheServiceCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: NicheServiceCollectionSegmentToTotalCountResolver<TParent>;
}
export interface NicheServiceCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NicheServiceCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NicheServiceCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMyUrlTypeResolver<TParent = any> {
    url?: MyUrlToUrlResolver<TParent>;
}
export interface MyUrlToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICountryCollectionSegmentTypeResolver<TParent = any> {
    items?: CountryCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: CountryCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: CountryCollectionSegmentToTotalCountResolver<TParent>;
}
export interface CountryCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CountryCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CountryCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberProjectCollectionSegmentTypeResolver<TParent = any> {
    items?: MemberProjectCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: MemberProjectCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: MemberProjectCollectionSegmentToTotalCountResolver<TParent>;
}
export interface MemberProjectCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberProjectCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberProjectCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberCollectionSegmentTypeResolver<TParent = any> {
    items?: MemberCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: MemberCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: MemberCollectionSegmentToTotalCountResolver<TParent>;
}
export interface MemberCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberInSpaceCollectionSegmentTypeResolver<TParent = any> {
    items?: MemberInSpaceCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: MemberInSpaceCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: MemberInSpaceCollectionSegmentToTotalCountResolver<TParent>;
}
export interface MemberInSpaceCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInSpaceCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInSpaceCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberInSpaceTypeResolver<TParent = any> {
    memberId?: MemberInSpaceToMemberIdResolver<TParent>;
    spaceId?: MemberInSpaceToSpaceIdResolver<TParent>;
    member?: MemberInSpaceToMemberResolver<TParent>;
    memberInSpace?: MemberInSpaceToMemberInSpaceResolver<TParent>;
}
export interface MemberInSpaceToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInSpaceToSpaceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInSpaceToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInSpaceToMemberInSpaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberInBoardCollectionSegmentTypeResolver<TParent = any> {
    items?: MemberInBoardCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: MemberInBoardCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: MemberInBoardCollectionSegmentToTotalCountResolver<TParent>;
}
export interface MemberInBoardCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInBoardCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInBoardCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberInBoardTypeResolver<TParent = any> {
    memberId?: MemberInBoardToMemberIdResolver<TParent>;
    boardId?: MemberInBoardToBoardIdResolver<TParent>;
    member?: MemberInBoardToMemberResolver<TParent>;
    memberInBoard?: MemberInBoardToMemberInBoardResolver<TParent>;
}
export interface MemberInBoardToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInBoardToBoardIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInBoardToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInBoardToMemberInBoardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListUsersLazyLoadConnectionTypeResolver<TParent = any> {
    pageInfo?: ListUsersLazyLoadConnectionToPageInfoResolver<TParent>;
    edges?: ListUsersLazyLoadConnectionToEdgesResolver<TParent>;
    nodes?: ListUsersLazyLoadConnectionToNodesResolver<TParent>;
    totalCount?: ListUsersLazyLoadConnectionToTotalCountResolver<TParent>;
}
export interface ListUsersLazyLoadConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListUsersLazyLoadConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListUsersLazyLoadConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListUsersLazyLoadConnectionToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPageInfoTypeResolver<TParent = any> {
    hasNextPage?: PageInfoToHasNextPageResolver<TParent>;
    hasPreviousPage?: PageInfoToHasPreviousPageResolver<TParent>;
    startCursor?: PageInfoToStartCursorResolver<TParent>;
    endCursor?: PageInfoToEndCursorResolver<TParent>;
}
export interface PageInfoToHasNextPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PageInfoToHasPreviousPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PageInfoToStartCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PageInfoToEndCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListUsersLazyLoadEdgeTypeResolver<TParent = any> {
    cursor?: ListUsersLazyLoadEdgeToCursorResolver<TParent>;
    node?: ListUsersLazyLoadEdgeToNodeResolver<TParent>;
}
export interface ListUsersLazyLoadEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListUsersLazyLoadEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectsInfiniteConnectionTypeResolver<TParent = any> {
    pageInfo?: ProjectsInfiniteConnectionToPageInfoResolver<TParent>;
    edges?: ProjectsInfiniteConnectionToEdgesResolver<TParent>;
    nodes?: ProjectsInfiniteConnectionToNodesResolver<TParent>;
    totalCount?: ProjectsInfiniteConnectionToTotalCountResolver<TParent>;
}
export interface ProjectsInfiniteConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectsInfiniteConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectsInfiniteConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectsInfiniteConnectionToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectsInfiniteEdgeTypeResolver<TParent = any> {
    cursor?: ProjectsInfiniteEdgeToCursorResolver<TParent>;
    node?: ProjectsInfiniteEdgeToNodeResolver<TParent>;
}
export interface ProjectsInfiniteEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectsInfiniteEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberChatTypeResolver<TParent = any> {
    email?: MemberChatToEmailResolver<TParent>;
    name?: MemberChatToNameResolver<TParent>;
    lastName?: MemberChatToLastNameResolver<TParent>;
    photo?: MemberChatToPhotoResolver<TParent>;
}
export interface MemberChatToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberChatToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberChatToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberChatToPhotoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberFullNameTypeResolver<TParent = any> {
    fullName?: MemberFullNameToFullNameResolver<TParent>;
}
export interface MemberFullNameToFullNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICustomMemberDtoTypeResolver<TParent = any> {
    roleName?: CustomMemberDtoToRoleNameResolver<TParent>;
    roleCode?: CustomMemberDtoToRoleCodeResolver<TParent>;
    photo?: CustomMemberDtoToPhotoResolver<TParent>;
    email?: CustomMemberDtoToEmailResolver<TParent>;
    fullName?: CustomMemberDtoToFullNameResolver<TParent>;
    id?: CustomMemberDtoToIdResolver<TParent>;
    birthday?: CustomMemberDtoToBirthdayResolver<TParent>;
}
export interface CustomMemberDtoToRoleNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CustomMemberDtoToRoleCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CustomMemberDtoToPhotoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CustomMemberDtoToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CustomMemberDtoToFullNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CustomMemberDtoToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CustomMemberDtoToBirthdayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPlanTypeResolver<TParent = any> {
    name?: PlanToNameResolver<TParent>;
    price?: PlanToPriceResolver<TParent>;
    planFunctionalities?: PlanToPlanFunctionalitiesResolver<TParent>;
    planLimitations?: PlanToPlanLimitationsResolver<TParent>;
    id?: PlanToIdResolver<TParent>;
    createdAt?: PlanToCreatedAtResolver<TParent>;
    updatedAt?: PlanToUpdatedAtResolver<TParent>;
}
export interface PlanToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PlanToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PlanToPlanFunctionalitiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PlanToPlanLimitationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PlanToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PlanToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PlanToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPlanFunctionalityTypeResolver<TParent = any> {
    planId?: PlanFunctionalityToPlanIdResolver<TParent>;
    plan?: PlanFunctionalityToPlanResolver<TParent>;
    name?: PlanFunctionalityToNameResolver<TParent>;
    price?: PlanFunctionalityToPriceResolver<TParent>;
    id?: PlanFunctionalityToIdResolver<TParent>;
    createdAt?: PlanFunctionalityToCreatedAtResolver<TParent>;
    updatedAt?: PlanFunctionalityToUpdatedAtResolver<TParent>;
}
export interface PlanFunctionalityToPlanIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PlanFunctionalityToPlanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PlanFunctionalityToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PlanFunctionalityToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PlanFunctionalityToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PlanFunctionalityToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PlanFunctionalityToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPlanLimitationTypeResolver<TParent = any> {
    functionalityId?: PlanLimitationToFunctionalityIdResolver<TParent>;
    planFunctionality?: PlanLimitationToPlanFunctionalityResolver<TParent>;
    quantity?: PlanLimitationToQuantityResolver<TParent>;
    id?: PlanLimitationToIdResolver<TParent>;
    createdAt?: PlanLimitationToCreatedAtResolver<TParent>;
    updatedAt?: PlanLimitationToUpdatedAtResolver<TParent>;
}
export interface PlanLimitationToFunctionalityIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PlanLimitationToPlanFunctionalityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PlanLimitationToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PlanLimitationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PlanLimitationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PlanLimitationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRecommendedProjectTypeResolver<TParent = any> {
    position?: RecommendedProjectToPositionResolver<TParent>;
    projectId?: RecommendedProjectToProjectIdResolver<TParent>;
    project?: RecommendedProjectToProjectResolver<TParent>;
    id?: RecommendedProjectToIdResolver<TParent>;
    createdAt?: RecommendedProjectToCreatedAtResolver<TParent>;
    updatedAt?: RecommendedProjectToUpdatedAtResolver<TParent>;
}
export interface RecommendedProjectToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RecommendedProjectToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RecommendedProjectToProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RecommendedProjectToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RecommendedProjectToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RecommendedProjectToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectCollectionSegmentTypeResolver<TParent = any> {
    items?: ProjectCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ProjectCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ProjectCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ProjectCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberRelationCollectionSegmentTypeResolver<TParent = any> {
    items?: MemberRelationCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: MemberRelationCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: MemberRelationCollectionSegmentToTotalCountResolver<TParent>;
}
export interface MemberRelationCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRelationCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberRelationCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectTemplateTypeResolver<TParent = any> {
    projectId?: ProjectTemplateToProjectIdResolver<TParent>;
    templateId?: ProjectTemplateToTemplateIdResolver<TParent>;
    serviceEmail?: ProjectTemplateToServiceEmailResolver<TParent>;
    templateService?: ProjectTemplateToTemplateServiceResolver<TParent>;
    id?: ProjectTemplateToIdResolver<TParent>;
    createdAt?: ProjectTemplateToCreatedAtResolver<TParent>;
    updatedAt?: ProjectTemplateToUpdatedAtResolver<TParent>;
}
export interface ProjectTemplateToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectTemplateToTemplateIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectTemplateToServiceEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectTemplateToTemplateServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectTemplateToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectTemplateToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectTemplateToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRankingDTOCollectionSegmentTypeResolver<TParent = any> {
    items?: RankingDTOCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: RankingDTOCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: RankingDTOCollectionSegmentToTotalCountResolver<TParent>;
}
export interface RankingDTOCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RankingDTOCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RankingDTOCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRankingDTOTypeResolver<TParent = any> {
    member?: RankingDTOToMemberResolver<TParent>;
    amount?: RankingDTOToAmountResolver<TParent>;
    sellsClose?: RankingDTOToSellsCloseResolver<TParent>;
    sellsInProgress?: RankingDTOToSellsInProgressResolver<TParent>;
    position?: RankingDTOToPositionResolver<TParent>;
    totalSells?: RankingDTOToTotalSellsResolver<TParent>;
    interestedProspects?: RankingDTOToInterestedProspectsResolver<TParent>;
    potentialProspects?: RankingDTOToPotentialProspectsResolver<TParent>;
}
export interface RankingDTOToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RankingDTOToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RankingDTOToSellsCloseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RankingDTOToSellsInProgressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RankingDTOToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RankingDTOToTotalSellsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RankingDTOToInterestedProspectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RankingDTOToPotentialProspectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISellCollectionSegmentTypeResolver<TParent = any> {
    items?: SellCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: SellCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: SellCollectionSegmentToTotalCountResolver<TParent>;
}
export interface SellCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberStatsTypeResolver<TParent = any> {
    member?: MemberStatsToMemberResolver<TParent>;
    potentials?: MemberStatsToPotentialsResolver<TParent>;
    interesteds?: MemberStatsToInterestedsResolver<TParent>;
    sells?: MemberStatsToSellsResolver<TParent>;
    totalSells?: MemberStatsToTotalSellsResolver<TParent>;
}
export interface MemberStatsToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberStatsToPotentialsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberStatsToInterestedsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberStatsToSellsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberStatsToTotalSellsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISellStatsTypeResolver<TParent = any> {
    sells?: SellStatsToSellsResolver<TParent>;
    ranking?: SellStatsToRankingResolver<TParent>;
    memberRelation?: SellStatsToMemberRelationResolver<TParent>;
    interestedProspects?: SellStatsToInterestedProspectsResolver<TParent>;
    investment?: SellStatsToInvestmentResolver<TParent>;
}
export interface SellStatsToSellsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellStatsToRankingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellStatsToMemberRelationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellStatsToInterestedProspectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SellStatsToInvestmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberCompanyDtoCollectionSegmentTypeResolver<TParent = any> {
    items?: MemberCompanyDtoCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: MemberCompanyDtoCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: MemberCompanyDtoCollectionSegmentToTotalCountResolver<TParent>;
}
export interface MemberCompanyDtoCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCompanyDtoCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCompanyDtoCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberCompanyDtoTypeResolver<TParent = any> {
    member?: MemberCompanyDtoToMemberResolver<TParent>;
    profile?: MemberCompanyDtoToProfileResolver<TParent>;
    memberCompany?: MemberCompanyDtoToMemberCompanyResolver<TParent>;
}
export interface MemberCompanyDtoToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCompanyDtoToProfileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCompanyDtoToMemberCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFAQTypeResolver<TParent = any> {
    projectId?: FAQToProjectIdResolver<TParent>;
    question?: FAQToQuestionResolver<TParent>;
    answer?: FAQToAnswerResolver<TParent>;
    image?: FAQToImageResolver<TParent>;
    position?: FAQToPositionResolver<TParent>;
    id?: FAQToIdResolver<TParent>;
    createdAt?: FAQToCreatedAtResolver<TParent>;
    updatedAt?: FAQToUpdatedAtResolver<TParent>;
}
export interface FAQToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FAQToQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FAQToAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FAQToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FAQToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FAQToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FAQToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FAQToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ITopicDiseaseTypeResolver<TParent = any> {
    projectId?: TopicDiseaseToProjectIdResolver<TParent>;
    month?: TopicDiseaseToMonthResolver<TParent>;
    title?: TopicDiseaseToTitleResolver<TParent>;
    backgroundImage?: TopicDiseaseToBackgroundImageResolver<TParent>;
    diseases?: TopicDiseaseToDiseasesResolver<TParent>;
    id?: TopicDiseaseToIdResolver<TParent>;
    createdAt?: TopicDiseaseToCreatedAtResolver<TParent>;
    updatedAt?: TopicDiseaseToUpdatedAtResolver<TParent>;
}
export interface TopicDiseaseToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TopicDiseaseToMonthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TopicDiseaseToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TopicDiseaseToBackgroundImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TopicDiseaseToDiseasesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TopicDiseaseToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TopicDiseaseToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TopicDiseaseToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDiseaseTypeResolver<TParent = any> {
    projectId?: DiseaseToProjectIdResolver<TParent>;
    topicDiseaseId?: DiseaseToTopicDiseaseIdResolver<TParent>;
    topicDisease?: DiseaseToTopicDiseaseResolver<TParent>;
    title?: DiseaseToTitleResolver<TParent>;
    iconImage?: DiseaseToIconImageResolver<TParent>;
    image?: DiseaseToImageResolver<TParent>;
    position?: DiseaseToPositionResolver<TParent>;
    id?: DiseaseToIdResolver<TParent>;
    createdAt?: DiseaseToCreatedAtResolver<TParent>;
    updatedAt?: DiseaseToUpdatedAtResolver<TParent>;
}
export interface DiseaseToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DiseaseToTopicDiseaseIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DiseaseToTopicDiseaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DiseaseToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DiseaseToIconImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DiseaseToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DiseaseToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DiseaseToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DiseaseToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DiseaseToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsuranceFormCollectionSegmentTypeResolver<TParent = any> {
    items?: InsuranceFormCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsuranceFormCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsuranceFormCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsuranceFormCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsuranceFormCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsuranceFormCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsuranceFormTypeResolver<TParent = any> {
    projectId?: InsuranceFormToProjectIdResolver<TParent>;
    typeForm?: InsuranceFormToTypeFormResolver<TParent>;
    name?: InsuranceFormToNameResolver<TParent>;
    email?: InsuranceFormToEmailResolver<TParent>;
    phone?: InsuranceFormToPhoneResolver<TParent>;
    zipCode?: InsuranceFormToZipCodeResolver<TParent>;
    birthDate?: InsuranceFormToBirthDateResolver<TParent>;
    typeInsurance?: InsuranceFormToTypeInsuranceResolver<TParent>;
    message?: InsuranceFormToMessageResolver<TParent>;
    hospitalLevel?: InsuranceFormToHospitalLevelResolver<TParent>;
    gender?: InsuranceFormToGenderResolver<TParent>;
    id?: InsuranceFormToIdResolver<TParent>;
    createdAt?: InsuranceFormToCreatedAtResolver<TParent>;
    updatedAt?: InsuranceFormToUpdatedAtResolver<TParent>;
}
export interface InsuranceFormToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsuranceFormToTypeFormResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsuranceFormToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsuranceFormToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsuranceFormToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsuranceFormToZipCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsuranceFormToBirthDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsuranceFormToTypeInsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsuranceFormToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsuranceFormToHospitalLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsuranceFormToGenderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsuranceFormToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsuranceFormToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsuranceFormToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuestionDTOTypeResolver<TParent = any> {
    title?: QuestionDTOToTitleResolver<TParent>;
    type?: QuestionDTOToTypeResolver<TParent>;
    image?: QuestionDTOToImageResolver<TParent>;
    options?: QuestionDTOToOptionsResolver<TParent>;
    answers?: QuestionDTOToAnswersResolver<TParent>;
}
export interface QuestionDTOToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuestionDTOToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuestionDTOToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuestionDTOToOptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuestionDTOToAnswersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IArticlesConnectionTypeResolver<TParent = any> {
    pageInfo?: ArticlesConnectionToPageInfoResolver<TParent>;
    edges?: ArticlesConnectionToEdgesResolver<TParent>;
    nodes?: ArticlesConnectionToNodesResolver<TParent>;
    totalCount?: ArticlesConnectionToTotalCountResolver<TParent>;
}
export interface ArticlesConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticlesConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticlesConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticlesConnectionToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IArticlesEdgeTypeResolver<TParent = any> {
    cursor?: ArticlesEdgeToCursorResolver<TParent>;
    node?: ArticlesEdgeToNodeResolver<TParent>;
}
export interface ArticlesEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticlesEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IArticleCollectionSegmentTypeResolver<TParent = any> {
    items?: ArticleCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ArticleCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ArticleCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ArticleCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ArticleCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProductCollectionSegmentTypeResolver<TParent = any> {
    items?: ProductCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ProductCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ProductCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ProductCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ITaxonomyCollectionSegmentTypeResolver<TParent = any> {
    items?: TaxonomyCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: TaxonomyCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: TaxonomyCollectionSegmentToTotalCountResolver<TParent>;
}
export interface TaxonomyCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxonomyCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISeoDTOTypeResolver<TParent = any> {
    seo?: SeoDTOToSeoResolver<TParent>;
}
export interface SeoDTOToSeoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICourseTypeResolver<TParent = any> {
    school?: CourseToSchoolResolver<TParent>;
    courseLevel?: CourseToCourseLevelResolver<TParent>;
    projectId?: CourseToProjectIdResolver<TParent>;
    title?: CourseToTitleResolver<TParent>;
    courseModality?: CourseToCourseModalityResolver<TParent>;
    slug?: CourseToSlugResolver<TParent>;
    description?: CourseToDescriptionResolver<TParent>;
    endDate?: CourseToEndDateResolver<TParent>;
    startDate?: CourseToStartDateResolver<TParent>;
    addressId?: CourseToAddressIdResolver<TParent>;
    courseType?: CourseToCourseTypeResolver<TParent>;
    duration?: CourseToDurationResolver<TParent>;
    beginType?: CourseToBeginTypeResolver<TParent>;
    price?: CourseToPriceResolver<TParent>;
    schedules?: CourseToSchedulesResolver<TParent>;
    discount?: CourseToDiscountResolver<TParent>;
    id?: CourseToIdResolver<TParent>;
    createdAt?: CourseToCreatedAtResolver<TParent>;
    updatedAt?: CourseToUpdatedAtResolver<TParent>;
}
export interface CourseToSchoolResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseToCourseLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseToCourseModalityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseToSlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseToEndDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseToStartDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseToAddressIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseToCourseTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseToDurationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseToBeginTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseToSchedulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICourseScheduleTypeResolver<TParent = any> {
    day?: CourseScheduleToDayResolver<TParent>;
    time?: CourseScheduleToTimeResolver<TParent>;
    dayPosition?: CourseScheduleToDayPositionResolver<TParent>;
    courseId?: CourseScheduleToCourseIdResolver<TParent>;
    course?: CourseScheduleToCourseResolver<TParent>;
    id?: CourseScheduleToIdResolver<TParent>;
    createdAt?: CourseScheduleToCreatedAtResolver<TParent>;
    updatedAt?: CourseScheduleToUpdatedAtResolver<TParent>;
}
export interface CourseScheduleToDayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseScheduleToTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseScheduleToDayPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseScheduleToCourseIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseScheduleToCourseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseScheduleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseScheduleToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseScheduleToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoursesByProjectIdConnectionTypeResolver<TParent = any> {
    pageInfo?: CoursesByProjectIdConnectionToPageInfoResolver<TParent>;
    edges?: CoursesByProjectIdConnectionToEdgesResolver<TParent>;
    nodes?: CoursesByProjectIdConnectionToNodesResolver<TParent>;
    totalCount?: CoursesByProjectIdConnectionToTotalCountResolver<TParent>;
}
export interface CoursesByProjectIdConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoursesByProjectIdConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoursesByProjectIdConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoursesByProjectIdConnectionToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoursesByProjectIdEdgeTypeResolver<TParent = any> {
    cursor?: CoursesByProjectIdEdgeToCursorResolver<TParent>;
    node?: CoursesByProjectIdEdgeToNodeResolver<TParent>;
}
export interface CoursesByProjectIdEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoursesByProjectIdEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICourseTaxonomyTypeResolver<TParent = any> {
    projectId?: CourseTaxonomyToProjectIdResolver<TParent>;
    courseId?: CourseTaxonomyToCourseIdResolver<TParent>;
    course?: CourseTaxonomyToCourseResolver<TParent>;
    taxonomyId?: CourseTaxonomyToTaxonomyIdResolver<TParent>;
    taxonomy?: CourseTaxonomyToTaxonomyResolver<TParent>;
    id?: CourseTaxonomyToIdResolver<TParent>;
    createdAt?: CourseTaxonomyToCreatedAtResolver<TParent>;
    updatedAt?: CourseTaxonomyToUpdatedAtResolver<TParent>;
}
export interface CourseTaxonomyToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseTaxonomyToCourseIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseTaxonomyToCourseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseTaxonomyToTaxonomyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseTaxonomyToTaxonomyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseTaxonomyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseTaxonomyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseTaxonomyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStoreTransfersByStoreIdConnectionTypeResolver<TParent = any> {
    pageInfo?: StoreTransfersByStoreIdConnectionToPageInfoResolver<TParent>;
    edges?: StoreTransfersByStoreIdConnectionToEdgesResolver<TParent>;
    nodes?: StoreTransfersByStoreIdConnectionToNodesResolver<TParent>;
    totalCount?: StoreTransfersByStoreIdConnectionToTotalCountResolver<TParent>;
}
export interface StoreTransfersByStoreIdConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreTransfersByStoreIdConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreTransfersByStoreIdConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreTransfersByStoreIdConnectionToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStoreTransfersByStoreIdEdgeTypeResolver<TParent = any> {
    cursor?: StoreTransfersByStoreIdEdgeToCursorResolver<TParent>;
    node?: StoreTransfersByStoreIdEdgeToNodeResolver<TParent>;
}
export interface StoreTransfersByStoreIdEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreTransfersByStoreIdEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStoreTransferTypeResolver<TParent = any> {
    projectId?: StoreTransferToProjectIdResolver<TParent>;
    storeOriginId?: StoreTransferToStoreOriginIdResolver<TParent>;
    storeDestinyId?: StoreTransferToStoreDestinyIdResolver<TParent>;
    currencyId?: StoreTransferToCurrencyIdResolver<TParent>;
    productsTransferred?: StoreTransferToProductsTransferredResolver<TParent>;
    storeOrigin?: StoreTransferToStoreOriginResolver<TParent>;
    storeDestiny?: StoreTransferToStoreDestinyResolver<TParent>;
    folio?: StoreTransferToFolioResolver<TParent>;
    id?: StoreTransferToIdResolver<TParent>;
    createdAt?: StoreTransferToCreatedAtResolver<TParent>;
    updatedAt?: StoreTransferToUpdatedAtResolver<TParent>;
}
export interface StoreTransferToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreTransferToStoreOriginIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreTransferToStoreDestinyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreTransferToCurrencyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreTransferToProductsTransferredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreTransferToStoreOriginResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreTransferToStoreDestinyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreTransferToFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreTransferToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreTransferToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreTransferToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProductTransferredTypeResolver<TParent = any> {
    productId?: ProductTransferredToProductIdResolver<TParent>;
    product?: ProductTransferredToProductResolver<TParent>;
    quantity?: ProductTransferredToQuantityResolver<TParent>;
    storeTransferId?: ProductTransferredToStoreTransferIdResolver<TParent>;
    storeTransfer?: ProductTransferredToStoreTransferResolver<TParent>;
    id?: ProductTransferredToIdResolver<TParent>;
    createdAt?: ProductTransferredToCreatedAtResolver<TParent>;
    updatedAt?: ProductTransferredToUpdatedAtResolver<TParent>;
}
export interface ProductTransferredToProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductTransferredToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductTransferredToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductTransferredToStoreTransferIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductTransferredToStoreTransferResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductTransferredToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductTransferredToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductTransferredToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoursesByTaxonomyAndModalityConnectionTypeResolver<TParent = any> {
    pageInfo?: CoursesByTaxonomyAndModalityConnectionToPageInfoResolver<TParent>;
    edges?: CoursesByTaxonomyAndModalityConnectionToEdgesResolver<TParent>;
    nodes?: CoursesByTaxonomyAndModalityConnectionToNodesResolver<TParent>;
    totalCount?: CoursesByTaxonomyAndModalityConnectionToTotalCountResolver<TParent>;
}
export interface CoursesByTaxonomyAndModalityConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoursesByTaxonomyAndModalityConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoursesByTaxonomyAndModalityConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoursesByTaxonomyAndModalityConnectionToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoursesByTaxonomyAndModalityEdgeTypeResolver<TParent = any> {
    cursor?: CoursesByTaxonomyAndModalityEdgeToCursorResolver<TParent>;
    node?: CoursesByTaxonomyAndModalityEdgeToNodeResolver<TParent>;
}
export interface CoursesByTaxonomyAndModalityEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoursesByTaxonomyAndModalityEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBranchOfficesConnectionTypeResolver<TParent = any> {
    pageInfo?: BranchOfficesConnectionToPageInfoResolver<TParent>;
    edges?: BranchOfficesConnectionToEdgesResolver<TParent>;
    nodes?: BranchOfficesConnectionToNodesResolver<TParent>;
    totalCount?: BranchOfficesConnectionToTotalCountResolver<TParent>;
}
export interface BranchOfficesConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficesConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficesConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficesConnectionToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBranchOfficesEdgeTypeResolver<TParent = any> {
    cursor?: BranchOfficesEdgeToCursorResolver<TParent>;
    node?: BranchOfficesEdgeToNodeResolver<TParent>;
}
export interface BranchOfficesEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchOfficesEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IManagersConnectionTypeResolver<TParent = any> {
    pageInfo?: ManagersConnectionToPageInfoResolver<TParent>;
    edges?: ManagersConnectionToEdgesResolver<TParent>;
    nodes?: ManagersConnectionToNodesResolver<TParent>;
    totalCount?: ManagersConnectionToTotalCountResolver<TParent>;
}
export interface ManagersConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ManagersConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ManagersConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ManagersConnectionToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IManagersEdgeTypeResolver<TParent = any> {
    cursor?: ManagersEdgeToCursorResolver<TParent>;
    node?: ManagersEdgeToNodeResolver<TParent>;
}
export interface ManagersEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ManagersEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPurchaseCollectionSegmentTypeResolver<TParent = any> {
    items?: PurchaseCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: PurchaseCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: PurchaseCollectionSegmentToTotalCountResolver<TParent>;
}
export interface PurchaseCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStoresConnectionTypeResolver<TParent = any> {
    pageInfo?: StoresConnectionToPageInfoResolver<TParent>;
    edges?: StoresConnectionToEdgesResolver<TParent>;
    nodes?: StoresConnectionToNodesResolver<TParent>;
    totalCount?: StoresConnectionToTotalCountResolver<TParent>;
}
export interface StoresConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoresConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoresConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoresConnectionToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStoresEdgeTypeResolver<TParent = any> {
    cursor?: StoresEdgeToCursorResolver<TParent>;
    node?: StoresEdgeToNodeResolver<TParent>;
}
export interface StoresEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoresEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStoreTransfersConnectionTypeResolver<TParent = any> {
    pageInfo?: StoreTransfersConnectionToPageInfoResolver<TParent>;
    edges?: StoreTransfersConnectionToEdgesResolver<TParent>;
    nodes?: StoreTransfersConnectionToNodesResolver<TParent>;
    totalCount?: StoreTransfersConnectionToTotalCountResolver<TParent>;
}
export interface StoreTransfersConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreTransfersConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreTransfersConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreTransfersConnectionToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStoreTransfersEdgeTypeResolver<TParent = any> {
    cursor?: StoreTransfersEdgeToCursorResolver<TParent>;
    node?: StoreTransfersEdgeToNodeResolver<TParent>;
}
export interface StoreTransfersEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StoreTransfersEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDrugCollectionSegmentTypeResolver<TParent = any> {
    items?: DrugCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: DrugCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: DrugCollectionSegmentToTotalCountResolver<TParent>;
}
export interface DrugCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DrugCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DrugCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDrugTypeResolver<TParent = any> {
    ndcUpcHri?: DrugToNdcUpcHriResolver<TParent>;
    prodDescAbbrev?: DrugToProdDescAbbrevResolver<TParent>;
    prodName?: DrugToProdNameResolver<TParent>;
}
export interface DrugToNdcUpcHriResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DrugToProdDescAbbrevResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DrugToProdNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICarrierTypeResolver<TParent = any> {
    carrierCode?: CarrierToCarrierCodeResolver<TParent>;
    carrierName?: CarrierToCarrierNameResolver<TParent>;
}
export interface CarrierToCarrierCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CarrierToCarrierNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IGroupResponseTypeResolver<TParent = any> {
    groupItemList?: GroupResponseToGroupItemListResolver<TParent>;
}
export interface GroupResponseToGroupItemListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IGroupItemTypeResolver<TParent = any> {
    groupItems?: GroupItemToGroupItemsResolver<TParent>;
}
export interface GroupItemToGroupItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEmployerTypeResolver<TParent = any> {
    carrierCode?: EmployerToCarrierCodeResolver<TParent>;
    employerName?: EmployerToEmployerNameResolver<TParent>;
    groupNum?: EmployerToGroupNumResolver<TParent>;
    orgCode?: EmployerToOrgCodeResolver<TParent>;
}
export interface EmployerToCarrierCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EmployerToEmployerNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EmployerToGroupNumResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EmployerToOrgCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPharmacyRadiusResponseTypeResolver<TParent = any> {
    pharmacy?: PharmacyRadiusResponseToPharmacyResolver<TParent>;
    pricing?: PharmacyRadiusResponseToPricingResolver<TParent>;
}
export interface PharmacyRadiusResponseToPharmacyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PharmacyRadiusResponseToPricingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPharmacyTypeResolver<TParent = any> {
    npi?: PharmacyToNpiResolver<TParent>;
    nabp?: PharmacyToNabpResolver<TParent>;
    affiliationCode?: PharmacyToAffiliationCodeResolver<TParent>;
    name?: PharmacyToNameResolver<TParent>;
    address1?: PharmacyToAddress1Resolver<TParent>;
    address2?: PharmacyToAddress2Resolver<TParent>;
    city?: PharmacyToCityResolver<TParent>;
    state?: PharmacyToStateResolver<TParent>;
    zip?: PharmacyToZipResolver<TParent>;
    phone?: PharmacyToPhoneResolver<TParent>;
    longitude?: PharmacyToLongitudeResolver<TParent>;
    latitude?: PharmacyToLatitudeResolver<TParent>;
}
export interface PharmacyToNpiResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PharmacyToNabpResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PharmacyToAffiliationCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PharmacyToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PharmacyToAddress1Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PharmacyToAddress2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PharmacyToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PharmacyToStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PharmacyToZipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PharmacyToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PharmacyToLongitudeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PharmacyToLatitudeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPricingTypeResolver<TParent = any> {
    requestId?: PricingToRequestIdResolver<TParent>;
    status?: PricingToStatusResolver<TParent>;
    gpi?: PricingToGpiResolver<TParent>;
    unitCost?: PricingToUnitCostResolver<TParent>;
    dAWDifference?: PricingToDAWDifferenceResolver<TParent>;
    patientPay?: PricingToPatientPayResolver<TParent>;
    totalPay?: PricingToTotalPayResolver<TParent>;
    planPay?: PricingToPlanPayResolver<TParent>;
    processingFee?: PricingToProcessingFeeResolver<TParent>;
    dispensingFee?: PricingToDispensingFeeResolver<TParent>;
    incentiveFee?: PricingToIncentiveFeeResolver<TParent>;
    copay?: PricingToCopayResolver<TParent>;
    clientBilled?: PricingToClientBilledResolver<TParent>;
    marginApplied?: PricingToMarginAppliedResolver<TParent>;
    fQMessage?: PricingToFQMessageResolver<TParent>;
    f4Message?: PricingToF4MessageResolver<TParent>;
    benefitCap?: PricingToBenefitCapResolver<TParent>;
    deductible?: PricingToDeductibleResolver<TParent>;
    mOOP?: PricingToMOOPResolver<TParent>;
    patientTax?: PricingToPatientTaxResolver<TParent>;
    sellTax?: PricingToSellTaxResolver<TParent>;
    buyTax?: PricingToBuyTaxResolver<TParent>;
    pharmacyFee?: PricingToPharmacyFeeResolver<TParent>;
    vaccineAdminFee?: PricingToVaccineAdminFeeResolver<TParent>;
    sellDispensingFee?: PricingToSellDispensingFeeResolver<TParent>;
    buyDispensingFee?: PricingToBuyDispensingFeeResolver<TParent>;
    sellIngredientCost?: PricingToSellIngredientCostResolver<TParent>;
    buyIngredientCost?: PricingToBuyIngredientCostResolver<TParent>;
    rejectCodes?: PricingToRejectCodesResolver<TParent>;
    billCostCalculatorRuleName?: PricingToBillCostCalculatorRuleNameResolver<TParent>;
    costCalculatorRuleName?: PricingToCostCalculatorRuleNameResolver<TParent>;
    copayRuleName?: PricingToCopayRuleNameResolver<TParent>;
}
export interface PricingToRequestIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToGpiResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToUnitCostResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToDAWDifferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToPatientPayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToTotalPayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToPlanPayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToProcessingFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToDispensingFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToIncentiveFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToCopayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToClientBilledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToMarginAppliedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToFQMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToF4MessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToBenefitCapResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToMOOPResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToPatientTaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToSellTaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToBuyTaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToPharmacyFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToVaccineAdminFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToSellDispensingFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToBuyDispensingFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToSellIngredientCostResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToBuyIngredientCostResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToRejectCodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToBillCostCalculatorRuleNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToCostCalculatorRuleNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingToCopayRuleNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPharmacyResponseTypeResolver<TParent = any> {
    message?: PharmacyResponseToMessageResolver<TParent>;
    pharmacies?: PharmacyResponseToPharmaciesResolver<TParent>;
}
export interface PharmacyResponseToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PharmacyResponseToPharmaciesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISearchMemberResponseTypeResolver<TParent = any> {
    cardHolder?: SearchMemberResponseToCardHolderResolver<TParent>;
}
export interface SearchMemberResponseToCardHolderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICardHolderTypeResolver<TParent = any> {
    cHID?: CardHolderToCHIDResolver<TParent>;
    members?: CardHolderToMembersResolver<TParent>;
}
export interface CardHolderToCHIDResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardHolderToMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberInfoTypeResolver<TParent = any> {
    id?: MemberInfoToIdResolver<TParent>;
    firstName?: MemberInfoToFirstNameResolver<TParent>;
    middleName?: MemberInfoToMiddleNameResolver<TParent>;
    lastName?: MemberInfoToLastNameResolver<TParent>;
    dOB?: MemberInfoToDOBResolver<TParent>;
    personCode?: MemberInfoToPersonCodeResolver<TParent>;
    sSN?: MemberInfoToSSNResolver<TParent>;
    genderCode?: MemberInfoToGenderCodeResolver<TParent>;
    address1?: MemberInfoToAddress1Resolver<TParent>;
    address2?: MemberInfoToAddress2Resolver<TParent>;
    city?: MemberInfoToCityResolver<TParent>;
    state?: MemberInfoToStateResolver<TParent>;
    zipCode?: MemberInfoToZipCodeResolver<TParent>;
    homePhone?: MemberInfoToHomePhoneResolver<TParent>;
    workPhone?: MemberInfoToWorkPhoneResolver<TParent>;
    mobilePhone?: MemberInfoToMobilePhoneResolver<TParent>;
    email?: MemberInfoToEmailResolver<TParent>;
    alternateID?: MemberInfoToAlternateIDResolver<TParent>;
    previousID?: MemberInfoToPreviousIDResolver<TParent>;
    relationshipCode?: MemberInfoToRelationshipCodeResolver<TParent>;
    locationCode?: MemberInfoToLocationCodeResolver<TParent>;
    pCPNPI?: MemberInfoToPCPNPIResolver<TParent>;
    pCPPhone?: MemberInfoToPCPPhoneResolver<TParent>;
    pCPFax?: MemberInfoToPCPFaxResolver<TParent>;
    group?: MemberInfoToGroupResolver<TParent>;
    benefitSpending?: MemberInfoToBenefitSpendingResolver<TParent>;
}
export interface MemberInfoToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToMiddleNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToDOBResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToPersonCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToSSNResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToGenderCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToAddress1Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToAddress2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToZipCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToHomePhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToWorkPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToMobilePhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToAlternateIDResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToPreviousIDResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToRelationshipCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToLocationCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToPCPNPIResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToPCPPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToPCPFaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberInfoToBenefitSpendingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface Iblog_GroupTypeResolver<TParent = any> {
    id?: blog_GroupToIdResolver<TParent>;
    groupName?: blog_GroupToGroupNameResolver<TParent>;
    groupNumber?: blog_GroupToGroupNumberResolver<TParent>;
    benefitYearStartDay?: blog_GroupToBenefitYearStartDayResolver<TParent>;
    benefitYearStartMonth?: blog_GroupToBenefitYearStartMonthResolver<TParent>;
    startDateTime?: blog_GroupToStartDateTimeResolver<TParent>;
    endDateTime?: blog_GroupToEndDateTimeResolver<TParent>;
    priorYearQ4CarryOverDeductible?: blog_GroupToPriorYearQ4CarryOverDeductibleResolver<TParent>;
    priorYearQ4CarryOverMOOP?: blog_GroupToPriorYearQ4CarryOverMOOPResolver<TParent>;
    carrierCode?: blog_GroupToCarrierCodeResolver<TParent>;
    coverageType?: blog_GroupToCoverageTypeResolver<TParent>;
}
export interface blog_GroupToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface blog_GroupToGroupNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface blog_GroupToGroupNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface blog_GroupToBenefitYearStartDayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface blog_GroupToBenefitYearStartMonthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface blog_GroupToStartDateTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface blog_GroupToEndDateTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface blog_GroupToPriorYearQ4CarryOverDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface blog_GroupToPriorYearQ4CarryOverMOOPResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface blog_GroupToCarrierCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface blog_GroupToCoverageTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBenefitSpendingTypeResolver<TParent = any> {
    individualDeductibleSpend?: BenefitSpendingToIndividualDeductibleSpendResolver<TParent>;
    familyDeductibleSpend?: BenefitSpendingToFamilyDeductibleSpendResolver<TParent>;
    individualMOOPSpend?: BenefitSpendingToIndividualMOOPSpendResolver<TParent>;
    familyMOOPSpend?: BenefitSpendingToFamilyMOOPSpendResolver<TParent>;
    individualBenefitCapSpend?: BenefitSpendingToIndividualBenefitCapSpendResolver<TParent>;
    familyBenefitCapSpend?: BenefitSpendingToFamilyBenefitCapSpendResolver<TParent>;
    individualSpecialCapSpend?: BenefitSpendingToIndividualSpecialCapSpendResolver<TParent>;
    familySpecialCapSpend?: BenefitSpendingToFamilySpecialCapSpendResolver<TParent>;
    plus1DeductibleSpend?: BenefitSpendingToPlus1DeductibleSpendResolver<TParent>;
    plus1BenefitCapSpend?: BenefitSpendingToPlus1BenefitCapSpendResolver<TParent>;
    plus1MOOPSpend?: BenefitSpendingToPlus1MOOPSpendResolver<TParent>;
    hasIndividualDeductibleBeenMet?: BenefitSpendingToHasIndividualDeductibleBeenMetResolver<TParent>;
    hasFamilyDeductibleBeenMet?: BenefitSpendingToHasFamilyDeductibleBeenMetResolver<TParent>;
    hasIndividualOOPMaxBeenMet?: BenefitSpendingToHasIndividualOOPMaxBeenMetResolver<TParent>;
    hasFamilyOOPMaxBeenMet?: BenefitSpendingToHasFamilyOOPMaxBeenMetResolver<TParent>;
    hasIndividualBenefitCapBeenMet?: BenefitSpendingToHasIndividualBenefitCapBeenMetResolver<TParent>;
    hasFamilyBenefitCapBeenMet?: BenefitSpendingToHasFamilyBenefitCapBeenMetResolver<TParent>;
    hasIndividualSpecialCapBeenMet?: BenefitSpendingToHasIndividualSpecialCapBeenMetResolver<TParent>;
    hasFamilySpecialCapBeenMet?: BenefitSpendingToHasFamilySpecialCapBeenMetResolver<TParent>;
    plus1MOOPBenefitCapSpend?: BenefitSpendingToPlus1MOOPBenefitCapSpendResolver<TParent>;
}
export interface BenefitSpendingToIndividualDeductibleSpendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BenefitSpendingToFamilyDeductibleSpendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BenefitSpendingToIndividualMOOPSpendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BenefitSpendingToFamilyMOOPSpendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BenefitSpendingToIndividualBenefitCapSpendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BenefitSpendingToFamilyBenefitCapSpendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BenefitSpendingToIndividualSpecialCapSpendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BenefitSpendingToFamilySpecialCapSpendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BenefitSpendingToPlus1DeductibleSpendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BenefitSpendingToPlus1BenefitCapSpendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BenefitSpendingToPlus1MOOPSpendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BenefitSpendingToHasIndividualDeductibleBeenMetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BenefitSpendingToHasFamilyDeductibleBeenMetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BenefitSpendingToHasIndividualOOPMaxBeenMetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BenefitSpendingToHasFamilyOOPMaxBeenMetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BenefitSpendingToHasIndividualBenefitCapBeenMetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BenefitSpendingToHasFamilyBenefitCapBeenMetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BenefitSpendingToHasIndividualSpecialCapBeenMetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BenefitSpendingToHasFamilySpecialCapBeenMetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BenefitSpendingToPlus1MOOPBenefitCapSpendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPricingDrugTypeResolver<TParent = any> {
    drug?: PricingDrugToDrugResolver<TParent>;
    pharmacyRadiusPricing?: PricingDrugToPharmacyRadiusPricingResolver<TParent>;
}
export interface PricingDrugToDrugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PricingDrugToPharmacyRadiusPricingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPharmacyRadiusPricingTypeResolver<TParent = any> {
    message?: PharmacyRadiusPricingToMessageResolver<TParent>;
    response?: PharmacyRadiusPricingToResponseResolver<TParent>;
}
export interface PharmacyRadiusPricingToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PharmacyRadiusPricingToResponseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ITransactionTypeResolver<TParent = any> {
    clientCode?: TransactionToClientCodeResolver<TParent>;
    planCode?: TransactionToPlanCodeResolver<TParent>;
    memberId?: TransactionToMemberIdResolver<TParent>;
    externalGroupId?: TransactionToExternalGroupIdResolver<TParent>;
    firstName?: TransactionToFirstNameResolver<TParent>;
    lastName?: TransactionToLastNameResolver<TParent>;
    dateOfBirth?: TransactionToDateOfBirthResolver<TParent>;
    gender?: TransactionToGenderResolver<TParent>;
    labelName?: TransactionToLabelNameResolver<TParent>;
    nDC?: TransactionToNDCResolver<TParent>;
    quantity?: TransactionToQuantityResolver<TParent>;
    daysSupply?: TransactionToDaysSupplyResolver<TParent>;
    pharmacyName?: TransactionToPharmacyNameResolver<TParent>;
    prescriberName?: TransactionToPrescriberNameResolver<TParent>;
    memberKey?: TransactionToMemberKeyResolver<TParent>;
    personCode?: TransactionToPersonCodeResolver<TParent>;
    nABP?: TransactionToNABPResolver<TParent>;
}
export interface TransactionToClientCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TransactionToPlanCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TransactionToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TransactionToExternalGroupIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TransactionToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TransactionToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TransactionToDateOfBirthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TransactionToGenderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TransactionToLabelNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TransactionToNDCResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TransactionToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TransactionToDaysSupplyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TransactionToPharmacyNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TransactionToPrescriberNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TransactionToMemberKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TransactionToPersonCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TransactionToNABPResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMenuTypeResolver<TParent = any> {
    id?: MenuToIdResolver<TParent>;
    name_for_guest?: MenuToName_for_guestResolver<TParent>;
    combine_into_id?: MenuToCombine_into_idResolver<TParent>;
    last_modified?: MenuToLast_modifiedResolver<TParent>;
    display_position?: MenuToDisplay_positionResolver<TParent>;
    menu_headings?: MenuToMenu_headingsResolver<TParent>;
    menu_items?: MenuToMenu_itemsResolver<TParent>;
}
export interface MenuToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuToName_for_guestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuToCombine_into_idResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuToLast_modifiedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuToDisplay_positionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuToMenu_headingsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuToMenu_itemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMenuHeadingTypeResolver<TParent = any> {
    id?: MenuHeadingToIdResolver<TParent>;
    heading_name?: MenuHeadingToHeading_nameResolver<TParent>;
    display_position?: MenuHeadingToDisplay_positionResolver<TParent>;
}
export interface MenuHeadingToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuHeadingToHeading_nameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuHeadingToDisplay_positionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMenuItemTypeResolver<TParent = any> {
    id?: MenuItemToIdResolver<TParent>;
    display_position?: MenuItemToDisplay_positionResolver<TParent>;
    image_url?: MenuItemToImage_urlResolver<TParent>;
    image_on_front_page?: MenuItemToImage_on_front_pageResolver<TParent>;
    name_for_guest?: MenuItemToName_for_guestResolver<TParent>;
    description?: MenuItemToDescriptionResolver<TParent>;
    tax_cents?: MenuItemToTax_centsResolver<TParent>;
    price_string?: MenuItemToPrice_stringResolver<TParent>;
    pretax_cents?: MenuItemToPretax_centsResolver<TParent>;
    tags?: MenuItemToTagsResolver<TParent>;
    special_instructions_config?: MenuItemToSpecial_instructions_configResolver<TParent>;
    most_loved?: MenuItemToMost_lovedResolver<TParent>;
    menu_heading_id?: MenuItemToMenu_heading_idResolver<TParent>;
    in_stock?: MenuItemToIn_stockResolver<TParent>;
    image_on_item_page?: MenuItemToImage_on_item_pageResolver<TParent>;
    modifiers_ids?: MenuItemToModifiers_idsResolver<TParent>;
}
export interface MenuItemToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuItemToDisplay_positionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuItemToImage_urlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuItemToImage_on_front_pageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuItemToName_for_guestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuItemToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuItemToTax_centsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuItemToPrice_stringResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuItemToPretax_centsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuItemToTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuItemToSpecial_instructions_configResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuItemToMost_lovedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuItemToMenu_heading_idResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuItemToIn_stockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuItemToImage_on_item_pageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MenuItemToModifiers_idsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRestaurantTypeResolver<TParent = any> {
    id?: RestaurantToIdResolver<TParent>;
    name_for_guest?: RestaurantToName_for_guestResolver<TParent>;
    name_for_admin?: RestaurantToName_for_adminResolver<TParent>;
    phone_for_guests?: RestaurantToPhone_for_guestsResolver<TParent>;
}
export interface RestaurantToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RestaurantToName_for_guestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RestaurantToName_for_adminResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RestaurantToPhone_for_guestsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ILegalTermCollectionSegmentTypeResolver<TParent = any> {
    items?: LegalTermCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: LegalTermCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: LegalTermCollectionSegmentToTotalCountResolver<TParent>;
}
export interface LegalTermCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LegalTermCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LegalTermCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ILegalTermTypeResolver<TParent = any> {
    projectId?: LegalTermToProjectIdResolver<TParent>;
    counter?: LegalTermToCounterResolver<TParent>;
    keyName?: LegalTermToKeyNameResolver<TParent>;
    title?: LegalTermToTitleResolver<TParent>;
    description?: LegalTermToDescriptionResolver<TParent>;
    id?: LegalTermToIdResolver<TParent>;
    createdAt?: LegalTermToCreatedAtResolver<TParent>;
    updatedAt?: LegalTermToUpdatedAtResolver<TParent>;
}
export interface LegalTermToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LegalTermToCounterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LegalTermToKeyNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LegalTermToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LegalTermToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LegalTermToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LegalTermToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LegalTermToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStockAlertCollectionSegmentTypeResolver<TParent = any> {
    items?: StockAlertCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: StockAlertCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: StockAlertCollectionSegmentToTotalCountResolver<TParent>;
}
export interface StockAlertCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StockAlertCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StockAlertCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPurchaseQuoteTypeResolver<TParent = any> {
    invoiceDate?: PurchaseQuoteToInvoiceDateResolver<TParent>;
    expirationDate?: PurchaseQuoteToExpirationDateResolver<TParent>;
    reference?: PurchaseQuoteToReferenceResolver<TParent>;
    branchOfficeId?: PurchaseQuoteToBranchOfficeIdResolver<TParent>;
    branchOffice?: PurchaseQuoteToBranchOfficeResolver<TParent>;
    storeId?: PurchaseQuoteToStoreIdResolver<TParent>;
    store?: PurchaseQuoteToStoreResolver<TParent>;
    sellerId?: PurchaseQuoteToSellerIdResolver<TParent>;
    customerId?: PurchaseQuoteToCustomerIdResolver<TParent>;
    comment?: PurchaseQuoteToCommentResolver<TParent>;
    products?: PurchaseQuoteToProductsResolver<TParent>;
    discount?: PurchaseQuoteToDiscountResolver<TParent>;
    subTotal?: PurchaseQuoteToSubTotalResolver<TParent>;
    taxes?: PurchaseQuoteToTaxesResolver<TParent>;
    detained?: PurchaseQuoteToDetainedResolver<TParent>;
    total?: PurchaseQuoteToTotalResolver<TParent>;
    purchaseQuoteStatus?: PurchaseQuoteToPurchaseQuoteStatusResolver<TParent>;
    projectId?: PurchaseQuoteToProjectIdResolver<TParent>;
    id?: PurchaseQuoteToIdResolver<TParent>;
    createdAt?: PurchaseQuoteToCreatedAtResolver<TParent>;
    updatedAt?: PurchaseQuoteToUpdatedAtResolver<TParent>;
}
export interface PurchaseQuoteToInvoiceDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToExpirationDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToReferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToBranchOfficeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToBranchOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToStoreIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToStoreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToSellerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToCustomerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToCommentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToSubTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToDetainedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToPurchaseQuoteStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPurchaseQuoteProductTypeResolver<TParent = any> {
    purchaseQuoteId?: PurchaseQuoteProductToPurchaseQuoteIdResolver<TParent>;
    productId?: PurchaseQuoteProductToProductIdResolver<TParent>;
    purchaseQuote?: PurchaseQuoteProductToPurchaseQuoteResolver<TParent>;
    product?: PurchaseQuoteProductToProductResolver<TParent>;
    id?: PurchaseQuoteProductToIdResolver<TParent>;
    createdAt?: PurchaseQuoteProductToCreatedAtResolver<TParent>;
    updatedAt?: PurchaseQuoteProductToUpdatedAtResolver<TParent>;
}
export interface PurchaseQuoteProductToPurchaseQuoteIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteProductToProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteProductToPurchaseQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteProductToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteProductToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteProductToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteProductToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPurchaseQuoteCollectionSegmentTypeResolver<TParent = any> {
    items?: PurchaseQuoteCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: PurchaseQuoteCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: PurchaseQuoteCollectionSegmentToTotalCountResolver<TParent>;
}
export interface PurchaseQuoteCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PurchaseQuoteCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ITaxTypeResolver<TParent = any> {
    projectId?: TaxToProjectIdResolver<TParent>;
    name?: TaxToNameResolver<TParent>;
    rate?: TaxToRateResolver<TParent>;
    id?: TaxToIdResolver<TParent>;
    createdAt?: TaxToCreatedAtResolver<TParent>;
    updatedAt?: TaxToUpdatedAtResolver<TParent>;
}
export interface TaxToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxToRateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TaxToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProductSellCollectionSegmentTypeResolver<TParent = any> {
    items?: ProductSellCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ProductSellCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ProductSellCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ProductSellCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProductSellTypeResolver<TParent = any> {
    folio?: ProductSellToFolioResolver<TParent>;
    projectId?: ProductSellToProjectIdResolver<TParent>;
    invoiceDate?: ProductSellToInvoiceDateResolver<TParent>;
    expirationDate?: ProductSellToExpirationDateResolver<TParent>;
    currencyId?: ProductSellToCurrencyIdResolver<TParent>;
    branchOfficeId?: ProductSellToBranchOfficeIdResolver<TParent>;
    branchOffice?: ProductSellToBranchOfficeResolver<TParent>;
    storeId?: ProductSellToStoreIdResolver<TParent>;
    store?: ProductSellToStoreResolver<TParent>;
    sellerId?: ProductSellToSellerIdResolver<TParent>;
    routeId?: ProductSellToRouteIdResolver<TParent>;
    customerId?: ProductSellToCustomerIdResolver<TParent>;
    socialReason?: ProductSellToSocialReasonResolver<TParent>;
    rfc?: ProductSellToRfcResolver<TParent>;
    automaticInvoicing?: ProductSellToAutomaticInvoicingResolver<TParent>;
    address?: ProductSellToAddressResolver<TParent>;
    iva?: ProductSellToIvaResolver<TParent>;
    total?: ProductSellToTotalResolver<TParent>;
    subTotal?: ProductSellToSubTotalResolver<TParent>;
    taxes?: ProductSellToTaxesResolver<TParent>;
    discount?: ProductSellToDiscountResolver<TParent>;
    products?: ProductSellToProductsResolver<TParent>;
    isActive?: ProductSellToIsActiveResolver<TParent>;
    id?: ProductSellToIdResolver<TParent>;
    createdAt?: ProductSellToCreatedAtResolver<TParent>;
    updatedAt?: ProductSellToUpdatedAtResolver<TParent>;
}
export interface ProductSellToFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToInvoiceDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToExpirationDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToCurrencyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToBranchOfficeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToBranchOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToStoreIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToStoreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToSellerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToRouteIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToCustomerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToSocialReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToRfcResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToAutomaticInvoicingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToIvaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToSubTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProductSellItemTypeResolver<TParent = any> {
    productSellId?: ProductSellItemToProductSellIdResolver<TParent>;
    productSell?: ProductSellItemToProductSellResolver<TParent>;
    quantity?: ProductSellItemToQuantityResolver<TParent>;
    productId?: ProductSellItemToProductIdResolver<TParent>;
    product?: ProductSellItemToProductResolver<TParent>;
    priceId?: ProductSellItemToPriceIdResolver<TParent>;
    discount?: ProductSellItemToDiscountResolver<TParent>;
    finalPrice?: ProductSellItemToFinalPriceResolver<TParent>;
    id?: ProductSellItemToIdResolver<TParent>;
    createdAt?: ProductSellItemToCreatedAtResolver<TParent>;
    updatedAt?: ProductSellItemToUpdatedAtResolver<TParent>;
}
export interface ProductSellItemToProductSellIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellItemToProductSellResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellItemToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellItemToProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellItemToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellItemToPriceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellItemToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellItemToFinalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellItemToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellItemToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductSellItemToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRouteCollectionSegmentTypeResolver<TParent = any> {
    items?: RouteCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: RouteCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: RouteCollectionSegmentToTotalCountResolver<TParent>;
}
export interface RouteCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRouteTypeResolver<TParent = any> {
    projectId?: RouteToProjectIdResolver<TParent>;
    key?: RouteToKeyResolver<TParent>;
    title?: RouteToTitleResolver<TParent>;
    description?: RouteToDescriptionResolver<TParent>;
    branchOfficeId?: RouteToBranchOfficeIdResolver<TParent>;
    routeType?: RouteToRouteTypeResolver<TParent>;
    travelDays?: RouteToTravelDaysResolver<TParent>;
    beginningDate?: RouteToBeginningDateResolver<TParent>;
    sellers?: RouteToSellersResolver<TParent>;
    customers?: RouteToCustomersResolver<TParent>;
    itineraries?: RouteToItinerariesResolver<TParent>;
    id?: RouteToIdResolver<TParent>;
    createdAt?: RouteToCreatedAtResolver<TParent>;
    updatedAt?: RouteToUpdatedAtResolver<TParent>;
}
export interface RouteToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteToBranchOfficeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteToRouteTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteToTravelDaysResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteToBeginningDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteToSellersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteToCustomersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteToItinerariesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRouteSellerTypeResolver<TParent = any> {
    projectId?: RouteSellerToProjectIdResolver<TParent>;
    routeId?: RouteSellerToRouteIdResolver<TParent>;
    route?: RouteSellerToRouteResolver<TParent>;
    key?: RouteSellerToKeyResolver<TParent>;
    branchOfficeId?: RouteSellerToBranchOfficeIdResolver<TParent>;
    branchOffice?: RouteSellerToBranchOfficeResolver<TParent>;
    storeId?: RouteSellerToStoreIdResolver<TParent>;
    store?: RouteSellerToStoreResolver<TParent>;
    sellerId?: RouteSellerToSellerIdResolver<TParent>;
    id?: RouteSellerToIdResolver<TParent>;
    createdAt?: RouteSellerToCreatedAtResolver<TParent>;
    updatedAt?: RouteSellerToUpdatedAtResolver<TParent>;
}
export interface RouteSellerToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteSellerToRouteIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteSellerToRouteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteSellerToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteSellerToBranchOfficeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteSellerToBranchOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteSellerToStoreIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteSellerToStoreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteSellerToSellerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteSellerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteSellerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteSellerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRouteCustomerTypeResolver<TParent = any> {
    projectId?: RouteCustomerToProjectIdResolver<TParent>;
    routeId?: RouteCustomerToRouteIdResolver<TParent>;
    route?: RouteCustomerToRouteResolver<TParent>;
    customerId?: RouteCustomerToCustomerIdResolver<TParent>;
    address?: RouteCustomerToAddressResolver<TParent>;
    id?: RouteCustomerToIdResolver<TParent>;
    createdAt?: RouteCustomerToCreatedAtResolver<TParent>;
    updatedAt?: RouteCustomerToUpdatedAtResolver<TParent>;
}
export interface RouteCustomerToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteCustomerToRouteIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteCustomerToRouteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteCustomerToCustomerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteCustomerToAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteCustomerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteCustomerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteCustomerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRouteItineraryTypeResolver<TParent = any> {
    routeId?: RouteItineraryToRouteIdResolver<TParent>;
    route?: RouteItineraryToRouteResolver<TParent>;
    customerId?: RouteItineraryToCustomerIdResolver<TParent>;
    description?: RouteItineraryToDescriptionResolver<TParent>;
    address?: RouteItineraryToAddressResolver<TParent>;
    id?: RouteItineraryToIdResolver<TParent>;
    createdAt?: RouteItineraryToCreatedAtResolver<TParent>;
    updatedAt?: RouteItineraryToUpdatedAtResolver<TParent>;
}
export interface RouteItineraryToRouteIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteItineraryToRouteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteItineraryToCustomerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteItineraryToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteItineraryToAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteItineraryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteItineraryToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RouteItineraryToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMessageFixTypeResolver<TParent = any> {
    value?: MessageFixToValueResolver<TParent>;
}
export interface MessageFixToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IScheduleManagerDtoTypeResolver<TParent = any> {
    scheduleManager?: ScheduleManagerDtoToScheduleManagerResolver<TParent>;
    schedules?: ScheduleManagerDtoToSchedulesResolver<TParent>;
}
export interface ScheduleManagerDtoToScheduleManagerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ScheduleManagerDtoToSchedulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IScheduleManagerTypeResolver<TParent = any> {
    projectId?: ScheduleManagerToProjectIdResolver<TParent>;
    memberId?: ScheduleManagerToMemberIdResolver<TParent>;
    eventTypeId?: ScheduleManagerToEventTypeIdResolver<TParent>;
    eventType?: ScheduleManagerToEventTypeResolver<TParent>;
    schedules?: ScheduleManagerToSchedulesResolver<TParent>;
    id?: ScheduleManagerToIdResolver<TParent>;
    createdAt?: ScheduleManagerToCreatedAtResolver<TParent>;
    updatedAt?: ScheduleManagerToUpdatedAtResolver<TParent>;
}
export interface ScheduleManagerToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ScheduleManagerToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ScheduleManagerToEventTypeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ScheduleManagerToEventTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ScheduleManagerToSchedulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ScheduleManagerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ScheduleManagerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ScheduleManagerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEventTypeTypeResolver<TParent = any> {
    projectId?: EventTypeToProjectIdResolver<TParent>;
    name?: EventTypeToNameResolver<TParent>;
    price?: EventTypeToPriceResolver<TParent>;
    subEventTypes?: EventTypeToSubEventTypesResolver<TParent>;
    image?: EventTypeToImageResolver<TParent>;
    description?: EventTypeToDescriptionResolver<TParent>;
    id?: EventTypeToIdResolver<TParent>;
    createdAt?: EventTypeToCreatedAtResolver<TParent>;
    updatedAt?: EventTypeToUpdatedAtResolver<TParent>;
}
export interface EventTypeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventTypeToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventTypeToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventTypeToSubEventTypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventTypeToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventTypeToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventTypeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventTypeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventTypeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISubEventTypeTypeResolver<TParent = any> {
    name?: SubEventTypeToNameResolver<TParent>;
    price?: SubEventTypeToPriceResolver<TParent>;
    eventTypes?: SubEventTypeToEventTypesResolver<TParent>;
    id?: SubEventTypeToIdResolver<TParent>;
    createdAt?: SubEventTypeToCreatedAtResolver<TParent>;
    updatedAt?: SubEventTypeToUpdatedAtResolver<TParent>;
}
export interface SubEventTypeToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SubEventTypeToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SubEventTypeToEventTypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SubEventTypeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SubEventTypeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SubEventTypeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IScheduleTypeResolver<TParent = any> {
    scheduleManagerId?: ScheduleToScheduleManagerIdResolver<TParent>;
    scheduleManager?: ScheduleToScheduleManagerResolver<TParent>;
    day?: ScheduleToDayResolver<TParent>;
    turn?: ScheduleToTurnResolver<TParent>;
    weekDay?: ScheduleToWeekDayResolver<TParent>;
    id?: ScheduleToIdResolver<TParent>;
    createdAt?: ScheduleToCreatedAtResolver<TParent>;
    updatedAt?: ScheduleToUpdatedAtResolver<TParent>;
}
export interface ScheduleToScheduleManagerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ScheduleToScheduleManagerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ScheduleToDayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ScheduleToTurnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ScheduleToWeekDayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ScheduleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ScheduleToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ScheduleToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ITurnTypeResolver<TParent = any> {
    scheduleId?: TurnToScheduleIdResolver<TParent>;
    schedule?: TurnToScheduleResolver<TParent>;
    timeEnd?: TurnToTimeEndResolver<TParent>;
    timeStart?: TurnToTimeStartResolver<TParent>;
    timeStartString?: TurnToTimeStartStringResolver<TParent>;
    timeEndString?: TurnToTimeEndStringResolver<TParent>;
    isActive?: TurnToIsActiveResolver<TParent>;
    id?: TurnToIdResolver<TParent>;
    createdAt?: TurnToCreatedAtResolver<TParent>;
    updatedAt?: TurnToUpdatedAtResolver<TParent>;
}
export interface TurnToScheduleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TurnToScheduleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TurnToTimeEndResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TurnToTimeStartResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TurnToTimeStartStringResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TurnToTimeEndStringResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TurnToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TurnToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TurnToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TurnToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEventTypeResolver<TParent = any> {
    projectId?: EventToProjectIdResolver<TParent>;
    memberId?: EventToMemberIdResolver<TParent>;
    title?: EventToTitleResolver<TParent>;
    location?: EventToLocationResolver<TParent>;
    color?: EventToColorResolver<TParent>;
    description?: EventToDescriptionResolver<TParent>;
    file?: EventToFileResolver<TParent>;
    roomId?: EventToRoomIdResolver<TParent>;
    eventDate?: EventToEventDateResolver<TParent>;
    finishDate?: EventToFinishDateResolver<TParent>;
    eventMode?: EventToEventModeResolver<TParent>;
    eventSessionId?: EventToEventSessionIdResolver<TParent>;
    eventSession?: EventToEventSessionResolver<TParent>;
    eventMembers?: EventToEventMembersResolver<TParent>;
    sendDetails?: EventToSendDetailsResolver<TParent>;
    sendRemember?: EventToSendRememberResolver<TParent>;
    totalPrice?: EventToTotalPriceResolver<TParent>;
    discount?: EventToDiscountResolver<TParent>;
    visibility?: EventToVisibilityResolver<TParent>;
    eventCharges?: EventToEventChargesResolver<TParent>;
    eventTypeId?: EventToEventTypeIdResolver<TParent>;
    eventType?: EventToEventTypeResolver<TParent>;
    eventStatus?: EventToEventStatusResolver<TParent>;
    isActive?: EventToIsActiveResolver<TParent>;
    id?: EventToIdResolver<TParent>;
    createdAt?: EventToCreatedAtResolver<TParent>;
    updatedAt?: EventToUpdatedAtResolver<TParent>;
    member?: EventToMemberResolver<TParent>;
    listDiagnostic?: EventToListDiagnosticResolver<TParent>;
}
export interface EventToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToColorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToRoomIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToEventDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToFinishDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToEventModeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToEventSessionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToEventSessionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToEventMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToSendDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToSendRememberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToTotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToVisibilityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToEventChargesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToEventTypeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToEventTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToEventStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventToListDiagnosticResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEventSessionTypeResolver<TParent = any> {
    projectId?: EventSessionToProjectIdResolver<TParent>;
    title?: EventSessionToTitleResolver<TParent>;
    image?: EventSessionToImageResolver<TParent>;
    price?: EventSessionToPriceResolver<TParent>;
    description?: EventSessionToDescriptionResolver<TParent>;
    duration?: EventSessionToDurationResolver<TParent>;
    eventMode?: EventSessionToEventModeResolver<TParent>;
    event?: EventSessionToEventResolver<TParent>;
    id?: EventSessionToIdResolver<TParent>;
    createdAt?: EventSessionToCreatedAtResolver<TParent>;
    updatedAt?: EventSessionToUpdatedAtResolver<TParent>;
}
export interface EventSessionToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventSessionToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventSessionToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventSessionToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventSessionToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventSessionToDurationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventSessionToEventModeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventSessionToEventResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventSessionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventSessionToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventSessionToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEventMemberTypeResolver<TParent = any> {
    eventId?: EventMemberToEventIdResolver<TParent>;
    event?: EventMemberToEventResolver<TParent>;
    memberId?: EventMemberToMemberIdResolver<TParent>;
    id?: EventMemberToIdResolver<TParent>;
    createdAt?: EventMemberToCreatedAtResolver<TParent>;
    updatedAt?: EventMemberToUpdatedAtResolver<TParent>;
    member?: EventMemberToMemberResolver<TParent>;
}
export interface EventMemberToEventIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventMemberToEventResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventMemberToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventMemberToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventMemberToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventMemberToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventMemberToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEventChargeTypeResolver<TParent = any> {
    eventId?: EventChargeToEventIdResolver<TParent>;
    event?: EventChargeToEventResolver<TParent>;
    price?: EventChargeToPriceResolver<TParent>;
    description?: EventChargeToDescriptionResolver<TParent>;
    id?: EventChargeToIdResolver<TParent>;
    createdAt?: EventChargeToCreatedAtResolver<TParent>;
    updatedAt?: EventChargeToUpdatedAtResolver<TParent>;
}
export interface EventChargeToEventIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventChargeToEventResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventChargeToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventChargeToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventChargeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventChargeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventChargeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDiagnosticTypeResolver<TParent = any> {
    medicines?: DiagnosticToMedicinesResolver<TParent>;
    eventId?: DiagnosticToEventIdResolver<TParent>;
    projectId?: DiagnosticToProjectIdResolver<TParent>;
    memberId?: DiagnosticToMemberIdResolver<TParent>;
    content?: DiagnosticToContentResolver<TParent>;
    isVisible?: DiagnosticToIsVisibleResolver<TParent>;
    id?: DiagnosticToIdResolver<TParent>;
    createdAt?: DiagnosticToCreatedAtResolver<TParent>;
    updatedAt?: DiagnosticToUpdatedAtResolver<TParent>;
}
export interface DiagnosticToMedicinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DiagnosticToEventIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DiagnosticToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DiagnosticToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DiagnosticToContentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DiagnosticToIsVisibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DiagnosticToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DiagnosticToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DiagnosticToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMedicineTypeResolver<TParent = any> {
    projectId?: MedicineToProjectIdResolver<TParent>;
    memberId?: MedicineToMemberIdResolver<TParent>;
    eventId?: MedicineToEventIdResolver<TParent>;
    medicineName?: MedicineToMedicineNameResolver<TParent>;
    take?: MedicineToTakeResolver<TParent>;
    frecuency?: MedicineToFrecuencyResolver<TParent>;
    duration?: MedicineToDurationResolver<TParent>;
    isVisible?: MedicineToIsVisibleResolver<TParent>;
    position?: MedicineToPositionResolver<TParent>;
    id?: MedicineToIdResolver<TParent>;
    createdAt?: MedicineToCreatedAtResolver<TParent>;
    updatedAt?: MedicineToUpdatedAtResolver<TParent>;
}
export interface MedicineToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicineToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicineToEventIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicineToMedicineNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicineToTakeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicineToFrecuencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicineToDurationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicineToIsVisibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicineToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicineToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicineToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicineToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEventCollectionSegmentTypeResolver<TParent = any> {
    items?: EventCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: EventCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: EventCollectionSegmentToTotalCountResolver<TParent>;
}
export interface EventCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IResourceQuoteCollectionSegmentTypeResolver<TParent = any> {
    items?: ResourceQuoteCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ResourceQuoteCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ResourceQuoteCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ResourceQuoteCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IResourceQuoteDetailCollectionSegmentTypeResolver<TParent = any> {
    items?: ResourceQuoteDetailCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ResourceQuoteDetailCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ResourceQuoteDetailCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ResourceQuoteDetailCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResourceQuoteDetailCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProposalCollectionSegmentTypeResolver<TParent = any> {
    items?: ProposalCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ProposalCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ProposalCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ProposalCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProposalCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICollaboratorCollectionSegmentTypeResolver<TParent = any> {
    items?: CollaboratorCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: CollaboratorCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: CollaboratorCollectionSegmentToTotalCountResolver<TParent>;
}
export interface CollaboratorCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICollaboratorHoursCollectionSegmentTypeResolver<TParent = any> {
    items?: CollaboratorHoursCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: CollaboratorHoursCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: CollaboratorHoursCollectionSegmentToTotalCountResolver<TParent>;
}
export interface CollaboratorHoursCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorHoursCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CollaboratorHoursCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IHoursReportedDTOTypeResolver<TParent = any> {
    totalHours?: HoursReportedDTOToTotalHoursResolver<TParent>;
    totalReportedHours?: HoursReportedDTOToTotalReportedHoursResolver<TParent>;
    projectsActive?: HoursReportedDTOToProjectsActiveResolver<TParent>;
}
export interface HoursReportedDTOToTotalHoursResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HoursReportedDTOToTotalReportedHoursResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HoursReportedDTOToProjectsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IConfigurationTemplateTypeResolver<TParent = any> {
    projectId?: ConfigurationTemplateToProjectIdResolver<TParent>;
    templateType?: ConfigurationTemplateToTemplateTypeResolver<TParent>;
    config?: ConfigurationTemplateToConfigResolver<TParent>;
    id?: ConfigurationTemplateToIdResolver<TParent>;
    createdAt?: ConfigurationTemplateToCreatedAtResolver<TParent>;
    updatedAt?: ConfigurationTemplateToUpdatedAtResolver<TParent>;
}
export interface ConfigurationTemplateToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConfigurationTemplateToTemplateTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConfigurationTemplateToConfigResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConfigurationTemplateToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConfigurationTemplateToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConfigurationTemplateToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IComponentTypeResolver<TParent = any> {
    keyName?: ComponentToKeyNameResolver<TParent>;
    services?: ComponentToServicesResolver<TParent>;
    description?: ComponentToDescriptionResolver<TParent>;
    type?: ComponentToTypeResolver<TParent>;
    id?: ComponentToIdResolver<TParent>;
    createdAt?: ComponentToCreatedAtResolver<TParent>;
    updatedAt?: ComponentToUpdatedAtResolver<TParent>;
}
export interface ComponentToKeyNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComponentToServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComponentToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComponentToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComponentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComponentToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComponentToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IWebsitePageTypeResolver<TParent = any> {
    projectId?: WebsitePageToProjectIdResolver<TParent>;
    name?: WebsitePageToNameResolver<TParent>;
    url?: WebsitePageToUrlResolver<TParent>;
    seoWebSitePage?: WebsitePageToSeoWebSitePageResolver<TParent>;
    description?: WebsitePageToDescriptionResolver<TParent>;
    isActive?: WebsitePageToIsActiveResolver<TParent>;
    scriptHead?: WebsitePageToScriptHeadResolver<TParent>;
    scriptFooter?: WebsitePageToScriptFooterResolver<TParent>;
    position?: WebsitePageToPositionResolver<TParent>;
    websitePageComponents?: WebsitePageToWebsitePageComponentsResolver<TParent>;
    websitePageSeos?: WebsitePageToWebsitePageSeosResolver<TParent>;
    id?: WebsitePageToIdResolver<TParent>;
    createdAt?: WebsitePageToCreatedAtResolver<TParent>;
    updatedAt?: WebsitePageToUpdatedAtResolver<TParent>;
}
export interface WebsitePageToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageToSeoWebSitePageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageToScriptHeadResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageToScriptFooterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageToWebsitePageComponentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageToWebsitePageSeosResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IWebsitePageComponentTypeResolver<TParent = any> {
    websitePageId?: WebsitePageComponentToWebsitePageIdResolver<TParent>;
    websitePage?: WebsitePageComponentToWebsitePageResolver<TParent>;
    keyName?: WebsitePageComponentToKeyNameResolver<TParent>;
    props?: WebsitePageComponentToPropsResolver<TParent>;
    position?: WebsitePageComponentToPositionResolver<TParent>;
    parentId?: WebsitePageComponentToParentIdResolver<TParent>;
    id?: WebsitePageComponentToIdResolver<TParent>;
    createdAt?: WebsitePageComponentToCreatedAtResolver<TParent>;
    updatedAt?: WebsitePageComponentToUpdatedAtResolver<TParent>;
}
export interface WebsitePageComponentToWebsitePageIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageComponentToWebsitePageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageComponentToKeyNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageComponentToPropsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageComponentToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageComponentToParentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageComponentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageComponentToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageComponentToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IWebsitePageSeoTypeResolver<TParent = any> {
    websitePageId?: WebsitePageSeoToWebsitePageIdResolver<TParent>;
    websitePage?: WebsitePageSeoToWebsitePageResolver<TParent>;
    title?: WebsitePageSeoToTitleResolver<TParent>;
    description?: WebsitePageSeoToDescriptionResolver<TParent>;
    keywords?: WebsitePageSeoToKeywordsResolver<TParent>;
    canonicalUrl?: WebsitePageSeoToCanonicalUrlResolver<TParent>;
    robots?: WebsitePageSeoToRobotsResolver<TParent>;
    googlebot?: WebsitePageSeoToGooglebotResolver<TParent>;
    author?: WebsitePageSeoToAuthorResolver<TParent>;
    language?: WebsitePageSeoToLanguageResolver<TParent>;
    twitterCard?: WebsitePageSeoToTwitterCardResolver<TParent>;
    twitterSite?: WebsitePageSeoToTwitterSiteResolver<TParent>;
    twitterCreator?: WebsitePageSeoToTwitterCreatorResolver<TParent>;
    twitterTitle?: WebsitePageSeoToTwitterTitleResolver<TParent>;
    twitterDescription?: WebsitePageSeoToTwitterDescriptionResolver<TParent>;
    twitterUrl?: WebsitePageSeoToTwitterUrlResolver<TParent>;
    twitterImageAlt?: WebsitePageSeoToTwitterImageAltResolver<TParent>;
    twitterImageTitle?: WebsitePageSeoToTwitterImageTitleResolver<TParent>;
    twitterImageWidth?: WebsitePageSeoToTwitterImageWidthResolver<TParent>;
    twitterImageHeight?: WebsitePageSeoToTwitterImageHeightResolver<TParent>;
    twitterImage?: WebsitePageSeoToTwitterImageResolver<TParent>;
    openGraphTitle?: WebsitePageSeoToOpenGraphTitleResolver<TParent>;
    openGraphDescription?: WebsitePageSeoToOpenGraphDescriptionResolver<TParent>;
    openGraphUrl?: WebsitePageSeoToOpenGraphUrlResolver<TParent>;
    openGraphImageAlt?: WebsitePageSeoToOpenGraphImageAltResolver<TParent>;
    openGraphImageTitle?: WebsitePageSeoToOpenGraphImageTitleResolver<TParent>;
    openGraphImageWidth?: WebsitePageSeoToOpenGraphImageWidthResolver<TParent>;
    openGraphImageHeight?: WebsitePageSeoToOpenGraphImageHeightResolver<TParent>;
    openGraphImage?: WebsitePageSeoToOpenGraphImageResolver<TParent>;
    openGraphType?: WebsitePageSeoToOpenGraphTypeResolver<TParent>;
    openGraphSiteName?: WebsitePageSeoToOpenGraphSiteNameResolver<TParent>;
    openGraphFacebookAppId?: WebsitePageSeoToOpenGraphFacebookAppIdResolver<TParent>;
    id?: WebsitePageSeoToIdResolver<TParent>;
    createdAt?: WebsitePageSeoToCreatedAtResolver<TParent>;
    updatedAt?: WebsitePageSeoToUpdatedAtResolver<TParent>;
}
export interface WebsitePageSeoToWebsitePageIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToWebsitePageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToKeywordsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToCanonicalUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToRobotsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToGooglebotResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToAuthorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToTwitterCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToTwitterSiteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToTwitterCreatorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToTwitterTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToTwitterDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToTwitterUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToTwitterImageAltResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToTwitterImageTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToTwitterImageWidthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToTwitterImageHeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToTwitterImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToOpenGraphTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToOpenGraphDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToOpenGraphUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToOpenGraphImageAltResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToOpenGraphImageTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToOpenGraphImageWidthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToOpenGraphImageHeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToOpenGraphImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToOpenGraphTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToOpenGraphSiteNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToOpenGraphFacebookAppIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WebsitePageSeoToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectPlanSubscriptionCollectionSegmentTypeResolver<TParent = any> {
    items?: ProjectPlanSubscriptionCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ProjectPlanSubscriptionCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ProjectPlanSubscriptionCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ProjectPlanSubscriptionCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanSubscriptionCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanSubscriptionCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBusinessCollectionSegmentTypeResolver<TParent = any> {
    items?: BusinessCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: BusinessCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: BusinessCollectionSegmentToTotalCountResolver<TParent>;
}
export interface BusinessCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBusinessTypeCollectionSegmentTypeResolver<TParent = any> {
    items?: BusinessTypeCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: BusinessTypeCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: BusinessTypeCollectionSegmentToTotalCountResolver<TParent>;
}
export interface BusinessTypeCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessTypeCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessTypeCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBusinessRuleCollectionSegmentTypeResolver<TParent = any> {
    items?: BusinessRuleCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: BusinessRuleCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: BusinessRuleCollectionSegmentToTotalCountResolver<TParent>;
}
export interface BusinessRuleCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BusinessRuleCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectPlanCollectionSegmentTypeResolver<TParent = any> {
    items?: ProjectPlanCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ProjectPlanCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ProjectPlanCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ProjectPlanCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectPlanCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ITemplateTypeResolver<TParent = any> {
    projectId?: TemplateToProjectIdResolver<TParent>;
    title?: TemplateToTitleResolver<TParent>;
    message?: TemplateToMessageResolver<TParent>;
    serviceName?: TemplateToServiceNameResolver<TParent>;
    projectRoleId?: TemplateToProjectRoleIdResolver<TParent>;
    templateType?: TemplateToTemplateTypeResolver<TParent>;
    releaseDate?: TemplateToReleaseDateResolver<TParent>;
    couponId?: TemplateToCouponIdResolver<TParent>;
    coupon?: TemplateToCouponResolver<TParent>;
    id?: TemplateToIdResolver<TParent>;
    createdAt?: TemplateToCreatedAtResolver<TParent>;
    updatedAt?: TemplateToUpdatedAtResolver<TParent>;
    projectRole?: TemplateToProjectRoleResolver<TParent>;
}
export interface TemplateToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplateToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplateToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplateToServiceNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplateToProjectRoleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplateToTemplateTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplateToReleaseDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplateToCouponIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplateToCouponResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplateToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplateToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplateToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplateToProjectRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICouponTypeResolver<TParent = any> {
    projectId?: CouponToProjectIdResolver<TParent>;
    beginingDate?: CouponToBeginingDateResolver<TParent>;
    endDate?: CouponToEndDateResolver<TParent>;
    code?: CouponToCodeResolver<TParent>;
    roleType?: CouponToRoleTypeResolver<TParent>;
    couponRuleType?: CouponToCouponRuleTypeResolver<TParent>;
    itemToApplyTo?: CouponToItemToApplyToResolver<TParent>;
    title?: CouponToTitleResolver<TParent>;
    percentage?: CouponToPercentageResolver<TParent>;
    ruleAppliesOn?: CouponToRuleAppliesOnResolver<TParent>;
    id?: CouponToIdResolver<TParent>;
    createdAt?: CouponToCreatedAtResolver<TParent>;
    updatedAt?: CouponToUpdatedAtResolver<TParent>;
}
export interface CouponToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CouponToBeginingDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CouponToEndDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CouponToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CouponToRoleTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CouponToCouponRuleTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CouponToItemToApplyToResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CouponToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CouponToPercentageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CouponToRuleAppliesOnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CouponToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CouponToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CouponToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IErrorPageTypeResolver<TParent = any> {
    projectId?: ErrorPageToProjectIdResolver<TParent>;
    page?: ErrorPageToPageResolver<TParent>;
    description?: ErrorPageToDescriptionResolver<TParent>;
    errorPageValidations?: ErrorPageToErrorPageValidationsResolver<TParent>;
    id?: ErrorPageToIdResolver<TParent>;
    createdAt?: ErrorPageToCreatedAtResolver<TParent>;
    updatedAt?: ErrorPageToUpdatedAtResolver<TParent>;
}
export interface ErrorPageToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ErrorPageToPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ErrorPageToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ErrorPageToErrorPageValidationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ErrorPageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ErrorPageToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ErrorPageToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IErrorPageValidationTypeResolver<TParent = any> {
    errorPageId?: ErrorPageValidationToErrorPageIdResolver<TParent>;
    errorPage?: ErrorPageValidationToErrorPageResolver<TParent>;
    keyName?: ErrorPageValidationToKeyNameResolver<TParent>;
    title?: ErrorPageValidationToTitleResolver<TParent>;
    textMessage?: ErrorPageValidationToTextMessageResolver<TParent>;
    textAccept?: ErrorPageValidationToTextAcceptResolver<TParent>;
    textCancel?: ErrorPageValidationToTextCancelResolver<TParent>;
    id?: ErrorPageValidationToIdResolver<TParent>;
    createdAt?: ErrorPageValidationToCreatedAtResolver<TParent>;
    updatedAt?: ErrorPageValidationToUpdatedAtResolver<TParent>;
}
export interface ErrorPageValidationToErrorPageIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ErrorPageValidationToErrorPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ErrorPageValidationToKeyNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ErrorPageValidationToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ErrorPageValidationToTextMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ErrorPageValidationToTextAcceptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ErrorPageValidationToTextCancelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ErrorPageValidationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ErrorPageValidationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ErrorPageValidationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICouponTemplateTypeResolver<TParent = any> {
    projectId?: CouponTemplateToProjectIdResolver<TParent>;
    templateId?: CouponTemplateToTemplateIdResolver<TParent>;
    couponId?: CouponTemplateToCouponIdResolver<TParent>;
    template?: CouponTemplateToTemplateResolver<TParent>;
    coupon?: CouponTemplateToCouponResolver<TParent>;
    id?: CouponTemplateToIdResolver<TParent>;
    createdAt?: CouponTemplateToCreatedAtResolver<TParent>;
    updatedAt?: CouponTemplateToUpdatedAtResolver<TParent>;
}
export interface CouponTemplateToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CouponTemplateToTemplateIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CouponTemplateToCouponIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CouponTemplateToTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CouponTemplateToCouponResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CouponTemplateToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CouponTemplateToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CouponTemplateToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDocumentCategoryCollectionSegmentTypeResolver<TParent = any> {
    items?: DocumentCategoryCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: DocumentCategoryCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: DocumentCategoryCollectionSegmentToTotalCountResolver<TParent>;
}
export interface DocumentCategoryCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentCategoryCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentCategoryCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDocumentCategoryTypeResolver<TParent = any> {
    documentCategoryDetails?: DocumentCategoryToDocumentCategoryDetailsResolver<TParent>;
    name?: DocumentCategoryToNameResolver<TParent>;
    description?: DocumentCategoryToDescriptionResolver<TParent>;
    memberId?: DocumentCategoryToMemberIdResolver<TParent>;
    projectId?: DocumentCategoryToProjectIdResolver<TParent>;
    id?: DocumentCategoryToIdResolver<TParent>;
    createdAt?: DocumentCategoryToCreatedAtResolver<TParent>;
    updatedAt?: DocumentCategoryToUpdatedAtResolver<TParent>;
}
export interface DocumentCategoryToDocumentCategoryDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentCategoryToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentCategoryToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentCategoryToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentCategoryToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentCategoryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentCategoryToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentCategoryToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDocumentCategoryDetailTypeResolver<TParent = any> {
    documentCategory?: DocumentCategoryDetailToDocumentCategoryResolver<TParent>;
    document?: DocumentCategoryDetailToDocumentResolver<TParent>;
    documentId?: DocumentCategoryDetailToDocumentIdResolver<TParent>;
    documentCategoryId?: DocumentCategoryDetailToDocumentCategoryIdResolver<TParent>;
    id?: DocumentCategoryDetailToIdResolver<TParent>;
    createdAt?: DocumentCategoryDetailToCreatedAtResolver<TParent>;
    updatedAt?: DocumentCategoryDetailToUpdatedAtResolver<TParent>;
}
export interface DocumentCategoryDetailToDocumentCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentCategoryDetailToDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentCategoryDetailToDocumentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentCategoryDetailToDocumentCategoryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentCategoryDetailToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentCategoryDetailToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentCategoryDetailToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDocumentTypeResolver<TParent = any> {
    documentTemplates?: DocumentToDocumentTemplatesResolver<TParent>;
    documentCategoryDetails?: DocumentToDocumentCategoryDetailsResolver<TParent>;
    name?: DocumentToNameResolver<TParent>;
    url?: DocumentToUrlResolver<TParent>;
    memberId?: DocumentToMemberIdResolver<TParent>;
    projectId?: DocumentToProjectIdResolver<TParent>;
    id?: DocumentToIdResolver<TParent>;
    createdAt?: DocumentToCreatedAtResolver<TParent>;
    updatedAt?: DocumentToUpdatedAtResolver<TParent>;
}
export interface DocumentToDocumentTemplatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentToDocumentCategoryDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDocumentTemplateTypeResolver<TParent = any> {
    document?: DocumentTemplateToDocumentResolver<TParent>;
    templatePages?: DocumentTemplateToTemplatePagesResolver<TParent>;
    name?: DocumentTemplateToNameResolver<TParent>;
    memberId?: DocumentTemplateToMemberIdResolver<TParent>;
    documentId?: DocumentTemplateToDocumentIdResolver<TParent>;
    id?: DocumentTemplateToIdResolver<TParent>;
    createdAt?: DocumentTemplateToCreatedAtResolver<TParent>;
    updatedAt?: DocumentTemplateToUpdatedAtResolver<TParent>;
}
export interface DocumentTemplateToDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentTemplateToTemplatePagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentTemplateToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentTemplateToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentTemplateToDocumentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentTemplateToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentTemplateToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentTemplateToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ITemplatePageTypeResolver<TParent = any> {
    documentTemplate?: TemplatePageToDocumentTemplateResolver<TParent>;
    documentTags?: TemplatePageToDocumentTagsResolver<TParent>;
    page?: TemplatePageToPageResolver<TParent>;
    url?: TemplatePageToUrlResolver<TParent>;
    templateId?: TemplatePageToTemplateIdResolver<TParent>;
    id?: TemplatePageToIdResolver<TParent>;
    createdAt?: TemplatePageToCreatedAtResolver<TParent>;
    updatedAt?: TemplatePageToUpdatedAtResolver<TParent>;
}
export interface TemplatePageToDocumentTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplatePageToDocumentTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplatePageToPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplatePageToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplatePageToTemplateIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplatePageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplatePageToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplatePageToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDocumentTagTypeResolver<TParent = any> {
    templatePage?: DocumentTagToTemplatePageResolver<TParent>;
    documentScans?: DocumentTagToDocumentScansResolver<TParent>;
    name?: DocumentTagToNameResolver<TParent>;
    height?: DocumentTagToHeightResolver<TParent>;
    width?: DocumentTagToWidthResolver<TParent>;
    verticalAxis?: DocumentTagToVerticalAxisResolver<TParent>;
    horizontalAxis?: DocumentTagToHorizontalAxisResolver<TParent>;
    templatePageId?: DocumentTagToTemplatePageIdResolver<TParent>;
    id?: DocumentTagToIdResolver<TParent>;
    createdAt?: DocumentTagToCreatedAtResolver<TParent>;
    updatedAt?: DocumentTagToUpdatedAtResolver<TParent>;
}
export interface DocumentTagToTemplatePageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentTagToDocumentScansResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentTagToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentTagToHeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentTagToWidthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentTagToVerticalAxisResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentTagToHorizontalAxisResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentTagToTemplatePageIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentTagToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentTagToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentTagToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDocumentScanTypeResolver<TParent = any> {
    documentTag?: DocumentScanToDocumentTagResolver<TParent>;
    documentRead?: DocumentScanToDocumentReadResolver<TParent>;
    value?: DocumentScanToValueResolver<TParent>;
    documentTagId?: DocumentScanToDocumentTagIdResolver<TParent>;
    documentReadId?: DocumentScanToDocumentReadIdResolver<TParent>;
    id?: DocumentScanToIdResolver<TParent>;
    createdAt?: DocumentScanToCreatedAtResolver<TParent>;
    updatedAt?: DocumentScanToUpdatedAtResolver<TParent>;
}
export interface DocumentScanToDocumentTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentScanToDocumentReadResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentScanToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentScanToDocumentTagIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentScanToDocumentReadIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentScanToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentScanToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentScanToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDocumentReadTypeResolver<TParent = any> {
    documentScans?: DocumentReadToDocumentScansResolver<TParent>;
    memberId?: DocumentReadToMemberIdResolver<TParent>;
    projectId?: DocumentReadToProjectIdResolver<TParent>;
    url?: DocumentReadToUrlResolver<TParent>;
    id?: DocumentReadToIdResolver<TParent>;
    createdAt?: DocumentReadToCreatedAtResolver<TParent>;
    updatedAt?: DocumentReadToUpdatedAtResolver<TParent>;
}
export interface DocumentReadToDocumentScansResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentReadToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentReadToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentReadToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentReadToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentReadToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentReadToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDocumentCollectionSegmentTypeResolver<TParent = any> {
    items?: DocumentCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: DocumentCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: DocumentCollectionSegmentToTotalCountResolver<TParent>;
}
export interface DocumentCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDocumentTemplateCollectionSegmentTypeResolver<TParent = any> {
    items?: DocumentTemplateCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: DocumentTemplateCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: DocumentTemplateCollectionSegmentToTotalCountResolver<TParent>;
}
export interface DocumentTemplateCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentTemplateCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentTemplateCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ITemplatePageCollectionSegmentTypeResolver<TParent = any> {
    items?: TemplatePageCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: TemplatePageCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: TemplatePageCollectionSegmentToTotalCountResolver<TParent>;
}
export interface TemplatePageCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplatePageCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TemplatePageCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDocumentReadCollectionSegmentTypeResolver<TParent = any> {
    items?: DocumentReadCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: DocumentReadCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: DocumentReadCollectionSegmentToTotalCountResolver<TParent>;
}
export interface DocumentReadCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentReadCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DocumentReadCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVideoRoomTypeResolver<TParent = any> {
    projectId?: VideoRoomToProjectIdResolver<TParent>;
    sessionId?: VideoRoomToSessionIdResolver<TParent>;
    sessionName?: VideoRoomToSessionNameResolver<TParent>;
    url?: VideoRoomToUrlResolver<TParent>;
    creatorName?: VideoRoomToCreatorNameResolver<TParent>;
    creatorEmail?: VideoRoomToCreatorEmailResolver<TParent>;
    dateScheduled?: VideoRoomToDateScheduledResolver<TParent>;
    title?: VideoRoomToTitleResolver<TParent>;
    memberId?: VideoRoomToMemberIdResolver<TParent>;
    typeVideo?: VideoRoomToTypeVideoResolver<TParent>;
    videoRoomMembers?: VideoRoomToVideoRoomMembersResolver<TParent>;
    videoRoomRecords?: VideoRoomToVideoRoomRecordsResolver<TParent>;
    id?: VideoRoomToIdResolver<TParent>;
    createdAt?: VideoRoomToCreatedAtResolver<TParent>;
    updatedAt?: VideoRoomToUpdatedAtResolver<TParent>;
}
export interface VideoRoomToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomToSessionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomToSessionNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomToCreatorNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomToCreatorEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomToDateScheduledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomToTypeVideoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomToVideoRoomMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomToVideoRoomRecordsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVideoRoomMemberTypeResolver<TParent = any> {
    videoRoomId?: VideoRoomMemberToVideoRoomIdResolver<TParent>;
    videoRoom?: VideoRoomMemberToVideoRoomResolver<TParent>;
    fullName?: VideoRoomMemberToFullNameResolver<TParent>;
    email?: VideoRoomMemberToEmailResolver<TParent>;
    photo?: VideoRoomMemberToPhotoResolver<TParent>;
    id?: VideoRoomMemberToIdResolver<TParent>;
    createdAt?: VideoRoomMemberToCreatedAtResolver<TParent>;
    updatedAt?: VideoRoomMemberToUpdatedAtResolver<TParent>;
}
export interface VideoRoomMemberToVideoRoomIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomMemberToVideoRoomResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomMemberToFullNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomMemberToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomMemberToPhotoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomMemberToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomMemberToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomMemberToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVideoRoomRecordTypeResolver<TParent = any> {
    roomName?: VideoRoomRecordToRoomNameResolver<TParent>;
    memberId?: VideoRoomRecordToMemberIdResolver<TParent>;
    status?: VideoRoomRecordToStatusResolver<TParent>;
    name?: VideoRoomRecordToNameResolver<TParent>;
    path?: VideoRoomRecordToPathResolver<TParent>;
    livekitRecordingId?: VideoRoomRecordToLivekitRecordingIdResolver<TParent>;
    videoRoomId?: VideoRoomRecordToVideoRoomIdResolver<TParent>;
    videoRoom?: VideoRoomRecordToVideoRoomResolver<TParent>;
    id?: VideoRoomRecordToIdResolver<TParent>;
    createdAt?: VideoRoomRecordToCreatedAtResolver<TParent>;
    updatedAt?: VideoRoomRecordToUpdatedAtResolver<TParent>;
}
export interface VideoRoomRecordToRoomNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomRecordToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomRecordToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomRecordToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomRecordToPathResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomRecordToLivekitRecordingIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomRecordToVideoRoomIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomRecordToVideoRoomResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomRecordToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomRecordToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoRoomRecordToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRoomTokenLiveKit2TypeResolver<TParent = any> {
    createtAt?: RoomTokenLiveKit2ToCreatetAtResolver<TParent>;
    roomName?: RoomTokenLiveKit2ToRoomNameResolver<TParent>;
    token?: RoomTokenLiveKit2ToTokenResolver<TParent>;
    participantIdentity?: RoomTokenLiveKit2ToParticipantIdentityResolver<TParent>;
}
export interface RoomTokenLiveKit2ToCreatetAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RoomTokenLiveKit2ToRoomNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RoomTokenLiveKit2ToTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RoomTokenLiveKit2ToParticipantIdentityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVideoCallTypeResolver<TParent = any> {
    projectId?: VideoCallToProjectIdResolver<TParent>;
    memberId?: VideoCallToMemberIdResolver<TParent>;
    sessionId?: VideoCallToSessionIdResolver<TParent>;
    sessionName?: VideoCallToSessionNameResolver<TParent>;
    url?: VideoCallToUrlResolver<TParent>;
    members?: VideoCallToMembersResolver<TParent>;
    services?: VideoCallToServicesResolver<TParent>;
    id?: VideoCallToIdResolver<TParent>;
    createdAt?: VideoCallToCreatedAtResolver<TParent>;
    updatedAt?: VideoCallToUpdatedAtResolver<TParent>;
}
export interface VideoCallToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallToSessionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallToSessionNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallToMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallToServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVideoCallMemberTypeResolver<TParent = any> {
    videoCallId?: VideoCallMemberToVideoCallIdResolver<TParent>;
    videoCall?: VideoCallMemberToVideoCallResolver<TParent>;
    memberId?: VideoCallMemberToMemberIdResolver<TParent>;
    id?: VideoCallMemberToIdResolver<TParent>;
    createdAt?: VideoCallMemberToCreatedAtResolver<TParent>;
    updatedAt?: VideoCallMemberToUpdatedAtResolver<TParent>;
}
export interface VideoCallMemberToVideoCallIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallMemberToVideoCallResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallMemberToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallMemberToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallMemberToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallMemberToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVideoCallServiceTypeResolver<TParent = any> {
    videoCallId?: VideoCallServiceToVideoCallIdResolver<TParent>;
    videoCall?: VideoCallServiceToVideoCallResolver<TParent>;
    serviceCode?: VideoCallServiceToServiceCodeResolver<TParent>;
    viewAdmin?: VideoCallServiceToViewAdminResolver<TParent>;
    viewUser?: VideoCallServiceToViewUserResolver<TParent>;
    id?: VideoCallServiceToIdResolver<TParent>;
    createdAt?: VideoCallServiceToCreatedAtResolver<TParent>;
    updatedAt?: VideoCallServiceToUpdatedAtResolver<TParent>;
}
export interface VideoCallServiceToVideoCallIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallServiceToVideoCallResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallServiceToServiceCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallServiceToViewAdminResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallServiceToViewUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallServiceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallServiceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoCallServiceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVideoTypeResolver<TParent = any> {
    sessionId?: VideoToSessionIdResolver<TParent>;
    token?: VideoToTokenResolver<TParent>;
    videoCall?: VideoToVideoCallResolver<TParent>;
}
export interface VideoToSessionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoToTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VideoToVideoCallResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContactEmailTypeResolver<TParent = any> {
    fullName?: ContactEmailToFullNameResolver<TParent>;
    email?: ContactEmailToEmailResolver<TParent>;
    sendGridKey?: ContactEmailToSendGridKeyResolver<TParent>;
    fromEmail?: ContactEmailToFromEmailResolver<TParent>;
    fromName?: ContactEmailToFromNameResolver<TParent>;
    sendGridTemplateId?: ContactEmailToSendGridTemplateIdResolver<TParent>;
    description?: ContactEmailToDescriptionResolver<TParent>;
    projectId?: ContactEmailToProjectIdResolver<TParent>;
    id?: ContactEmailToIdResolver<TParent>;
    createdAt?: ContactEmailToCreatedAtResolver<TParent>;
    updatedAt?: ContactEmailToUpdatedAtResolver<TParent>;
}
export interface ContactEmailToFullNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContactEmailToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContactEmailToSendGridKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContactEmailToFromEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContactEmailToFromNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContactEmailToSendGridTemplateIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContactEmailToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContactEmailToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContactEmailToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContactEmailToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContactEmailToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IServiceCollectionSegmentTypeResolver<TParent = any> {
    items?: ServiceCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ServiceCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ServiceCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ServiceCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAreaCollectionSegmentTypeResolver<TParent = any> {
    items?: AreaCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: AreaCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: AreaCollectionSegmentToTotalCountResolver<TParent>;
}
export interface AreaCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AreaCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AreaCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IServiceQuizCollectionSegmentTypeResolver<TParent = any> {
    items?: ServiceQuizCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ServiceQuizCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ServiceQuizCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ServiceQuizCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceQuizCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceQuizCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizCollectionSegmentTypeResolver<TParent = any> {
    items?: QuizCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: QuizCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: QuizCollectionSegmentToTotalCountResolver<TParent>;
}
export interface QuizCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizSectionCollectionSegmentTypeResolver<TParent = any> {
    items?: QuizSectionCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: QuizSectionCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: QuizSectionCollectionSegmentToTotalCountResolver<TParent>;
}
export interface QuizSectionCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizSectionCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizSectionCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizQuestionCollectionSegmentTypeResolver<TParent = any> {
    items?: QuizQuestionCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: QuizQuestionCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: QuizQuestionCollectionSegmentToTotalCountResolver<TParent>;
}
export interface QuizQuestionCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizQuestionAnswerCollectionSegmentTypeResolver<TParent = any> {
    items?: QuizQuestionAnswerCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: QuizQuestionAnswerCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: QuizQuestionAnswerCollectionSegmentToTotalCountResolver<TParent>;
}
export interface QuizQuestionAnswerCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionAnswerCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionAnswerCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizAnswerCollectionSegmentTypeResolver<TParent = any> {
    items?: QuizAnswerCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: QuizAnswerCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: QuizAnswerCollectionSegmentToTotalCountResolver<TParent>;
}
export interface QuizAnswerCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizAnswerCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizAnswerCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizMemberCollectionSegmentTypeResolver<TParent = any> {
    items?: QuizMemberCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: QuizMemberCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: QuizMemberCollectionSegmentToTotalCountResolver<TParent>;
}
export interface QuizMemberCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizMemberGroupedCollectionSegmentTypeResolver<TParent = any> {
    items?: QuizMemberGroupedCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: QuizMemberGroupedCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: QuizMemberGroupedCollectionSegmentToTotalCountResolver<TParent>;
}
export interface QuizMemberGroupedCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberGroupedCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberGroupedCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizMemberGroupedTypeResolver<TParent = any> {
    quizMembers?: QuizMemberGroupedToQuizMembersResolver<TParent>;
    mail?: QuizMemberGroupedToMailResolver<TParent>;
    manyTimes?: QuizMemberGroupedToManyTimesResolver<TParent>;
}
export interface QuizMemberGroupedToQuizMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberGroupedToMailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberGroupedToManyTimesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizQuestionMemberCollectionSegmentTypeResolver<TParent = any> {
    items?: QuizQuestionMemberCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: QuizQuestionMemberCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: QuizQuestionMemberCollectionSegmentToTotalCountResolver<TParent>;
}
export interface QuizQuestionMemberCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionMemberCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizQuestionMemberCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizMemberAnswerCollectionSegmentTypeResolver<TParent = any> {
    items?: QuizMemberAnswerCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: QuizMemberAnswerCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: QuizMemberAnswerCollectionSegmentToTotalCountResolver<TParent>;
}
export interface QuizMemberAnswerCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberAnswerCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberAnswerCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizMemberDescriptionCollectionSegmentTypeResolver<TParent = any> {
    items?: QuizMemberDescriptionCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: QuizMemberDescriptionCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: QuizMemberDescriptionCollectionSegmentToTotalCountResolver<TParent>;
}
export interface QuizMemberDescriptionCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberDescriptionCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuizMemberDescriptionCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICatalogTypeResolver<TParent = any> {
    catalogoJsonString?: CatalogToCatalogoJsonStringResolver<TParent>;
    error?: CatalogToErrorResolver<TParent>;
}
export interface CatalogToCatalogoJsonStringResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CatalogToErrorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IErrorsTypeResolver<TParent = any> {
    numero?: ErrorsToNumeroResolver<TParent>;
    descripcion?: ErrorsToDescripcionResolver<TParent>;
}
export interface ErrorsToNumeroResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ErrorsToDescripcionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuotationResponseTypeResolver<TParent = any> {
    jsonCotizacion?: QuotationResponseToJsonCotizacionResolver<TParent>;
    estatus?: QuotationResponseToEstatusResolver<TParent>;
    idCotizacion?: QuotationResponseToIdCotizacionResolver<TParent>;
    error?: QuotationResponseToErrorResolver<TParent>;
}
export interface QuotationResponseToJsonCotizacionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationResponseToEstatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationResponseToIdCotizacionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationResponseToErrorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoverageTypeResolver<TParent = any> {
    cotizacionId?: CoverageToCotizacionIdResolver<TParent>;
    agente?: CoverageToAgenteResolver<TParent>;
    telefono?: CoverageToTelefonoResolver<TParent>;
    email?: CoverageToEmailResolver<TParent>;
    subramo?: CoverageToSubramoResolver<TParent>;
    detallesPorAseguradora?: CoverageToDetallesPorAseguradoraResolver<TParent>;
}
export interface CoverageToCotizacionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageToAgenteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageToTelefonoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageToSubramoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageToDetallesPorAseguradoraResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDetailsInsurerTypeResolver<TParent = any> {
    aseguradoraSubRamoId?: DetailsInsurerToAseguradoraSubRamoIdResolver<TParent>;
    claveVehiculo?: DetailsInsurerToClaveVehiculoResolver<TParent>;
    detallesPorProducto?: DetailsInsurerToDetallesPorProductoResolver<TParent>;
    id?: DetailsInsurerToIdResolver<TParent>;
    createdAt?: DetailsInsurerToCreatedAtResolver<TParent>;
    updatedAt?: DetailsInsurerToUpdatedAtResolver<TParent>;
}
export interface DetailsInsurerToAseguradoraSubRamoIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsInsurerToClaveVehiculoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsInsurerToDetallesPorProductoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsInsurerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsInsurerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsInsurerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDetailsProductTypeResolver<TParent = any> {
    productoId?: DetailsProductToProductoIdResolver<TParent>;
    productoNombre?: DetailsProductToProductoNombreResolver<TParent>;
    condicionesCoberturas?: DetailsProductToCondicionesCoberturasResolver<TParent>;
    especificaciones?: DetailsProductToEspecificacionesResolver<TParent>;
    detallesPorCobertura?: DetailsProductToDetallesPorCoberturaResolver<TParent>;
    detailsInsurerId?: DetailsProductToDetailsInsurerIdResolver<TParent>;
    detallesPorAseguradora?: DetailsProductToDetallesPorAseguradoraResolver<TParent>;
    id?: DetailsProductToIdResolver<TParent>;
    createdAt?: DetailsProductToCreatedAtResolver<TParent>;
    updatedAt?: DetailsProductToUpdatedAtResolver<TParent>;
}
export interface DetailsProductToProductoIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsProductToProductoNombreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsProductToCondicionesCoberturasResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsProductToEspecificacionesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsProductToDetallesPorCoberturaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsProductToDetailsInsurerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsProductToDetallesPorAseguradoraResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsProductToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsProductToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsProductToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IConditionsProductTypeResolver<TParent = any> {
    id?: ConditionsProductToIdResolver<TParent>;
    nombre?: ConditionsProductToNombreResolver<TParent>;
    valor?: ConditionsProductToValorResolver<TParent>;
    orden?: ConditionsProductToOrdenResolver<TParent>;
    deducibleAplica?: ConditionsProductToDeducibleAplicaResolver<TParent>;
    deducibleValor?: ConditionsProductToDeducibleValorResolver<TParent>;
    detailsProductId?: ConditionsProductToDetailsProductIdResolver<TParent>;
    detallesPorCobertura?: ConditionsProductToDetallesPorCoberturaResolver<TParent>;
    createdAt?: ConditionsProductToCreatedAtResolver<TParent>;
    updatedAt?: ConditionsProductToUpdatedAtResolver<TParent>;
}
export interface ConditionsProductToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConditionsProductToNombreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConditionsProductToValorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConditionsProductToOrdenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConditionsProductToDeducibleAplicaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConditionsProductToDeducibleValorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConditionsProductToDetailsProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConditionsProductToDetallesPorCoberturaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConditionsProductToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConditionsProductToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISpecsTypeResolver<TParent = any> {
    id?: SpecsToIdResolver<TParent>;
    nombre?: SpecsToNombreResolver<TParent>;
    valor?: SpecsToValorResolver<TParent>;
    orden?: SpecsToOrdenResolver<TParent>;
    detailsProductId?: SpecsToDetailsProductIdResolver<TParent>;
    detallesPorCobertura?: SpecsToDetallesPorCoberturaResolver<TParent>;
    createdAt?: SpecsToCreatedAtResolver<TParent>;
    updatedAt?: SpecsToUpdatedAtResolver<TParent>;
}
export interface SpecsToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpecsToNombreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpecsToValorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpecsToOrdenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpecsToDetailsProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpecsToDetallesPorCoberturaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpecsToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpecsToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDetailsCoverageTypeResolver<TParent = any> {
    coberturaId?: DetailsCoverageToCoberturaIdResolver<TParent>;
    coberturaNombre?: DetailsCoverageToCoberturaNombreResolver<TParent>;
    coberturaOrden?: DetailsCoverageToCoberturaOrdenResolver<TParent>;
    detalles?: DetailsCoverageToDetallesResolver<TParent>;
    detailsProductId?: DetailsCoverageToDetailsProductIdResolver<TParent>;
    detallesPorCobertura?: DetailsCoverageToDetallesPorCoberturaResolver<TParent>;
    id?: DetailsCoverageToIdResolver<TParent>;
    createdAt?: DetailsCoverageToCreatedAtResolver<TParent>;
    updatedAt?: DetailsCoverageToUpdatedAtResolver<TParent>;
}
export interface DetailsCoverageToCoberturaIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsCoverageToCoberturaNombreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsCoverageToCoberturaOrdenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsCoverageToDetallesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsCoverageToDetailsProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsCoverageToDetallesPorCoberturaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsCoverageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsCoverageToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsCoverageToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDetailsTypeResolver<TParent = any> {
    detalleId?: DetailsToDetalleIdResolver<TParent>;
    detalleNombre?: DetailsToDetalleNombreResolver<TParent>;
    detalleValor?: DetailsToDetalleValorResolver<TParent>;
    coberturaOrden?: DetailsToCoberturaOrdenResolver<TParent>;
    detailsCoverageId?: DetailsToDetailsCoverageIdResolver<TParent>;
    detallesPorCobertura?: DetailsToDetallesPorCoberturaResolver<TParent>;
    id?: DetailsToIdResolver<TParent>;
    createdAt?: DetailsToCreatedAtResolver<TParent>;
    updatedAt?: DetailsToUpdatedAtResolver<TParent>;
}
export interface DetailsToDetalleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsToDetalleNombreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsToDetalleValorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsToCoberturaOrdenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsToDetailsCoverageIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsToDetallesPorCoberturaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DetailsToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ITransactionCollectionSegmentTypeResolver<TParent = any> {
    items?: TransactionCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: TransactionCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: TransactionCollectionSegmentToTotalCountResolver<TParent>;
}
export interface TransactionCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TransactionCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TransactionCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface Ipayment_TransactionTypeResolver<TParent = any> {
    companyId?: payment_TransactionToCompanyIdResolver<TParent>;
    projectId?: payment_TransactionToProjectIdResolver<TParent>;
    memberId?: payment_TransactionToMemberIdResolver<TParent>;
    transactionNumber?: payment_TransactionToTransactionNumberResolver<TParent>;
    transactionRequest?: payment_TransactionToTransactionRequestResolver<TParent>;
    transactionToken?: payment_TransactionToTransactionTokenResolver<TParent>;
    transactionType?: payment_TransactionToTransactionTypeResolver<TParent>;
    transactionStatus?: payment_TransactionToTransactionStatusResolver<TParent>;
    amount?: payment_TransactionToAmountResolver<TParent>;
    trasactionResponse?: payment_TransactionToTrasactionResponseResolver<TParent>;
    invoiceId?: payment_TransactionToInvoiceIdResolver<TParent>;
    invoice?: payment_TransactionToInvoiceResolver<TParent>;
    methodPaymentId?: payment_TransactionToMethodPaymentIdResolver<TParent>;
    methodPayment?: payment_TransactionToMethodPaymentResolver<TParent>;
    id?: payment_TransactionToIdResolver<TParent>;
    createdAt?: payment_TransactionToCreatedAtResolver<TParent>;
    updatedAt?: payment_TransactionToUpdatedAtResolver<TParent>;
}
export interface payment_TransactionToCompanyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_TransactionToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_TransactionToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_TransactionToTransactionNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_TransactionToTransactionRequestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_TransactionToTransactionTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_TransactionToTransactionTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_TransactionToTransactionStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_TransactionToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_TransactionToTrasactionResponseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_TransactionToInvoiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_TransactionToInvoiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_TransactionToMethodPaymentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_TransactionToMethodPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_TransactionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_TransactionToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_TransactionToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMethodPaymentTypeResolver<TParent = any> {
    companyId?: MethodPaymentToCompanyIdResolver<TParent>;
    projectId?: MethodPaymentToProjectIdResolver<TParent>;
    memberId?: MethodPaymentToMemberIdResolver<TParent>;
    alias?: MethodPaymentToAliasResolver<TParent>;
    privateKey?: MethodPaymentToPrivateKeyResolver<TParent>;
    publicKey?: MethodPaymentToPublicKeyResolver<TParent>;
    active?: MethodPaymentToActiveResolver<TParent>;
    servicePayment?: MethodPaymentToServicePaymentResolver<TParent>;
    id?: MethodPaymentToIdResolver<TParent>;
    createdAt?: MethodPaymentToCreatedAtResolver<TParent>;
    updatedAt?: MethodPaymentToUpdatedAtResolver<TParent>;
}
export interface MethodPaymentToCompanyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MethodPaymentToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MethodPaymentToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MethodPaymentToAliasResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MethodPaymentToPrivateKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MethodPaymentToPublicKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MethodPaymentToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MethodPaymentToServicePaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MethodPaymentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MethodPaymentToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MethodPaymentToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMethodPaymentCollectionSegmentTypeResolver<TParent = any> {
    items?: MethodPaymentCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: MethodPaymentCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: MethodPaymentCollectionSegmentToTotalCountResolver<TParent>;
}
export interface MethodPaymentCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MethodPaymentCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MethodPaymentCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPlanCollectionSegmentTypeResolver<TParent = any> {
    items?: PlanCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: PlanCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: PlanCollectionSegmentToTotalCountResolver<TParent>;
}
export interface PlanCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PlanCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PlanCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface Ipayment_PlanTypeResolver<TParent = any> {
    projectId?: payment_PlanToProjectIdResolver<TParent>;
    description?: payment_PlanToDescriptionResolver<TParent>;
    code?: payment_PlanToCodeResolver<TParent>;
    codeStripe?: payment_PlanToCodeStripeResolver<TParent>;
    status?: payment_PlanToStatusResolver<TParent>;
    amount?: payment_PlanToAmountResolver<TParent>;
    productId?: payment_PlanToProductIdResolver<TParent>;
    id?: payment_PlanToIdResolver<TParent>;
    createdAt?: payment_PlanToCreatedAtResolver<TParent>;
    updatedAt?: payment_PlanToUpdatedAtResolver<TParent>;
}
export interface payment_PlanToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_PlanToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_PlanToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_PlanToCodeStripeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_PlanToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_PlanToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_PlanToProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_PlanToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_PlanToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface payment_PlanToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInvoiceCollectionSegmentTypeResolver<TParent = any> {
    items?: InvoiceCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InvoiceCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InvoiceCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InvoiceCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvoiceCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICustomerSuscriptionTypeResolver<TParent = any> {
    memberId?: CustomerSuscriptionToMemberIdResolver<TParent>;
    planId?: CustomerSuscriptionToPlanIdResolver<TParent>;
    plan?: CustomerSuscriptionToPlanResolver<TParent>;
    id?: CustomerSuscriptionToIdResolver<TParent>;
    createdAt?: CustomerSuscriptionToCreatedAtResolver<TParent>;
    updatedAt?: CustomerSuscriptionToUpdatedAtResolver<TParent>;
}
export interface CustomerSuscriptionToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CustomerSuscriptionToPlanIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CustomerSuscriptionToPlanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CustomerSuscriptionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CustomerSuscriptionToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CustomerSuscriptionToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProductStripeTypeResolver<TParent = any> {
    projectId?: ProductStripeToProjectIdResolver<TParent>;
    productId?: ProductStripeToProductIdResolver<TParent>;
    stripeId?: ProductStripeToStripeIdResolver<TParent>;
    id?: ProductStripeToIdResolver<TParent>;
    createdAt?: ProductStripeToCreatedAtResolver<TParent>;
    updatedAt?: ProductStripeToUpdatedAtResolver<TParent>;
}
export interface ProductStripeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductStripeToProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductStripeToStripeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductStripeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductStripeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProductStripeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAccountKeyCollectionSegmentTypeResolver<TParent = any> {
    items?: AccountKeyCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: AccountKeyCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: AccountKeyCollectionSegmentToTotalCountResolver<TParent>;
}
export interface AccountKeyCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AccountKeyCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AccountKeyCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICardMethodDTOTypeResolver<TParent = any> {
    paymentMethodId?: CardMethodDTOToPaymentMethodIdResolver<TParent>;
    createdAt?: CardMethodDTOToCreatedAtResolver<TParent>;
    default?: CardMethodDTOToDefaultResolver<TParent>;
    brand?: CardMethodDTOToBrandResolver<TParent>;
    last4?: CardMethodDTOToLast4Resolver<TParent>;
    expYear?: CardMethodDTOToExpYearResolver<TParent>;
    expMonth?: CardMethodDTOToExpMonthResolver<TParent>;
}
export interface CardMethodDTOToPaymentMethodIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardMethodDTOToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardMethodDTOToDefaultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardMethodDTOToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardMethodDTOToLast4Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardMethodDTOToExpYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardMethodDTOToExpMonthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogHdiCodeYearTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogHdiCodeYearToIdResolver<TParent>;
    year?: VehiclesCarCatalogHdiCodeYearToYearResolver<TParent>;
    cHdi?: VehiclesCarCatalogHdiCodeYearToCHdiResolver<TParent>;
    carId?: VehiclesCarCatalogHdiCodeYearToCarIdResolver<TParent>;
    car?: VehiclesCarCatalogHdiCodeYearToCarResolver<TParent>;
}
export interface VehiclesCarCatalogHdiCodeYearToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogHdiCodeYearToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogHdiCodeYearToCHdiResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogHdiCodeYearToCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogHdiCodeYearToCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogHdiTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogHdiToIdResolver<TParent>;
    brand?: VehiclesCarCatalogHdiToBrandResolver<TParent>;
    subbrand?: VehiclesCarCatalogHdiToSubbrandResolver<TParent>;
    description?: VehiclesCarCatalogHdiToDescriptionResolver<TParent>;
    vehiclesCarCatalogHdiCodeYears?: VehiclesCarCatalogHdiToVehiclesCarCatalogHdiCodeYearsResolver<TParent>;
    vehiclesCarCodeRelations?: VehiclesCarCatalogHdiToVehiclesCarCodeRelationsResolver<TParent>;
}
export interface VehiclesCarCatalogHdiToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogHdiToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogHdiToSubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogHdiToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogHdiToVehiclesCarCatalogHdiCodeYearsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogHdiToVehiclesCarCodeRelationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCodeRelationTypeResolver<TParent = any> {
    id?: VehiclesCarCodeRelationToIdResolver<TParent>;
    abaCodeId?: VehiclesCarCodeRelationToAbaCodeIdResolver<TParent>;
    afirmeCodeId?: VehiclesCarCodeRelationToAfirmeCodeIdResolver<TParent>;
    aigCodeId?: VehiclesCarCodeRelationToAigCodeIdResolver<TParent>;
    anaCodeId?: VehiclesCarCodeRelationToAnaCodeIdResolver<TParent>;
    atlasCodeId?: VehiclesCarCodeRelationToAtlasCodeIdResolver<TParent>;
    axaCodeId?: VehiclesCarCodeRelationToAxaCodeIdResolver<TParent>;
    banorteCodeId?: VehiclesCarCodeRelationToBanorteCodeIdResolver<TParent>;
    gnpCodeId?: VehiclesCarCodeRelationToGnpCodeIdResolver<TParent>;
    hdiCodeId?: VehiclesCarCodeRelationToHdiCodeIdResolver<TParent>;
    potosiCodeId?: VehiclesCarCodeRelationToPotosiCodeIdResolver<TParent>;
    psCodeId?: VehiclesCarCodeRelationToPsCodeIdResolver<TParent>;
    qualitasCodeId?: VehiclesCarCodeRelationToQualitasCodeIdResolver<TParent>;
    zurichCodeId?: VehiclesCarCodeRelationToZurichCodeIdResolver<TParent>;
    mapfreCodeId?: VehiclesCarCodeRelationToMapfreCodeIdResolver<TParent>;
    abaCode?: VehiclesCarCodeRelationToAbaCodeResolver<TParent>;
    afirmeCode?: VehiclesCarCodeRelationToAfirmeCodeResolver<TParent>;
    aigCode?: VehiclesCarCodeRelationToAigCodeResolver<TParent>;
    anaCode?: VehiclesCarCodeRelationToAnaCodeResolver<TParent>;
    atlasCode?: VehiclesCarCodeRelationToAtlasCodeResolver<TParent>;
    axaCode?: VehiclesCarCodeRelationToAxaCodeResolver<TParent>;
    banorteCode?: VehiclesCarCodeRelationToBanorteCodeResolver<TParent>;
    gnpCode?: VehiclesCarCodeRelationToGnpCodeResolver<TParent>;
    hdiCode?: VehiclesCarCodeRelationToHdiCodeResolver<TParent>;
    mapfreCode?: VehiclesCarCodeRelationToMapfreCodeResolver<TParent>;
    potosiCode?: VehiclesCarCodeRelationToPotosiCodeResolver<TParent>;
    psCode?: VehiclesCarCodeRelationToPsCodeResolver<TParent>;
    qualitasCode?: VehiclesCarCodeRelationToQualitasCodeResolver<TParent>;
    zurichCode?: VehiclesCarCodeRelationToZurichCodeResolver<TParent>;
}
export interface VehiclesCarCodeRelationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToAbaCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToAfirmeCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToAigCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToAnaCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToAtlasCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToAxaCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToBanorteCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToGnpCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToHdiCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToPotosiCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToPsCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToQualitasCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToZurichCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToMapfreCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToAbaCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToAfirmeCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToAigCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToAnaCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToAtlasCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToAxaCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToBanorteCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToGnpCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToHdiCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToMapfreCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToPotosiCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToPsCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToQualitasCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCodeRelationToZurichCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogAbaTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogAbaToIdResolver<TParent>;
    brand?: VehiclesCarCatalogAbaToBrandResolver<TParent>;
    description?: VehiclesCarCatalogAbaToDescriptionResolver<TParent>;
    subbrand?: VehiclesCarCatalogAbaToSubbrandResolver<TParent>;
    occupants?: VehiclesCarCatalogAbaToOccupantsResolver<TParent>;
    type?: VehiclesCarCatalogAbaToTypeResolver<TParent>;
    vehiclesCarCatalogAbaCodeYears?: VehiclesCarCatalogAbaToVehiclesCarCatalogAbaCodeYearsResolver<TParent>;
    vehiclesCarCodeRelations?: VehiclesCarCatalogAbaToVehiclesCarCodeRelationsResolver<TParent>;
}
export interface VehiclesCarCatalogAbaToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAbaToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAbaToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAbaToSubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAbaToOccupantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAbaToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAbaToVehiclesCarCatalogAbaCodeYearsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAbaToVehiclesCarCodeRelationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogAbaCodeYearTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogAbaCodeYearToIdResolver<TParent>;
    year?: VehiclesCarCatalogAbaCodeYearToYearResolver<TParent>;
    cveveh?: VehiclesCarCatalogAbaCodeYearToCvevehResolver<TParent>;
    carId?: VehiclesCarCatalogAbaCodeYearToCarIdResolver<TParent>;
    car?: VehiclesCarCatalogAbaCodeYearToCarResolver<TParent>;
}
export interface VehiclesCarCatalogAbaCodeYearToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAbaCodeYearToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAbaCodeYearToCvevehResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAbaCodeYearToCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAbaCodeYearToCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogAfirmeTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogAfirmeToIdResolver<TParent>;
    brand?: VehiclesCarCatalogAfirmeToBrandResolver<TParent>;
    subbrand?: VehiclesCarCatalogAfirmeToSubbrandResolver<TParent>;
    description?: VehiclesCarCatalogAfirmeToDescriptionResolver<TParent>;
    vehiclesCarCatalogAfirmeCodeYears?: VehiclesCarCatalogAfirmeToVehiclesCarCatalogAfirmeCodeYearsResolver<TParent>;
    vehiclesCarCodeRelations?: VehiclesCarCatalogAfirmeToVehiclesCarCodeRelationsResolver<TParent>;
}
export interface VehiclesCarCatalogAfirmeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAfirmeToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAfirmeToSubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAfirmeToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAfirmeToVehiclesCarCatalogAfirmeCodeYearsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAfirmeToVehiclesCarCodeRelationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogAfirmeCodeYearTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogAfirmeCodeYearToIdResolver<TParent>;
    year?: VehiclesCarCatalogAfirmeCodeYearToYearResolver<TParent>;
    cAfirme?: VehiclesCarCatalogAfirmeCodeYearToCAfirmeResolver<TParent>;
    carId?: VehiclesCarCatalogAfirmeCodeYearToCarIdResolver<TParent>;
    car?: VehiclesCarCatalogAfirmeCodeYearToCarResolver<TParent>;
}
export interface VehiclesCarCatalogAfirmeCodeYearToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAfirmeCodeYearToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAfirmeCodeYearToCAfirmeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAfirmeCodeYearToCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAfirmeCodeYearToCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogAigTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogAigToIdResolver<TParent>;
    brand?: VehiclesCarCatalogAigToBrandResolver<TParent>;
    year?: VehiclesCarCatalogAigToYearResolver<TParent>;
    description?: VehiclesCarCatalogAigToDescriptionResolver<TParent>;
    subbrand?: VehiclesCarCatalogAigToSubbrandResolver<TParent>;
    vehiclesCarcoderelations?: VehiclesCarCatalogAigToVehiclesCarcoderelationsResolver<TParent>;
}
export interface VehiclesCarCatalogAigToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAigToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAigToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAigToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAigToSubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAigToVehiclesCarcoderelationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogAnaTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogAnaToIdResolver<TParent>;
    subbrand?: VehiclesCarCatalogAnaToSubbrandResolver<TParent>;
    description?: VehiclesCarCatalogAnaToDescriptionResolver<TParent>;
    brand?: VehiclesCarCatalogAnaToBrandResolver<TParent>;
    vehiclesCarCatalogAnaCodeYears?: VehiclesCarCatalogAnaToVehiclesCarCatalogAnaCodeYearsResolver<TParent>;
    vehiclesCarCodeRelations?: VehiclesCarCatalogAnaToVehiclesCarCodeRelationsResolver<TParent>;
}
export interface VehiclesCarCatalogAnaToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAnaToSubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAnaToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAnaToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAnaToVehiclesCarCatalogAnaCodeYearsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAnaToVehiclesCarCodeRelationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogAnaCodeYearTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogAnaCodeYearToIdResolver<TParent>;
    year?: VehiclesCarCatalogAnaCodeYearToYearResolver<TParent>;
    cAna?: VehiclesCarCatalogAnaCodeYearToCAnaResolver<TParent>;
    carId?: VehiclesCarCatalogAnaCodeYearToCarIdResolver<TParent>;
    car?: VehiclesCarCatalogAnaCodeYearToCarResolver<TParent>;
}
export interface VehiclesCarCatalogAnaCodeYearToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAnaCodeYearToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAnaCodeYearToCAnaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAnaCodeYearToCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAnaCodeYearToCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogAtlaTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogAtlaToIdResolver<TParent>;
    brand?: VehiclesCarCatalogAtlaToBrandResolver<TParent>;
    subbrand?: VehiclesCarCatalogAtlaToSubbrandResolver<TParent>;
    description?: VehiclesCarCatalogAtlaToDescriptionResolver<TParent>;
    vehiclesCarCatalogAtlasCodeYears?: VehiclesCarCatalogAtlaToVehiclesCarCatalogAtlasCodeYearsResolver<TParent>;
    vehiclesCarCodeRelations?: VehiclesCarCatalogAtlaToVehiclesCarCodeRelationsResolver<TParent>;
}
export interface VehiclesCarCatalogAtlaToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAtlaToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAtlaToSubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAtlaToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAtlaToVehiclesCarCatalogAtlasCodeYearsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAtlaToVehiclesCarCodeRelationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogAtlasCodeYearTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogAtlasCodeYearToIdResolver<TParent>;
    year?: VehiclesCarCatalogAtlasCodeYearToYearResolver<TParent>;
    cAtlas?: VehiclesCarCatalogAtlasCodeYearToCAtlasResolver<TParent>;
    carId?: VehiclesCarCatalogAtlasCodeYearToCarIdResolver<TParent>;
    car?: VehiclesCarCatalogAtlasCodeYearToCarResolver<TParent>;
}
export interface VehiclesCarCatalogAtlasCodeYearToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAtlasCodeYearToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAtlasCodeYearToCAtlasResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAtlasCodeYearToCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAtlasCodeYearToCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogAxaTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogAxaToIdResolver<TParent>;
    brand?: VehiclesCarCatalogAxaToBrandResolver<TParent>;
    subbrand?: VehiclesCarCatalogAxaToSubbrandResolver<TParent>;
    descriptionLinea?: VehiclesCarCatalogAxaToDescriptionLineaResolver<TParent>;
    description?: VehiclesCarCatalogAxaToDescriptionResolver<TParent>;
    camis?: VehiclesCarCatalogAxaToCamisResolver<TParent>;
    categoria?: VehiclesCarCatalogAxaToCategoriaResolver<TParent>;
    segmento?: VehiclesCarCatalogAxaToSegmentoResolver<TParent>;
    brandId?: VehiclesCarCatalogAxaToBrandIdResolver<TParent>;
    versionId?: VehiclesCarCatalogAxaToVersionIdResolver<TParent>;
    versionIdSec?: VehiclesCarCatalogAxaToVersionIdSecResolver<TParent>;
    categoriaId?: VehiclesCarCatalogAxaToCategoriaIdResolver<TParent>;
    lineaId?: VehiclesCarCatalogAxaToLineaIdResolver<TParent>;
    vehiclesCarCatalogAxaCodeYears?: VehiclesCarCatalogAxaToVehiclesCarCatalogAxaCodeYearsResolver<TParent>;
    vehiclesCarCodeRelations?: VehiclesCarCatalogAxaToVehiclesCarCodeRelationsResolver<TParent>;
}
export interface VehiclesCarCatalogAxaToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAxaToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAxaToSubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAxaToDescriptionLineaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAxaToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAxaToCamisResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAxaToCategoriaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAxaToSegmentoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAxaToBrandIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAxaToVersionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAxaToVersionIdSecResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAxaToCategoriaIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAxaToLineaIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAxaToVehiclesCarCatalogAxaCodeYearsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAxaToVehiclesCarCodeRelationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogAxaCodeYearTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogAxaCodeYearToIdResolver<TParent>;
    year?: VehiclesCarCatalogAxaCodeYearToYearResolver<TParent>;
    cAxa?: VehiclesCarCatalogAxaCodeYearToCAxaResolver<TParent>;
    carId?: VehiclesCarCatalogAxaCodeYearToCarIdResolver<TParent>;
    car?: VehiclesCarCatalogAxaCodeYearToCarResolver<TParent>;
}
export interface VehiclesCarCatalogAxaCodeYearToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAxaCodeYearToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAxaCodeYearToCAxaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAxaCodeYearToCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogAxaCodeYearToCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogBanorteTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogBanorteToIdResolver<TParent>;
    brand?: VehiclesCarCatalogBanorteToBrandResolver<TParent>;
    subbrand?: VehiclesCarCatalogBanorteToSubbrandResolver<TParent>;
    description?: VehiclesCarCatalogBanorteToDescriptionResolver<TParent>;
    vehiclesCarCatalogBanorteCodeYears?: VehiclesCarCatalogBanorteToVehiclesCarCatalogBanorteCodeYearsResolver<TParent>;
    vehiclesCarCodeRelations?: VehiclesCarCatalogBanorteToVehiclesCarCodeRelationsResolver<TParent>;
}
export interface VehiclesCarCatalogBanorteToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogBanorteToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogBanorteToSubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogBanorteToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogBanorteToVehiclesCarCatalogBanorteCodeYearsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogBanorteToVehiclesCarCodeRelationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogBanorteCodeYearTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogBanorteCodeYearToIdResolver<TParent>;
    year?: VehiclesCarCatalogBanorteCodeYearToYearResolver<TParent>;
    cBanorte?: VehiclesCarCatalogBanorteCodeYearToCBanorteResolver<TParent>;
    carId?: VehiclesCarCatalogBanorteCodeYearToCarIdResolver<TParent>;
    car?: VehiclesCarCatalogBanorteCodeYearToCarResolver<TParent>;
}
export interface VehiclesCarCatalogBanorteCodeYearToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogBanorteCodeYearToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogBanorteCodeYearToCBanorteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogBanorteCodeYearToCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogBanorteCodeYearToCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogGnpTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogGnpToIdResolver<TParent>;
    brand?: VehiclesCarCatalogGnpToBrandResolver<TParent>;
    subbrand?: VehiclesCarCatalogGnpToSubbrandResolver<TParent>;
    description?: VehiclesCarCatalogGnpToDescriptionResolver<TParent>;
    vehiclesCarCatalogGnpCodeYears?: VehiclesCarCatalogGnpToVehiclesCarCatalogGnpCodeYearsResolver<TParent>;
    vehiclesCarCodeRelations?: VehiclesCarCatalogGnpToVehiclesCarCodeRelationsResolver<TParent>;
}
export interface VehiclesCarCatalogGnpToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogGnpToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogGnpToSubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogGnpToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogGnpToVehiclesCarCatalogGnpCodeYearsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogGnpToVehiclesCarCodeRelationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogGnpCodeYearTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogGnpCodeYearToIdResolver<TParent>;
    year?: VehiclesCarCatalogGnpCodeYearToYearResolver<TParent>;
    cGnp?: VehiclesCarCatalogGnpCodeYearToCGnpResolver<TParent>;
    carId?: VehiclesCarCatalogGnpCodeYearToCarIdResolver<TParent>;
    car?: VehiclesCarCatalogGnpCodeYearToCarResolver<TParent>;
}
export interface VehiclesCarCatalogGnpCodeYearToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogGnpCodeYearToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogGnpCodeYearToCGnpResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogGnpCodeYearToCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogGnpCodeYearToCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogMapfreTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogMapfreToIdResolver<TParent>;
    brand?: VehiclesCarCatalogMapfreToBrandResolver<TParent>;
    description?: VehiclesCarCatalogMapfreToDescriptionResolver<TParent>;
    subbrand?: VehiclesCarCatalogMapfreToSubbrandResolver<TParent>;
    vehiclesCarCatalogMapfreCodeYears?: VehiclesCarCatalogMapfreToVehiclesCarCatalogMapfreCodeYearsResolver<TParent>;
    vehiclesCarCodeRelations?: VehiclesCarCatalogMapfreToVehiclesCarCodeRelationsResolver<TParent>;
}
export interface VehiclesCarCatalogMapfreToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogMapfreToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogMapfreToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogMapfreToSubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogMapfreToVehiclesCarCatalogMapfreCodeYearsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogMapfreToVehiclesCarCodeRelationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogMapfreCodeYearTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogMapfreCodeYearToIdResolver<TParent>;
    year?: VehiclesCarCatalogMapfreCodeYearToYearResolver<TParent>;
    cMapfre?: VehiclesCarCatalogMapfreCodeYearToCMapfreResolver<TParent>;
    brand?: VehiclesCarCatalogMapfreCodeYearToBrandResolver<TParent>;
    carId?: VehiclesCarCatalogMapfreCodeYearToCarIdResolver<TParent>;
    car?: VehiclesCarCatalogMapfreCodeYearToCarResolver<TParent>;
}
export interface VehiclesCarCatalogMapfreCodeYearToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogMapfreCodeYearToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogMapfreCodeYearToCMapfreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogMapfreCodeYearToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogMapfreCodeYearToCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogMapfreCodeYearToCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogPotosiTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogPotosiToIdResolver<TParent>;
    brand?: VehiclesCarCatalogPotosiToBrandResolver<TParent>;
    subbrand?: VehiclesCarCatalogPotosiToSubbrandResolver<TParent>;
    description?: VehiclesCarCatalogPotosiToDescriptionResolver<TParent>;
    cPotosi?: VehiclesCarCatalogPotosiToCPotosiResolver<TParent>;
    vehiclesCarCodeRelations?: VehiclesCarCatalogPotosiToVehiclesCarCodeRelationsResolver<TParent>;
}
export interface VehiclesCarCatalogPotosiToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogPotosiToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogPotosiToSubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogPotosiToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogPotosiToCPotosiResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogPotosiToVehiclesCarCodeRelationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogPTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogPToIdResolver<TParent>;
    brand?: VehiclesCarCatalogPToBrandResolver<TParent>;
    subbrand?: VehiclesCarCatalogPToSubbrandResolver<TParent>;
    description?: VehiclesCarCatalogPToDescriptionResolver<TParent>;
    cPs?: VehiclesCarCatalogPToCPsResolver<TParent>;
    vehiclesCarCodeRelations?: VehiclesCarCatalogPToVehiclesCarCodeRelationsResolver<TParent>;
}
export interface VehiclesCarCatalogPToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogPToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogPToSubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogPToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogPToCPsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogPToVehiclesCarCodeRelationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogQualitaTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogQualitaToIdResolver<TParent>;
    brand?: VehiclesCarCatalogQualitaToBrandResolver<TParent>;
    subbrand?: VehiclesCarCatalogQualitaToSubbrandResolver<TParent>;
    description?: VehiclesCarCatalogQualitaToDescriptionResolver<TParent>;
    brandCode?: VehiclesCarCatalogQualitaToBrandCodeResolver<TParent>;
    vehiclesCarCatalogQualitasCodeYears?: VehiclesCarCatalogQualitaToVehiclesCarCatalogQualitasCodeYearsResolver<TParent>;
    vehiclesCarCodeRelations?: VehiclesCarCatalogQualitaToVehiclesCarCodeRelationsResolver<TParent>;
}
export interface VehiclesCarCatalogQualitaToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogQualitaToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogQualitaToSubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogQualitaToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogQualitaToBrandCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogQualitaToVehiclesCarCatalogQualitasCodeYearsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogQualitaToVehiclesCarCodeRelationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogQualitasCodeYearTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogQualitasCodeYearToIdResolver<TParent>;
    year?: VehiclesCarCatalogQualitasCodeYearToYearResolver<TParent>;
    cQualitas?: VehiclesCarCatalogQualitasCodeYearToCQualitasResolver<TParent>;
    carId?: VehiclesCarCatalogQualitasCodeYearToCarIdResolver<TParent>;
    car?: VehiclesCarCatalogQualitasCodeYearToCarResolver<TParent>;
}
export interface VehiclesCarCatalogQualitasCodeYearToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogQualitasCodeYearToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogQualitasCodeYearToCQualitasResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogQualitasCodeYearToCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogQualitasCodeYearToCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogZurichTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogZurichToIdResolver<TParent>;
    brand?: VehiclesCarCatalogZurichToBrandResolver<TParent>;
    subbrand?: VehiclesCarCatalogZurichToSubbrandResolver<TParent>;
    description?: VehiclesCarCatalogZurichToDescriptionResolver<TParent>;
    vehiclesCarCatalogZurichCodeYears?: VehiclesCarCatalogZurichToVehiclesCarCatalogZurichCodeYearsResolver<TParent>;
    vehiclesCarCodeRelations?: VehiclesCarCatalogZurichToVehiclesCarCodeRelationsResolver<TParent>;
}
export interface VehiclesCarCatalogZurichToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogZurichToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogZurichToSubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogZurichToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogZurichToVehiclesCarCatalogZurichCodeYearsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogZurichToVehiclesCarCodeRelationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVehiclesCarCatalogZurichCodeYearTypeResolver<TParent = any> {
    id?: VehiclesCarCatalogZurichCodeYearToIdResolver<TParent>;
    year?: VehiclesCarCatalogZurichCodeYearToYearResolver<TParent>;
    carId?: VehiclesCarCatalogZurichCodeYearToCarIdResolver<TParent>;
    cZurich?: VehiclesCarCatalogZurichCodeYearToCZurichResolver<TParent>;
    car?: VehiclesCarCatalogZurichCodeYearToCarResolver<TParent>;
}
export interface VehiclesCarCatalogZurichCodeYearToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogZurichCodeYearToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogZurichCodeYearToCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogZurichCodeYearToCZurichResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VehiclesCarCatalogZurichCodeYearToCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuotationCoverageTypeResolver<TParent = any> {
    name?: QuotationCoverageToNameResolver<TParent>;
    code?: QuotationCoverageToCodeResolver<TParent>;
    sumAssured?: QuotationCoverageToSumAssuredResolver<TParent>;
    sumType?: QuotationCoverageToSumTypeResolver<TParent>;
    deductible?: QuotationCoverageToDeductibleResolver<TParent>;
    total?: QuotationCoverageToTotalResolver<TParent>;
    neto?: QuotationCoverageToNetoResolver<TParent>;
    priority?: QuotationCoverageToPriorityResolver<TParent>;
    quoteId?: QuotationCoverageToQuoteIdResolver<TParent>;
    quote?: QuotationCoverageToQuoteResolver<TParent>;
    insurerServiceId?: QuotationCoverageToInsurerServiceIdResolver<TParent>;
    insurerService?: QuotationCoverageToInsurerServiceResolver<TParent>;
    insurerPackageStatus?: QuotationCoverageToInsurerPackageStatusResolver<TParent>;
    id?: QuotationCoverageToIdResolver<TParent>;
    createdAt?: QuotationCoverageToCreatedAtResolver<TParent>;
    updatedAt?: QuotationCoverageToUpdatedAtResolver<TParent>;
}
export interface QuotationCoverageToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationCoverageToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationCoverageToSumAssuredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationCoverageToSumTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationCoverageToDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationCoverageToTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationCoverageToNetoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationCoverageToPriorityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationCoverageToQuoteIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationCoverageToQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationCoverageToInsurerServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationCoverageToInsurerServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationCoverageToInsurerPackageStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationCoverageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationCoverageToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationCoverageToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuoteTypeResolver<TParent = any> {
    car?: QuoteToCarResolver<TParent>;
    projectId?: QuoteToProjectIdResolver<TParent>;
    memberId?: QuoteToMemberIdResolver<TParent>;
    firstName?: QuoteToFirstNameResolver<TParent>;
    lastName?: QuoteToLastNameResolver<TParent>;
    rFC?: QuoteToRFCResolver<TParent>;
    phone?: QuoteToPhoneResolver<TParent>;
    email?: QuoteToEmailResolver<TParent>;
    address?: QuoteToAddressResolver<TParent>;
    hiredSame?: QuoteToHiredSameResolver<TParent>;
    hiredFirstName?: QuoteToHiredFirstNameResolver<TParent>;
    hiredLastName?: QuoteToHiredLastNameResolver<TParent>;
    hiredPhone?: QuoteToHiredPhoneResolver<TParent>;
    hiredEmail?: QuoteToHiredEmailResolver<TParent>;
    hiredAddress?: QuoteToHiredAddressResolver<TParent>;
    frecuency?: QuoteToFrecuencyResolver<TParent>;
    packageName?: QuoteToPackageNameResolver<TParent>;
    gender?: QuoteToGenderResolver<TParent>;
    zipCode?: QuoteToZipCodeResolver<TParent>;
    dateOfBirth?: QuoteToDateOfBirthResolver<TParent>;
    carCode?: QuoteToCarCodeResolver<TParent>;
    startValidity?: QuoteToStartValidityResolver<TParent>;
    endValidity?: QuoteToEndValidityResolver<TParent>;
    year?: QuoteToYearResolver<TParent>;
    discount?: QuoteToDiscountResolver<TParent>;
    coverage?: QuoteToCoverageResolver<TParent>;
    primalTotal?: QuoteToPrimalTotalResolver<TParent>;
    deductible?: QuoteToDeductibleResolver<TParent>;
    typeFrecuency?: QuoteToTypeFrecuencyResolver<TParent>;
    firstPay?: QuoteToFirstPayResolver<TParent>;
    secondPay?: QuoteToSecondPayResolver<TParent>;
    status?: QuoteToStatusResolver<TParent>;
    plaque?: QuoteToPlaqueResolver<TParent>;
    compensationValue?: QuoteToCompensationValueResolver<TParent>;
    serialNumber?: QuoteToSerialNumberResolver<TParent>;
    carId?: QuoteToCarIdResolver<TParent>;
    colony?: QuoteToColonyResolver<TParent>;
    town?: QuoteToTownResolver<TParent>;
    state?: QuoteToStateResolver<TParent>;
    stateId?: QuoteToStateIdResolver<TParent>;
    brand?: QuoteToBrandResolver<TParent>;
    subBrand?: QuoteToSubBrandResolver<TParent>;
    description?: QuoteToDescriptionResolver<TParent>;
    folio?: QuoteToFolioResolver<TParent>;
    totalAmount?: QuoteToTotalAmountResolver<TParent>;
    netAmount?: QuoteToNetAmountResolver<TParent>;
    iva?: QuoteToIvaResolver<TParent>;
    surcharge?: QuoteToSurchargeResolver<TParent>;
    derecho?: QuoteToDerechoResolver<TParent>;
    police?: QuoteToPoliceResolver<TParent>;
    service?: QuoteToServiceResolver<TParent>;
    insurerServiceId?: QuoteToInsurerServiceIdResolver<TParent>;
    coverages?: QuoteToCoveragesResolver<TParent>;
    quoteServices?: QuoteToQuoteServicesResolver<TParent>;
    id?: QuoteToIdResolver<TParent>;
    createdAt?: QuoteToCreatedAtResolver<TParent>;
    updatedAt?: QuoteToUpdatedAtResolver<TParent>;
    member?: QuoteToMemberResolver<TParent>;
}
export interface QuoteToCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToRFCResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToHiredSameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToHiredFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToHiredLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToHiredPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToHiredEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToHiredAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToFrecuencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToPackageNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToGenderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToZipCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToDateOfBirthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToCarCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToStartValidityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToEndValidityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToCoverageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToPrimalTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToTypeFrecuencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToFirstPayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToSecondPayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToPlaqueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToCompensationValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToSerialNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToColonyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToTownResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToStateIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToSubBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToTotalAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToNetAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToIvaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToSurchargeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToDerechoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToInsurerServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToCoveragesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToQuoteServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICarQuotationTypeResolver<TParent = any> {
    id?: CarQuotationToIdResolver<TParent>;
    brand?: CarQuotationToBrandResolver<TParent>;
    description?: CarQuotationToDescriptionResolver<TParent>;
    subbrand?: CarQuotationToSubbrandResolver<TParent>;
}
export interface CarQuotationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CarQuotationToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CarQuotationToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CarQuotationToSubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerServiceTypeResolver<TParent = any> {
    name?: InsurerServiceToNameResolver<TParent>;
    codeName?: InsurerServiceToCodeNameResolver<TParent>;
    script?: InsurerServiceToScriptResolver<TParent>;
    template?: InsurerServiceToTemplateResolver<TParent>;
    autos?: InsurerServiceToAutosResolver<TParent>;
    type?: InsurerServiceToTypeResolver<TParent>;
    module?: InsurerServiceToModuleResolver<TParent>;
    priority?: InsurerServiceToPriorityResolver<TParent>;
    color?: InsurerServiceToColorResolver<TParent>;
    logo?: InsurerServiceToLogoResolver<TParent>;
    insurerServiceCredentials?: InsurerServiceToInsurerServiceCredentialsResolver<TParent>;
    insurerServiceEnvironments?: InsurerServiceToInsurerServiceEnvironmentsResolver<TParent>;
    insurers?: InsurerServiceToInsurersResolver<TParent>;
    quoteServices?: InsurerServiceToQuoteServicesResolver<TParent>;
    quotationCoverages?: InsurerServiceToQuotationCoveragesResolver<TParent>;
    id?: InsurerServiceToIdResolver<TParent>;
    createdAt?: InsurerServiceToCreatedAtResolver<TParent>;
    updatedAt?: InsurerServiceToUpdatedAtResolver<TParent>;
}
export interface InsurerServiceToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceToCodeNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceToScriptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceToTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceToAutosResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceToModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceToPriorityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceToColorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceToLogoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceToInsurerServiceCredentialsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceToInsurerServiceEnvironmentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceToInsurersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceToQuoteServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceToQuotationCoveragesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerServiceCredentialTypeResolver<TParent = any> {
    projectId?: InsurerServiceCredentialToProjectIdResolver<TParent>;
    insurerServiceId?: InsurerServiceCredentialToInsurerServiceIdResolver<TParent>;
    insurerService?: InsurerServiceCredentialToInsurerServiceResolver<TParent>;
    conduit?: InsurerServiceCredentialToConduitResolver<TParent>;
    username?: InsurerServiceCredentialToUsernameResolver<TParent>;
    password?: InsurerServiceCredentialToPasswordResolver<TParent>;
    rate?: InsurerServiceCredentialToRateResolver<TParent>;
    agent?: InsurerServiceCredentialToAgentResolver<TParent>;
    group?: InsurerServiceCredentialToGroupResolver<TParent>;
    deal?: InsurerServiceCredentialToDealResolver<TParent>;
    office?: InsurerServiceCredentialToOfficeResolver<TParent>;
    cprogram?: InsurerServiceCredentialToCprogramResolver<TParent>;
    default?: InsurerServiceCredentialToDefaultResolver<TParent>;
    active?: InsurerServiceCredentialToActiveResolver<TParent>;
    extra?: InsurerServiceCredentialToExtraResolver<TParent>;
    discount?: InsurerServiceCredentialToDiscountResolver<TParent>;
    owner?: InsurerServiceCredentialToOwnerResolver<TParent>;
    token?: InsurerServiceCredentialToTokenResolver<TParent>;
    environment?: InsurerServiceCredentialToEnvironmentResolver<TParent>;
    id?: InsurerServiceCredentialToIdResolver<TParent>;
    createdAt?: InsurerServiceCredentialToCreatedAtResolver<TParent>;
    updatedAt?: InsurerServiceCredentialToUpdatedAtResolver<TParent>;
}
export interface InsurerServiceCredentialToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToInsurerServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToInsurerServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToConduitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToUsernameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToPasswordResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToRateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToAgentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToDealResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToCprogramResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToDefaultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToExtraResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToOwnerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToEnvironmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceCredentialToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerServiceEnvironmentTypeResolver<TParent = any> {
    insurerServiceId?: InsurerServiceEnvironmentToInsurerServiceIdResolver<TParent>;
    insurerService?: InsurerServiceEnvironmentToInsurerServiceResolver<TParent>;
    environment?: InsurerServiceEnvironmentToEnvironmentResolver<TParent>;
    reference?: InsurerServiceEnvironmentToReferenceResolver<TParent>;
    endPoint?: InsurerServiceEnvironmentToEndPointResolver<TParent>;
    id?: InsurerServiceEnvironmentToIdResolver<TParent>;
    createdAt?: InsurerServiceEnvironmentToCreatedAtResolver<TParent>;
    updatedAt?: InsurerServiceEnvironmentToUpdatedAtResolver<TParent>;
}
export interface InsurerServiceEnvironmentToInsurerServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceEnvironmentToInsurerServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceEnvironmentToEnvironmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceEnvironmentToReferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceEnvironmentToEndPointResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceEnvironmentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceEnvironmentToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerServiceEnvironmentToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerTypeResolver<TParent = any> {
    projectId?: InsurerToProjectIdResolver<TParent>;
    insurerServiceId?: InsurerToInsurerServiceIdResolver<TParent>;
    insurerService?: InsurerToInsurerServiceResolver<TParent>;
    name?: InsurerToNameResolver<TParent>;
    percentageMax?: InsurerToPercentageMaxResolver<TParent>;
    id?: InsurerToIdResolver<TParent>;
    createdAt?: InsurerToCreatedAtResolver<TParent>;
    updatedAt?: InsurerToUpdatedAtResolver<TParent>;
}
export interface InsurerToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerToInsurerServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerToInsurerServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerToPercentageMaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuoteServiceTypeResolver<TParent = any> {
    quoteId?: QuoteServiceToQuoteIdResolver<TParent>;
    quote?: QuoteServiceToQuoteResolver<TParent>;
    serviceId?: QuoteServiceToServiceIdResolver<TParent>;
    insurerService?: QuoteServiceToInsurerServiceResolver<TParent>;
    discount?: QuoteServiceToDiscountResolver<TParent>;
    deductible?: QuoteServiceToDeductibleResolver<TParent>;
    firstPay?: QuoteServiceToFirstPayResolver<TParent>;
    secondPay?: QuoteServiceToSecondPayResolver<TParent>;
    status?: QuoteServiceToStatusResolver<TParent>;
    folio?: QuoteServiceToFolioResolver<TParent>;
    totalAmount?: QuoteServiceToTotalAmountResolver<TParent>;
    netAmount?: QuoteServiceToNetAmountResolver<TParent>;
    derecho?: QuoteServiceToDerechoResolver<TParent>;
    police?: QuoteServiceToPoliceResolver<TParent>;
    id?: QuoteServiceToIdResolver<TParent>;
    createdAt?: QuoteServiceToCreatedAtResolver<TParent>;
    updatedAt?: QuoteServiceToUpdatedAtResolver<TParent>;
}
export interface QuoteServiceToQuoteIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteServiceToQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteServiceToServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteServiceToInsurerServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteServiceToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteServiceToDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteServiceToFirstPayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteServiceToSecondPayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteServiceToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteServiceToFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteServiceToTotalAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteServiceToNetAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteServiceToDerechoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteServiceToPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteServiceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteServiceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteServiceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStaffQuoteTypeResolver<TParent = any> {
    proposals?: StaffQuoteToProposalsResolver<TParent>;
    collaborators?: StaffQuoteToCollaboratorsResolver<TParent>;
    solicitorId?: StaffQuoteToSolicitorIdResolver<TParent>;
    serviceId?: StaffQuoteToServiceIdResolver<TParent>;
    projectId?: StaffQuoteToProjectIdResolver<TParent>;
    status?: StaffQuoteToStatusResolver<TParent>;
    id?: StaffQuoteToIdResolver<TParent>;
    createdAt?: StaffQuoteToCreatedAtResolver<TParent>;
    updatedAt?: StaffQuoteToUpdatedAtResolver<TParent>;
}
export interface StaffQuoteToProposalsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StaffQuoteToCollaboratorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StaffQuoteToSolicitorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StaffQuoteToServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StaffQuoteToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StaffQuoteToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StaffQuoteToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StaffQuoteToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StaffQuoteToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface Imultiquoter_ProposalTypeResolver<TParent = any> {
    staffQuote?: multiquoter_ProposalToStaffQuoteResolver<TParent>;
    staffQuoteId?: multiquoter_ProposalToStaffQuoteIdResolver<TParent>;
    methodology?: multiquoter_ProposalToMethodologyResolver<TParent>;
    status?: multiquoter_ProposalToStatusResolver<TParent>;
    id?: multiquoter_ProposalToIdResolver<TParent>;
    createdAt?: multiquoter_ProposalToCreatedAtResolver<TParent>;
    updatedAt?: multiquoter_ProposalToUpdatedAtResolver<TParent>;
}
export interface multiquoter_ProposalToStaffQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_ProposalToStaffQuoteIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_ProposalToMethodologyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_ProposalToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_ProposalToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_ProposalToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_ProposalToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface Imultiquoter_CollaboratorTypeResolver<TParent = any> {
    staffQuote?: multiquoter_CollaboratorToStaffQuoteResolver<TParent>;
    memberId?: multiquoter_CollaboratorToMemberIdResolver<TParent>;
    projectRoleId?: multiquoter_CollaboratorToProjectRoleIdResolver<TParent>;
    staffQuoteId?: multiquoter_CollaboratorToStaffQuoteIdResolver<TParent>;
    estimatedTime?: multiquoter_CollaboratorToEstimatedTimeResolver<TParent>;
    amount?: multiquoter_CollaboratorToAmountResolver<TParent>;
    id?: multiquoter_CollaboratorToIdResolver<TParent>;
    createdAt?: multiquoter_CollaboratorToCreatedAtResolver<TParent>;
    updatedAt?: multiquoter_CollaboratorToUpdatedAtResolver<TParent>;
}
export interface multiquoter_CollaboratorToStaffQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_CollaboratorToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_CollaboratorToProjectRoleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_CollaboratorToStaffQuoteIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_CollaboratorToEstimatedTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_CollaboratorToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_CollaboratorToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_CollaboratorToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_CollaboratorToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerCoverageProjectTypeResolver<TParent = any> {
    projectId?: InsurerCoverageProjectToProjectIdResolver<TParent>;
    insurerServiceId?: InsurerCoverageProjectToInsurerServiceIdResolver<TParent>;
    insurerService?: InsurerCoverageProjectToInsurerServiceResolver<TParent>;
    insurerCoverageId?: InsurerCoverageProjectToInsurerCoverageIdResolver<TParent>;
    insurerCoverage?: InsurerCoverageProjectToInsurerCoverageResolver<TParent>;
    insurerPackages?: InsurerCoverageProjectToInsurerPackagesResolver<TParent>;
    sumAssured?: InsurerCoverageProjectToSumAssuredResolver<TParent>;
    sumType?: InsurerCoverageProjectToSumTypeResolver<TParent>;
    deductible?: InsurerCoverageProjectToDeductibleResolver<TParent>;
    prima?: InsurerCoverageProjectToPrimaResolver<TParent>;
    deductibleOptions?: InsurerCoverageProjectToDeductibleOptionsResolver<TParent>;
    sumAssuredOptions?: InsurerCoverageProjectToSumAssuredOptionsResolver<TParent>;
    isActive?: InsurerCoverageProjectToIsActiveResolver<TParent>;
    visible?: InsurerCoverageProjectToVisibleResolver<TParent>;
    priority?: InsurerCoverageProjectToPriorityResolver<TParent>;
    ampliaAvailable?: InsurerCoverageProjectToAmpliaAvailableResolver<TParent>;
    limitadaAvailable?: InsurerCoverageProjectToLimitadaAvailableResolver<TParent>;
    rCAvailable?: InsurerCoverageProjectToRCAvailableResolver<TParent>;
    id?: InsurerCoverageProjectToIdResolver<TParent>;
    createdAt?: InsurerCoverageProjectToCreatedAtResolver<TParent>;
    updatedAt?: InsurerCoverageProjectToUpdatedAtResolver<TParent>;
}
export interface InsurerCoverageProjectToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToInsurerServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToInsurerServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToInsurerCoverageIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToInsurerCoverageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToInsurerPackagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToSumAssuredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToSumTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToPrimaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToDeductibleOptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToSumAssuredOptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToVisibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToPriorityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToAmpliaAvailableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToLimitadaAvailableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToRCAvailableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageProjectToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerCoverageTypeResolver<TParent = any> {
    code?: InsurerCoverageToCodeResolver<TParent>;
    name?: InsurerCoverageToNameResolver<TParent>;
    description?: InsurerCoverageToDescriptionResolver<TParent>;
    insurerServiceId?: InsurerCoverageToInsurerServiceIdResolver<TParent>;
    insurerService?: InsurerCoverageToInsurerServiceResolver<TParent>;
    id?: InsurerCoverageToIdResolver<TParent>;
    createdAt?: InsurerCoverageToCreatedAtResolver<TParent>;
    updatedAt?: InsurerCoverageToUpdatedAtResolver<TParent>;
}
export interface InsurerCoverageToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageToInsurerServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageToInsurerServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCoverageToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICotizacionPackageTypeResolver<TParent = any> {
    id?: CotizacionPackageToIdResolver<TParent>;
    sumassured?: CotizacionPackageToSumassuredResolver<TParent>;
    deductible?: CotizacionPackageToDeductibleResolver<TParent>;
    isbase?: CotizacionPackageToIsbaseResolver<TParent>;
    isactive?: CotizacionPackageToIsactiveResolver<TParent>;
    peroccupant?: CotizacionPackageToPeroccupantResolver<TParent>;
    coverageId?: CotizacionPackageToCoverageIdResolver<TParent>;
    packageId?: CotizacionPackageToPackageIdResolver<TParent>;
    serviceId?: CotizacionPackageToServiceIdResolver<TParent>;
    deductibleoptions?: CotizacionPackageToDeductibleoptionsResolver<TParent>;
    sumassuredoptions?: CotizacionPackageToSumassuredoptionsResolver<TParent>;
    priority?: CotizacionPackageToPriorityResolver<TParent>;
    coverage?: CotizacionPackageToCoverageResolver<TParent>;
    package?: CotizacionPackageToPackageResolver<TParent>;
    service?: CotizacionPackageToServiceResolver<TParent>;
}
export interface CotizacionPackageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionPackageToSumassuredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionPackageToDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionPackageToIsbaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionPackageToIsactiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionPackageToPeroccupantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionPackageToCoverageIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionPackageToPackageIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionPackageToServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionPackageToDeductibleoptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionPackageToSumassuredoptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionPackageToPriorityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionPackageToCoverageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionPackageToPackageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionPackageToServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoveragesCoverageTypeResolver<TParent = any> {
    id?: CoveragesCoverageToIdResolver<TParent>;
    code?: CoveragesCoverageToCodeResolver<TParent>;
    name?: CoveragesCoverageToNameResolver<TParent>;
    description?: CoveragesCoverageToDescriptionResolver<TParent>;
    insuranceId?: CoveragesCoverageToInsuranceIdResolver<TParent>;
    abbreviation?: CoveragesCoverageToAbbreviationResolver<TParent>;
    insurance?: CoveragesCoverageToInsuranceResolver<TParent>;
    cotizacionPackages?: CoveragesCoverageToCotizacionPackagesResolver<TParent>;
}
export interface CoveragesCoverageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragesCoverageToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragesCoverageToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragesCoverageToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragesCoverageToInsuranceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragesCoverageToAbbreviationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragesCoverageToInsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragesCoverageToCotizacionPackagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IGenericsServiceTypeResolver<TParent = any> {
    registerUser?: GenericsServiceToRegisterUserResolver<TParent>;
    runEmision?: GenericsServiceToRunEmisionResolver<TParent>;
    printPolice?: GenericsServiceToPrintPoliceResolver<TParent>;
    id?: GenericsServiceToIdResolver<TParent>;
    name?: GenericsServiceToNameResolver<TParent>;
    script?: GenericsServiceToScriptResolver<TParent>;
    template?: GenericsServiceToTemplateResolver<TParent>;
    autos?: GenericsServiceToAutosResolver<TParent>;
    type?: GenericsServiceToTypeResolver<TParent>;
    module?: GenericsServiceToModuleResolver<TParent>;
    priority?: GenericsServiceToPriorityResolver<TParent>;
    color?: GenericsServiceToColorResolver<TParent>;
    logo?: GenericsServiceToLogoResolver<TParent>;
    cotizacionCredentials?: GenericsServiceToCotizacionCredentialsResolver<TParent>;
    cotizacionPackages?: GenericsServiceToCotizacionPackagesResolver<TParent>;
    cotizacionQuotes?: GenericsServiceToCotizacionQuotesResolver<TParent>;
    coveragesCoverages?: GenericsServiceToCoveragesCoveragesResolver<TParent>;
}
export interface GenericsServiceToRegisterUserArgs {
    data: string;
}
export interface GenericsServiceToRegisterUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: GenericsServiceToRegisterUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GenericsServiceToRunEmisionArgs {
    data: string;
}
export interface GenericsServiceToRunEmisionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: GenericsServiceToRunEmisionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GenericsServiceToPrintPoliceArgs {
    quoteId: string;
}
export interface GenericsServiceToPrintPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: GenericsServiceToPrintPoliceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GenericsServiceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GenericsServiceToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GenericsServiceToScriptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GenericsServiceToTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GenericsServiceToAutosResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GenericsServiceToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GenericsServiceToModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GenericsServiceToPriorityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GenericsServiceToColorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GenericsServiceToLogoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GenericsServiceToCotizacionCredentialsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GenericsServiceToCotizacionPackagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GenericsServiceToCotizacionQuotesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GenericsServiceToCoveragesCoveragesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IServiceProcessPayloadTypeResolver<TParent = any> {
    name?: ServiceProcessPayloadToNameResolver<TParent>;
    error?: ServiceProcessPayloadToErrorResolver<TParent>;
    success?: ServiceProcessPayloadToSuccessResolver<TParent>;
    result?: ServiceProcessPayloadToResultResolver<TParent>;
}
export interface ServiceProcessPayloadToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceProcessPayloadToErrorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceProcessPayloadToSuccessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceProcessPayloadToResultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICotizacionCredentialTypeResolver<TParent = any> {
    id?: CotizacionCredentialToIdResolver<TParent>;
    conduit?: CotizacionCredentialToConduitResolver<TParent>;
    username?: CotizacionCredentialToUsernameResolver<TParent>;
    password?: CotizacionCredentialToPasswordResolver<TParent>;
    rate?: CotizacionCredentialToRateResolver<TParent>;
    agent?: CotizacionCredentialToAgentResolver<TParent>;
    group?: CotizacionCredentialToGroupResolver<TParent>;
    deal?: CotizacionCredentialToDealResolver<TParent>;
    office?: CotizacionCredentialToOfficeResolver<TParent>;
    cprogram?: CotizacionCredentialToCprogramResolver<TParent>;
    default?: CotizacionCredentialToDefaultResolver<TParent>;
    active?: CotizacionCredentialToActiveResolver<TParent>;
    extra?: CotizacionCredentialToExtraResolver<TParent>;
    serviceId?: CotizacionCredentialToServiceIdResolver<TParent>;
    discount?: CotizacionCredentialToDiscountResolver<TParent>;
    owner?: CotizacionCredentialToOwnerResolver<TParent>;
    production?: CotizacionCredentialToProductionResolver<TParent>;
    service?: CotizacionCredentialToServiceResolver<TParent>;
}
export interface CotizacionCredentialToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCredentialToConduitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCredentialToUsernameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCredentialToPasswordResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCredentialToRateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCredentialToAgentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCredentialToGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCredentialToDealResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCredentialToOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCredentialToCprogramResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCredentialToDefaultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCredentialToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCredentialToExtraResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCredentialToServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCredentialToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCredentialToOwnerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCredentialToProductionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCredentialToServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICotizacionQuoteTypeResolver<TParent = any> {
    issued?: CotizacionQuoteToIssuedResolver<TParent>;
    id?: CotizacionQuoteToIdResolver<TParent>;
    createdAt?: CotizacionQuoteToCreatedAtResolver<TParent>;
    updatedAt?: CotizacionQuoteToUpdatedAtResolver<TParent>;
    paymentfrequency?: CotizacionQuoteToPaymentfrequencyResolver<TParent>;
    startvigency?: CotizacionQuoteToStartvigencyResolver<TParent>;
    endvigency?: CotizacionQuoteToEndvigencyResolver<TParent>;
    cardescription?: CotizacionQuoteToCardescriptionResolver<TParent>;
    totalamount?: CotizacionQuoteToTotalamountResolver<TParent>;
    surcharge?: CotizacionQuoteToSurchargeResolver<TParent>;
    folioquote?: CotizacionQuoteToFolioquoteResolver<TParent>;
    police?: CotizacionQuoteToPoliceResolver<TParent>;
    derecho?: CotizacionQuoteToDerechoResolver<TParent>;
    pdf?: CotizacionQuoteToPdfResolver<TParent>;
    receiptpdf?: CotizacionQuoteToReceiptpdfResolver<TParent>;
    package?: CotizacionQuoteToPackageResolver<TParent>;
    iva?: CotizacionQuoteToIvaResolver<TParent>;
    netAmount?: CotizacionQuoteToNetAmountResolver<TParent>;
    selected?: CotizacionQuoteToSelectedResolver<TParent>;
    carCompanyCode?: CotizacionQuoteToCarCompanyCodeResolver<TParent>;
    carFormId?: CotizacionQuoteToCarFormIdResolver<TParent>;
    serviceId?: CotizacionQuoteToServiceIdResolver<TParent>;
    status?: CotizacionQuoteToStatusResolver<TParent>;
    extra?: CotizacionQuoteToExtraResolver<TParent>;
    carForm?: CotizacionQuoteToCarFormResolver<TParent>;
    service?: CotizacionQuoteToServiceResolver<TParent>;
    cotizacionQuoteCoverages?: CotizacionQuoteToCotizacionQuoteCoveragesResolver<TParent>;
    cotizacionQuotePayForms?: CotizacionQuoteToCotizacionQuotePayFormsResolver<TParent>;
}
export interface CotizacionQuoteToIssuedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToPaymentfrequencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToStartvigencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToEndvigencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToCardescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToTotalamountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToSurchargeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToFolioquoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToDerechoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToPdfResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToReceiptpdfResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToPackageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToIvaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToNetAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToSelectedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToCarCompanyCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToCarFormIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToServiceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToExtraResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToCarFormResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToCotizacionQuoteCoveragesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteToCotizacionQuotePayFormsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICotizacionCarFormTypeResolver<TParent = any> {
    id?: CotizacionCarFormToIdResolver<TParent>;
    createdAt?: CotizacionCarFormToCreatedAtResolver<TParent>;
    updatedAt?: CotizacionCarFormToUpdatedAtResolver<TParent>;
    cardescription?: CotizacionCarFormToCardescriptionResolver<TParent>;
    carId?: CotizacionCarFormToCarIdResolver<TParent>;
    year?: CotizacionCarFormToYearResolver<TParent>;
    code?: CotizacionCarFormToCodeResolver<TParent>;
    serialNumber?: CotizacionCarFormToSerialNumberResolver<TParent>;
    engineNumber?: CotizacionCarFormToEngineNumberResolver<TParent>;
    paymentMethod?: CotizacionCarFormToPaymentMethodResolver<TParent>;
    plates?: CotizacionCarFormToPlatesResolver<TParent>;
    owner?: CotizacionCarFormToOwnerResolver<TParent>;
    clientId?: CotizacionCarFormToClientIdResolver<TParent>;
    origin?: CotizacionCarFormToOriginResolver<TParent>;
    client?: CotizacionCarFormToClientResolver<TParent>;
    cotizacionQuotes?: CotizacionCarFormToCotizacionQuotesResolver<TParent>;
}
export interface CotizacionCarFormToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCarFormToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCarFormToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCarFormToCardescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCarFormToCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCarFormToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCarFormToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCarFormToSerialNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCarFormToEngineNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCarFormToPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCarFormToPlatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCarFormToOwnerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCarFormToClientIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCarFormToOriginResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCarFormToClientResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionCarFormToCotizacionQuotesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IClientsClientTypeResolver<TParent = any> {
    id?: ClientsClientToIdResolver<TParent>;
    createdAt?: ClientsClientToCreatedAtResolver<TParent>;
    updatedAt?: ClientsClientToUpdatedAtResolver<TParent>;
    firstname?: ClientsClientToFirstnameResolver<TParent>;
    lastname?: ClientsClientToLastnameResolver<TParent>;
    age?: ClientsClientToAgeResolver<TParent>;
    email?: ClientsClientToEmailResolver<TParent>;
    phone?: ClientsClientToPhoneResolver<TParent>;
    taxpayerid?: ClientsClientToTaxpayeridResolver<TParent>;
    secondlastname?: ClientsClientToSecondlastnameResolver<TParent>;
    birthdate?: ClientsClientToBirthdateResolver<TParent>;
    civilStatus?: ClientsClientToCivilStatusResolver<TParent>;
    gender?: ClientsClientToGenderResolver<TParent>;
    clientsAddresses?: ClientsClientToClientsAddressesResolver<TParent>;
    cotizacionCarForms?: ClientsClientToCotizacionCarFormsResolver<TParent>;
}
export interface ClientsClientToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsClientToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsClientToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsClientToFirstnameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsClientToLastnameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsClientToAgeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsClientToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsClientToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsClientToTaxpayeridResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsClientToSecondlastnameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsClientToBirthdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsClientToCivilStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsClientToGenderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsClientToClientsAddressesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsClientToCotizacionCarFormsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IClientsAddressTypeResolver<TParent = any> {
    id?: ClientsAddressToIdResolver<TParent>;
    city?: ClientsAddressToCityResolver<TParent>;
    state?: ClientsAddressToStateResolver<TParent>;
    zipcode?: ClientsAddressToZipcodeResolver<TParent>;
    clientId?: ClientsAddressToClientIdResolver<TParent>;
    suburb?: ClientsAddressToSuburbResolver<TParent>;
    internalnumber?: ClientsAddressToInternalnumberResolver<TParent>;
    number?: ClientsAddressToNumberResolver<TParent>;
    street?: ClientsAddressToStreetResolver<TParent>;
    country?: ClientsAddressToCountryResolver<TParent>;
    client?: ClientsAddressToClientResolver<TParent>;
}
export interface ClientsAddressToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsAddressToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsAddressToStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsAddressToZipcodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsAddressToClientIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsAddressToSuburbResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsAddressToInternalnumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsAddressToNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsAddressToStreetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsAddressToCountryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientsAddressToClientResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICotizacionQuoteCoverageTypeResolver<TParent = any> {
    id?: CotizacionQuoteCoverageToIdResolver<TParent>;
    createdAt?: CotizacionQuoteCoverageToCreatedAtResolver<TParent>;
    updatedAt?: CotizacionQuoteCoverageToUpdatedAtResolver<TParent>;
    name?: CotizacionQuoteCoverageToNameResolver<TParent>;
    cobId?: CotizacionQuoteCoverageToCobIdResolver<TParent>;
    sumassured?: CotizacionQuoteCoverageToSumassuredResolver<TParent>;
    deductible?: CotizacionQuoteCoverageToDeductibleResolver<TParent>;
    total?: CotizacionQuoteCoverageToTotalResolver<TParent>;
    neto?: CotizacionQuoteCoverageToNetoResolver<TParent>;
    quoteId?: CotizacionQuoteCoverageToQuoteIdResolver<TParent>;
    priority?: CotizacionQuoteCoverageToPriorityResolver<TParent>;
    quote?: CotizacionQuoteCoverageToQuoteResolver<TParent>;
}
export interface CotizacionQuoteCoverageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteCoverageToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteCoverageToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteCoverageToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteCoverageToCobIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteCoverageToSumassuredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteCoverageToDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteCoverageToTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteCoverageToNetoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteCoverageToQuoteIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteCoverageToPriorityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuoteCoverageToQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICotizacionQuotePayFormTypeResolver<TParent = any> {
    id?: CotizacionQuotePayFormToIdResolver<TParent>;
    netamount?: CotizacionQuotePayFormToNetamountResolver<TParent>;
    firstinstalment?: CotizacionQuotePayFormToFirstinstalmentResolver<TParent>;
    model?: CotizacionQuotePayFormToModelResolver<TParent>;
    iva?: CotizacionQuotePayFormToIvaResolver<TParent>;
    subsecuentinstalments?: CotizacionQuotePayFormToSubsecuentinstalmentsResolver<TParent>;
    rpf?: CotizacionQuotePayFormToRpfResolver<TParent>;
    totalamount?: CotizacionQuotePayFormToTotalamountResolver<TParent>;
    startvigency?: CotizacionQuotePayFormToStartvigencyResolver<TParent>;
    endvigency?: CotizacionQuotePayFormToEndvigencyResolver<TParent>;
    quoteId?: CotizacionQuotePayFormToQuoteIdResolver<TParent>;
    quantity?: CotizacionQuotePayFormToQuantityResolver<TParent>;
    quote?: CotizacionQuotePayFormToQuoteResolver<TParent>;
}
export interface CotizacionQuotePayFormToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuotePayFormToNetamountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuotePayFormToFirstinstalmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuotePayFormToModelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuotePayFormToIvaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuotePayFormToSubsecuentinstalmentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuotePayFormToRpfResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuotePayFormToTotalamountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuotePayFormToStartvigencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuotePayFormToEndvigencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuotePayFormToQuoteIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuotePayFormToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CotizacionQuotePayFormToQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoveragesPackagesListTypeResolver<TParent = any> {
    id?: CoveragesPackagesListToIdResolver<TParent>;
    name?: CoveragesPackagesListToNameResolver<TParent>;
    description?: CoveragesPackagesListToDescriptionResolver<TParent>;
    ramo?: CoveragesPackagesListToRamoResolver<TParent>;
    active?: CoveragesPackagesListToActiveResolver<TParent>;
    cotizacionPackages?: CoveragesPackagesListToCotizacionPackagesResolver<TParent>;
}
export interface CoveragesPackagesListToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragesPackagesListToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragesPackagesListToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragesPackagesListToRamoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragesPackagesListToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragesPackagesListToCotizacionPackagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRunServicePayloadTypeResolver<TParent = any> {
    quoterResponse?: RunServicePayloadToQuoterResponseResolver<TParent>;
}
export interface RunServicePayloadToQuoterResponseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuoterResponseTypeResolver<TParent = any> {
    primaTotal?: QuoterResponseToPrimaTotalResolver<TParent>;
    coverages?: QuoterResponseToCoveragesResolver<TParent>;
    quoteId?: QuoterResponseToQuoteIdResolver<TParent>;
    package?: QuoterResponseToPackageResolver<TParent>;
    product?: QuoterResponseToProductResolver<TParent>;
    quoteFolio?: QuoterResponseToQuoteFolioResolver<TParent>;
    beginDate?: QuoterResponseToBeginDateResolver<TParent>;
    endDate?: QuoterResponseToEndDateResolver<TParent>;
    carCompanyCode?: QuoterResponseToCarCompanyCodeResolver<TParent>;
    parentId?: QuoterResponseToParentIdResolver<TParent>;
    responseQuoter?: QuoterResponseToResponseQuoterResolver<TParent>;
}
export interface QuoterResponseToPrimaTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterResponseToCoveragesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterResponseToQuoteIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterResponseToPackageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterResponseToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterResponseToQuoteFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterResponseToBeginDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterResponseToEndDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterResponseToCarCompanyCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterResponseToParentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterResponseToResponseQuoterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoverageServiceTypeResolver<TParent = any> {
    coverageName?: CoverageServiceToCoverageNameResolver<TParent>;
    cobId?: CoverageServiceToCobIdResolver<TParent>;
    coverageSum?: CoverageServiceToCoverageSumResolver<TParent>;
    coverageDeductible?: CoverageServiceToCoverageDeductibleResolver<TParent>;
    total?: CoverageServiceToTotalResolver<TParent>;
}
export interface CoverageServiceToCoverageNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageServiceToCobIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageServiceToCoverageSumResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageServiceToCoverageDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageServiceToTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IResponseApiInsurerTypeResolver<TParent = any> {
    id?: ResponseApiInsurerToIdResolver<TParent>;
    parent_car_form?: ResponseApiInsurerToParent_car_formResolver<TParent>;
    prima_total?: ResponseApiInsurerToPrima_totalResolver<TParent>;
    quote_selected?: ResponseApiInsurerToQuote_selectedResolver<TParent>;
    emitido?: ResponseApiInsurerToEmitidoResolver<TParent>;
    url?: ResponseApiInsurerToUrlResolver<TParent>;
    paquete?: ResponseApiInsurerToPaqueteResolver<TParent>;
    frecuencia_pago?: ResponseApiInsurerToFrecuencia_pagoResolver<TParent>;
    dER?: ResponseApiInsurerToDERResolver<TParent>;
    cVE?: ResponseApiInsurerToCVEResolver<TParent>;
    iVA?: ResponseApiInsurerToIVAResolver<TParent>;
    rEC?: ResponseApiInsurerToRECResolver<TParent>;
    car_descr?: ResponseApiInsurerToCar_descrResolver<TParent>;
    folio_quote?: ResponseApiInsurerToFolio_quoteResolver<TParent>;
    fecha_inicio?: ResponseApiInsurerToFecha_inicioResolver<TParent>;
    fecha_fin?: ResponseApiInsurerToFecha_finResolver<TParent>;
    car_company_code?: ResponseApiInsurerToCar_company_codeResolver<TParent>;
    parent_id?: ResponseApiInsurerToParent_idResolver<TParent>;
    service?: ResponseApiInsurerToServiceResolver<TParent>;
    quote_coverages?: ResponseApiInsurerToQuote_coveragesResolver<TParent>;
    quote_pay_frecuency?: ResponseApiInsurerToQuote_pay_frecuencyResolver<TParent>;
    discount_services?: ResponseApiInsurerToDiscount_servicesResolver<TParent>;
}
export interface ResponseApiInsurerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToParent_car_formResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToPrima_totalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToQuote_selectedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToEmitidoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToPaqueteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToFrecuencia_pagoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToDERResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToCVEResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToIVAResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToRECResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToCar_descrResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToFolio_quoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToFecha_inicioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToFecha_finResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToCar_company_codeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToParent_idResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToQuote_coveragesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToQuote_pay_frecuencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponseApiInsurerToDiscount_servicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IServiceTypeResolver<TParent = any> {
    url?: ServiceToUrlResolver<TParent>;
    name?: ServiceToNameResolver<TParent>;
    id?: ServiceToIdResolver<TParent>;
}
export interface ServiceToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ServiceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuoteCoverageTypeResolver<TParent = any> {
    coverage_name?: QuoteCoverageToCoverage_nameResolver<TParent>;
    cob_id?: QuoteCoverageToCob_idResolver<TParent>;
    sum_coverage?: QuoteCoverageToSum_coverageResolver<TParent>;
    deductible_coverage?: QuoteCoverageToDeductible_coverageResolver<TParent>;
    total?: QuoteCoverageToTotalResolver<TParent>;
}
export interface QuoteCoverageToCoverage_nameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteCoverageToCob_idResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteCoverageToSum_coverageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteCoverageToDeductible_coverageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteCoverageToTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuotePayFrecuencyTypeResolver<TParent = any> {
    id?: QuotePayFrecuencyToIdResolver<TParent>;
    first_pay?: QuotePayFrecuencyToFirst_payResolver<TParent>;
    tipe?: QuotePayFrecuencyToTipeResolver<TParent>;
    second_pay?: QuotePayFrecuencyToSecond_payResolver<TParent>;
    total_amount?: QuotePayFrecuencyToTotal_amountResolver<TParent>;
    fecha_inicio?: QuotePayFrecuencyToFecha_inicioResolver<TParent>;
    fecha_fin?: QuotePayFrecuencyToFecha_finResolver<TParent>;
}
export interface QuotePayFrecuencyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotePayFrecuencyToFirst_payResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotePayFrecuencyToTipeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotePayFrecuencyToSecond_payResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotePayFrecuencyToTotal_amountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotePayFrecuencyToFecha_inicioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotePayFrecuencyToFecha_finResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDiscountServiceTypeResolver<TParent = any> {
    percentage?: DiscountServiceToPercentageResolver<TParent>;
}
export interface DiscountServiceToPercentageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStadisticsResultTypeResolver<TParent = any> {
    name?: StadisticsResultToNameResolver<TParent>;
    hg?: StadisticsResultToHgResolver<TParent>;
    percentaje?: StadisticsResultToPercentajeResolver<TParent>;
    color?: StadisticsResultToColorResolver<TParent>;
}
export interface StadisticsResultToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StadisticsResultToHgResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StadisticsResultToPercentajeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StadisticsResultToColorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListRQuoterProfilesByProjectIdConnectionTypeResolver<TParent = any> {
    pageInfo?: ListRQuoterProfilesByProjectIdConnectionToPageInfoResolver<TParent>;
    edges?: ListRQuoterProfilesByProjectIdConnectionToEdgesResolver<TParent>;
    nodes?: ListRQuoterProfilesByProjectIdConnectionToNodesResolver<TParent>;
    totalCount?: ListRQuoterProfilesByProjectIdConnectionToTotalCountResolver<TParent>;
}
export interface ListRQuoterProfilesByProjectIdConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListRQuoterProfilesByProjectIdConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListRQuoterProfilesByProjectIdConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListRQuoterProfilesByProjectIdConnectionToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListRQuoterProfilesByProjectIdEdgeTypeResolver<TParent = any> {
    cursor?: ListRQuoterProfilesByProjectIdEdgeToCursorResolver<TParent>;
    node?: ListRQuoterProfilesByProjectIdEdgeToNodeResolver<TParent>;
}
export interface ListRQuoterProfilesByProjectIdEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListRQuoterProfilesByProjectIdEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuoterProfileTypeResolver<TParent = any> {
    projectId?: QuoterProfileToProjectIdResolver<TParent>;
    name?: QuoterProfileToNameResolver<TParent>;
    officeId?: QuoterProfileToOfficeIdResolver<TParent>;
    office?: QuoterProfileToOfficeResolver<TParent>;
    quoterProfileInsurers?: QuoterProfileToQuoterProfileInsurersResolver<TParent>;
    id?: QuoterProfileToIdResolver<TParent>;
    createdAt?: QuoterProfileToCreatedAtResolver<TParent>;
    updatedAt?: QuoterProfileToUpdatedAtResolver<TParent>;
}
export interface QuoterProfileToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileToOfficeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileToOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileToQuoterProfileInsurersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IOfficeTypeResolver<TParent = any> {
    projectId?: OfficeToProjectIdResolver<TParent>;
    name?: OfficeToNameResolver<TParent>;
    description?: OfficeToDescriptionResolver<TParent>;
    id?: OfficeToIdResolver<TParent>;
    createdAt?: OfficeToCreatedAtResolver<TParent>;
    updatedAt?: OfficeToUpdatedAtResolver<TParent>;
}
export interface OfficeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OfficeToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OfficeToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OfficeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OfficeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OfficeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuoterProfileInsurerTypeResolver<TParent = any> {
    projectId?: QuoterProfileInsurerToProjectIdResolver<TParent>;
    quoterProfileId?: QuoterProfileInsurerToQuoterProfileIdResolver<TParent>;
    quoterProfile?: QuoterProfileInsurerToQuoterProfileResolver<TParent>;
    insurerId?: QuoterProfileInsurerToInsurerIdResolver<TParent>;
    insurer?: QuoterProfileInsurerToInsurerResolver<TParent>;
    percentageBase?: QuoterProfileInsurerToPercentageBaseResolver<TParent>;
    percentageMax?: QuoterProfileInsurerToPercentageMaxResolver<TParent>;
    portalAgentQuote?: QuoterProfileInsurerToPortalAgentQuoteResolver<TParent>;
    portalAgentEmits?: QuoterProfileInsurerToPortalAgentEmitsResolver<TParent>;
    portalPublicQuote?: QuoterProfileInsurerToPortalPublicQuoteResolver<TParent>;
    portalPublicEmits?: QuoterProfileInsurerToPortalPublicEmitsResolver<TParent>;
    id?: QuoterProfileInsurerToIdResolver<TParent>;
    createdAt?: QuoterProfileInsurerToCreatedAtResolver<TParent>;
    updatedAt?: QuoterProfileInsurerToUpdatedAtResolver<TParent>;
}
export interface QuoterProfileInsurerToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileInsurerToQuoterProfileIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileInsurerToQuoterProfileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileInsurerToInsurerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileInsurerToInsurerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileInsurerToPercentageBaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileInsurerToPercentageMaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileInsurerToPortalAgentQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileInsurerToPortalAgentEmitsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileInsurerToPortalPublicQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileInsurerToPortalPublicEmitsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileInsurerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileInsurerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileInsurerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListRQuoterProfilesInsurerByProjectIdConnectionTypeResolver<TParent = any> {
    pageInfo?: ListRQuoterProfilesInsurerByProjectIdConnectionToPageInfoResolver<TParent>;
    edges?: ListRQuoterProfilesInsurerByProjectIdConnectionToEdgesResolver<TParent>;
    nodes?: ListRQuoterProfilesInsurerByProjectIdConnectionToNodesResolver<TParent>;
    totalCount?: ListRQuoterProfilesInsurerByProjectIdConnectionToTotalCountResolver<TParent>;
}
export interface ListRQuoterProfilesInsurerByProjectIdConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListRQuoterProfilesInsurerByProjectIdConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListRQuoterProfilesInsurerByProjectIdConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListRQuoterProfilesInsurerByProjectIdConnectionToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListRQuoterProfilesInsurerByProjectIdEdgeTypeResolver<TParent = any> {
    cursor?: ListRQuoterProfilesInsurerByProjectIdEdgeToCursorResolver<TParent>;
    node?: ListRQuoterProfilesInsurerByProjectIdEdgeToNodeResolver<TParent>;
}
export interface ListRQuoterProfilesInsurerByProjectIdEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListRQuoterProfilesInsurerByProjectIdEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IHomologatorTypeResolver<TParent = any> {
    abaCodeId?: HomologatorToAbaCodeIdResolver<TParent>;
    afirmeCodeId?: HomologatorToAfirmeCodeIdResolver<TParent>;
    aigCodeId?: HomologatorToAigCodeIdResolver<TParent>;
    anaCodeId?: HomologatorToAnaCodeIdResolver<TParent>;
    atlasCodeId?: HomologatorToAtlasCodeIdResolver<TParent>;
    axaCodeId?: HomologatorToAxaCodeIdResolver<TParent>;
    banorteCodeId?: HomologatorToBanorteCodeIdResolver<TParent>;
    gnpCodeId?: HomologatorToGnpCodeIdResolver<TParent>;
    hdiCodeId?: HomologatorToHdiCodeIdResolver<TParent>;
    potosiCodeId?: HomologatorToPotosiCodeIdResolver<TParent>;
    psCodeId?: HomologatorToPsCodeIdResolver<TParent>;
    qualitasCodeId?: HomologatorToQualitasCodeIdResolver<TParent>;
    zurichCodeId?: HomologatorToZurichCodeIdResolver<TParent>;
    mapfreCodeId?: HomologatorToMapfreCodeIdResolver<TParent>;
    id?: HomologatorToIdResolver<TParent>;
    createdAt?: HomologatorToCreatedAtResolver<TParent>;
    updatedAt?: HomologatorToUpdatedAtResolver<TParent>;
}
export interface HomologatorToAbaCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologatorToAfirmeCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologatorToAigCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologatorToAnaCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologatorToAtlasCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologatorToAxaCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologatorToBanorteCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologatorToGnpCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologatorToHdiCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologatorToPotosiCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologatorToPsCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologatorToQualitasCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologatorToZurichCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologatorToMapfreCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologatorToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologatorToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologatorToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuoteCollectionSegmentTypeResolver<TParent = any> {
    items?: QuoteCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: QuoteCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: QuoteCollectionSegmentToTotalCountResolver<TParent>;
}
export interface QuoteCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoteCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuoteCountTypeResolver<TParent = any> {
    count?: QuoteCountToCountResolver<TParent>;
}
export interface QuoteCountToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRegistrationTypeResolver<TParent = any> {
    projectId?: RegistrationToProjectIdResolver<TParent>;
    name?: RegistrationToNameResolver<TParent>;
    email?: RegistrationToEmailResolver<TParent>;
    state?: RegistrationToStateResolver<TParent>;
    city?: RegistrationToCityResolver<TParent>;
    tradename?: RegistrationToTradenameResolver<TParent>;
    company?: RegistrationToCompanyResolver<TParent>;
    interests?: RegistrationToInterestsResolver<TParent>;
    id?: RegistrationToIdResolver<TParent>;
    createdAt?: RegistrationToCreatedAtResolver<TParent>;
    updatedAt?: RegistrationToUpdatedAtResolver<TParent>;
}
export interface RegistrationToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistrationToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistrationToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistrationToStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistrationToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistrationToTradenameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistrationToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistrationToInterestsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistrationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistrationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistrationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuoterTypeResolver<TParent = any> {
    quote?: QuoterToQuoteResolver<TParent>;
    services?: QuoterToServicesResolver<TParent>;
}
export interface QuoterToQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterToServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IGenderDTOTypeResolver<TParent = any> {
    name?: GenderDTOToNameResolver<TParent>;
}
export interface GenderDTOToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICarTypeDTOTypeResolver<TParent = any> {
    name?: CarTypeDTOToNameResolver<TParent>;
}
export interface CarTypeDTOToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListBrandDTOTypeResolver<TParent = any> {
    name?: ListBrandDTOToNameResolver<TParent>;
    insurer?: ListBrandDTOToInsurerResolver<TParent>;
}
export interface ListBrandDTOToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListBrandDTOToInsurerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListSubBrandDTOTypeResolver<TParent = any> {
    name?: ListSubBrandDTOToNameResolver<TParent>;
    insurer?: ListSubBrandDTOToInsurerResolver<TParent>;
}
export interface ListSubBrandDTOToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListSubBrandDTOToInsurerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListYearDTOTypeResolver<TParent = any> {
    year?: ListYearDTOToYearResolver<TParent>;
    insurer?: ListYearDTOToInsurerResolver<TParent>;
}
export interface ListYearDTOToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListYearDTOToInsurerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListVersionDTOTypeResolver<TParent = any> {
    carId?: ListVersionDTOToCarIdResolver<TParent>;
    version?: ListVersionDTOToVersionResolver<TParent>;
    cveveh?: ListVersionDTOToCvevehResolver<TParent>;
    insurer?: ListVersionDTOToInsurerResolver<TParent>;
}
export interface ListVersionDTOToCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListVersionDTOToVersionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListVersionDTOToCvevehResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListVersionDTOToInsurerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IHomologationServiceTypeResolver<TParent = any> {
    homologated?: HomologationServiceToHomologatedResolver<TParent>;
    name?: HomologationServiceToNameResolver<TParent>;
    codeName?: HomologationServiceToCodeNameResolver<TParent>;
    homologateDescription?: HomologationServiceToHomologateDescriptionResolver<TParent>;
    color?: HomologationServiceToColorResolver<TParent>;
    logo?: HomologationServiceToLogoResolver<TParent>;
}
export interface HomologationServiceToHomologatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologationServiceToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologationServiceToCodeNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologationServiceToHomologateDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologationServiceToColorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface HomologationServiceToLogoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IColoniaDTOTypeResolver<TParent = any> {
    colonias?: ColoniaDTOToColoniasResolver<TParent>;
    estado?: ColoniaDTOToEstadoResolver<TParent>;
    municipio?: ColoniaDTOToMunicipioResolver<TParent>;
    munid?: ColoniaDTOToMunidResolver<TParent>;
}
export interface ColoniaDTOToColoniasResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ColoniaDTOToEstadoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ColoniaDTOToMunicipioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ColoniaDTOToMunidResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEstadoDTOTypeResolver<TParent = any> {
    name?: EstadoDTOToNameResolver<TParent>;
    value?: EstadoDTOToValueResolver<TParent>;
}
export interface EstadoDTOToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EstadoDTOToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoverageDTOTypeResolver<TParent = any> {
    servicename?: CoverageDTOToServicenameResolver<TParent>;
    type?: CoverageDTOToTypeResolver<TParent>;
    obligatory?: CoverageDTOToObligatoryResolver<TParent>;
    optional?: CoverageDTOToOptionalResolver<TParent>;
}
export interface CoverageDTOToServicenameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageDTOToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageDTOToObligatoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageDTOToOptionalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICatalogCollectionSegmentTypeResolver<TParent = any> {
    items?: CatalogCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: CatalogCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: CatalogCollectionSegmentToTotalCountResolver<TParent>;
}
export interface CatalogCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CatalogCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CatalogCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface Imultiquoter_CatalogTypeResolver<TParent = any> {
    brand?: multiquoter_CatalogToBrandResolver<TParent>;
    description?: multiquoter_CatalogToDescriptionResolver<TParent>;
    subBrand?: multiquoter_CatalogToSubBrandResolver<TParent>;
    catalogType?: multiquoter_CatalogToCatalogTypeResolver<TParent>;
    oldId?: multiquoter_CatalogToOldIdResolver<TParent>;
    years?: multiquoter_CatalogToYearsResolver<TParent>;
    id?: multiquoter_CatalogToIdResolver<TParent>;
    createdAt?: multiquoter_CatalogToCreatedAtResolver<TParent>;
    updatedAt?: multiquoter_CatalogToUpdatedAtResolver<TParent>;
}
export interface multiquoter_CatalogToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_CatalogToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_CatalogToSubBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_CatalogToCatalogTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_CatalogToOldIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_CatalogToYearsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_CatalogToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_CatalogToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface multiquoter_CatalogToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICatalogByYearTypeResolver<TParent = any> {
    year?: CatalogByYearToYearResolver<TParent>;
    cveveh?: CatalogByYearToCvevehResolver<TParent>;
    catalogId?: CatalogByYearToCatalogIdResolver<TParent>;
    catalog?: CatalogByYearToCatalogResolver<TParent>;
    id?: CatalogByYearToIdResolver<TParent>;
    createdAt?: CatalogByYearToCreatedAtResolver<TParent>;
    updatedAt?: CatalogByYearToUpdatedAtResolver<TParent>;
}
export interface CatalogByYearToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CatalogByYearToCvevehResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CatalogByYearToCatalogIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CatalogByYearToCatalogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CatalogByYearToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CatalogByYearToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CatalogByYearToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IOfficeCollectionSegmentTypeResolver<TParent = any> {
    items?: OfficeCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: OfficeCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: OfficeCollectionSegmentToTotalCountResolver<TParent>;
}
export interface OfficeCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OfficeCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OfficeCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuoterProfileCollectionSegmentTypeResolver<TParent = any> {
    items?: QuoterProfileCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: QuoterProfileCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: QuoterProfileCollectionSegmentToTotalCountResolver<TParent>;
}
export interface QuoterProfileCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuoterProfileCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IApiServiceTypeResolver<TParent = any> {
    projectId?: ApiServiceToProjectIdResolver<TParent>;
    label?: ApiServiceToLabelResolver<TParent>;
    serviceCode?: ApiServiceToServiceCodeResolver<TParent>;
    secretKey?: ApiServiceToSecretKeyResolver<TParent>;
    expiration?: ApiServiceToExpirationResolver<TParent>;
    url?: ApiServiceToUrlResolver<TParent>;
    id?: ApiServiceToIdResolver<TParent>;
    createdAt?: ApiServiceToCreatedAtResolver<TParent>;
    updatedAt?: ApiServiceToUpdatedAtResolver<TParent>;
}
export interface ApiServiceToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ApiServiceToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ApiServiceToServiceCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ApiServiceToSecretKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ApiServiceToExpirationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ApiServiceToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ApiServiceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ApiServiceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ApiServiceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicPageTypeResolver<TParent = any> {
    dynamicSections?: DynamicPageToDynamicSectionsResolver<TParent>;
    projectId?: DynamicPageToProjectIdResolver<TParent>;
    name?: DynamicPageToNameResolver<TParent>;
    label?: DynamicPageToLabelResolver<TParent>;
    id?: DynamicPageToIdResolver<TParent>;
    createdAt?: DynamicPageToCreatedAtResolver<TParent>;
    updatedAt?: DynamicPageToUpdatedAtResolver<TParent>;
}
export interface DynamicPageToDynamicSectionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicPageToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicPageToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicPageToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicPageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicPageToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicPageToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicSectionTypeResolver<TParent = any> {
    dynamicPage?: DynamicSectionToDynamicPageResolver<TParent>;
    dynamicTabs?: DynamicSectionToDynamicTabsResolver<TParent>;
    position?: DynamicSectionToPositionResolver<TParent>;
    isPrimary?: DynamicSectionToIsPrimaryResolver<TParent>;
    dynamicPageId?: DynamicSectionToDynamicPageIdResolver<TParent>;
    id?: DynamicSectionToIdResolver<TParent>;
    createdAt?: DynamicSectionToCreatedAtResolver<TParent>;
    updatedAt?: DynamicSectionToUpdatedAtResolver<TParent>;
}
export interface DynamicSectionToDynamicPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicSectionToDynamicTabsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicSectionToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicSectionToIsPrimaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicSectionToDynamicPageIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicSectionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicSectionToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicSectionToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicTabTypeResolver<TParent = any> {
    dynamicSection?: DynamicTabToDynamicSectionResolver<TParent>;
    dynamicSectionBlocks?: DynamicTabToDynamicSectionBlocksResolver<TParent>;
    name?: DynamicTabToNameResolver<TParent>;
    position?: DynamicTabToPositionResolver<TParent>;
    dynamicSectionId?: DynamicTabToDynamicSectionIdResolver<TParent>;
    id?: DynamicTabToIdResolver<TParent>;
    createdAt?: DynamicTabToCreatedAtResolver<TParent>;
    updatedAt?: DynamicTabToUpdatedAtResolver<TParent>;
}
export interface DynamicTabToDynamicSectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicTabToDynamicSectionBlocksResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicTabToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicTabToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicTabToDynamicSectionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicTabToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicTabToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicTabToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicSectionBlockTypeResolver<TParent = any> {
    dynamicTab?: DynamicSectionBlockToDynamicTabResolver<TParent>;
    dynamicBlock?: DynamicSectionBlockToDynamicBlockResolver<TParent>;
    dynamicCustomMetas?: DynamicSectionBlockToDynamicCustomMetasResolver<TParent>;
    label?: DynamicSectionBlockToLabelResolver<TParent>;
    position?: DynamicSectionBlockToPositionResolver<TParent>;
    style?: DynamicSectionBlockToStyleResolver<TParent>;
    dynamicBlockId?: DynamicSectionBlockToDynamicBlockIdResolver<TParent>;
    dynamicTabId?: DynamicSectionBlockToDynamicTabIdResolver<TParent>;
    id?: DynamicSectionBlockToIdResolver<TParent>;
    createdAt?: DynamicSectionBlockToCreatedAtResolver<TParent>;
    updatedAt?: DynamicSectionBlockToUpdatedAtResolver<TParent>;
}
export interface DynamicSectionBlockToDynamicTabResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicSectionBlockToDynamicBlockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicSectionBlockToDynamicCustomMetasResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicSectionBlockToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicSectionBlockToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicSectionBlockToStyleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicSectionBlockToDynamicBlockIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicSectionBlockToDynamicTabIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicSectionBlockToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicSectionBlockToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicSectionBlockToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicBlockTypeResolver<TParent = any> {
    dynamicSectionBlocks?: DynamicBlockToDynamicSectionBlocksResolver<TParent>;
    codeName?: DynamicBlockToCodeNameResolver<TParent>;
    description?: DynamicBlockToDescriptionResolver<TParent>;
    services?: DynamicBlockToServicesResolver<TParent>;
    components?: DynamicBlockToComponentsResolver<TParent>;
    style?: DynamicBlockToStyleResolver<TParent>;
    id?: DynamicBlockToIdResolver<TParent>;
    createdAt?: DynamicBlockToCreatedAtResolver<TParent>;
    updatedAt?: DynamicBlockToUpdatedAtResolver<TParent>;
}
export interface DynamicBlockToDynamicSectionBlocksResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicBlockToCodeNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicBlockToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicBlockToServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicBlockToComponentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicBlockToStyleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicBlockToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicBlockToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicBlockToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicCustomMetaTypeResolver<TParent = any> {
    dynamicSectionBlocks?: DynamicCustomMetaToDynamicSectionBlocksResolver<TParent>;
    dynamicCustomValues?: DynamicCustomMetaToDynamicCustomValuesResolver<TParent>;
    metaKey?: DynamicCustomMetaToMetaKeyResolver<TParent>;
    metaType?: DynamicCustomMetaToMetaTypeResolver<TParent>;
    label?: DynamicCustomMetaToLabelResolver<TParent>;
    description?: DynamicCustomMetaToDescriptionResolver<TParent>;
    position?: DynamicCustomMetaToPositionResolver<TParent>;
    dynamicSectionBlockId?: DynamicCustomMetaToDynamicSectionBlockIdResolver<TParent>;
    id?: DynamicCustomMetaToIdResolver<TParent>;
    createdAt?: DynamicCustomMetaToCreatedAtResolver<TParent>;
    updatedAt?: DynamicCustomMetaToUpdatedAtResolver<TParent>;
}
export interface DynamicCustomMetaToDynamicSectionBlocksResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicCustomMetaToDynamicCustomValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicCustomMetaToMetaKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicCustomMetaToMetaTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicCustomMetaToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicCustomMetaToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicCustomMetaToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicCustomMetaToDynamicSectionBlockIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicCustomMetaToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicCustomMetaToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicCustomMetaToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicCustomValueTypeResolver<TParent = any> {
    dynamicCustomMetas?: DynamicCustomValueToDynamicCustomMetasResolver<TParent>;
    memberId?: DynamicCustomValueToMemberIdResolver<TParent>;
    dynamicCustomMetaId?: DynamicCustomValueToDynamicCustomMetaIdResolver<TParent>;
    value?: DynamicCustomValueToValueResolver<TParent>;
    id?: DynamicCustomValueToIdResolver<TParent>;
    createdAt?: DynamicCustomValueToCreatedAtResolver<TParent>;
    updatedAt?: DynamicCustomValueToUpdatedAtResolver<TParent>;
}
export interface DynamicCustomValueToDynamicCustomMetasResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicCustomValueToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicCustomValueToDynamicCustomMetaIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicCustomValueToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicCustomValueToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicCustomValueToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicCustomValueToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicBlockCollectionSegmentTypeResolver<TParent = any> {
    items?: DynamicBlockCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: DynamicBlockCollectionSegmentToPageInfoResolver<TParent>;
}
export interface DynamicBlockCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicBlockCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicSectionCollectionSegmentTypeResolver<TParent = any> {
    items?: DynamicSectionCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: DynamicSectionCollectionSegmentToPageInfoResolver<TParent>;
}
export interface DynamicSectionCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicSectionCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicTabCollectionSegmentTypeResolver<TParent = any> {
    items?: DynamicTabCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: DynamicTabCollectionSegmentToPageInfoResolver<TParent>;
}
export interface DynamicTabCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicTabCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicSectionBlockCollectionSegmentTypeResolver<TParent = any> {
    items?: DynamicSectionBlockCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: DynamicSectionBlockCollectionSegmentToPageInfoResolver<TParent>;
}
export interface DynamicSectionBlockCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicSectionBlockCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicCustomMetaCollectionSegmentTypeResolver<TParent = any> {
    items?: DynamicCustomMetaCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: DynamicCustomMetaCollectionSegmentToPageInfoResolver<TParent>;
}
export interface DynamicCustomMetaCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicCustomMetaCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicCustomValueCollectionSegmentTypeResolver<TParent = any> {
    items?: DynamicCustomValueCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: DynamicCustomValueCollectionSegmentToPageInfoResolver<TParent>;
}
export interface DynamicCustomValueCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DynamicCustomValueCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IChargeCollectionSegmentTypeResolver<TParent = any> {
    items?: ChargeCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ChargeCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ChargeCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ChargeCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ChargeCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ChargeCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IChargeTypeResolver<TParent = any> {
    projectId?: ChargeToProjectIdResolver<TParent>;
    eventId?: ChargeToEventIdResolver<TParent>;
    memberId?: ChargeToMemberIdResolver<TParent>;
    total?: ChargeToTotalResolver<TParent>;
    id?: ChargeToIdResolver<TParent>;
    createdAt?: ChargeToCreatedAtResolver<TParent>;
    updatedAt?: ChargeToUpdatedAtResolver<TParent>;
}
export interface ChargeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ChargeToEventIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ChargeToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ChargeToTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ChargeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ChargeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ChargeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IClinicHistoryTypeResolver<TParent = any> {
    projectId?: ClinicHistoryToProjectIdResolver<TParent>;
    eventId?: ClinicHistoryToEventIdResolver<TParent>;
    memberId?: ClinicHistoryToMemberIdResolver<TParent>;
    notes?: ClinicHistoryToNotesResolver<TParent>;
    isVisible?: ClinicHistoryToIsVisibleResolver<TParent>;
    position?: ClinicHistoryToPositionResolver<TParent>;
    id?: ClinicHistoryToIdResolver<TParent>;
    createdAt?: ClinicHistoryToCreatedAtResolver<TParent>;
    updatedAt?: ClinicHistoryToUpdatedAtResolver<TParent>;
}
export interface ClinicHistoryToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClinicHistoryToEventIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClinicHistoryToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClinicHistoryToNotesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClinicHistoryToIsVisibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClinicHistoryToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClinicHistoryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClinicHistoryToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClinicHistoryToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEventDetailCollectionSegmentTypeResolver<TParent = any> {
    items?: EventDetailCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: EventDetailCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: EventDetailCollectionSegmentToTotalCountResolver<TParent>;
}
export interface EventDetailCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventDetailCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EventDetailCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMedicalServiceTypeResolver<TParent = any> {
    projectId?: MedicalServiceToProjectIdResolver<TParent>;
    state?: MedicalServiceToStateResolver<TParent>;
    name?: MedicalServiceToNameResolver<TParent>;
    mode?: MedicalServiceToModeResolver<TParent>;
    cost?: MedicalServiceToCostResolver<TParent>;
    imgRoute?: MedicalServiceToImgRouteResolver<TParent>;
    description?: MedicalServiceToDescriptionResolver<TParent>;
    id?: MedicalServiceToIdResolver<TParent>;
    createdAt?: MedicalServiceToCreatedAtResolver<TParent>;
    updatedAt?: MedicalServiceToUpdatedAtResolver<TParent>;
}
export interface MedicalServiceToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalServiceToStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalServiceToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalServiceToModeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalServiceToCostResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalServiceToImgRouteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalServiceToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalServiceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalServiceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalServiceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMedicalConfigTypeResolver<TParent = any> {
    projectId?: MedicalConfigToProjectIdResolver<TParent>;
    patologis?: MedicalConfigToPatologisResolver<TParent>;
    id?: MedicalConfigToIdResolver<TParent>;
    createdAt?: MedicalConfigToCreatedAtResolver<TParent>;
    updatedAt?: MedicalConfigToUpdatedAtResolver<TParent>;
}
export interface MedicalConfigToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalConfigToPatologisResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalConfigToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalConfigToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MedicalConfigToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRegistSesionTypeResolver<TParent = any> {
    projectId?: RegistSesionToProjectIdResolver<TParent>;
    therapyId?: RegistSesionToTherapyIdResolver<TParent>;
    therapy?: RegistSesionToTherapyResolver<TParent>;
    title?: RegistSesionToTitleResolver<TParent>;
    namePacient?: RegistSesionToNamePacientResolver<TParent>;
    terapist?: RegistSesionToTerapistResolver<TParent>;
    dateSesion?: RegistSesionToDateSesionResolver<TParent>;
    comments?: RegistSesionToCommentsResolver<TParent>;
    electronicsign?: RegistSesionToElectronicsignResolver<TParent>;
    legalType?: RegistSesionToLegalTypeResolver<TParent>;
    id?: RegistSesionToIdResolver<TParent>;
    createdAt?: RegistSesionToCreatedAtResolver<TParent>;
    updatedAt?: RegistSesionToUpdatedAtResolver<TParent>;
}
export interface RegistSesionToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistSesionToTherapyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistSesionToTherapyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistSesionToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistSesionToNamePacientResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistSesionToTerapistResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistSesionToDateSesionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistSesionToCommentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistSesionToElectronicsignResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistSesionToLegalTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistSesionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistSesionToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RegistSesionToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ITherapyTypeResolver<TParent = any> {
    projectId?: TherapyToProjectIdResolver<TParent>;
    eventId?: TherapyToEventIdResolver<TParent>;
    memberId?: TherapyToMemberIdResolver<TParent>;
    numSesion?: TherapyToNumSesionResolver<TParent>;
    content?: TherapyToContentResolver<TParent>;
    isVisible?: TherapyToIsVisibleResolver<TParent>;
    position?: TherapyToPositionResolver<TParent>;
    id?: TherapyToIdResolver<TParent>;
    createdAt?: TherapyToCreatedAtResolver<TParent>;
    updatedAt?: TherapyToUpdatedAtResolver<TParent>;
}
export interface TherapyToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TherapyToEventIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TherapyToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TherapyToNumSesionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TherapyToContentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TherapyToIsVisibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TherapyToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TherapyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TherapyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TherapyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ITherapyCollectionSegmentTypeResolver<TParent = any> {
    items?: TherapyCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: TherapyCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: TherapyCollectionSegmentToTotalCountResolver<TParent>;
}
export interface TherapyCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TherapyCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TherapyCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRecipeConfigTypeResolver<TParent = any> {
    projectId?: RecipeConfigToProjectIdResolver<TParent>;
    medicRecipeId?: RecipeConfigToMedicRecipeIdResolver<TParent>;
    medicRecipe?: RecipeConfigToMedicRecipeResolver<TParent>;
    isActiveAllPacients?: RecipeConfigToIsActiveAllPacientsResolver<TParent>;
    isAccessDataPacient?: RecipeConfigToIsAccessDataPacientResolver<TParent>;
    id?: RecipeConfigToIdResolver<TParent>;
    createdAt?: RecipeConfigToCreatedAtResolver<TParent>;
    updatedAt?: RecipeConfigToUpdatedAtResolver<TParent>;
}
export interface RecipeConfigToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RecipeConfigToMedicRecipeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RecipeConfigToMedicRecipeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RecipeConfigToIsActiveAllPacientsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RecipeConfigToIsAccessDataPacientResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RecipeConfigToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RecipeConfigToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RecipeConfigToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IConsultNoteTypeResolver<TParent = any> {
    eventId?: ConsultNoteToEventIdResolver<TParent>;
    projectId?: ConsultNoteToProjectIdResolver<TParent>;
    memberId?: ConsultNoteToMemberIdResolver<TParent>;
    note?: ConsultNoteToNoteResolver<TParent>;
    isVisible?: ConsultNoteToIsVisibleResolver<TParent>;
    id?: ConsultNoteToIdResolver<TParent>;
    createdAt?: ConsultNoteToCreatedAtResolver<TParent>;
    updatedAt?: ConsultNoteToUpdatedAtResolver<TParent>;
}
export interface ConsultNoteToEventIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultNoteToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultNoteToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultNoteToNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultNoteToIsVisibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultNoteToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultNoteToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultNoteToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBillingRequestTypeResolver<TParent = any> {
    projectId?: BillingRequestToProjectIdResolver<TParent>;
    memberId?: BillingRequestToMemberIdResolver<TParent>;
    eventId?: BillingRequestToEventIdResolver<TParent>;
    socialReason?: BillingRequestToSocialReasonResolver<TParent>;
    rfc?: BillingRequestToRfcResolver<TParent>;
    cFDI?: BillingRequestToCFDIResolver<TParent>;
    socialRegiment?: BillingRequestToSocialRegimentResolver<TParent>;
    cP?: BillingRequestToCPResolver<TParent>;
    email?: BillingRequestToEmailResolver<TParent>;
    status?: BillingRequestToStatusResolver<TParent>;
    billingUrl?: BillingRequestToBillingUrlResolver<TParent>;
    emailContent?: BillingRequestToEmailContentResolver<TParent>;
    id?: BillingRequestToIdResolver<TParent>;
    createdAt?: BillingRequestToCreatedAtResolver<TParent>;
    updatedAt?: BillingRequestToUpdatedAtResolver<TParent>;
}
export interface BillingRequestToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingRequestToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingRequestToEventIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingRequestToSocialReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingRequestToRfcResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingRequestToCFDIResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingRequestToSocialRegimentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingRequestToCPResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingRequestToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingRequestToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingRequestToBillingUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingRequestToEmailContentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingRequestToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingRequestToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BillingRequestToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IConsultDtoTypeResolver<TParent = any> {
    consultNote?: ConsultDtoToConsultNoteResolver<TParent>;
    fisicExam?: ConsultDtoToFisicExamResolver<TParent>;
    diagnostic?: ConsultDtoToDiagnosticResolver<TParent>;
    therapy?: ConsultDtoToTherapyResolver<TParent>;
    patientVitalSignsResponse?: ConsultDtoToPatientVitalSignsResponseResolver<TParent>;
    medicine?: ConsultDtoToMedicineResolver<TParent>;
    pacientNote?: ConsultDtoToPacientNoteResolver<TParent>;
}
export interface ConsultDtoToConsultNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultDtoToFisicExamResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultDtoToDiagnosticResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultDtoToTherapyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultDtoToPatientVitalSignsResponseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultDtoToMedicineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultDtoToPacientNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISpaceCollectionSegmentTypeResolver<TParent = any> {
    items?: SpaceCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: SpaceCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: SpaceCollectionSegmentToTotalCountResolver<TParent>;
}
export interface SpaceCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpaceCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SpaceCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardStatusCollectionSegmentTypeResolver<TParent = any> {
    items?: BoardStatusCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: BoardStatusCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: BoardStatusCollectionSegmentToTotalCountResolver<TParent>;
}
export interface BoardStatusCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardStatusCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardStatusCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardCollectionSegmentTypeResolver<TParent = any> {
    items?: BoardCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: BoardCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: BoardCollectionSegmentToTotalCountResolver<TParent>;
}
export interface BoardCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardListCollectionSegmentTypeResolver<TParent = any> {
    items?: BoardListCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: BoardListCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: BoardListCollectionSegmentToTotalCountResolver<TParent>;
}
export interface BoardListCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardListCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardListCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICardReplyCollectionSegmentTypeResolver<TParent = any> {
    items?: CardReplyCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: CardReplyCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: CardReplyCollectionSegmentToTotalCountResolver<TParent>;
}
export interface CardReplyCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardReplyCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardReplyCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICardCollectionSegmentTypeResolver<TParent = any> {
    items?: CardCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: CardCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: CardCollectionSegmentToTotalCountResolver<TParent>;
}
export interface CardCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface INestedFileCollectionSegmentTypeResolver<TParent = any> {
    items?: NestedFileCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: NestedFileCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: NestedFileCollectionSegmentToTotalCountResolver<TParent>;
}
export interface NestedFileCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NestedFileCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NestedFileCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberCardCollectionSegmentTypeResolver<TParent = any> {
    items?: MemberCardCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: MemberCardCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: MemberCardCollectionSegmentToTotalCountResolver<TParent>;
}
export interface MemberCardCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCardCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberCardCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberBoardCollectionSegmentTypeResolver<TParent = any> {
    items?: MemberBoardCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: MemberBoardCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: MemberBoardCollectionSegmentToTotalCountResolver<TParent>;
}
export interface MemberBoardCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberBoardCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberBoardCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberSpaceCollectionSegmentTypeResolver<TParent = any> {
    items?: MemberSpaceCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: MemberSpaceCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: MemberSpaceCollectionSegmentToTotalCountResolver<TParent>;
}
export interface MemberSpaceCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberSpaceCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberSpaceCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListMemberSpaceOnValueConnectionTypeResolver<TParent = any> {
    pageInfo?: ListMemberSpaceOnValueConnectionToPageInfoResolver<TParent>;
    edges?: ListMemberSpaceOnValueConnectionToEdgesResolver<TParent>;
    nodes?: ListMemberSpaceOnValueConnectionToNodesResolver<TParent>;
    totalCount?: ListMemberSpaceOnValueConnectionToTotalCountResolver<TParent>;
}
export interface ListMemberSpaceOnValueConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListMemberSpaceOnValueConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListMemberSpaceOnValueConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListMemberSpaceOnValueConnectionToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListMemberSpaceOnValueEdgeTypeResolver<TParent = any> {
    cursor?: ListMemberSpaceOnValueEdgeToCursorResolver<TParent>;
    node?: ListMemberSpaceOnValueEdgeToNodeResolver<TParent>;
}
export interface ListMemberSpaceOnValueEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListMemberSpaceOnValueEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListMemberSpaceOnCardConnectionTypeResolver<TParent = any> {
    pageInfo?: ListMemberSpaceOnCardConnectionToPageInfoResolver<TParent>;
    edges?: ListMemberSpaceOnCardConnectionToEdgesResolver<TParent>;
    nodes?: ListMemberSpaceOnCardConnectionToNodesResolver<TParent>;
    totalCount?: ListMemberSpaceOnCardConnectionToTotalCountResolver<TParent>;
}
export interface ListMemberSpaceOnCardConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListMemberSpaceOnCardConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListMemberSpaceOnCardConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListMemberSpaceOnCardConnectionToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListMemberSpaceOnCardEdgeTypeResolver<TParent = any> {
    cursor?: ListMemberSpaceOnCardEdgeToCursorResolver<TParent>;
    node?: ListMemberSpaceOnCardEdgeToNodeResolver<TParent>;
}
export interface ListMemberSpaceOnCardEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListMemberSpaceOnCardEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListMemberBoardOnValueConnectionTypeResolver<TParent = any> {
    pageInfo?: ListMemberBoardOnValueConnectionToPageInfoResolver<TParent>;
    edges?: ListMemberBoardOnValueConnectionToEdgesResolver<TParent>;
    nodes?: ListMemberBoardOnValueConnectionToNodesResolver<TParent>;
    totalCount?: ListMemberBoardOnValueConnectionToTotalCountResolver<TParent>;
}
export interface ListMemberBoardOnValueConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListMemberBoardOnValueConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListMemberBoardOnValueConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListMemberBoardOnValueConnectionToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListMemberBoardOnValueEdgeTypeResolver<TParent = any> {
    cursor?: ListMemberBoardOnValueEdgeToCursorResolver<TParent>;
    node?: ListMemberBoardOnValueEdgeToNodeResolver<TParent>;
}
export interface ListMemberBoardOnValueEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListMemberBoardOnValueEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListMemberBoardOnCardConnectionTypeResolver<TParent = any> {
    pageInfo?: ListMemberBoardOnCardConnectionToPageInfoResolver<TParent>;
    edges?: ListMemberBoardOnCardConnectionToEdgesResolver<TParent>;
    nodes?: ListMemberBoardOnCardConnectionToNodesResolver<TParent>;
    totalCount?: ListMemberBoardOnCardConnectionToTotalCountResolver<TParent>;
}
export interface ListMemberBoardOnCardConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListMemberBoardOnCardConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListMemberBoardOnCardConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListMemberBoardOnCardConnectionToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListMemberBoardOnCardEdgeTypeResolver<TParent = any> {
    cursor?: ListMemberBoardOnCardEdgeToCursorResolver<TParent>;
    node?: ListMemberBoardOnCardEdgeToNodeResolver<TParent>;
}
export interface ListMemberBoardOnCardEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListMemberBoardOnCardEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardColumnTypeCollectionSegmentTypeResolver<TParent = any> {
    items?: BoardColumnTypeCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: BoardColumnTypeCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: BoardColumnTypeCollectionSegmentToTotalCountResolver<TParent>;
}
export interface BoardColumnTypeCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnTypeCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardColumnTypeCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberBoardDTOTypeResolver<TParent = any> {
    memberSpace?: MemberBoardDTOToMemberSpaceResolver<TParent>;
    memberBoards?: MemberBoardDTOToMemberBoardsResolver<TParent>;
}
export interface MemberBoardDTOToMemberSpaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberBoardDTOToMemberBoardsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICardColumnValueCollectionSegmentTypeResolver<TParent = any> {
    items?: CardColumnValueCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: CardColumnValueCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: CardColumnValueCollectionSegmentToTotalCountResolver<TParent>;
}
export interface CardColumnValueCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardColumnValueCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CardColumnValueCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardMemberReferenceCollectionSegmentTypeResolver<TParent = any> {
    items?: BoardMemberReferenceCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: BoardMemberReferenceCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: BoardMemberReferenceCollectionSegmentToTotalCountResolver<TParent>;
}
export interface BoardMemberReferenceCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardMemberReferenceCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BoardMemberReferenceCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAttributeTypeResolver<TParent = any> {
    value?: AttributeToValueResolver<TParent>;
    projectId?: AttributeToProjectIdResolver<TParent>;
    attributesValues?: AttributeToAttributesValuesResolver<TParent>;
    id?: AttributeToIdResolver<TParent>;
    createdAt?: AttributeToCreatedAtResolver<TParent>;
    updatedAt?: AttributeToUpdatedAtResolver<TParent>;
}
export interface AttributeToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AttributeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AttributeToAttributesValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AttributeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AttributeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AttributeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAttributeValueTypeResolver<TParent = any> {
    value?: AttributeValueToValueResolver<TParent>;
    projectId?: AttributeValueToProjectIdResolver<TParent>;
    attributeId?: AttributeValueToAttributeIdResolver<TParent>;
    attribute?: AttributeValueToAttributeResolver<TParent>;
    materialCombinationAttributes?: AttributeValueToMaterialCombinationAttributesResolver<TParent>;
    id?: AttributeValueToIdResolver<TParent>;
    createdAt?: AttributeValueToCreatedAtResolver<TParent>;
    updatedAt?: AttributeValueToUpdatedAtResolver<TParent>;
}
export interface AttributeValueToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AttributeValueToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AttributeValueToAttributeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AttributeValueToAttributeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AttributeValueToMaterialCombinationAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AttributeValueToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AttributeValueToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AttributeValueToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMaterialCombinationAttributeTypeResolver<TParent = any> {
    projectId?: MaterialCombinationAttributeToProjectIdResolver<TParent>;
    materialCombinationId?: MaterialCombinationAttributeToMaterialCombinationIdResolver<TParent>;
    attributeValueId?: MaterialCombinationAttributeToAttributeValueIdResolver<TParent>;
    materialCombination?: MaterialCombinationAttributeToMaterialCombinationResolver<TParent>;
    attributeValue?: MaterialCombinationAttributeToAttributeValueResolver<TParent>;
    id?: MaterialCombinationAttributeToIdResolver<TParent>;
    createdAt?: MaterialCombinationAttributeToCreatedAtResolver<TParent>;
    updatedAt?: MaterialCombinationAttributeToUpdatedAtResolver<TParent>;
}
export interface MaterialCombinationAttributeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCombinationAttributeToMaterialCombinationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCombinationAttributeToAttributeValueIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCombinationAttributeToMaterialCombinationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCombinationAttributeToAttributeValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCombinationAttributeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCombinationAttributeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCombinationAttributeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMaterialCombinationTypeResolver<TParent = any> {
    projectId?: MaterialCombinationToProjectIdResolver<TParent>;
    materialId?: MaterialCombinationToMaterialIdResolver<TParent>;
    provCode?: MaterialCombinationToProvCodeResolver<TParent>;
    intCode?: MaterialCombinationToIntCodeResolver<TParent>;
    price?: MaterialCombinationToPriceResolver<TParent>;
    material?: MaterialCombinationToMaterialResolver<TParent>;
    materialCombinationAttributes?: MaterialCombinationToMaterialCombinationAttributesResolver<TParent>;
    materialStocks?: MaterialCombinationToMaterialStocksResolver<TParent>;
    id?: MaterialCombinationToIdResolver<TParent>;
    createdAt?: MaterialCombinationToCreatedAtResolver<TParent>;
    updatedAt?: MaterialCombinationToUpdatedAtResolver<TParent>;
}
export interface MaterialCombinationToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCombinationToMaterialIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCombinationToProvCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCombinationToIntCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCombinationToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCombinationToMaterialResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCombinationToMaterialCombinationAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCombinationToMaterialStocksResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCombinationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCombinationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCombinationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMaterialTypeResolver<TParent = any> {
    projectId?: MaterialToProjectIdResolver<TParent>;
    measureUnityId?: MaterialToMeasureUnityIdResolver<TParent>;
    materialCategoryId?: MaterialToMaterialCategoryIdResolver<TParent>;
    materialCategory?: MaterialToMaterialCategoryResolver<TParent>;
    measureUnity?: MaterialToMeasureUnityResolver<TParent>;
    measureValues?: MaterialToMeasureValuesResolver<TParent>;
    materialModules?: MaterialToMaterialModulesResolver<TParent>;
    materialCombinations?: MaterialToMaterialCombinationsResolver<TParent>;
    materialStocks?: MaterialToMaterialStocksResolver<TParent>;
    name?: MaterialToNameResolver<TParent>;
    provCode?: MaterialToProvCodeResolver<TParent>;
    intCode?: MaterialToIntCodeResolver<TParent>;
    descMaterial?: MaterialToDescMaterialResolver<TParent>;
    id?: MaterialToIdResolver<TParent>;
    createdAt?: MaterialToCreatedAtResolver<TParent>;
    updatedAt?: MaterialToUpdatedAtResolver<TParent>;
}
export interface MaterialToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialToMeasureUnityIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialToMaterialCategoryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialToMaterialCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialToMeasureUnityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialToMeasureValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialToMaterialModulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialToMaterialCombinationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialToMaterialStocksResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialToProvCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialToIntCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialToDescMaterialResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMaterialCategoryTypeResolver<TParent = any> {
    projectId?: MaterialCategoryToProjectIdResolver<TParent>;
    nombreCategoria?: MaterialCategoryToNombreCategoriaResolver<TParent>;
    materials?: MaterialCategoryToMaterialsResolver<TParent>;
    id?: MaterialCategoryToIdResolver<TParent>;
    createdAt?: MaterialCategoryToCreatedAtResolver<TParent>;
    updatedAt?: MaterialCategoryToUpdatedAtResolver<TParent>;
}
export interface MaterialCategoryToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCategoryToNombreCategoriaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCategoryToMaterialsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCategoryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCategoryToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCategoryToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMeasureUnityTypeResolver<TParent = any> {
    projectId?: MeasureUnityToProjectIdResolver<TParent>;
    name?: MeasureUnityToNameResolver<TParent>;
    abbreviation?: MeasureUnityToAbbreviationResolver<TParent>;
    materials?: MeasureUnityToMaterialsResolver<TParent>;
    measureUnitiesTwo?: MeasureUnityToMeasureUnitiesTwoResolver<TParent>;
    id?: MeasureUnityToIdResolver<TParent>;
    createdAt?: MeasureUnityToCreatedAtResolver<TParent>;
    updatedAt?: MeasureUnityToUpdatedAtResolver<TParent>;
}
export interface MeasureUnityToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureUnityToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureUnityToAbbreviationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureUnityToMaterialsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureUnityToMeasureUnitiesTwoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureUnityToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureUnityToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureUnityToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMeasureUnityTwoTypeResolver<TParent = any> {
    projectId?: MeasureUnityTwoToProjectIdResolver<TParent>;
    measureUnityId?: MeasureUnityTwoToMeasureUnityIdResolver<TParent>;
    measureId?: MeasureUnityTwoToMeasureIdResolver<TParent>;
    measure?: MeasureUnityTwoToMeasureResolver<TParent>;
    measureUnity?: MeasureUnityTwoToMeasureUnityResolver<TParent>;
    id?: MeasureUnityTwoToIdResolver<TParent>;
    createdAt?: MeasureUnityTwoToCreatedAtResolver<TParent>;
    updatedAt?: MeasureUnityTwoToUpdatedAtResolver<TParent>;
}
export interface MeasureUnityTwoToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureUnityTwoToMeasureUnityIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureUnityTwoToMeasureIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureUnityTwoToMeasureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureUnityTwoToMeasureUnityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureUnityTwoToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureUnityTwoToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureUnityTwoToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMeasureTypeResolver<TParent = any> {
    projectId?: MeasureToProjectIdResolver<TParent>;
    name?: MeasureToNameResolver<TParent>;
    abbreviation?: MeasureToAbbreviationResolver<TParent>;
    measureUnityTwo?: MeasureToMeasureUnityTwoResolver<TParent>;
    measureValue?: MeasureToMeasureValueResolver<TParent>;
    id?: MeasureToIdResolver<TParent>;
    createdAt?: MeasureToCreatedAtResolver<TParent>;
    updatedAt?: MeasureToUpdatedAtResolver<TParent>;
}
export interface MeasureToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureToAbbreviationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureToMeasureUnityTwoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureToMeasureValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMeasureValueTypeResolver<TParent = any> {
    projectId?: MeasureValueToProjectIdResolver<TParent>;
    measureId?: MeasureValueToMeasureIdResolver<TParent>;
    materialId?: MeasureValueToMaterialIdResolver<TParent>;
    measure?: MeasureValueToMeasureResolver<TParent>;
    material?: MeasureValueToMaterialResolver<TParent>;
    id?: MeasureValueToIdResolver<TParent>;
    createdAt?: MeasureValueToCreatedAtResolver<TParent>;
    updatedAt?: MeasureValueToUpdatedAtResolver<TParent>;
}
export interface MeasureValueToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureValueToMeasureIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureValueToMaterialIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureValueToMeasureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureValueToMaterialResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureValueToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureValueToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MeasureValueToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMaterialModuleTypeResolver<TParent = any> {
    projectId?: MaterialModuleToProjectIdResolver<TParent>;
    moduleId?: MaterialModuleToModuleIdResolver<TParent>;
    materialCategoryId?: MaterialModuleToMaterialCategoryIdResolver<TParent>;
    materialId?: MaterialModuleToMaterialIdResolver<TParent>;
    formule?: MaterialModuleToFormuleResolver<TParent>;
    formuleOpe?: MaterialModuleToFormuleOpeResolver<TParent>;
    variables?: MaterialModuleToVariablesResolver<TParent>;
    module?: MaterialModuleToModuleResolver<TParent>;
    material?: MaterialModuleToMaterialResolver<TParent>;
    materialVariableModules?: MaterialModuleToMaterialVariableModulesResolver<TParent>;
    materialCategory?: MaterialModuleToMaterialCategoryResolver<TParent>;
    id?: MaterialModuleToIdResolver<TParent>;
    createdAt?: MaterialModuleToCreatedAtResolver<TParent>;
    updatedAt?: MaterialModuleToUpdatedAtResolver<TParent>;
}
export interface MaterialModuleToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialModuleToModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialModuleToMaterialCategoryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialModuleToMaterialIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialModuleToFormuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialModuleToFormuleOpeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialModuleToVariablesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialModuleToModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialModuleToMaterialResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialModuleToMaterialVariableModulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialModuleToMaterialCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialModuleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialModuleToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialModuleToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IModuleTypeResolver<TParent = any> {
    projectId?: ModuleToProjectIdResolver<TParent>;
    moduleCategoryId?: ModuleToModuleCategoryIdResolver<TParent>;
    name?: ModuleToNameResolver<TParent>;
    descModule?: ModuleToDescModuleResolver<TParent>;
    formule?: ModuleToFormuleResolver<TParent>;
    materialModules?: ModuleToMaterialModulesResolver<TParent>;
    quotationModules?: ModuleToQuotationModulesResolver<TParent>;
    moduleCategory?: ModuleToModuleCategoryResolver<TParent>;
    id?: ModuleToIdResolver<TParent>;
    createdAt?: ModuleToCreatedAtResolver<TParent>;
    updatedAt?: ModuleToUpdatedAtResolver<TParent>;
}
export interface ModuleToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModuleToModuleCategoryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModuleToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModuleToDescModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModuleToFormuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModuleToMaterialModulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModuleToQuotationModulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModuleToModuleCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModuleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModuleToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModuleToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuotationModuleTypeResolver<TParent = any> {
    projectId?: QuotationModuleToProjectIdResolver<TParent>;
    quotationId?: QuotationModuleToQuotationIdResolver<TParent>;
    moduleCategoryId?: QuotationModuleToModuleCategoryIdResolver<TParent>;
    moduleId?: QuotationModuleToModuleIdResolver<TParent>;
    quantity?: QuotationModuleToQuantityResolver<TParent>;
    price?: QuotationModuleToPriceResolver<TParent>;
    image?: QuotationModuleToImageResolver<TParent>;
    materialQuotations?: QuotationModuleToMaterialQuotationsResolver<TParent>;
    quotation?: QuotationModuleToQuotationResolver<TParent>;
    module?: QuotationModuleToModuleResolver<TParent>;
    moduleCategory?: QuotationModuleToModuleCategoryResolver<TParent>;
    id?: QuotationModuleToIdResolver<TParent>;
    createdAt?: QuotationModuleToCreatedAtResolver<TParent>;
    updatedAt?: QuotationModuleToUpdatedAtResolver<TParent>;
}
export interface QuotationModuleToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationModuleToQuotationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationModuleToModuleCategoryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationModuleToModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationModuleToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationModuleToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationModuleToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationModuleToMaterialQuotationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationModuleToQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationModuleToModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationModuleToModuleCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationModuleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationModuleToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationModuleToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMaterialQuotationTypeResolver<TParent = any> {
    projectId?: MaterialQuotationToProjectIdResolver<TParent>;
    moduleQuotationId?: MaterialQuotationToModuleQuotationIdResolver<TParent>;
    materialId?: MaterialQuotationToMaterialIdResolver<TParent>;
    materialModuleId?: MaterialQuotationToMaterialModuleIdResolver<TParent>;
    materialCombinationId?: MaterialQuotationToMaterialCombinationIdResolver<TParent>;
    materialVariableQuotations?: MaterialQuotationToMaterialVariableQuotationsResolver<TParent>;
    quotationModule?: MaterialQuotationToQuotationModuleResolver<TParent>;
    material?: MaterialQuotationToMaterialResolver<TParent>;
    materialCombination?: MaterialQuotationToMaterialCombinationResolver<TParent>;
    materialModules?: MaterialQuotationToMaterialModulesResolver<TParent>;
    measureValue?: MaterialQuotationToMeasureValueResolver<TParent>;
    id?: MaterialQuotationToIdResolver<TParent>;
    createdAt?: MaterialQuotationToCreatedAtResolver<TParent>;
    updatedAt?: MaterialQuotationToUpdatedAtResolver<TParent>;
}
export interface MaterialQuotationToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialQuotationToModuleQuotationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialQuotationToMaterialIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialQuotationToMaterialModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialQuotationToMaterialCombinationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialQuotationToMaterialVariableQuotationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialQuotationToQuotationModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialQuotationToMaterialResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialQuotationToMaterialCombinationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialQuotationToMaterialModulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialQuotationToMeasureValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialQuotationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialQuotationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialQuotationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMaterialVariableQuotationTypeResolver<TParent = any> {
    projectId?: MaterialVariableQuotationToProjectIdResolver<TParent>;
    materialQuotationId?: MaterialVariableQuotationToMaterialQuotationIdResolver<TParent>;
    variableId?: MaterialVariableQuotationToVariableIdResolver<TParent>;
    value?: MaterialVariableQuotationToValueResolver<TParent>;
    materialQuotation?: MaterialVariableQuotationToMaterialQuotationResolver<TParent>;
    variable?: MaterialVariableQuotationToVariableResolver<TParent>;
    id?: MaterialVariableQuotationToIdResolver<TParent>;
    createdAt?: MaterialVariableQuotationToCreatedAtResolver<TParent>;
    updatedAt?: MaterialVariableQuotationToUpdatedAtResolver<TParent>;
}
export interface MaterialVariableQuotationToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialVariableQuotationToMaterialQuotationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialVariableQuotationToVariableIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialVariableQuotationToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialVariableQuotationToMaterialQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialVariableQuotationToVariableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialVariableQuotationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialVariableQuotationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialVariableQuotationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVariableTypeResolver<TParent = any> {
    projectId?: VariableToProjectIdResolver<TParent>;
    value?: VariableToValueResolver<TParent>;
    materialVariableModules?: VariableToMaterialVariableModulesResolver<TParent>;
    materialVariableQuotations?: VariableToMaterialVariableQuotationsResolver<TParent>;
    id?: VariableToIdResolver<TParent>;
    createdAt?: VariableToCreatedAtResolver<TParent>;
    updatedAt?: VariableToUpdatedAtResolver<TParent>;
}
export interface VariableToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VariableToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VariableToMaterialVariableModulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VariableToMaterialVariableQuotationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VariableToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VariableToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface VariableToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMaterialVariableModuleTypeResolver<TParent = any> {
    projectId?: MaterialVariableModuleToProjectIdResolver<TParent>;
    materialModuleId?: MaterialVariableModuleToMaterialModuleIdResolver<TParent>;
    variableId?: MaterialVariableModuleToVariableIdResolver<TParent>;
    variable?: MaterialVariableModuleToVariableResolver<TParent>;
    materialModule?: MaterialVariableModuleToMaterialModuleResolver<TParent>;
    id?: MaterialVariableModuleToIdResolver<TParent>;
    createdAt?: MaterialVariableModuleToCreatedAtResolver<TParent>;
    updatedAt?: MaterialVariableModuleToUpdatedAtResolver<TParent>;
}
export interface MaterialVariableModuleToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialVariableModuleToMaterialModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialVariableModuleToVariableIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialVariableModuleToVariableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialVariableModuleToMaterialModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialVariableModuleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialVariableModuleToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialVariableModuleToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuotationTypeResolver<TParent = any> {
    projectId?: QuotationToProjectIdResolver<TParent>;
    madreQuotationId?: QuotationToMadreQuotationIdResolver<TParent>;
    memberId?: QuotationToMemberIdResolver<TParent>;
    buildingSiteName?: QuotationToBuildingSiteNameResolver<TParent>;
    folio?: QuotationToFolioResolver<TParent>;
    isOptimized?: QuotationToIsOptimizedResolver<TParent>;
    quotationModules?: QuotationToQuotationModulesResolver<TParent>;
    madreQuotation?: QuotationToMadreQuotationResolver<TParent>;
    buildingSiteAddress?: QuotationToBuildingSiteAddressResolver<TParent>;
    id?: QuotationToIdResolver<TParent>;
    createdAt?: QuotationToCreatedAtResolver<TParent>;
    updatedAt?: QuotationToUpdatedAtResolver<TParent>;
}
export interface QuotationToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationToMadreQuotationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationToBuildingSiteNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationToFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationToIsOptimizedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationToQuotationModulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationToMadreQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationToBuildingSiteAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMadreQuotationTypeResolver<TParent = any> {
    projectId?: MadreQuotationToProjectIdResolver<TParent>;
    memberId?: MadreQuotationToMemberIdResolver<TParent>;
    userCustomerId?: MadreQuotationToUserCustomerIdResolver<TParent>;
    folio?: MadreQuotationToFolioResolver<TParent>;
    userCustomer?: MadreQuotationToUserCustomerResolver<TParent>;
    quotations?: MadreQuotationToQuotationsResolver<TParent>;
    id?: MadreQuotationToIdResolver<TParent>;
    createdAt?: MadreQuotationToCreatedAtResolver<TParent>;
    updatedAt?: MadreQuotationToUpdatedAtResolver<TParent>;
}
export interface MadreQuotationToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MadreQuotationToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MadreQuotationToUserCustomerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MadreQuotationToFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MadreQuotationToUserCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MadreQuotationToQuotationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MadreQuotationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MadreQuotationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MadreQuotationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUserCustomerTypeResolver<TParent = any> {
    projectId?: UserCustomerToProjectIdResolver<TParent>;
    memberId?: UserCustomerToMemberIdResolver<TParent>;
    madreQuotations?: UserCustomerToMadreQuotationsResolver<TParent>;
    customers?: UserCustomerToCustomersResolver<TParent>;
    id?: UserCustomerToIdResolver<TParent>;
    createdAt?: UserCustomerToCreatedAtResolver<TParent>;
    updatedAt?: UserCustomerToUpdatedAtResolver<TParent>;
}
export interface UserCustomerToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface UserCustomerToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface UserCustomerToMadreQuotationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface UserCustomerToCustomersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface UserCustomerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface UserCustomerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface UserCustomerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICustomerTypeResolver<TParent = any> {
    projectId?: CustomerToProjectIdResolver<TParent>;
    name?: CustomerToNameResolver<TParent>;
    firstName?: CustomerToFirstNameResolver<TParent>;
    lastName?: CustomerToLastNameResolver<TParent>;
    email?: CustomerToEmailResolver<TParent>;
    company?: CustomerToCompanyResolver<TParent>;
    id?: CustomerToIdResolver<TParent>;
    createdAt?: CustomerToCreatedAtResolver<TParent>;
    updatedAt?: CustomerToUpdatedAtResolver<TParent>;
}
export interface CustomerToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CustomerToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CustomerToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CustomerToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CustomerToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CustomerToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CustomerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CustomerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CustomerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBuildingSiteAddressTypeResolver<TParent = any> {
    projectId?: BuildingSiteAddressToProjectIdResolver<TParent>;
    quotationId?: BuildingSiteAddressToQuotationIdResolver<TParent>;
    countryId?: BuildingSiteAddressToCountryIdResolver<TParent>;
    stateId?: BuildingSiteAddressToStateIdResolver<TParent>;
    street?: BuildingSiteAddressToStreetResolver<TParent>;
    externalNumber?: BuildingSiteAddressToExternalNumberResolver<TParent>;
    internalNumber?: BuildingSiteAddressToInternalNumberResolver<TParent>;
    colony?: BuildingSiteAddressToColonyResolver<TParent>;
    municipality?: BuildingSiteAddressToMunicipalityResolver<TParent>;
    quotation?: BuildingSiteAddressToQuotationResolver<TParent>;
    id?: BuildingSiteAddressToIdResolver<TParent>;
    createdAt?: BuildingSiteAddressToCreatedAtResolver<TParent>;
    updatedAt?: BuildingSiteAddressToUpdatedAtResolver<TParent>;
}
export interface BuildingSiteAddressToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BuildingSiteAddressToQuotationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BuildingSiteAddressToCountryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BuildingSiteAddressToStateIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BuildingSiteAddressToStreetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BuildingSiteAddressToExternalNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BuildingSiteAddressToInternalNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BuildingSiteAddressToColonyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BuildingSiteAddressToMunicipalityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BuildingSiteAddressToQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BuildingSiteAddressToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BuildingSiteAddressToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BuildingSiteAddressToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IModuleCategoryTypeResolver<TParent = any> {
    projectId?: ModuleCategoryToProjectIdResolver<TParent>;
    name?: ModuleCategoryToNameResolver<TParent>;
    descCategory?: ModuleCategoryToDescCategoryResolver<TParent>;
    modules?: ModuleCategoryToModulesResolver<TParent>;
    id?: ModuleCategoryToIdResolver<TParent>;
    createdAt?: ModuleCategoryToCreatedAtResolver<TParent>;
    updatedAt?: ModuleCategoryToUpdatedAtResolver<TParent>;
}
export interface ModuleCategoryToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModuleCategoryToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModuleCategoryToDescCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModuleCategoryToModulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModuleCategoryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModuleCategoryToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModuleCategoryToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMaterialStockTypeResolver<TParent = any> {
    projectId?: MaterialStockToProjectIdResolver<TParent>;
    materialId?: MaterialStockToMaterialIdResolver<TParent>;
    materialCombinationId?: MaterialStockToMaterialCombinationIdResolver<TParent>;
    material?: MaterialStockToMaterialResolver<TParent>;
    materialCombination?: MaterialStockToMaterialCombinationResolver<TParent>;
    materialStockMeasures?: MaterialStockToMaterialStockMeasuresResolver<TParent>;
    id?: MaterialStockToIdResolver<TParent>;
    createdAt?: MaterialStockToCreatedAtResolver<TParent>;
    updatedAt?: MaterialStockToUpdatedAtResolver<TParent>;
}
export interface MaterialStockToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockToMaterialIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockToMaterialCombinationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockToMaterialResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockToMaterialCombinationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockToMaterialStockMeasuresResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMaterialStockMeasureTypeResolver<TParent = any> {
    projectId?: MaterialStockMeasureToProjectIdResolver<TParent>;
    materialStockId?: MaterialStockMeasureToMaterialStockIdResolver<TParent>;
    quotationId?: MaterialStockMeasureToQuotationIdResolver<TParent>;
    value?: MaterialStockMeasureToValueResolver<TParent>;
    formule?: MaterialStockMeasureToFormuleResolver<TParent>;
    isActive?: MaterialStockMeasureToIsActiveResolver<TParent>;
    quotationIdUsed?: MaterialStockMeasureToQuotationIdUsedResolver<TParent>;
    materialStock?: MaterialStockMeasureToMaterialStockResolver<TParent>;
    materialStockQuotation?: MaterialStockMeasureToMaterialStockQuotationResolver<TParent>;
    quotationStockUsed?: MaterialStockMeasureToQuotationStockUsedResolver<TParent>;
    id?: MaterialStockMeasureToIdResolver<TParent>;
    createdAt?: MaterialStockMeasureToCreatedAtResolver<TParent>;
    updatedAt?: MaterialStockMeasureToUpdatedAtResolver<TParent>;
}
export interface MaterialStockMeasureToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockMeasureToMaterialStockIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockMeasureToQuotationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockMeasureToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockMeasureToFormuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockMeasureToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockMeasureToQuotationIdUsedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockMeasureToMaterialStockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockMeasureToMaterialStockQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockMeasureToQuotationStockUsedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockMeasureToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockMeasureToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialStockMeasureToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMaterialCategoriesConnectionTypeResolver<TParent = any> {
    pageInfo?: MaterialCategoriesConnectionToPageInfoResolver<TParent>;
    edges?: MaterialCategoriesConnectionToEdgesResolver<TParent>;
    nodes?: MaterialCategoriesConnectionToNodesResolver<TParent>;
}
export interface MaterialCategoriesConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCategoriesConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCategoriesConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMaterialCategoriesEdgeTypeResolver<TParent = any> {
    cursor?: MaterialCategoriesEdgeToCursorResolver<TParent>;
    node?: MaterialCategoriesEdgeToNodeResolver<TParent>;
}
export interface MaterialCategoriesEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MaterialCategoriesEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBrandsHermerTypeResolver<TParent = any> {
    brands?: BrandsHermerToBrandsResolver<TParent>;
}
export interface BrandsHermerToBrandsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IModelsHermerTypeResolver<TParent = any> {
    carModels?: ModelsHermerToCarModelsResolver<TParent>;
}
export interface ModelsHermerToCarModelsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IYearsHermerTypeResolver<TParent = any> {
    carYears?: YearsHermerToCarYearsResolver<TParent>;
}
export interface YearsHermerToCarYearsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IModelLobatoHermerTypeResolver<TParent = any> {
    id?: ModelLobatoHermerToIdResolver<TParent>;
    idLobato?: ModelLobatoHermerToIdLobatoResolver<TParent>;
    brand?: ModelLobatoHermerToBrandResolver<TParent>;
    newUsed?: ModelLobatoHermerToNewUsedResolver<TParent>;
    yearModel?: ModelLobatoHermerToYearModelResolver<TParent>;
    subBrand?: ModelLobatoHermerToSubBrandResolver<TParent>;
    version?: ModelLobatoHermerToVersionResolver<TParent>;
    salePrice?: ModelLobatoHermerToSalePriceResolver<TParent>;
    buyingPrice?: ModelLobatoHermerToBuyingPriceResolver<TParent>;
    newListPrice?: ModelLobatoHermerToNewListPriceResolver<TParent>;
    type?: ModelLobatoHermerToTypeResolver<TParent>;
    intermeditePrice?: ModelLobatoHermerToIntermeditePriceResolver<TParent>;
    priceCertificateAgency?: ModelLobatoHermerToPriceCertificateAgencyResolver<TParent>;
    brandCatalog?: ModelLobatoHermerToBrandCatalogResolver<TParent>;
}
export interface ModelLobatoHermerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelLobatoHermerToIdLobatoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelLobatoHermerToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelLobatoHermerToNewUsedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelLobatoHermerToYearModelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelLobatoHermerToSubBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelLobatoHermerToVersionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelLobatoHermerToSalePriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelLobatoHermerToBuyingPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelLobatoHermerToNewListPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelLobatoHermerToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelLobatoHermerToIntermeditePriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelLobatoHermerToPriceCertificateAgencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelLobatoHermerToBrandCatalogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IModelMercadoLibreResultHermerTypeResolver<TParent = any> {
    consultId?: ModelMercadoLibreResultHermerToConsultIdResolver<TParent>;
    results?: ModelMercadoLibreResultHermerToResultsResolver<TParent>;
    compared?: ModelMercadoLibreResultHermerToComparedResolver<TParent>;
}
export interface ModelMercadoLibreResultHermerToConsultIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreResultHermerToResultsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreResultHermerToComparedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IModelMercadoLibreHermerTypeResolver<TParent = any> {
    id?: ModelMercadoLibreHermerToIdResolver<TParent>;
    idMercadoLibre?: ModelMercadoLibreHermerToIdMercadoLibreResolver<TParent>;
    siteId?: ModelMercadoLibreHermerToSiteIdResolver<TParent>;
    title?: ModelMercadoLibreHermerToTitleResolver<TParent>;
    price?: ModelMercadoLibreHermerToPriceResolver<TParent>;
    salePrice?: ModelMercadoLibreHermerToSalePriceResolver<TParent>;
    currencyId?: ModelMercadoLibreHermerToCurrencyIdResolver<TParent>;
    availableQuantity?: ModelMercadoLibreHermerToAvailableQuantityResolver<TParent>;
    soldQuantity?: ModelMercadoLibreHermerToSoldQuantityResolver<TParent>;
    buyingMode?: ModelMercadoLibreHermerToBuyingModeResolver<TParent>;
    listingTypeId?: ModelMercadoLibreHermerToListingTypeIdResolver<TParent>;
    stopTime?: ModelMercadoLibreHermerToStopTimeResolver<TParent>;
    condition?: ModelMercadoLibreHermerToConditionResolver<TParent>;
    permaLink?: ModelMercadoLibreHermerToPermaLinkResolver<TParent>;
    thumbnail?: ModelMercadoLibreHermerToThumbnailResolver<TParent>;
    thumbnailId?: ModelMercadoLibreHermerToThumbnailIdResolver<TParent>;
    acceptsMercadopago?: ModelMercadoLibreHermerToAcceptsMercadopagoResolver<TParent>;
    installments?: ModelMercadoLibreHermerToInstallmentsResolver<TParent>;
    originalPrice?: ModelMercadoLibreHermerToOriginalPriceResolver<TParent>;
    categoryId?: ModelMercadoLibreHermerToCategoryIdResolver<TParent>;
    officialStoreId?: ModelMercadoLibreHermerToOfficialStoreIdResolver<TParent>;
    domainId?: ModelMercadoLibreHermerToDomainIdResolver<TParent>;
    catalogProductId?: ModelMercadoLibreHermerToCatalogProductIdResolver<TParent>;
    orderBackend?: ModelMercadoLibreHermerToOrderBackendResolver<TParent>;
    useThumbnailId?: ModelMercadoLibreHermerToUseThumbnailIdResolver<TParent>;
    offerScore?: ModelMercadoLibreHermerToOfferScoreResolver<TParent>;
    offerShare?: ModelMercadoLibreHermerToOfferShareResolver<TParent>;
    matchScore?: ModelMercadoLibreHermerToMatchScoreResolver<TParent>;
    winnerItemId?: ModelMercadoLibreHermerToWinnerItemIdResolver<TParent>;
    melicoin?: ModelMercadoLibreHermerToMelicoinResolver<TParent>;
    discounts?: ModelMercadoLibreHermerToDiscountsResolver<TParent>;
    ano?: ModelMercadoLibreHermerToAnoResolver<TParent>;
    marca?: ModelMercadoLibreHermerToMarcaResolver<TParent>;
    modelo?: ModelMercadoLibreHermerToModeloResolver<TParent>;
    version?: ModelMercadoLibreHermerToVersionResolver<TParent>;
    kilometraje?: ModelMercadoLibreHermerToKilometrajeResolver<TParent>;
    ultimaActualizacionDePrecio?: ModelMercadoLibreHermerToUltimaActualizacionDePrecioResolver<TParent>;
    idVendedor?: ModelMercadoLibreHermerToIdVendedorResolver<TParent>;
    primeraAparicion?: ModelMercadoLibreHermerToPrimeraAparicionResolver<TParent>;
    ultimaActualizacion?: ModelMercadoLibreHermerToUltimaActualizacionResolver<TParent>;
    publicadoHace?: ModelMercadoLibreHermerToPublicadoHaceResolver<TParent>;
    marcaCatalogo?: ModelMercadoLibreHermerToMarcaCatalogoResolver<TParent>;
    year?: ModelMercadoLibreHermerToYearResolver<TParent>;
}
export interface ModelMercadoLibreHermerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToIdMercadoLibreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToSiteIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToSalePriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToCurrencyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToAvailableQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToSoldQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToBuyingModeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToListingTypeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToStopTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToConditionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToPermaLinkResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToThumbnailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToThumbnailIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToAcceptsMercadopagoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToInstallmentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToOriginalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToCategoryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToOfficialStoreIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToDomainIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToCatalogProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToOrderBackendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToUseThumbnailIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToOfferScoreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToOfferShareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToMatchScoreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToWinnerItemIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToMelicoinResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToDiscountsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToAnoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToMarcaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToModeloResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToVersionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToKilometrajeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToUltimaActualizacionDePrecioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToIdVendedorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToPrimeraAparicionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToUltimaActualizacionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToPublicadoHaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToMarcaCatalogoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ModelMercadoLibreHermerToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IComparedMercadoLibreHermerTypeResolver<TParent = any> {
    comparedId?: ComparedMercadoLibreHermerToComparedIdResolver<TParent>;
    results?: ComparedMercadoLibreHermerToResultsResolver<TParent>;
}
export interface ComparedMercadoLibreHermerToComparedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComparedMercadoLibreHermerToResultsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IResultConsultHermerTypeResolver<TParent = any> {
    count?: ResultConsultHermerToCountResolver<TParent>;
    next?: ResultConsultHermerToNextResolver<TParent>;
    previous?: ResultConsultHermerToPreviousResolver<TParent>;
    results?: ResultConsultHermerToResultsResolver<TParent>;
}
export interface ResultConsultHermerToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResultConsultHermerToNextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResultConsultHermerToPreviousResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResultConsultHermerToResultsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IConsultShortHermerTypeResolver<TParent = any> {
    vinNum?: ConsultShortHermerToVinNumResolver<TParent>;
    milage?: ConsultShortHermerToMilageResolver<TParent>;
    valuador?: ConsultShortHermerToValuadorResolver<TParent>;
    brand?: ConsultShortHermerToBrandResolver<TParent>;
    model?: ConsultShortHermerToModelResolver<TParent>;
    year?: ConsultShortHermerToYearResolver<TParent>;
    properties?: ConsultShortHermerToPropertiesResolver<TParent>;
    lobatoId?: ConsultShortHermerToLobatoIdResolver<TParent>;
    client?: ConsultShortHermerToClientResolver<TParent>;
    carmercadoConsult?: ConsultShortHermerToCarmercadoConsultResolver<TParent>;
    id?: ConsultShortHermerToIdResolver<TParent>;
    createdAt?: ConsultShortHermerToCreatedAtResolver<TParent>;
    updatedAt?: ConsultShortHermerToUpdatedAtResolver<TParent>;
}
export interface ConsultShortHermerToVinNumResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultShortHermerToMilageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultShortHermerToValuadorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultShortHermerToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultShortHermerToModelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultShortHermerToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultShortHermerToPropertiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultShortHermerToLobatoIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultShortHermerToClientResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultShortHermerToCarmercadoConsultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultShortHermerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultShortHermerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultShortHermerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICarMercadoHermerShortTypeResolver<TParent = any> {
    id?: CarMercadoHermerShortToIdResolver<TParent>;
    analysisCarmercado?: CarMercadoHermerShortToAnalysisCarmercadoResolver<TParent>;
}
export interface CarMercadoHermerShortToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CarMercadoHermerShortToAnalysisCarmercadoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAnalysisCarMercadoHermerShortTypeResolver<TParent = any> {
    lobatoBuyingPrice?: AnalysisCarMercadoHermerShortToLobatoBuyingPriceResolver<TParent>;
    lobatoSalePrice?: AnalysisCarMercadoHermerShortToLobatoSalePriceResolver<TParent>;
    estimatedEarning?: AnalysisCarMercadoHermerShortToEstimatedEarningResolver<TParent>;
    damage?: AnalysisCarMercadoHermerShortToDamageResolver<TParent>;
    advisedSalePriceWithKmRounded?: AnalysisCarMercadoHermerShortToAdvisedSalePriceWithKmRoundedResolver<TParent>;
    advisedBuyingPriceWithKmRounded?: AnalysisCarMercadoHermerShortToAdvisedBuyingPriceWithKmRoundedResolver<TParent>;
    id?: AnalysisCarMercadoHermerShortToIdResolver<TParent>;
    createdAt?: AnalysisCarMercadoHermerShortToCreatedAtResolver<TParent>;
    updatedAt?: AnalysisCarMercadoHermerShortToUpdatedAtResolver<TParent>;
}
export interface AnalysisCarMercadoHermerShortToLobatoBuyingPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerShortToLobatoSalePriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerShortToEstimatedEarningResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerShortToDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerShortToAdvisedSalePriceWithKmRoundedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerShortToAdvisedBuyingPriceWithKmRoundedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerShortToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerShortToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerShortToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IResultConsultAllHermerTypeResolver<TParent = any> {
    count?: ResultConsultAllHermerToCountResolver<TParent>;
    next?: ResultConsultAllHermerToNextResolver<TParent>;
    previous?: ResultConsultAllHermerToPreviousResolver<TParent>;
    results?: ResultConsultAllHermerToResultsResolver<TParent>;
}
export interface ResultConsultAllHermerToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResultConsultAllHermerToNextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResultConsultAllHermerToPreviousResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResultConsultAllHermerToResultsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IConsultHermerTypeResolver<TParent = any> {
    vinNum?: ConsultHermerToVinNumResolver<TParent>;
    milage?: ConsultHermerToMilageResolver<TParent>;
    valuador?: ConsultHermerToValuadorResolver<TParent>;
    brand?: ConsultHermerToBrandResolver<TParent>;
    model?: ConsultHermerToModelResolver<TParent>;
    year?: ConsultHermerToYearResolver<TParent>;
    properties?: ConsultHermerToPropertiesResolver<TParent>;
    lobatoId?: ConsultHermerToLobatoIdResolver<TParent>;
    lobatoIdData?: ConsultHermerToLobatoIdDataResolver<TParent>;
    client?: ConsultHermerToClientResolver<TParent>;
    comparedConsult?: ConsultHermerToComparedConsultResolver<TParent>;
    carmercadoConsult?: ConsultHermerToCarmercadoConsultResolver<TParent>;
    id?: ConsultHermerToIdResolver<TParent>;
    createdAt?: ConsultHermerToCreatedAtResolver<TParent>;
    updatedAt?: ConsultHermerToUpdatedAtResolver<TParent>;
}
export interface ConsultHermerToVinNumResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultHermerToMilageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultHermerToValuadorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultHermerToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultHermerToModelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultHermerToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultHermerToPropertiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultHermerToLobatoIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultHermerToLobatoIdDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultHermerToClientResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultHermerToComparedConsultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultHermerToCarmercadoConsultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultHermerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultHermerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultHermerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IlobatoHermerDataTypeResolver<TParent = any> {
    idLobato?: lobatoHermerDataToIdLobatoResolver<TParent>;
    marca?: lobatoHermerDataToMarcaResolver<TParent>;
    nuevoUsado?: lobatoHermerDataToNuevoUsadoResolver<TParent>;
    anoModelo?: lobatoHermerDataToAnoModeloResolver<TParent>;
    submarca?: lobatoHermerDataToSubmarcaResolver<TParent>;
    version?: lobatoHermerDataToVersionResolver<TParent>;
    precioVenta?: lobatoHermerDataToPrecioVentaResolver<TParent>;
    precioCompra?: lobatoHermerDataToPrecioCompraResolver<TParent>;
    precioDeListaNuevo?: lobatoHermerDataToPrecioDeListaNuevoResolver<TParent>;
    tipo?: lobatoHermerDataToTipoResolver<TParent>;
    precioIntermedio?: lobatoHermerDataToPrecioIntermedioResolver<TParent>;
    precioAgenciaCertificados?: lobatoHermerDataToPrecioAgenciaCertificadosResolver<TParent>;
    id?: lobatoHermerDataToIdResolver<TParent>;
    createdAt?: lobatoHermerDataToCreatedAtResolver<TParent>;
    updatedAt?: lobatoHermerDataToUpdatedAtResolver<TParent>;
}
export interface lobatoHermerDataToIdLobatoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface lobatoHermerDataToMarcaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface lobatoHermerDataToNuevoUsadoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface lobatoHermerDataToAnoModeloResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface lobatoHermerDataToSubmarcaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface lobatoHermerDataToVersionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface lobatoHermerDataToPrecioVentaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface lobatoHermerDataToPrecioCompraResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface lobatoHermerDataToPrecioDeListaNuevoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface lobatoHermerDataToTipoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface lobatoHermerDataToPrecioIntermedioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface lobatoHermerDataToPrecioAgenciaCertificadosResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface lobatoHermerDataToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface lobatoHermerDataToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface lobatoHermerDataToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IClientHermerTypeResolver<TParent = any> {
    firstName?: ClientHermerToFirstNameResolver<TParent>;
    lastName?: ClientHermerToLastNameResolver<TParent>;
    phone?: ClientHermerToPhoneResolver<TParent>;
    email?: ClientHermerToEmailResolver<TParent>;
    id?: ClientHermerToIdResolver<TParent>;
    createdAt?: ClientHermerToCreatedAtResolver<TParent>;
    updatedAt?: ClientHermerToUpdatedAtResolver<TParent>;
}
export interface ClientHermerToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientHermerToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientHermerToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientHermerToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientHermerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientHermerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClientHermerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IComparedHermerTypeResolver<TParent = any> {
    brand?: ComparedHermerToBrandResolver<TParent>;
    model?: ComparedHermerToModelResolver<TParent>;
    year?: ComparedHermerToYearResolver<TParent>;
    properties?: ComparedHermerToPropertiesResolver<TParent>;
    lobatoId?: ComparedHermerToLobatoIdResolver<TParent>;
    lobatoIdData?: ComparedHermerToLobatoIdDataResolver<TParent>;
    consult?: ComparedHermerToConsultResolver<TParent>;
    carmercadoCompared?: ComparedHermerToCarmercadoComparedResolver<TParent>;
    id?: ComparedHermerToIdResolver<TParent>;
    createdAt?: ComparedHermerToCreatedAtResolver<TParent>;
    updatedAt?: ComparedHermerToUpdatedAtResolver<TParent>;
}
export interface ComparedHermerToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComparedHermerToModelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComparedHermerToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComparedHermerToPropertiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComparedHermerToLobatoIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComparedHermerToLobatoIdDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComparedHermerToConsultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComparedHermerToCarmercadoComparedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComparedHermerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComparedHermerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComparedHermerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICarMercadoHermerTypeResolver<TParent = any> {
    analysisCarmercado?: CarMercadoHermerToAnalysisCarmercadoResolver<TParent>;
    mercadolibreIds?: CarMercadoHermerToMercadolibreIdsResolver<TParent>;
    mercadolibreIdsData?: CarMercadoHermerToMercadolibreIdsDataResolver<TParent>;
    manualDevaluation?: CarMercadoHermerToManualDevaluationResolver<TParent>;
    consult?: CarMercadoHermerToConsultResolver<TParent>;
    compared?: CarMercadoHermerToComparedResolver<TParent>;
    id?: CarMercadoHermerToIdResolver<TParent>;
    createdAt?: CarMercadoHermerToCreatedAtResolver<TParent>;
    updatedAt?: CarMercadoHermerToUpdatedAtResolver<TParent>;
}
export interface CarMercadoHermerToAnalysisCarmercadoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CarMercadoHermerToMercadolibreIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CarMercadoHermerToMercadolibreIdsDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CarMercadoHermerToManualDevaluationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CarMercadoHermerToConsultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CarMercadoHermerToComparedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CarMercadoHermerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CarMercadoHermerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CarMercadoHermerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAnalysisCarMercadoHermerTypeResolver<TParent = any> {
    carMercado?: AnalysisCarMercadoHermerToCarMercadoResolver<TParent>;
    meanSalePrice?: AnalysisCarMercadoHermerToMeanSalePriceResolver<TParent>;
    lobatoSalePrice?: AnalysisCarMercadoHermerToLobatoSalePriceResolver<TParent>;
    meanPriceKm?: AnalysisCarMercadoHermerToMeanPriceKmResolver<TParent>;
    meanPublishedTime?: AnalysisCarMercadoHermerToMeanPublishedTimeResolver<TParent>;
    maxPublishedTime?: AnalysisCarMercadoHermerToMaxPublishedTimeResolver<TParent>;
    minPublishedTime?: AnalysisCarMercadoHermerToMinPublishedTimeResolver<TParent>;
    estimatedEarning?: AnalysisCarMercadoHermerToEstimatedEarningResolver<TParent>;
    salePriceWithoutKm?: AnalysisCarMercadoHermerToSalePriceWithoutKmResolver<TParent>;
    advisedBuyingPriceWithoutKm?: AnalysisCarMercadoHermerToAdvisedBuyingPriceWithoutKmResolver<TParent>;
    lobatoBuyingPrice?: AnalysisCarMercadoHermerToLobatoBuyingPriceResolver<TParent>;
    meanKm?: AnalysisCarMercadoHermerToMeanKmResolver<TParent>;
    advisedSalePriceWithKm?: AnalysisCarMercadoHermerToAdvisedSalePriceWithKmResolver<TParent>;
    advisedBuyingPriceWithKm?: AnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmResolver<TParent>;
    slopeOfPredictiveLine?: AnalysisCarMercadoHermerToSlopeOfPredictiveLineResolver<TParent>;
    pointOfPredictiveLine?: AnalysisCarMercadoHermerToPointOfPredictiveLineResolver<TParent>;
    meanSalePriceCarToCompare?: AnalysisCarMercadoHermerToMeanSalePriceCarToCompareResolver<TParent>;
    lobatoSalePriceCarToCompare?: AnalysisCarMercadoHermerToLobatoSalePriceCarToCompareResolver<TParent>;
    meanPriceKmCarToCompare?: AnalysisCarMercadoHermerToMeanPriceKmCarToCompareResolver<TParent>;
    meanPublishedTimeCarToCompare?: AnalysisCarMercadoHermerToMeanPublishedTimeCarToCompareResolver<TParent>;
    maxPublishedTimeCarToCompare?: AnalysisCarMercadoHermerToMaxPublishedTimeCarToCompareResolver<TParent>;
    minPublishedTimeCarToCompare?: AnalysisCarMercadoHermerToMinPublishedTimeCarToCompareResolver<TParent>;
    estimatedEarningCarToCompare?: AnalysisCarMercadoHermerToEstimatedEarningCarToCompareResolver<TParent>;
    salePriceWithoutKmCarToCompare?: AnalysisCarMercadoHermerToSalePriceWithoutKmCarToCompareResolver<TParent>;
    lobatoBuyingPriceCarToCompare?: AnalysisCarMercadoHermerToLobatoBuyingPriceCarToCompareResolver<TParent>;
    meanKmCarToCompare?: AnalysisCarMercadoHermerToMeanKmCarToCompareResolver<TParent>;
    advisedSalePriceWithKmCarToCompare?: AnalysisCarMercadoHermerToAdvisedSalePriceWithKmCarToCompareResolver<TParent>;
    advisedBuyingPriceWithKmCarToCompare?: AnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmCarToCompareResolver<TParent>;
    slopeOfPredictiveLineCarToCompare?: AnalysisCarMercadoHermerToSlopeOfPredictiveLineCarToCompareResolver<TParent>;
    pointOfPredictiveLineCarToCompare?: AnalysisCarMercadoHermerToPointOfPredictiveLineCarToCompareResolver<TParent>;
    priceDiferenceByLobato?: AnalysisCarMercadoHermerToPriceDiferenceByLobatoResolver<TParent>;
    meanSalePriceCarToCompareMinusPriceDiference?: AnalysisCarMercadoHermerToMeanSalePriceCarToCompareMinusPriceDiferenceResolver<TParent>;
    salePriceWithoutKmCarToCompareMinusPriceDiference?: AnalysisCarMercadoHermerToSalePriceWithoutKmCarToCompareMinusPriceDiferenceResolver<TParent>;
    advisedSalePriceWithKmCarToCompareMinusPriceDiference?: AnalysisCarMercadoHermerToAdvisedSalePriceWithKmCarToCompareMinusPriceDiferenceResolver<TParent>;
    advisedBuyingPriceWithKmCarToCompareMinusPriceDiference?: AnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmCarToCompareMinusPriceDiferenceResolver<TParent>;
    damage?: AnalysisCarMercadoHermerToDamageResolver<TParent>;
    advisedSalePriceWithKmRounded?: AnalysisCarMercadoHermerToAdvisedSalePriceWithKmRoundedResolver<TParent>;
    advisedBuyingPriceWithKmRounded?: AnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmRoundedResolver<TParent>;
    advisedSalePriceWithKmCarToCompareRounded?: AnalysisCarMercadoHermerToAdvisedSalePriceWithKmCarToCompareRoundedResolver<TParent>;
    advisedBuyingPriceWithKmCarToCompareRounded?: AnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmCarToCompareRoundedResolver<TParent>;
    advisedSalePriceWithKmCarToCompareMinusPriceDiferenceRounded?: AnalysisCarMercadoHermerToAdvisedSalePriceWithKmCarToCompareMinusPriceDiferenceRoundedResolver<TParent>;
    advisedBuyingPriceWithKmCarToCompareMinusPriceDiferenceRounded?: AnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmCarToCompareMinusPriceDiferenceRoundedResolver<TParent>;
    id?: AnalysisCarMercadoHermerToIdResolver<TParent>;
    createdAt?: AnalysisCarMercadoHermerToCreatedAtResolver<TParent>;
    updatedAt?: AnalysisCarMercadoHermerToUpdatedAtResolver<TParent>;
}
export interface AnalysisCarMercadoHermerToCarMercadoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToMeanSalePriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToLobatoSalePriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToMeanPriceKmResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToMeanPublishedTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToMaxPublishedTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToMinPublishedTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToEstimatedEarningResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToSalePriceWithoutKmResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToAdvisedBuyingPriceWithoutKmResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToLobatoBuyingPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToMeanKmResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToAdvisedSalePriceWithKmResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToSlopeOfPredictiveLineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToPointOfPredictiveLineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToMeanSalePriceCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToLobatoSalePriceCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToMeanPriceKmCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToMeanPublishedTimeCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToMaxPublishedTimeCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToMinPublishedTimeCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToEstimatedEarningCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToSalePriceWithoutKmCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToLobatoBuyingPriceCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToMeanKmCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToAdvisedSalePriceWithKmCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToSlopeOfPredictiveLineCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToPointOfPredictiveLineCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToPriceDiferenceByLobatoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToMeanSalePriceCarToCompareMinusPriceDiferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToSalePriceWithoutKmCarToCompareMinusPriceDiferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToAdvisedSalePriceWithKmCarToCompareMinusPriceDiferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmCarToCompareMinusPriceDiferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToAdvisedSalePriceWithKmRoundedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmRoundedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToAdvisedSalePriceWithKmCarToCompareRoundedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmCarToCompareRoundedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToAdvisedSalePriceWithKmCarToCompareMinusPriceDiferenceRoundedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmCarToCompareMinusPriceDiferenceRoundedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AnalysisCarMercadoHermerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IResultConsultLastAnalysisHermerTypeResolver<TParent = any> {
    count?: ResultConsultLastAnalysisHermerToCountResolver<TParent>;
    next?: ResultConsultLastAnalysisHermerToNextResolver<TParent>;
    previous?: ResultConsultLastAnalysisHermerToPreviousResolver<TParent>;
    results?: ResultConsultLastAnalysisHermerToResultsResolver<TParent>;
}
export interface ResultConsultLastAnalysisHermerToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResultConsultLastAnalysisHermerToNextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResultConsultLastAnalysisHermerToPreviousResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResultConsultLastAnalysisHermerToResultsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IConsultLastAnalysisHermerTypeResolver<TParent = any> {
    vinNum?: ConsultLastAnalysisHermerToVinNumResolver<TParent>;
    milage?: ConsultLastAnalysisHermerToMilageResolver<TParent>;
    valuador?: ConsultLastAnalysisHermerToValuadorResolver<TParent>;
    brand?: ConsultLastAnalysisHermerToBrandResolver<TParent>;
    model?: ConsultLastAnalysisHermerToModelResolver<TParent>;
    year?: ConsultLastAnalysisHermerToYearResolver<TParent>;
    properties?: ConsultLastAnalysisHermerToPropertiesResolver<TParent>;
    lobatoId?: ConsultLastAnalysisHermerToLobatoIdResolver<TParent>;
    appraisal?: ConsultLastAnalysisHermerToAppraisalResolver<TParent>;
    lobatoIdData?: ConsultLastAnalysisHermerToLobatoIdDataResolver<TParent>;
    client?: ConsultLastAnalysisHermerToClientResolver<TParent>;
    lastAnalysis?: ConsultLastAnalysisHermerToLastAnalysisResolver<TParent>;
    id?: ConsultLastAnalysisHermerToIdResolver<TParent>;
    createdAt?: ConsultLastAnalysisHermerToCreatedAtResolver<TParent>;
    updatedAt?: ConsultLastAnalysisHermerToUpdatedAtResolver<TParent>;
}
export interface ConsultLastAnalysisHermerToVinNumResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultLastAnalysisHermerToMilageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultLastAnalysisHermerToValuadorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultLastAnalysisHermerToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultLastAnalysisHermerToModelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultLastAnalysisHermerToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultLastAnalysisHermerToPropertiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultLastAnalysisHermerToLobatoIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultLastAnalysisHermerToAppraisalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultLastAnalysisHermerToLobatoIdDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultLastAnalysisHermerToClientResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultLastAnalysisHermerToLastAnalysisResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultLastAnalysisHermerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultLastAnalysisHermerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConsultLastAnalysisHermerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ILastAnalysisCarMercadoHermerTypeResolver<TParent = any> {
    carmercado?: LastAnalysisCarMercadoHermerToCarmercadoResolver<TParent>;
    meanSalePrice?: LastAnalysisCarMercadoHermerToMeanSalePriceResolver<TParent>;
    lobatoSalePrice?: LastAnalysisCarMercadoHermerToLobatoSalePriceResolver<TParent>;
    meanPriceKm?: LastAnalysisCarMercadoHermerToMeanPriceKmResolver<TParent>;
    meanPublishedTime?: LastAnalysisCarMercadoHermerToMeanPublishedTimeResolver<TParent>;
    maxPublishedTime?: LastAnalysisCarMercadoHermerToMaxPublishedTimeResolver<TParent>;
    minPublishedTime?: LastAnalysisCarMercadoHermerToMinPublishedTimeResolver<TParent>;
    estimatedEarning?: LastAnalysisCarMercadoHermerToEstimatedEarningResolver<TParent>;
    salePriceWithoutKm?: LastAnalysisCarMercadoHermerToSalePriceWithoutKmResolver<TParent>;
    advisedBuyingPriceWithoutKm?: LastAnalysisCarMercadoHermerToAdvisedBuyingPriceWithoutKmResolver<TParent>;
    lobatoBuyingPrice?: LastAnalysisCarMercadoHermerToLobatoBuyingPriceResolver<TParent>;
    meanKm?: LastAnalysisCarMercadoHermerToMeanKmResolver<TParent>;
    advisedSalePriceWithKm?: LastAnalysisCarMercadoHermerToAdvisedSalePriceWithKmResolver<TParent>;
    advisedBuyingPriceWithKm?: LastAnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmResolver<TParent>;
    slopeOfPredictiveLine?: LastAnalysisCarMercadoHermerToSlopeOfPredictiveLineResolver<TParent>;
    pointOfPredictiveLine?: LastAnalysisCarMercadoHermerToPointOfPredictiveLineResolver<TParent>;
    meanSalePriceCarToCompare?: LastAnalysisCarMercadoHermerToMeanSalePriceCarToCompareResolver<TParent>;
    lobatoSalePriceCarToCompare?: LastAnalysisCarMercadoHermerToLobatoSalePriceCarToCompareResolver<TParent>;
    meanPriceKmCarToCompare?: LastAnalysisCarMercadoHermerToMeanPriceKmCarToCompareResolver<TParent>;
    meanPublishedTimeCarToCompare?: LastAnalysisCarMercadoHermerToMeanPublishedTimeCarToCompareResolver<TParent>;
    maxPublishedTimeCarToCompare?: LastAnalysisCarMercadoHermerToMaxPublishedTimeCarToCompareResolver<TParent>;
    minPublishedTimeCarToCompare?: LastAnalysisCarMercadoHermerToMinPublishedTimeCarToCompareResolver<TParent>;
    estimatedEarningCarToCompare?: LastAnalysisCarMercadoHermerToEstimatedEarningCarToCompareResolver<TParent>;
    salePriceWithoutKmCarToCompare?: LastAnalysisCarMercadoHermerToSalePriceWithoutKmCarToCompareResolver<TParent>;
    lobatoBuyingPriceCarToCompare?: LastAnalysisCarMercadoHermerToLobatoBuyingPriceCarToCompareResolver<TParent>;
    meanKmCarToCompare?: LastAnalysisCarMercadoHermerToMeanKmCarToCompareResolver<TParent>;
    advisedSalePriceWithKmCarToCompare?: LastAnalysisCarMercadoHermerToAdvisedSalePriceWithKmCarToCompareResolver<TParent>;
    advisedBuyingPriceWithKmCarToCompare?: LastAnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmCarToCompareResolver<TParent>;
    slopeOfPredictiveLineCarToCompare?: LastAnalysisCarMercadoHermerToSlopeOfPredictiveLineCarToCompareResolver<TParent>;
    pointOfPredictiveLineCarToCompare?: LastAnalysisCarMercadoHermerToPointOfPredictiveLineCarToCompareResolver<TParent>;
    priceDiferenceByLobato?: LastAnalysisCarMercadoHermerToPriceDiferenceByLobatoResolver<TParent>;
    meanSalePriceCarToCompareMinusPriceDiference?: LastAnalysisCarMercadoHermerToMeanSalePriceCarToCompareMinusPriceDiferenceResolver<TParent>;
    salePriceWithoutKmCarToCompareMinusPriceDiference?: LastAnalysisCarMercadoHermerToSalePriceWithoutKmCarToCompareMinusPriceDiferenceResolver<TParent>;
    advisedSalePriceWithKmCarToCompareMinusPriceDiference?: LastAnalysisCarMercadoHermerToAdvisedSalePriceWithKmCarToCompareMinusPriceDiferenceResolver<TParent>;
    advisedBuyingPriceWithKmCarToCompareMinusPriceDiference?: LastAnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmCarToCompareMinusPriceDiferenceResolver<TParent>;
    damage?: LastAnalysisCarMercadoHermerToDamageResolver<TParent>;
    advisedSalePriceWithKmRounded?: LastAnalysisCarMercadoHermerToAdvisedSalePriceWithKmRoundedResolver<TParent>;
    advisedBuyingPriceWithKmRounded?: LastAnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmRoundedResolver<TParent>;
    advisedSalePriceWithKmCarToCompareRounded?: LastAnalysisCarMercadoHermerToAdvisedSalePriceWithKmCarToCompareRoundedResolver<TParent>;
    advisedBuyingPriceWithKmCarToCompareRounded?: LastAnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmCarToCompareRoundedResolver<TParent>;
    advisedSalePriceWithKmCarToCompareMinusPriceDiferenceRounded?: LastAnalysisCarMercadoHermerToAdvisedSalePriceWithKmCarToCompareMinusPriceDiferenceRoundedResolver<TParent>;
    advisedBuyingPriceWithKmCarToCompareMinusPriceDiferenceRounded?: LastAnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmCarToCompareMinusPriceDiferenceRoundedResolver<TParent>;
    id?: LastAnalysisCarMercadoHermerToIdResolver<TParent>;
    createdAt?: LastAnalysisCarMercadoHermerToCreatedAtResolver<TParent>;
    updatedAt?: LastAnalysisCarMercadoHermerToUpdatedAtResolver<TParent>;
}
export interface LastAnalysisCarMercadoHermerToCarmercadoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToMeanSalePriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToLobatoSalePriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToMeanPriceKmResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToMeanPublishedTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToMaxPublishedTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToMinPublishedTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToEstimatedEarningResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToSalePriceWithoutKmResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToAdvisedBuyingPriceWithoutKmResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToLobatoBuyingPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToMeanKmResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToAdvisedSalePriceWithKmResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToSlopeOfPredictiveLineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToPointOfPredictiveLineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToMeanSalePriceCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToLobatoSalePriceCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToMeanPriceKmCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToMeanPublishedTimeCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToMaxPublishedTimeCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToMinPublishedTimeCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToEstimatedEarningCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToSalePriceWithoutKmCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToLobatoBuyingPriceCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToMeanKmCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToAdvisedSalePriceWithKmCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToSlopeOfPredictiveLineCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToPointOfPredictiveLineCarToCompareResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToPriceDiferenceByLobatoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToMeanSalePriceCarToCompareMinusPriceDiferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToSalePriceWithoutKmCarToCompareMinusPriceDiferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToAdvisedSalePriceWithKmCarToCompareMinusPriceDiferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmCarToCompareMinusPriceDiferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToAdvisedSalePriceWithKmRoundedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmRoundedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToAdvisedSalePriceWithKmCarToCompareRoundedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmCarToCompareRoundedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToAdvisedSalePriceWithKmCarToCompareMinusPriceDiferenceRoundedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToAdvisedBuyingPriceWithKmCarToCompareMinusPriceDiferenceRoundedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastAnalysisCarMercadoHermerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ILastCarMercadoHermerTypeResolver<TParent = any> {
    mercadolibreIds?: LastCarMercadoHermerToMercadolibreIdsResolver<TParent>;
    manualDevaluation?: LastCarMercadoHermerToManualDevaluationResolver<TParent>;
    consult?: LastCarMercadoHermerToConsultResolver<TParent>;
    compared?: LastCarMercadoHermerToComparedResolver<TParent>;
    id?: LastCarMercadoHermerToIdResolver<TParent>;
    createdAt?: LastCarMercadoHermerToCreatedAtResolver<TParent>;
    updatedAt?: LastCarMercadoHermerToUpdatedAtResolver<TParent>;
}
export interface LastCarMercadoHermerToMercadolibreIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastCarMercadoHermerToManualDevaluationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastCarMercadoHermerToConsultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastCarMercadoHermerToComparedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastCarMercadoHermerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastCarMercadoHermerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LastCarMercadoHermerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDownloadFileTypeResolver<TParent = any> {
    url?: DownloadFileToUrlResolver<TParent>;
}
export interface DownloadFileToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListFoldersConnectionTypeResolver<TParent = any> {
    pageInfo?: ListFoldersConnectionToPageInfoResolver<TParent>;
    edges?: ListFoldersConnectionToEdgesResolver<TParent>;
    nodes?: ListFoldersConnectionToNodesResolver<TParent>;
}
export interface ListFoldersConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListFoldersConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListFoldersConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IListFoldersEdgeTypeResolver<TParent = any> {
    cursor?: ListFoldersEdgeToCursorResolver<TParent>;
    node?: ListFoldersEdgeToNodeResolver<TParent>;
}
export interface ListFoldersEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ListFoldersEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFoldersListConnectionTypeResolver<TParent = any> {
    pageInfo?: FoldersListConnectionToPageInfoResolver<TParent>;
    edges?: FoldersListConnectionToEdgesResolver<TParent>;
    nodes?: FoldersListConnectionToNodesResolver<TParent>;
}
export interface FoldersListConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FoldersListConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FoldersListConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFoldersListEdgeTypeResolver<TParent = any> {
    cursor?: FoldersListEdgeToCursorResolver<TParent>;
    node?: FoldersListEdgeToNodeResolver<TParent>;
}
export interface FoldersListEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FoldersListEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISharedFilesFromFolderDtoTypeResolver<TParent = any> {
    totalCount?: SharedFilesFromFolderDtoToTotalCountResolver<TParent>;
    files?: SharedFilesFromFolderDtoToFilesResolver<TParent>;
}
export interface SharedFilesFromFolderDtoToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SharedFilesFromFolderDtoToFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFileCollectionSegmentTypeResolver<TParent = any> {
    items?: FileCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: FileCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: FileCollectionSegmentToTotalCountResolver<TParent>;
}
export interface FileCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FileCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FileCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFolderCollectionSegmentTypeResolver<TParent = any> {
    items?: FolderCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: FolderCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: FolderCollectionSegmentToTotalCountResolver<TParent>;
}
export interface FolderCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FolderCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FolderCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IOutstandingFilesTypeResolver<TParent = any> {
    files?: OutstandingFilesToFilesResolver<TParent>;
    folders?: OutstandingFilesToFoldersResolver<TParent>;
}
export interface OutstandingFilesToFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OutstandingFilesToFoldersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IConversationReplyTypeResolver<TParent = any> {
    memberId?: ConversationReplyToMemberIdResolver<TParent>;
    reply?: ConversationReplyToReplyResolver<TParent>;
    registerDate?: ConversationReplyToRegisterDateResolver<TParent>;
    status?: ConversationReplyToStatusResolver<TParent>;
    conversationId?: ConversationReplyToConversationIdResolver<TParent>;
    conversation?: ConversationReplyToConversationResolver<TParent>;
    id?: ConversationReplyToIdResolver<TParent>;
    createdAt?: ConversationReplyToCreatedAtResolver<TParent>;
    updatedAt?: ConversationReplyToUpdatedAtResolver<TParent>;
    member?: ConversationReplyToMemberResolver<TParent>;
}
export interface ConversationReplyToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConversationReplyToReplyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConversationReplyToRegisterDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConversationReplyToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConversationReplyToConversationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConversationReplyToConversationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConversationReplyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConversationReplyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConversationReplyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConversationReplyToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IConversationTypeResolver<TParent = any> {
    projectId?: ConversationToProjectIdResolver<TParent>;
    memberOne?: ConversationToMemberOneResolver<TParent>;
    memberTwo?: ConversationToMemberTwoResolver<TParent>;
    registerDate?: ConversationToRegisterDateResolver<TParent>;
    status?: ConversationToStatusResolver<TParent>;
    replies?: ConversationToRepliesResolver<TParent>;
    id?: ConversationToIdResolver<TParent>;
    createdAt?: ConversationToCreatedAtResolver<TParent>;
    updatedAt?: ConversationToUpdatedAtResolver<TParent>;
}
export interface ConversationToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConversationToMemberOneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConversationToMemberTwoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConversationToRegisterDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConversationToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConversationToRepliesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConversationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConversationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ConversationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberConversationTypeResolver<TParent = any> {
    memberId?: MemberConversationToMemberIdResolver<TParent>;
    conversationId?: MemberConversationToConversationIdResolver<TParent>;
    member?: MemberConversationToMemberResolver<TParent>;
}
export interface MemberConversationToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberConversationToConversationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberConversationToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEWalletCollectionSegmentTypeResolver<TParent = any> {
    items?: EWalletCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: EWalletCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: EWalletCollectionSegmentToTotalCountResolver<TParent>;
}
export interface EWalletCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EWalletCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EWalletCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberWalletCollectionSegmentTypeResolver<TParent = any> {
    items?: MemberWalletCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: MemberWalletCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: MemberWalletCollectionSegmentToTotalCountResolver<TParent>;
}
export interface MemberWalletCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberWalletCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberWalletCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IWalletTransactionCollectionSegmentTypeResolver<TParent = any> {
    items?: WalletTransactionCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: WalletTransactionCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: WalletTransactionCollectionSegmentToTotalCountResolver<TParent>;
}
export interface WalletTransactionCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IWalletTransactionStatusCollectionSegmentTypeResolver<TParent = any> {
    items?: WalletTransactionStatusCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: WalletTransactionStatusCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: WalletTransactionStatusCollectionSegmentToTotalCountResolver<TParent>;
}
export interface WalletTransactionStatusCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionStatusCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionStatusCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IWalletTransactionMemberRelationCollectionSegmentTypeResolver<TParent = any> {
    items?: WalletTransactionMemberRelationCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: WalletTransactionMemberRelationCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: WalletTransactionMemberRelationCollectionSegmentToTotalCountResolver<TParent>;
}
export interface WalletTransactionMemberRelationCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionMemberRelationCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionMemberRelationCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IWalletTransactionMemberDetailCollectionSegmentTypeResolver<TParent = any> {
    items?: WalletTransactionMemberDetailCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: WalletTransactionMemberDetailCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: WalletTransactionMemberDetailCollectionSegmentToTotalCountResolver<TParent>;
}
export interface WalletTransactionMemberDetailCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionMemberDetailCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionMemberDetailCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IWalletTransactionSummaryTypeResolver<TParent = any> {
    walletId?: WalletTransactionSummaryToWalletIdResolver<TParent>;
    walletMemberId?: WalletTransactionSummaryToWalletMemberIdResolver<TParent>;
    receptorId?: WalletTransactionSummaryToReceptorIdResolver<TParent>;
    receptorMemberId?: WalletTransactionSummaryToReceptorMemberIdResolver<TParent>;
    amount?: WalletTransactionSummaryToAmountResolver<TParent>;
    transactions?: WalletTransactionSummaryToTransactionsResolver<TParent>;
    memberRelationSummary?: WalletTransactionSummaryToMemberRelationSummaryResolver<TParent>;
    amountSummary?: WalletTransactionSummaryToAmountSummaryResolver<TParent>;
    receptorMember?: WalletTransactionSummaryToReceptorMemberResolver<TParent>;
    walletMember?: WalletTransactionSummaryToWalletMemberResolver<TParent>;
}
export interface WalletTransactionSummaryToWalletIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionSummaryToWalletMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionSummaryToReceptorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionSummaryToReceptorMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionSummaryToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionSummaryToTransactionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionSummaryToMemberRelationSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionSummaryToAmountSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionSummaryToReceptorMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionSummaryToWalletMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IWalletTransactionSummaryMemberRelationTypeResolver<TParent = any> {
    transactions?: WalletTransactionSummaryMemberRelationToTransactionsResolver<TParent>;
    memberRelationId?: WalletTransactionSummaryMemberRelationToMemberRelationIdResolver<TParent>;
    amount?: WalletTransactionSummaryMemberRelationToAmountResolver<TParent>;
    transactionToPrincipal?: WalletTransactionSummaryMemberRelationToTransactionToPrincipalResolver<TParent>;
    memberRelation?: WalletTransactionSummaryMemberRelationToMemberRelationResolver<TParent>;
}
export interface WalletTransactionSummaryMemberRelationToTransactionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionSummaryMemberRelationToMemberRelationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionSummaryMemberRelationToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionSummaryMemberRelationToTransactionToPrincipalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionSummaryMemberRelationToMemberRelationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IWalletTransactionSumaryPrincipalTypeResolver<TParent = any> {
    transactions?: WalletTransactionSumaryPrincipalToTransactionsResolver<TParent>;
    amount?: WalletTransactionSumaryPrincipalToAmountResolver<TParent>;
    createdAt?: WalletTransactionSumaryPrincipalToCreatedAtResolver<TParent>;
}
export interface WalletTransactionSumaryPrincipalToTransactionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionSumaryPrincipalToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionSumaryPrincipalToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICertificateMovementTypeResolver<TParent = any> {
    certificateId?: CertificateMovementToCertificateIdResolver<TParent>;
    certificate?: CertificateMovementToCertificateResolver<TParent>;
    certificateMovementType?: CertificateMovementToCertificateMovementTypeResolver<TParent>;
    reasons?: CertificateMovementToReasonsResolver<TParent>;
    memberId?: CertificateMovementToMemberIdResolver<TParent>;
    id?: CertificateMovementToIdResolver<TParent>;
    createdAt?: CertificateMovementToCreatedAtResolver<TParent>;
    updatedAt?: CertificateMovementToUpdatedAtResolver<TParent>;
}
export interface CertificateMovementToCertificateIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateMovementToCertificateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateMovementToCertificateMovementTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateMovementToReasonsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateMovementToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateMovementToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateMovementToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateMovementToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICertificateTypeResolver<TParent = any> {
    insurerId?: CertificateToInsurerIdResolver<TParent>;
    insurer?: CertificateToInsurerResolver<TParent>;
    contractorId?: CertificateToContractorIdResolver<TParent>;
    branchOfficeId?: CertificateToBranchOfficeIdResolver<TParent>;
    merchandiseDetailId?: CertificateToMerchandiseDetailIdResolver<TParent>;
    trafficDetailId?: CertificateToTrafficDetailIdResolver<TParent>;
    merchandiseDetail?: CertificateToMerchandiseDetailResolver<TParent>;
    trafficDetail?: CertificateToTrafficDetailResolver<TParent>;
    projectId?: CertificateToProjectIdResolver<TParent>;
    additionalComments?: CertificateToAdditionalCommentsResolver<TParent>;
    createdBy?: CertificateToCreatedByResolver<TParent>;
    isActive?: CertificateToIsActiveResolver<TParent>;
    cancellationReason?: CertificateToCancellationReasonResolver<TParent>;
    insurerFeeId?: CertificateToInsurerFeeIdResolver<TParent>;
    insurerFee?: CertificateToInsurerFeeResolver<TParent>;
    issueStatus?: CertificateToIssueStatusResolver<TParent>;
    files?: CertificateToFilesResolver<TParent>;
    policyModuleId?: CertificateToPolicyModuleIdResolver<TParent>;
    policyModule?: CertificateToPolicyModuleResolver<TParent>;
    statusFrom?: CertificateToStatusFromResolver<TParent>;
    beneficiaries?: CertificateToBeneficiariesResolver<TParent>;
    shipmentDate?: CertificateToShipmentDateResolver<TParent>;
    shippingTransport?: CertificateToShippingTransportResolver<TParent>;
    estimatedArrivingDate?: CertificateToEstimatedArrivingDateResolver<TParent>;
    history?: CertificateToHistoryResolver<TParent>;
    externalIdentifier?: CertificateToExternalIdentifierResolver<TParent>;
    internalIdentifier?: CertificateToInternalIdentifierResolver<TParent>;
    id?: CertificateToIdResolver<TParent>;
    createdAt?: CertificateToCreatedAtResolver<TParent>;
    updatedAt?: CertificateToUpdatedAtResolver<TParent>;
    contractor?: CertificateToContractorResolver<TParent>;
}
export interface CertificateToInsurerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToInsurerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToContractorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToBranchOfficeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToMerchandiseDetailIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToTrafficDetailIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToMerchandiseDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToTrafficDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToAdditionalCommentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToCreatedByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToCancellationReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToInsurerFeeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToInsurerFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToIssueStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToPolicyModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToPolicyModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToStatusFromResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToBeneficiariesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToShipmentDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToShippingTransportResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToEstimatedArrivingDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToHistoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToExternalIdentifierResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToInternalIdentifierResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateToContractorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerModuleTypeResolver<TParent = any> {
    insurerSinisterContactId?: InsurerModuleToInsurerSinisterContactIdResolver<TParent>;
    insurerSinisterContact?: InsurerModuleToInsurerSinisterContactResolver<TParent>;
    insurerAdjusterContactId?: InsurerModuleToInsurerAdjusterContactIdResolver<TParent>;
    insurerAdjusterContact?: InsurerModuleToInsurerAdjusterContactResolver<TParent>;
    logo?: InsurerModuleToLogoResolver<TParent>;
    content?: InsurerModuleToContentResolver<TParent>;
    descriptionCoverages?: InsurerModuleToDescriptionCoveragesResolver<TParent>;
    certificateType?: InsurerModuleToCertificateTypeResolver<TParent>;
    projectId?: InsurerModuleToProjectIdResolver<TParent>;
    name?: InsurerModuleToNameResolver<TParent>;
    placeInsurer?: InsurerModuleToPlaceInsurerResolver<TParent>;
    insurerType?: InsurerModuleToInsurerTypeResolver<TParent>;
    originCountryId?: InsurerModuleToOriginCountryIdResolver<TParent>;
    countries?: InsurerModuleToCountriesResolver<TParent>;
    isActive?: InsurerModuleToIsActiveResolver<TParent>;
    insurerCompanyModules?: InsurerModuleToInsurerCompanyModulesResolver<TParent>;
    insurerContacts?: InsurerModuleToInsurerContactsResolver<TParent>;
    insurerBranchId?: InsurerModuleToInsurerBranchIdResolver<TParent>;
    insurerBranch?: InsurerModuleToInsurerBranchResolver<TParent>;
    insurerAddresses?: InsurerModuleToInsurerAddressesResolver<TParent>;
    servicesToShow?: InsurerModuleToServicesToShowResolver<TParent>;
    merchandiseLegalTermsHTML?: InsurerModuleToMerchandiseLegalTermsHTMLResolver<TParent>;
    merchandiseLegalTermsJSON?: InsurerModuleToMerchandiseLegalTermsJSONResolver<TParent>;
    containerLegalTermsHTML?: InsurerModuleToContainerLegalTermsHTMLResolver<TParent>;
    containerLegalTermsJSON?: InsurerModuleToContainerLegalTermsJSONResolver<TParent>;
    id?: InsurerModuleToIdResolver<TParent>;
    createdAt?: InsurerModuleToCreatedAtResolver<TParent>;
    updatedAt?: InsurerModuleToUpdatedAtResolver<TParent>;
}
export interface InsurerModuleToInsurerSinisterContactIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToInsurerSinisterContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToInsurerAdjusterContactIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToInsurerAdjusterContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToLogoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToContentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToDescriptionCoveragesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToCertificateTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToPlaceInsurerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToInsurerTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToOriginCountryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToCountriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToInsurerCompanyModulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToInsurerContactsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToInsurerBranchIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToInsurerBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToInsurerAddressesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToServicesToShowResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToMerchandiseLegalTermsHTMLResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToMerchandiseLegalTermsJSONResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToContainerLegalTermsHTMLResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToContainerLegalTermsJSONResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerSinisterContactTypeResolver<TParent = any> {
    insurerModuleId?: InsurerSinisterContactToInsurerModuleIdResolver<TParent>;
    contactName?: InsurerSinisterContactToContactNameResolver<TParent>;
    officePhoneNumber?: InsurerSinisterContactToOfficePhoneNumberResolver<TParent>;
    afterHoursPhoneNumber?: InsurerSinisterContactToAfterHoursPhoneNumberResolver<TParent>;
    emailOne?: InsurerSinisterContactToEmailOneResolver<TParent>;
    emailTwo?: InsurerSinisterContactToEmailTwoResolver<TParent>;
    id?: InsurerSinisterContactToIdResolver<TParent>;
    createdAt?: InsurerSinisterContactToCreatedAtResolver<TParent>;
    updatedAt?: InsurerSinisterContactToUpdatedAtResolver<TParent>;
}
export interface InsurerSinisterContactToInsurerModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerSinisterContactToContactNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerSinisterContactToOfficePhoneNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerSinisterContactToAfterHoursPhoneNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerSinisterContactToEmailOneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerSinisterContactToEmailTwoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerSinisterContactToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerSinisterContactToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerSinisterContactToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerAdjusterContactTypeResolver<TParent = any> {
    name?: InsurerAdjusterContactToNameResolver<TParent>;
    emailOne?: InsurerAdjusterContactToEmailOneResolver<TParent>;
    emailTwo?: InsurerAdjusterContactToEmailTwoResolver<TParent>;
    phoneNumber?: InsurerAdjusterContactToPhoneNumberResolver<TParent>;
    insurerModuleId?: InsurerAdjusterContactToInsurerModuleIdResolver<TParent>;
    id?: InsurerAdjusterContactToIdResolver<TParent>;
    createdAt?: InsurerAdjusterContactToCreatedAtResolver<TParent>;
    updatedAt?: InsurerAdjusterContactToUpdatedAtResolver<TParent>;
}
export interface InsurerAdjusterContactToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerAdjusterContactToEmailOneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerAdjusterContactToEmailTwoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerAdjusterContactToPhoneNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerAdjusterContactToInsurerModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerAdjusterContactToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerAdjusterContactToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerAdjusterContactToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerCompanyModuleTypeResolver<TParent = any> {
    insurerModuleId?: InsurerCompanyModuleToInsurerModuleIdResolver<TParent>;
    insurerModule?: InsurerCompanyModuleToInsurerModuleResolver<TParent>;
    key?: InsurerCompanyModuleToKeyResolver<TParent>;
    name?: InsurerCompanyModuleToNameResolver<TParent>;
    typeValue?: InsurerCompanyModuleToTypeValueResolver<TParent>;
    id?: InsurerCompanyModuleToIdResolver<TParent>;
    createdAt?: InsurerCompanyModuleToCreatedAtResolver<TParent>;
    updatedAt?: InsurerCompanyModuleToUpdatedAtResolver<TParent>;
}
export interface InsurerCompanyModuleToInsurerModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCompanyModuleToInsurerModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCompanyModuleToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCompanyModuleToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCompanyModuleToTypeValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCompanyModuleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCompanyModuleToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCompanyModuleToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerContactTypeResolver<TParent = any> {
    insurerModuleId?: InsurerContactToInsurerModuleIdResolver<TParent>;
    insurerModule?: InsurerContactToInsurerModuleResolver<TParent>;
    name?: InsurerContactToNameResolver<TParent>;
    email?: InsurerContactToEmailResolver<TParent>;
    department?: InsurerContactToDepartmentResolver<TParent>;
    phone?: InsurerContactToPhoneResolver<TParent>;
    id?: InsurerContactToIdResolver<TParent>;
    createdAt?: InsurerContactToCreatedAtResolver<TParent>;
    updatedAt?: InsurerContactToUpdatedAtResolver<TParent>;
}
export interface InsurerContactToInsurerModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerContactToInsurerModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerContactToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerContactToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerContactToDepartmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerContactToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerContactToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerContactToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerContactToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerBranchTypeResolver<TParent = any> {
    insurerModuleId?: InsurerBranchToInsurerModuleIdResolver<TParent>;
    insurerModule?: InsurerBranchToInsurerModuleResolver<TParent>;
    life?: InsurerBranchToLifeResolver<TParent>;
    accidentAndDisease?: InsurerBranchToAccidentAndDiseaseResolver<TParent>;
    cars?: InsurerBranchToCarsResolver<TParent>;
    damages?: InsurerBranchToDamagesResolver<TParent>;
    id?: InsurerBranchToIdResolver<TParent>;
    createdAt?: InsurerBranchToCreatedAtResolver<TParent>;
    updatedAt?: InsurerBranchToUpdatedAtResolver<TParent>;
}
export interface InsurerBranchToInsurerModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBranchToInsurerModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBranchToLifeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBranchToAccidentAndDiseaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBranchToCarsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBranchToDamagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBranchToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBranchToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBranchToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerAddressTypeResolver<TParent = any> {
    insurerModuleId?: InsurerAddressToInsurerModuleIdResolver<TParent>;
    insurerModule?: InsurerAddressToInsurerModuleResolver<TParent>;
    stateName?: InsurerAddressToStateNameResolver<TParent>;
    municipality?: InsurerAddressToMunicipalityResolver<TParent>;
    streetName?: InsurerAddressToStreetNameResolver<TParent>;
    id?: InsurerAddressToIdResolver<TParent>;
    createdAt?: InsurerAddressToCreatedAtResolver<TParent>;
    updatedAt?: InsurerAddressToUpdatedAtResolver<TParent>;
}
export interface InsurerAddressToInsurerModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerAddressToInsurerModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerAddressToStateNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerAddressToMunicipalityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerAddressToStreetNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerAddressToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerAddressToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerAddressToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMerchandiseDetailTypeResolver<TParent = any> {
    contractorId?: MerchandiseDetailToContractorIdResolver<TParent>;
    officeId?: MerchandiseDetailToOfficeIdResolver<TParent>;
    merchandiseCategoryId?: MerchandiseDetailToMerchandiseCategoryIdResolver<TParent>;
    merchandiseId?: MerchandiseDetailToMerchandiseIdResolver<TParent>;
    merchandise?: MerchandiseDetailToMerchandiseResolver<TParent>;
    countryOrigin?: MerchandiseDetailToCountryOriginResolver<TParent>;
    countryDestiny?: MerchandiseDetailToCountryDestinyResolver<TParent>;
    projectId?: MerchandiseDetailToProjectIdResolver<TParent>;
    id?: MerchandiseDetailToIdResolver<TParent>;
    createdAt?: MerchandiseDetailToCreatedAtResolver<TParent>;
    updatedAt?: MerchandiseDetailToUpdatedAtResolver<TParent>;
}
export interface MerchandiseDetailToContractorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseDetailToOfficeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseDetailToMerchandiseCategoryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseDetailToMerchandiseIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseDetailToMerchandiseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseDetailToCountryOriginResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseDetailToCountryDestinyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseDetailToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseDetailToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseDetailToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseDetailToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMerchandiseTypeResolver<TParent = any> {
    name?: MerchandiseToNameResolver<TParent>;
    merchandiseType?: MerchandiseToMerchandiseTypeResolver<TParent>;
    categoryId?: MerchandiseToCategoryIdResolver<TParent>;
    insurerId?: MerchandiseToInsurerIdResolver<TParent>;
    insurer?: MerchandiseToInsurerResolver<TParent>;
    merchandiseStatus?: MerchandiseToMerchandiseStatusResolver<TParent>;
    projectId?: MerchandiseToProjectIdResolver<TParent>;
    id?: MerchandiseToIdResolver<TParent>;
    createdAt?: MerchandiseToCreatedAtResolver<TParent>;
    updatedAt?: MerchandiseToUpdatedAtResolver<TParent>;
    category?: MerchandiseToCategoryResolver<TParent>;
}
export interface MerchandiseToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseToMerchandiseTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseToCategoryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseToInsurerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseToInsurerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseToMerchandiseStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseToCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ITrafficDetailTypeResolver<TParent = any> {
    currencyId?: TrafficDetailToCurrencyIdResolver<TParent>;
    beneficiaryId?: TrafficDetailToBeneficiaryIdResolver<TParent>;
    activityDescription?: TrafficDetailToActivityDescriptionResolver<TParent>;
    origin?: TrafficDetailToOriginResolver<TParent>;
    destiny?: TrafficDetailToDestinyResolver<TParent>;
    sumAssured?: TrafficDetailToSumAssuredResolver<TParent>;
    transportMode?: TrafficDetailToTransportModeResolver<TParent>;
    number?: TrafficDetailToNumberResolver<TParent>;
    showPrice?: TrafficDetailToShowPriceResolver<TParent>;
    minimumSell?: TrafficDetailToMinimumSellResolver<TParent>;
    priceToShow?: TrafficDetailToPriceToShowResolver<TParent>;
    projectId?: TrafficDetailToProjectIdResolver<TParent>;
    typeCoverage?: TrafficDetailToTypeCoverageResolver<TParent>;
    id?: TrafficDetailToIdResolver<TParent>;
    createdAt?: TrafficDetailToCreatedAtResolver<TParent>;
    updatedAt?: TrafficDetailToUpdatedAtResolver<TParent>;
    currency?: TrafficDetailToCurrencyResolver<TParent>;
}
export interface TrafficDetailToCurrencyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TrafficDetailToBeneficiaryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TrafficDetailToActivityDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TrafficDetailToOriginResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TrafficDetailToDestinyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TrafficDetailToSumAssuredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TrafficDetailToTransportModeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TrafficDetailToNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TrafficDetailToShowPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TrafficDetailToMinimumSellResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TrafficDetailToPriceToShowResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TrafficDetailToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TrafficDetailToTypeCoverageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TrafficDetailToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TrafficDetailToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TrafficDetailToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface TrafficDetailToCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerFeeTypeResolver<TParent = any> {
    isActive?: InsurerFeeToIsActiveResolver<TParent>;
    contractorId?: InsurerFeeToContractorIdResolver<TParent>;
    projectId?: InsurerFeeToProjectIdResolver<TParent>;
    insurerModuleId?: InsurerFeeToInsurerModuleIdResolver<TParent>;
    merchandises?: InsurerFeeToMerchandisesResolver<TParent>;
    insurerModule?: InsurerFeeToInsurerModuleResolver<TParent>;
    policyModuleId?: InsurerFeeToPolicyModuleIdResolver<TParent>;
    policyModule?: InsurerFeeToPolicyModuleResolver<TParent>;
    originCountries?: InsurerFeeToOriginCountriesResolver<TParent>;
    destinyConutries?: InsurerFeeToDestinyConutriesResolver<TParent>;
    feeId?: InsurerFeeToFeeIdResolver<TParent>;
    fee?: InsurerFeeToFeeResolver<TParent>;
    files?: InsurerFeeToFilesResolver<TParent>;
    startVigency?: InsurerFeeToStartVigencyResolver<TParent>;
    vigencyLimit?: InsurerFeeToVigencyLimitResolver<TParent>;
    id?: InsurerFeeToIdResolver<TParent>;
    createdAt?: InsurerFeeToCreatedAtResolver<TParent>;
    updatedAt?: InsurerFeeToUpdatedAtResolver<TParent>;
}
export interface InsurerFeeToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeToContractorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeToInsurerModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeToMerchandisesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeToInsurerModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeToPolicyModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeToPolicyModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeToOriginCountriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeToDestinyConutriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeToFeeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeToFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeToFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeToStartVigencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeToVigencyLimitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPolicyModuleTypeResolver<TParent = any> {
    projectId?: PolicyModuleToProjectIdResolver<TParent>;
    policyNumber?: PolicyModuleToPolicyNumberResolver<TParent>;
    insurerModuleId?: PolicyModuleToInsurerModuleIdResolver<TParent>;
    insurer?: PolicyModuleToInsurerResolver<TParent>;
    policyType?: PolicyModuleToPolicyTypeResolver<TParent>;
    address?: PolicyModuleToAddressResolver<TParent>;
    paymentResponsable?: PolicyModuleToPaymentResponsableResolver<TParent>;
    phoneNumber?: PolicyModuleToPhoneNumberResolver<TParent>;
    startDateVigency?: PolicyModuleToStartDateVigencyResolver<TParent>;
    endDatevigency?: PolicyModuleToEndDatevigencyResolver<TParent>;
    moneySymbols?: PolicyModuleToMoneySymbolsResolver<TParent>;
    dateLimitVigency?: PolicyModuleToDateLimitVigencyResolver<TParent>;
    description?: PolicyModuleToDescriptionResolver<TParent>;
    hasRateByPolicy?: PolicyModuleToHasRateByPolicyResolver<TParent>;
    policyDeductibleId?: PolicyModuleToPolicyDeductibleIdResolver<TParent>;
    deductibles?: PolicyModuleToDeductiblesResolver<TParent>;
    declarations?: PolicyModuleToDeclarationsResolver<TParent>;
    policyPrimaId?: PolicyModuleToPolicyPrimaIdResolver<TParent>;
    policyPrima?: PolicyModuleToPolicyPrimaResolver<TParent>;
    policyFrequencyPaymentId?: PolicyModuleToPolicyFrequencyPaymentIdResolver<TParent>;
    policyFrequencyPayment?: PolicyModuleToPolicyFrequencyPaymentResolver<TParent>;
    products?: PolicyModuleToProductsResolver<TParent>;
    modules?: PolicyModuleToModulesResolver<TParent>;
    policyFiles?: PolicyModuleToPolicyFilesResolver<TParent>;
    policyCoverageId?: PolicyModuleToPolicyCoverageIdResolver<TParent>;
    policyCoverage?: PolicyModuleToPolicyCoverageResolver<TParent>;
    contracts?: PolicyModuleToContractsResolver<TParent>;
    id?: PolicyModuleToIdResolver<TParent>;
    createdAt?: PolicyModuleToCreatedAtResolver<TParent>;
    updatedAt?: PolicyModuleToUpdatedAtResolver<TParent>;
}
export interface PolicyModuleToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToPolicyNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToInsurerModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToInsurerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToPolicyTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToPaymentResponsableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToPhoneNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToStartDateVigencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToEndDatevigencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToMoneySymbolsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToDateLimitVigencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToHasRateByPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToPolicyDeductibleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToDeductiblesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToDeclarationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToPolicyPrimaIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToPolicyPrimaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToPolicyFrequencyPaymentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToPolicyFrequencyPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToModulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToPolicyFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToPolicyCoverageIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToPolicyCoverageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToContractsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMoneySymbolTypeResolver<TParent = any> {
    policyModuleId?: MoneySymbolToPolicyModuleIdResolver<TParent>;
    policyModule?: MoneySymbolToPolicyModuleResolver<TParent>;
    keyName?: MoneySymbolToKeyNameResolver<TParent>;
    value?: MoneySymbolToValueResolver<TParent>;
    label?: MoneySymbolToLabelResolver<TParent>;
    id?: MoneySymbolToIdResolver<TParent>;
    createdAt?: MoneySymbolToCreatedAtResolver<TParent>;
    updatedAt?: MoneySymbolToUpdatedAtResolver<TParent>;
}
export interface MoneySymbolToPolicyModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MoneySymbolToPolicyModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MoneySymbolToKeyNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MoneySymbolToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MoneySymbolToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MoneySymbolToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MoneySymbolToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MoneySymbolToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPolicyDeductibleTypeResolver<TParent = any> {
    policyModuleId?: PolicyDeductibleToPolicyModuleIdResolver<TParent>;
    policyModule?: PolicyDeductibleToPolicyModuleResolver<TParent>;
    deductibleTheft?: PolicyDeductibleToDeductibleTheftResolver<TParent>;
    deductibleMerchandiseSensibility?: PolicyDeductibleToDeductibleMerchandiseSensibilityResolver<TParent>;
    deductibleRefrigeratedMerchandise?: PolicyDeductibleToDeductibleRefrigeratedMerchandiseResolver<TParent>;
    minimumDeductible?: PolicyDeductibleToMinimumDeductibleResolver<TParent>;
    damageDeductible?: PolicyDeductibleToDamageDeductibleResolver<TParent>;
    minimumPurchase?: PolicyDeductibleToMinimumPurchaseResolver<TParent>;
    purchaseRate?: PolicyDeductibleToPurchaseRateResolver<TParent>;
    id?: PolicyDeductibleToIdResolver<TParent>;
    createdAt?: PolicyDeductibleToCreatedAtResolver<TParent>;
    updatedAt?: PolicyDeductibleToUpdatedAtResolver<TParent>;
}
export interface PolicyDeductibleToPolicyModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyDeductibleToPolicyModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyDeductibleToDeductibleTheftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyDeductibleToDeductibleMerchandiseSensibilityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyDeductibleToDeductibleRefrigeratedMerchandiseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyDeductibleToMinimumDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyDeductibleToDamageDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyDeductibleToMinimumPurchaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyDeductibleToPurchaseRateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyDeductibleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyDeductibleToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyDeductibleToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPolicyDeclarationTypeResolver<TParent = any> {
    policyModuleId?: PolicyDeclarationToPolicyModuleIdResolver<TParent>;
    policyModule?: PolicyDeclarationToPolicyModuleResolver<TParent>;
    email?: PolicyDeclarationToEmailResolver<TParent>;
    name?: PolicyDeclarationToNameResolver<TParent>;
    id?: PolicyDeclarationToIdResolver<TParent>;
    createdAt?: PolicyDeclarationToCreatedAtResolver<TParent>;
    updatedAt?: PolicyDeclarationToUpdatedAtResolver<TParent>;
}
export interface PolicyDeclarationToPolicyModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyDeclarationToPolicyModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyDeclarationToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyDeclarationToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyDeclarationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyDeclarationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyDeclarationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPolicyPrimaTypeResolver<TParent = any> {
    policyModuleId?: PolicyPrimaToPolicyModuleIdResolver<TParent>;
    policyModule?: PolicyPrimaToPolicyModuleResolver<TParent>;
    primaNeta?: PolicyPrimaToPrimaNetaResolver<TParent>;
    discounts?: PolicyPrimaToDiscountsResolver<TParent>;
    surchargerPayments?: PolicyPrimaToSurchargerPaymentsResolver<TParent>;
    policyRights?: PolicyPrimaToPolicyRightsResolver<TParent>;
    subTotal?: PolicyPrimaToSubTotalResolver<TParent>;
    iva?: PolicyPrimaToIvaResolver<TParent>;
    primaTotal?: PolicyPrimaToPrimaTotalResolver<TParent>;
    id?: PolicyPrimaToIdResolver<TParent>;
    createdAt?: PolicyPrimaToCreatedAtResolver<TParent>;
    updatedAt?: PolicyPrimaToUpdatedAtResolver<TParent>;
}
export interface PolicyPrimaToPolicyModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyPrimaToPolicyModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyPrimaToPrimaNetaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyPrimaToDiscountsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyPrimaToSurchargerPaymentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyPrimaToPolicyRightsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyPrimaToSubTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyPrimaToIvaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyPrimaToPrimaTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyPrimaToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyPrimaToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyPrimaToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPolicyFrequencyPaymentTypeResolver<TParent = any> {
    policyModuleId?: PolicyFrequencyPaymentToPolicyModuleIdResolver<TParent>;
    policyModule?: PolicyFrequencyPaymentToPolicyModuleResolver<TParent>;
    monthly?: PolicyFrequencyPaymentToMonthlyResolver<TParent>;
    bimonthly?: PolicyFrequencyPaymentToBimonthlyResolver<TParent>;
    quarterly?: PolicyFrequencyPaymentToQuarterlyResolver<TParent>;
    halfYearly?: PolicyFrequencyPaymentToHalfYearlyResolver<TParent>;
    annual?: PolicyFrequencyPaymentToAnnualResolver<TParent>;
    cash?: PolicyFrequencyPaymentToCashResolver<TParent>;
    buyRate?: PolicyFrequencyPaymentToBuyRateResolver<TParent>;
    minimumBuys?: PolicyFrequencyPaymentToMinimumBuysResolver<TParent>;
    id?: PolicyFrequencyPaymentToIdResolver<TParent>;
    createdAt?: PolicyFrequencyPaymentToCreatedAtResolver<TParent>;
    updatedAt?: PolicyFrequencyPaymentToUpdatedAtResolver<TParent>;
}
export interface PolicyFrequencyPaymentToPolicyModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFrequencyPaymentToPolicyModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFrequencyPaymentToMonthlyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFrequencyPaymentToBimonthlyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFrequencyPaymentToQuarterlyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFrequencyPaymentToHalfYearlyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFrequencyPaymentToAnnualResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFrequencyPaymentToCashResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFrequencyPaymentToBuyRateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFrequencyPaymentToMinimumBuysResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFrequencyPaymentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFrequencyPaymentToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFrequencyPaymentToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPolicyProductTypeResolver<TParent = any> {
    policyModuleId?: PolicyProductToPolicyModuleIdResolver<TParent>;
    policyModule?: PolicyProductToPolicyModuleResolver<TParent>;
    name?: PolicyProductToNameResolver<TParent>;
    category?: PolicyProductToCategoryResolver<TParent>;
    insurerBuy?: PolicyProductToInsurerBuyResolver<TParent>;
    insurerMinimum?: PolicyProductToInsurerMinimumResolver<TParent>;
    policySell?: PolicyProductToPolicySellResolver<TParent>;
    policyMinimumSell?: PolicyProductToPolicyMinimumSellResolver<TParent>;
    productId?: PolicyProductToProductIdResolver<TParent>;
    id?: PolicyProductToIdResolver<TParent>;
    createdAt?: PolicyProductToCreatedAtResolver<TParent>;
    updatedAt?: PolicyProductToUpdatedAtResolver<TParent>;
}
export interface PolicyProductToPolicyModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyProductToPolicyModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyProductToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyProductToCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyProductToInsurerBuyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyProductToInsurerMinimumResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyProductToPolicySellResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyProductToPolicyMinimumSellResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyProductToProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyProductToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyProductToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyProductToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface Iitus_ModuleTypeResolver<TParent = any> {
    policyModuleId?: itus_ModuleToPolicyModuleIdResolver<TParent>;
    insurerModule?: itus_ModuleToInsurerModuleResolver<TParent>;
    key?: itus_ModuleToKeyResolver<TParent>;
    typeValue?: itus_ModuleToTypeValueResolver<TParent>;
    name?: itus_ModuleToNameResolver<TParent>;
    id?: itus_ModuleToIdResolver<TParent>;
    createdAt?: itus_ModuleToCreatedAtResolver<TParent>;
    updatedAt?: itus_ModuleToUpdatedAtResolver<TParent>;
}
export interface itus_ModuleToPolicyModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_ModuleToInsurerModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_ModuleToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_ModuleToTypeValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_ModuleToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_ModuleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_ModuleToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_ModuleToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPolicyFileTypeResolver<TParent = any> {
    policyModuleId?: PolicyFileToPolicyModuleIdResolver<TParent>;
    policyModule?: PolicyFileToPolicyModuleResolver<TParent>;
    fileId?: PolicyFileToFileIdResolver<TParent>;
    url?: PolicyFileToUrlResolver<TParent>;
    message?: PolicyFileToMessageResolver<TParent>;
    token?: PolicyFileToTokenResolver<TParent>;
    partialUrl?: PolicyFileToPartialUrlResolver<TParent>;
    name?: PolicyFileToNameResolver<TParent>;
    fileName?: PolicyFileToFileNameResolver<TParent>;
    size?: PolicyFileToSizeResolver<TParent>;
    type?: PolicyFileToTypeResolver<TParent>;
    id?: PolicyFileToIdResolver<TParent>;
    createdAt?: PolicyFileToCreatedAtResolver<TParent>;
    updatedAt?: PolicyFileToUpdatedAtResolver<TParent>;
}
export interface PolicyFileToPolicyModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFileToPolicyModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFileToFileIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFileToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFileToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFileToTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFileToPartialUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFileToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFileToFileNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFileToSizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFileToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFileToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFileToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyFileToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPolicyCoverageTypeResolver<TParent = any> {
    policyModuleId?: PolicyCoverageToPolicyModuleIdResolver<TParent>;
    policyModule?: PolicyCoverageToPolicyModuleResolver<TParent>;
    originCountries?: PolicyCoverageToOriginCountriesResolver<TParent>;
    destinyCountries?: PolicyCoverageToDestinyCountriesResolver<TParent>;
    id?: PolicyCoverageToIdResolver<TParent>;
    createdAt?: PolicyCoverageToCreatedAtResolver<TParent>;
    updatedAt?: PolicyCoverageToUpdatedAtResolver<TParent>;
}
export interface PolicyCoverageToPolicyModuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyCoverageToPolicyModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyCoverageToOriginCountriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyCoverageToDestinyCountriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyCoverageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyCoverageToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyCoverageToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFeeTypeResolver<TParent = any> {
    insurerId?: FeeToInsurerIdResolver<TParent>;
    insurer?: FeeToInsurerResolver<TParent>;
    purchaseRates?: FeeToPurchaseRatesResolver<TParent>;
    minimumPurchase?: FeeToMinimumPurchaseResolver<TParent>;
    sellRates?: FeeToSellRatesResolver<TParent>;
    maximumSells?: FeeToMaximumSellsResolver<TParent>;
    projectId?: FeeToProjectIdResolver<TParent>;
    minimumSells?: FeeToMinimumSellsResolver<TParent>;
    id?: FeeToIdResolver<TParent>;
    createdAt?: FeeToCreatedAtResolver<TParent>;
    updatedAt?: FeeToUpdatedAtResolver<TParent>;
}
export interface FeeToInsurerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FeeToInsurerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FeeToPurchaseRatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FeeToMinimumPurchaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FeeToSellRatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FeeToMaximumSellsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FeeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FeeToMinimumSellsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FeeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FeeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FeeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerFeeFileTypeResolver<TParent = any> {
    insurerFeeId?: InsurerFeeFileToInsurerFeeIdResolver<TParent>;
    insurerFee?: InsurerFeeFileToInsurerFeeResolver<TParent>;
    fileId?: InsurerFeeFileToFileIdResolver<TParent>;
    id?: InsurerFeeFileToIdResolver<TParent>;
    createdAt?: InsurerFeeFileToCreatedAtResolver<TParent>;
    updatedAt?: InsurerFeeFileToUpdatedAtResolver<TParent>;
}
export interface InsurerFeeFileToInsurerFeeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeFileToInsurerFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeFileToFileIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeFileToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeFileToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeFileToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICertificateFileTypeResolver<TParent = any> {
    projectId?: CertificateFileToProjectIdResolver<TParent>;
    certificateId?: CertificateFileToCertificateIdResolver<TParent>;
    certificate?: CertificateFileToCertificateResolver<TParent>;
    fileId?: CertificateFileToFileIdResolver<TParent>;
    id?: CertificateFileToIdResolver<TParent>;
    createdAt?: CertificateFileToCreatedAtResolver<TParent>;
    updatedAt?: CertificateFileToUpdatedAtResolver<TParent>;
}
export interface CertificateFileToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateFileToCertificateIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateFileToCertificateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateFileToFileIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateFileToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateFileToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateFileToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICertificateBeneficiaryTypeResolver<TParent = any> {
    certificateId?: CertificateBeneficiaryToCertificateIdResolver<TParent>;
    certificate?: CertificateBeneficiaryToCertificateResolver<TParent>;
    beneficiaryId?: CertificateBeneficiaryToBeneficiaryIdResolver<TParent>;
    beneficiary?: CertificateBeneficiaryToBeneficiaryResolver<TParent>;
    id?: CertificateBeneficiaryToIdResolver<TParent>;
    createdAt?: CertificateBeneficiaryToCreatedAtResolver<TParent>;
    updatedAt?: CertificateBeneficiaryToUpdatedAtResolver<TParent>;
}
export interface CertificateBeneficiaryToCertificateIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateBeneficiaryToCertificateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateBeneficiaryToBeneficiaryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateBeneficiaryToBeneficiaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateBeneficiaryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateBeneficiaryToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateBeneficiaryToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBeneficiaryTypeResolver<TParent = any> {
    name?: BeneficiaryToNameResolver<TParent>;
    rfc?: BeneficiaryToRfcResolver<TParent>;
    countryId?: BeneficiaryToCountryIdResolver<TParent>;
    isActive?: BeneficiaryToIsActiveResolver<TParent>;
    projectId?: BeneficiaryToProjectIdResolver<TParent>;
    contractId?: BeneficiaryToContractIdResolver<TParent>;
    id?: BeneficiaryToIdResolver<TParent>;
    createdAt?: BeneficiaryToCreatedAtResolver<TParent>;
    updatedAt?: BeneficiaryToUpdatedAtResolver<TParent>;
}
export interface BeneficiaryToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiaryToRfcResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiaryToCountryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiaryToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiaryToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiaryToContractIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiaryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiaryToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiaryToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICertificateMovementReasonTypeResolver<TParent = any> {
    certificateMovementId?: CertificateMovementReasonToCertificateMovementIdResolver<TParent>;
    certificateMovement?: CertificateMovementReasonToCertificateMovementResolver<TParent>;
    reason?: CertificateMovementReasonToReasonResolver<TParent>;
    reasonDescription?: CertificateMovementReasonToReasonDescriptionResolver<TParent>;
    id?: CertificateMovementReasonToIdResolver<TParent>;
    createdAt?: CertificateMovementReasonToCreatedAtResolver<TParent>;
    updatedAt?: CertificateMovementReasonToUpdatedAtResolver<TParent>;
}
export interface CertificateMovementReasonToCertificateMovementIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateMovementReasonToCertificateMovementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateMovementReasonToReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateMovementReasonToReasonDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateMovementReasonToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateMovementReasonToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateMovementReasonToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICountryRequestTypeResolver<TParent = any> {
    insurerCompanyId?: CountryRequestToInsurerCompanyIdResolver<TParent>;
    insurerCompany?: CountryRequestToInsurerCompanyResolver<TParent>;
    countryId?: CountryRequestToCountryIdResolver<TParent>;
    projectId?: CountryRequestToProjectIdResolver<TParent>;
    id?: CountryRequestToIdResolver<TParent>;
    createdAt?: CountryRequestToCreatedAtResolver<TParent>;
    updatedAt?: CountryRequestToUpdatedAtResolver<TParent>;
}
export interface CountryRequestToInsurerCompanyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CountryRequestToInsurerCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CountryRequestToCountryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CountryRequestToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CountryRequestToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CountryRequestToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CountryRequestToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerCompanyTypeResolver<TParent = any> {
    name?: InsurerCompanyToNameResolver<TParent>;
    countries?: InsurerCompanyToCountriesResolver<TParent>;
    contractorId?: InsurerCompanyToContractorIdResolver<TParent>;
    contractor?: InsurerCompanyToContractorResolver<TParent>;
    isActive?: InsurerCompanyToIsActiveResolver<TParent>;
    projectId?: InsurerCompanyToProjectIdResolver<TParent>;
    id?: InsurerCompanyToIdResolver<TParent>;
    createdAt?: InsurerCompanyToCreatedAtResolver<TParent>;
    updatedAt?: InsurerCompanyToUpdatedAtResolver<TParent>;
}
export interface InsurerCompanyToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCompanyToCountriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCompanyToContractorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCompanyToContractorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCompanyToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCompanyToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCompanyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCompanyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCompanyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorTypeResolver<TParent = any> {
    name?: ContractorToNameResolver<TParent>;
    countryId?: ContractorToCountryIdResolver<TParent>;
    company?: ContractorToCompanyResolver<TParent>;
    postalCode?: ContractorToPostalCodeResolver<TParent>;
    location?: ContractorToLocationResolver<TParent>;
    city?: ContractorToCityResolver<TParent>;
    colony?: ContractorToColonyResolver<TParent>;
    extNumber?: ContractorToExtNumberResolver<TParent>;
    phone?: ContractorToPhoneResolver<TParent>;
    typeOfBusiness?: ContractorToTypeOfBusinessResolver<TParent>;
    webSite?: ContractorToWebSiteResolver<TParent>;
    rfc?: ContractorToRfcResolver<TParent>;
    auxiliaryCode?: ContractorToAuxiliaryCodeResolver<TParent>;
    paymentMethod?: ContractorToPaymentMethodResolver<TParent>;
    usesCFDI?: ContractorToUsesCFDIResolver<TParent>;
    paymentTerm?: ContractorToPaymentTermResolver<TParent>;
    invoicingMethod?: ContractorToInvoicingMethodResolver<TParent>;
    creditDays?: ContractorToCreditDaysResolver<TParent>;
    creditAmount?: ContractorToCreditAmountResolver<TParent>;
    invoicingPeriod?: ContractorToInvoicingPeriodResolver<TParent>;
    companysRfc?: ContractorToCompanysRfcResolver<TParent>;
    registration?: ContractorToRegistrationResolver<TParent>;
    constitutiveAct?: ContractorToConstitutiveActResolver<TParent>;
    powerOfAttorney?: ContractorToPowerOfAttorneyResolver<TParent>;
    idCopy?: ContractorToIdCopyResolver<TParent>;
    proofOfAddress?: ContractorToProofOfAddressResolver<TParent>;
    positiveOpinionSat?: ContractorToPositiveOpinionSatResolver<TParent>;
    taxSituationCertificate?: ContractorToTaxSituationCertificateResolver<TParent>;
    isActive?: ContractorToIsActiveResolver<TParent>;
    projectId?: ContractorToProjectIdResolver<TParent>;
    officeId?: ContractorToOfficeIdResolver<TParent>;
    office?: ContractorToOfficeResolver<TParent>;
    beneficiaries?: ContractorToBeneficiariesResolver<TParent>;
    contractorPolicies?: ContractorToContractorPoliciesResolver<TParent>;
    id?: ContractorToIdResolver<TParent>;
    createdAt?: ContractorToCreatedAtResolver<TParent>;
    updatedAt?: ContractorToUpdatedAtResolver<TParent>;
}
export interface ContractorToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToCountryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToPostalCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToColonyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToExtNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToTypeOfBusinessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToWebSiteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToRfcResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToAuxiliaryCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToUsesCFDIResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToPaymentTermResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToInvoicingMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToCreditDaysResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToCreditAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToInvoicingPeriodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToCompanysRfcResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToRegistrationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToConstitutiveActResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToPowerOfAttorneyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToIdCopyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToProofOfAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToPositiveOpinionSatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToTaxSituationCertificateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToOfficeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToBeneficiariesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToContractorPoliciesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface Iitus_OfficeTypeResolver<TParent = any> {
    name?: itus_OfficeToNameResolver<TParent>;
    contractorId?: itus_OfficeToContractorIdResolver<TParent>;
    contractor?: itus_OfficeToContractorResolver<TParent>;
    countryId?: itus_OfficeToCountryIdResolver<TParent>;
    state?: itus_OfficeToStateResolver<TParent>;
    projectId?: itus_OfficeToProjectIdResolver<TParent>;
    id?: itus_OfficeToIdResolver<TParent>;
    createdAt?: itus_OfficeToCreatedAtResolver<TParent>;
    updatedAt?: itus_OfficeToUpdatedAtResolver<TParent>;
}
export interface itus_OfficeToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_OfficeToContractorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_OfficeToContractorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_OfficeToCountryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_OfficeToStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_OfficeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_OfficeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_OfficeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_OfficeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorPolicyTypeResolver<TParent = any> {
    contractorId?: ContractorPolicyToContractorIdResolver<TParent>;
    policyId?: ContractorPolicyToPolicyIdResolver<TParent>;
    contractor?: ContractorPolicyToContractorResolver<TParent>;
    policy?: ContractorPolicyToPolicyResolver<TParent>;
    projectId?: ContractorPolicyToProjectIdResolver<TParent>;
    id?: ContractorPolicyToIdResolver<TParent>;
    createdAt?: ContractorPolicyToCreatedAtResolver<TParent>;
    updatedAt?: ContractorPolicyToUpdatedAtResolver<TParent>;
}
export interface ContractorPolicyToContractorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorPolicyToPolicyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorPolicyToContractorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorPolicyToPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorPolicyToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorPolicyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorPolicyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorPolicyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface Iitus_PolicyTypeResolver<TParent = any> {
    countryId?: itus_PolicyToCountryIdResolver<TParent>;
    insurerId?: itus_PolicyToInsurerIdResolver<TParent>;
    document?: itus_PolicyToDocumentResolver<TParent>;
    number?: itus_PolicyToNumberResolver<TParent>;
    policyType?: itus_PolicyToPolicyTypeResolver<TParent>;
    description?: itus_PolicyToDescriptionResolver<TParent>;
    startValidityDate?: itus_PolicyToStartValidityDateResolver<TParent>;
    expirationDate?: itus_PolicyToExpirationDateResolver<TParent>;
    limitDeclarationDate?: itus_PolicyToLimitDeclarationDateResolver<TParent>;
    damageDeductible?: itus_PolicyToDamageDeductibleResolver<TParent>;
    robberyDeductible?: itus_PolicyToRobberyDeductibleResolver<TParent>;
    crackDeductible?: itus_PolicyToCrackDeductibleResolver<TParent>;
    merchandiseDeductible?: itus_PolicyToMerchandiseDeductibleResolver<TParent>;
    declarationResponsible?: itus_PolicyToDeclarationResponsibleResolver<TParent>;
    projectId?: itus_PolicyToProjectIdResolver<TParent>;
    clientPaysItus?: itus_PolicyToClientPaysItusResolver<TParent>;
    contractorType?: itus_PolicyToContractorTypeResolver<TParent>;
    insurerPaysItus?: itus_PolicyToInsurerPaysItusResolver<TParent>;
    currencies?: itus_PolicyToCurrenciesResolver<TParent>;
    policyStatus?: itus_PolicyToPolicyStatusResolver<TParent>;
    id?: itus_PolicyToIdResolver<TParent>;
    createdAt?: itus_PolicyToCreatedAtResolver<TParent>;
    updatedAt?: itus_PolicyToUpdatedAtResolver<TParent>;
}
export interface itus_PolicyToCountryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToInsurerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToPolicyTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToStartValidityDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToExpirationDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToLimitDeclarationDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToDamageDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToRobberyDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToCrackDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToMerchandiseDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToDeclarationResponsibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToClientPaysItusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToContractorTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToInsurerPaysItusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToCurrenciesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToPolicyStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface itus_PolicyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICertificateCollectionSegmentTypeResolver<TParent = any> {
    items?: CertificateCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: CertificateCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: CertificateCollectionSegmentToTotalCountResolver<TParent>;
}
export interface CertificateCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CertificateCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBeneficiaryCollectionSegmentTypeResolver<TParent = any> {
    items?: BeneficiaryCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: BeneficiaryCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: BeneficiaryCollectionSegmentToTotalCountResolver<TParent>;
}
export interface BeneficiaryCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiaryCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiaryCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerCompanyCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerCompanyCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerCompanyCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerCompanyCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerCompanyCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCompanyCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCompanyCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMerchandiseCollectionSegmentTypeResolver<TParent = any> {
    items?: MerchandiseCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: MerchandiseCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: MerchandiseCollectionSegmentToTotalCountResolver<TParent>;
}
export interface MerchandiseCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMerchandiseCategoryTypeResolver<TParent = any> {
    name?: MerchandiseCategoryToNameResolver<TParent>;
    projectId?: MerchandiseCategoryToProjectIdResolver<TParent>;
    id?: MerchandiseCategoryToIdResolver<TParent>;
    createdAt?: MerchandiseCategoryToCreatedAtResolver<TParent>;
    updatedAt?: MerchandiseCategoryToUpdatedAtResolver<TParent>;
}
export interface MerchandiseCategoryToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseCategoryToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseCategoryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseCategoryToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MerchandiseCategoryToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContactTypeResolver<TParent = any> {
    contractorId?: ContactToContractorIdResolver<TParent>;
    fullName?: ContactToFullNameResolver<TParent>;
    jobPosition?: ContactToJobPositionResolver<TParent>;
    email?: ContactToEmailResolver<TParent>;
    phone?: ContactToPhoneResolver<TParent>;
    contactType?: ContactToContactTypeResolver<TParent>;
    projectId?: ContactToProjectIdResolver<TParent>;
    id?: ContactToIdResolver<TParent>;
    createdAt?: ContactToCreatedAtResolver<TParent>;
    updatedAt?: ContactToUpdatedAtResolver<TParent>;
}
export interface ContactToContractorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContactToFullNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContactToJobPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContactToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContactToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContactToContactTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContactToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContactToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContactToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContactToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMoneyTypeResolver<TParent = any> {
    name?: MoneyToNameResolver<TParent>;
    code?: MoneyToCodeResolver<TParent>;
    projectId?: MoneyToProjectIdResolver<TParent>;
    id?: MoneyToIdResolver<TParent>;
    createdAt?: MoneyToCreatedAtResolver<TParent>;
    updatedAt?: MoneyToUpdatedAtResolver<TParent>;
}
export interface MoneyToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MoneyToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MoneyToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MoneyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MoneyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MoneyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPolicyTypeResolver<TParent = any> {
    user?: PolicyToUserResolver<TParent>;
    device?: PolicyToDeviceResolver<TParent>;
    token?: PolicyToTokenResolver<TParent>;
    sNumeroPoliza?: PolicyToSNumeroPolizaResolver<TParent>;
    idCotizacion?: PolicyToIdCotizacionResolver<TParent>;
    idAseguradoraSubRamo?: PolicyToIdAseguradoraSubRamoResolver<TParent>;
    idSubramo?: PolicyToIdSubramoResolver<TParent>;
    agente?: PolicyToAgenteResolver<TParent>;
    telefono?: PolicyToTelefonoResolver<TParent>;
    email?: PolicyToEmailResolver<TParent>;
    subramo?: PolicyToSubramoResolver<TParent>;
    detallesPorAseguradora?: PolicyToDetallesPorAseguradoraResolver<TParent>;
    projectId?: PolicyToProjectIdResolver<TParent>;
    id?: PolicyToIdResolver<TParent>;
    createdAt?: PolicyToCreatedAtResolver<TParent>;
    updatedAt?: PolicyToUpdatedAtResolver<TParent>;
}
export interface PolicyToUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyToDeviceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyToTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyToSNumeroPolizaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyToIdCotizacionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyToIdAseguradoraSubRamoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyToIdSubramoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyToAgenteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyToTelefonoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyToSubramoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyToDetallesPorAseguradoraResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorOfficeTypeResolver<TParent = any> {
    contractorId?: ContractorOfficeToContractorIdResolver<TParent>;
    officeId?: ContractorOfficeToOfficeIdResolver<TParent>;
    contractor?: ContractorOfficeToContractorResolver<TParent>;
    office?: ContractorOfficeToOfficeResolver<TParent>;
    projectId?: ContractorOfficeToProjectIdResolver<TParent>;
    id?: ContractorOfficeToIdResolver<TParent>;
    createdAt?: ContractorOfficeToCreatedAtResolver<TParent>;
    updatedAt?: ContractorOfficeToUpdatedAtResolver<TParent>;
}
export interface ContractorOfficeToContractorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorOfficeToOfficeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorOfficeToContractorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorOfficeToOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorOfficeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorOfficeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorOfficeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorOfficeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorContactTypeResolver<TParent = any> {
    contractorId?: ContractorContactToContractorIdResolver<TParent>;
    contactId?: ContractorContactToContactIdResolver<TParent>;
    contractor?: ContractorContactToContractorResolver<TParent>;
    contact?: ContractorContactToContactResolver<TParent>;
    projectId?: ContractorContactToProjectIdResolver<TParent>;
    id?: ContractorContactToIdResolver<TParent>;
    createdAt?: ContractorContactToCreatedAtResolver<TParent>;
    updatedAt?: ContractorContactToUpdatedAtResolver<TParent>;
}
export interface ContractorContactToContractorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorContactToContactIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorContactToContractorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorContactToContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorContactToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorContactToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorContactToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorContactToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPolicyModuleCollectionSegmentTypeResolver<TParent = any> {
    items?: PolicyModuleCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: PolicyModuleCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: PolicyModuleCollectionSegmentToTotalCountResolver<TParent>;
}
export interface PolicyModuleCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyModuleCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerModuleCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerModuleCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerModuleCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerModuleCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerModuleCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerModuleCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerFeeCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerFeeCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerFeeCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerFeeCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerFeeCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFeeCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISchoolCollectionSegmentTypeResolver<TParent = any> {
    items?: SchoolCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: SchoolCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: SchoolCollectionSegmentToTotalCountResolver<TParent>;
}
export interface SchoolCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SchoolCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SchoolCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISchoolTypeResolver<TParent = any> {
    projectId?: SchoolToProjectIdResolver<TParent>;
    photo?: SchoolToPhotoResolver<TParent>;
    name?: SchoolToNameResolver<TParent>;
    email?: SchoolToEmailResolver<TParent>;
    phone?: SchoolToPhoneResolver<TParent>;
    daysServices?: SchoolToDaysServicesResolver<TParent>;
    levels?: SchoolToLevelsResolver<TParent>;
    id?: SchoolToIdResolver<TParent>;
    createdAt?: SchoolToCreatedAtResolver<TParent>;
    updatedAt?: SchoolToUpdatedAtResolver<TParent>;
}
export interface SchoolToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SchoolToPhotoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SchoolToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SchoolToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SchoolToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SchoolToDaysServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SchoolToLevelsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SchoolToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SchoolToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SchoolToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDayServiceTypeResolver<TParent = any> {
    projectId?: DayServiceToProjectIdResolver<TParent>;
    day?: DayServiceToDayResolver<TParent>;
    isActive?: DayServiceToIsActiveResolver<TParent>;
    schoolId?: DayServiceToSchoolIdResolver<TParent>;
    school?: DayServiceToSchoolResolver<TParent>;
    id?: DayServiceToIdResolver<TParent>;
    createdAt?: DayServiceToCreatedAtResolver<TParent>;
    updatedAt?: DayServiceToUpdatedAtResolver<TParent>;
}
export interface DayServiceToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DayServiceToDayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DayServiceToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DayServiceToSchoolIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DayServiceToSchoolResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DayServiceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DayServiceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DayServiceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ILevelTypeResolver<TParent = any> {
    projectId?: LevelToProjectIdResolver<TParent>;
    name?: LevelToNameResolver<TParent>;
    isActive?: LevelToIsActiveResolver<TParent>;
    schoolId?: LevelToSchoolIdResolver<TParent>;
    school?: LevelToSchoolResolver<TParent>;
    grade?: LevelToGradeResolver<TParent>;
    id?: LevelToIdResolver<TParent>;
    createdAt?: LevelToCreatedAtResolver<TParent>;
    updatedAt?: LevelToUpdatedAtResolver<TParent>;
}
export interface LevelToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LevelToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LevelToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LevelToSchoolIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LevelToSchoolResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LevelToGradeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LevelToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LevelToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LevelToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IGradeTypeResolver<TParent = any> {
    projectId?: GradeToProjectIdResolver<TParent>;
    name?: GradeToNameResolver<TParent>;
    isActive?: GradeToIsActiveResolver<TParent>;
    levelId?: GradeToLevelIdResolver<TParent>;
    level?: GradeToLevelResolver<TParent>;
    id?: GradeToIdResolver<TParent>;
    createdAt?: GradeToCreatedAtResolver<TParent>;
    updatedAt?: GradeToUpdatedAtResolver<TParent>;
}
export interface GradeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GradeToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GradeToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GradeToLevelIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GradeToLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GradeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GradeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GradeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IClassroomCollectionSegmentTypeResolver<TParent = any> {
    items?: ClassroomCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ClassroomCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ClassroomCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ClassroomCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClassroomCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClassroomCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IClassroomTypeResolver<TParent = any> {
    projectId?: ClassroomToProjectIdResolver<TParent>;
    schoolId?: ClassroomToSchoolIdResolver<TParent>;
    school?: ClassroomToSchoolResolver<TParent>;
    gradeId?: ClassroomToGradeIdResolver<TParent>;
    grade?: ClassroomToGradeResolver<TParent>;
    levelId?: ClassroomToLevelIdResolver<TParent>;
    level?: ClassroomToLevelResolver<TParent>;
    group?: ClassroomToGroupResolver<TParent>;
    isActive?: ClassroomToIsActiveResolver<TParent>;
    teacherMemberId?: ClassroomToTeacherMemberIdResolver<TParent>;
    students?: ClassroomToStudentsResolver<TParent>;
    id?: ClassroomToIdResolver<TParent>;
    createdAt?: ClassroomToCreatedAtResolver<TParent>;
    updatedAt?: ClassroomToUpdatedAtResolver<TParent>;
    teacherMember?: ClassroomToTeacherMemberResolver<TParent>;
}
export interface ClassroomToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClassroomToSchoolIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClassroomToSchoolResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClassroomToGradeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClassroomToGradeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClassroomToLevelIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClassroomToLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClassroomToGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClassroomToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClassroomToTeacherMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClassroomToStudentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClassroomToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClassroomToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClassroomToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ClassroomToTeacherMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStudentTypeResolver<TParent = any> {
    projectId?: StudentToProjectIdResolver<TParent>;
    classroomId?: StudentToClassroomIdResolver<TParent>;
    classroom?: StudentToClassroomResolver<TParent>;
    name?: StudentToNameResolver<TParent>;
    lastName?: StudentToLastNameResolver<TParent>;
    photo?: StudentToPhotoResolver<TParent>;
    isActive?: StudentToIsActiveResolver<TParent>;
    verify?: StudentToVerifyResolver<TParent>;
    attendances?: StudentToAttendancesResolver<TParent>;
    studentTutors?: StudentToStudentTutorsResolver<TParent>;
    id?: StudentToIdResolver<TParent>;
    createdAt?: StudentToCreatedAtResolver<TParent>;
    updatedAt?: StudentToUpdatedAtResolver<TParent>;
}
export interface StudentToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentToClassroomIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentToClassroomResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentToPhotoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentToVerifyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentToAttendancesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentToStudentTutorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface Ischool_AttendanceTypeResolver<TParent = any> {
    projectId?: school_AttendanceToProjectIdResolver<TParent>;
    status?: school_AttendanceToStatusResolver<TParent>;
    studentId?: school_AttendanceToStudentIdResolver<TParent>;
    student?: school_AttendanceToStudentResolver<TParent>;
    id?: school_AttendanceToIdResolver<TParent>;
    createdAt?: school_AttendanceToCreatedAtResolver<TParent>;
    updatedAt?: school_AttendanceToUpdatedAtResolver<TParent>;
}
export interface school_AttendanceToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface school_AttendanceToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface school_AttendanceToStudentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface school_AttendanceToStudentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface school_AttendanceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface school_AttendanceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface school_AttendanceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStudentTutorTypeResolver<TParent = any> {
    tutorMemberId?: StudentTutorToTutorMemberIdResolver<TParent>;
    studentId?: StudentTutorToStudentIdResolver<TParent>;
    student?: StudentTutorToStudentResolver<TParent>;
    id?: StudentTutorToIdResolver<TParent>;
    createdAt?: StudentTutorToCreatedAtResolver<TParent>;
    updatedAt?: StudentTutorToUpdatedAtResolver<TParent>;
    tutorMember?: StudentTutorToTutorMemberResolver<TParent>;
}
export interface StudentTutorToTutorMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentTutorToStudentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentTutorToStudentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentTutorToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentTutorToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentTutorToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentTutorToTutorMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ILevelCollectionSegmentTypeResolver<TParent = any> {
    items?: LevelCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: LevelCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: LevelCollectionSegmentToTotalCountResolver<TParent>;
}
export interface LevelCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LevelCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LevelCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IGradeCollectionSegmentTypeResolver<TParent = any> {
    items?: GradeCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: GradeCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: GradeCollectionSegmentToTotalCountResolver<TParent>;
}
export interface GradeCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GradeCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface GradeCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStudentCollectionSegmentTypeResolver<TParent = any> {
    items?: StudentCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: StudentCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: StudentCollectionSegmentToTotalCountResolver<TParent>;
}
export interface StudentCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StudentCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAttendanceCollectionSegmentTypeResolver<TParent = any> {
    items?: AttendanceCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: AttendanceCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: AttendanceCollectionSegmentToTotalCountResolver<TParent>;
}
export interface AttendanceCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AttendanceCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AttendanceCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAttendanceTypeResolver<TParent = any> {
    conferenceId?: AttendanceToConferenceIdResolver<TParent>;
    memberId?: AttendanceToMemberIdResolver<TParent>;
    member?: AttendanceToMemberResolver<TParent>;
    id?: AttendanceToIdResolver<TParent>;
    createdAt?: AttendanceToCreatedAtResolver<TParent>;
    updatedAt?: AttendanceToUpdatedAtResolver<TParent>;
}
export interface AttendanceToConferenceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AttendanceToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AttendanceToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AttendanceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AttendanceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AttendanceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMyConversationCollectionSegmentTypeResolver<TParent = any> {
    items?: MyConversationCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: MyConversationCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: MyConversationCollectionSegmentToTotalCountResolver<TParent>;
}
export interface MyConversationCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MyConversationCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MyConversationCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMyConversationTypeResolver<TParent = any> {
    username?: MyConversationToUsernameResolver<TParent>;
    phone?: MyConversationToPhoneResolver<TParent>;
    updated_at?: MyConversationToUpdated_atResolver<TParent>;
    messages?: MyConversationToMessagesResolver<TParent>;
    key?: MyConversationToKeyResolver<TParent>;
    value?: MyConversationToValueResolver<TParent>;
}
export interface MyConversationToUsernameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MyConversationToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MyConversationToUpdated_atResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MyConversationToMessagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MyConversationToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MyConversationToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMyMessageTypeResolver<TParent = any> {
    message?: MyMessageToMessageResolver<TParent>;
    sender?: MyMessageToSenderResolver<TParent>;
    createdAt?: MyMessageToCreatedAtResolver<TParent>;
}
export interface MyMessageToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MyMessageToSenderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MyMessageToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAgentProviderBonoCollectionSegmentTypeResolver<TParent = any> {
    items?: AgentProviderBonoCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: AgentProviderBonoCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: AgentProviderBonoCollectionSegmentToTotalCountResolver<TParent>;
}
export interface AgentProviderBonoCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderBonoCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderBonoCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAgentProviderBonoTypeResolver<TParent = any> {
    agentKeyId?: AgentProviderBonoToAgentKeyIdResolver<TParent>;
    startValidity?: AgentProviderBonoToStartValidityResolver<TParent>;
    endValidity?: AgentProviderBonoToEndValidityResolver<TParent>;
    quantity?: AgentProviderBonoToQuantityResolver<TParent>;
    exchangeRate?: AgentProviderBonoToExchangeRateResolver<TParent>;
    bono?: AgentProviderBonoToBonoResolver<TParent>;
    projectId?: AgentProviderBonoToProjectIdResolver<TParent>;
    factureNumber?: AgentProviderBonoToFactureNumberResolver<TParent>;
    ownerId?: AgentProviderBonoToOwnerIdResolver<TParent>;
    referrerId?: AgentProviderBonoToReferrerIdResolver<TParent>;
    agentKey?: AgentProviderBonoToAgentKeyResolver<TParent>;
    id?: AgentProviderBonoToIdResolver<TParent>;
    createdAt?: AgentProviderBonoToCreatedAtResolver<TParent>;
    updatedAt?: AgentProviderBonoToUpdatedAtResolver<TParent>;
}
export interface AgentProviderBonoToAgentKeyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderBonoToStartValidityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderBonoToEndValidityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderBonoToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderBonoToExchangeRateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderBonoToBonoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderBonoToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderBonoToFactureNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderBonoToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderBonoToReferrerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderBonoToAgentKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderBonoToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderBonoToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderBonoToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAgentKeyTypeResolver<TParent = any> {
    ownerId?: AgentKeyToOwnerIdResolver<TParent>;
    name?: AgentKeyToNameResolver<TParent>;
    key?: AgentKeyToKeyResolver<TParent>;
    isActive?: AgentKeyToIsActiveResolver<TParent>;
    projectAgentProviderId?: AgentKeyToProjectAgentProviderIdResolver<TParent>;
    projectAgentProvider?: AgentKeyToProjectAgentProviderResolver<TParent>;
    comissions?: AgentKeyToComissionsResolver<TParent>;
    polices?: AgentKeyToPolicesResolver<TParent>;
    agentProviderBono?: AgentKeyToAgentProviderBonoResolver<TParent>;
    id?: AgentKeyToIdResolver<TParent>;
    createdAt?: AgentKeyToCreatedAtResolver<TParent>;
    updatedAt?: AgentKeyToUpdatedAtResolver<TParent>;
}
export interface AgentKeyToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentKeyToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentKeyToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentKeyToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentKeyToProjectAgentProviderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentKeyToProjectAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentKeyToComissionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentKeyToPolicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentKeyToAgentProviderBonoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentKeyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentKeyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentKeyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectAgentProviderTypeResolver<TParent = any> {
    projectId?: ProjectAgentProviderToProjectIdResolver<TParent>;
    agentProviderId?: ProjectAgentProviderToAgentProviderIdResolver<TParent>;
    agentProvider?: ProjectAgentProviderToAgentProviderResolver<TParent>;
    observations?: ProjectAgentProviderToObservationsResolver<TParent>;
    coveragePackages?: ProjectAgentProviderToCoveragePackagesResolver<TParent>;
    agentProviderContact?: ProjectAgentProviderToAgentProviderContactResolver<TParent>;
    insurerReminderProjectAgentProvider?: ProjectAgentProviderToInsurerReminderProjectAgentProviderResolver<TParent>;
    projectAgentProviderEmailReminders?: ProjectAgentProviderToProjectAgentProviderEmailRemindersResolver<TParent>;
    id?: ProjectAgentProviderToIdResolver<TParent>;
    createdAt?: ProjectAgentProviderToCreatedAtResolver<TParent>;
    updatedAt?: ProjectAgentProviderToUpdatedAtResolver<TParent>;
}
export interface ProjectAgentProviderToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderToAgentProviderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderToAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderToObservationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderToCoveragePackagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderToAgentProviderContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderToInsurerReminderProjectAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderToProjectAgentProviderEmailRemindersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAgentProviderTypeResolver<TParent = any> {
    companyName?: AgentProviderToCompanyNameResolver<TParent>;
    alias?: AgentProviderToAliasResolver<TParent>;
    rFC?: AgentProviderToRFCResolver<TParent>;
    phone?: AgentProviderToPhoneResolver<TParent>;
    website?: AgentProviderToWebsiteResolver<TParent>;
    ownerId?: AgentProviderToOwnerIdResolver<TParent>;
    typeAgentProvider?: AgentProviderToTypeAgentProviderResolver<TParent>;
    projectAgentProviders?: AgentProviderToProjectAgentProvidersResolver<TParent>;
    id?: AgentProviderToIdResolver<TParent>;
    createdAt?: AgentProviderToCreatedAtResolver<TParent>;
    updatedAt?: AgentProviderToUpdatedAtResolver<TParent>;
}
export interface AgentProviderToCompanyNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderToAliasResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderToRFCResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderToWebsiteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderToTypeAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderToProjectAgentProvidersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoveragePackageTypeResolver<TParent = any> {
    name?: CoveragePackageToNameResolver<TParent>;
    description?: CoveragePackageToDescriptionResolver<TParent>;
    projectAgentProviderBranchId?: CoveragePackageToProjectAgentProviderBranchIdResolver<TParent>;
    typePackage?: CoveragePackageToTypePackageResolver<TParent>;
    policy?: CoveragePackageToPolicyResolver<TParent>;
    ownerId?: CoveragePackageToOwnerIdResolver<TParent>;
    projectAgentProviderId?: CoveragePackageToProjectAgentProviderIdResolver<TParent>;
    projectAgentProvider?: CoveragePackageToProjectAgentProviderResolver<TParent>;
    projectAgentProviderBranch?: CoveragePackageToProjectAgentProviderBranchResolver<TParent>;
    id?: CoveragePackageToIdResolver<TParent>;
    createdAt?: CoveragePackageToCreatedAtResolver<TParent>;
    updatedAt?: CoveragePackageToUpdatedAtResolver<TParent>;
}
export interface CoveragePackageToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragePackageToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragePackageToProjectAgentProviderBranchIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragePackageToTypePackageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragePackageToPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragePackageToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragePackageToProjectAgentProviderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragePackageToProjectAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragePackageToProjectAgentProviderBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragePackageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragePackageToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragePackageToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectAgentProviderBranchTypeResolver<TParent = any> {
    projectId?: ProjectAgentProviderBranchToProjectIdResolver<TParent>;
    projectAgentProviderId?: ProjectAgentProviderBranchToProjectAgentProviderIdResolver<TParent>;
    projectAgentProvider?: ProjectAgentProviderBranchToProjectAgentProviderResolver<TParent>;
    branchId?: ProjectAgentProviderBranchToBranchIdResolver<TParent>;
    branch?: ProjectAgentProviderBranchToBranchResolver<TParent>;
    subBranchId?: ProjectAgentProviderBranchToSubBranchIdResolver<TParent>;
    subBranch?: ProjectAgentProviderBranchToSubBranchResolver<TParent>;
    projectAgentProviderBranches?: ProjectAgentProviderBranchToProjectAgentProviderBranchesResolver<TParent>;
    polices?: ProjectAgentProviderBranchToPolicesResolver<TParent>;
    comissions?: ProjectAgentProviderBranchToComissionsResolver<TParent>;
    agentProviderContacts?: ProjectAgentProviderBranchToAgentProviderContactsResolver<TParent>;
    referrerBranchs?: ProjectAgentProviderBranchToReferrerBranchsResolver<TParent>;
    coveragePackages?: ProjectAgentProviderBranchToCoveragePackagesResolver<TParent>;
    policeQuotes?: ProjectAgentProviderBranchToPoliceQuotesResolver<TParent>;
    id?: ProjectAgentProviderBranchToIdResolver<TParent>;
    createdAt?: ProjectAgentProviderBranchToCreatedAtResolver<TParent>;
    updatedAt?: ProjectAgentProviderBranchToUpdatedAtResolver<TParent>;
}
export interface ProjectAgentProviderBranchToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderBranchToProjectAgentProviderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderBranchToProjectAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderBranchToBranchIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderBranchToBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderBranchToSubBranchIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderBranchToSubBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderBranchToProjectAgentProviderBranchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderBranchToPolicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderBranchToComissionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderBranchToAgentProviderContactsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderBranchToReferrerBranchsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderBranchToCoveragePackagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderBranchToPoliceQuotesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderBranchToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderBranchToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderBranchToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBranchTypeResolver<TParent = any> {
    branchName?: BranchToBranchNameResolver<TParent>;
    branchCode?: BranchToBranchCodeResolver<TParent>;
    typeAgentProviders?: BranchToTypeAgentProvidersResolver<TParent>;
    subBranches?: BranchToSubBranchesResolver<TParent>;
    projectAgentProviderBranches?: BranchToProjectAgentProviderBranchesResolver<TParent>;
    id?: BranchToIdResolver<TParent>;
    createdAt?: BranchToCreatedAtResolver<TParent>;
    updatedAt?: BranchToUpdatedAtResolver<TParent>;
}
export interface BranchToBranchNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchToBranchCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchToTypeAgentProvidersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchToSubBranchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchToProjectAgentProviderBranchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISubBranchTypeResolver<TParent = any> {
    subBranchName?: SubBranchToSubBranchNameResolver<TParent>;
    subBranchCode?: SubBranchToSubBranchCodeResolver<TParent>;
    branchId?: SubBranchToBranchIdResolver<TParent>;
    branch?: SubBranchToBranchResolver<TParent>;
    projectAgentProviderBranches?: SubBranchToProjectAgentProviderBranchesResolver<TParent>;
    insurerBailTypes?: SubBranchToInsurerBailTypesResolver<TParent>;
    id?: SubBranchToIdResolver<TParent>;
    createdAt?: SubBranchToCreatedAtResolver<TParent>;
    updatedAt?: SubBranchToUpdatedAtResolver<TParent>;
}
export interface SubBranchToSubBranchNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SubBranchToSubBranchCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SubBranchToBranchIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SubBranchToBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SubBranchToProjectAgentProviderBranchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SubBranchToInsurerBailTypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SubBranchToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SubBranchToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SubBranchToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerBailTypeTypeResolver<TParent = any> {
    name?: InsurerBailTypeToNameResolver<TParent>;
    code?: InsurerBailTypeToCodeResolver<TParent>;
    ownerId?: InsurerBailTypeToOwnerIdResolver<TParent>;
    projectId?: InsurerBailTypeToProjectIdResolver<TParent>;
    subBranchId?: InsurerBailTypeToSubBranchIdResolver<TParent>;
    subBranch?: InsurerBailTypeToSubBranchResolver<TParent>;
    id?: InsurerBailTypeToIdResolver<TParent>;
    createdAt?: InsurerBailTypeToCreatedAtResolver<TParent>;
    updatedAt?: InsurerBailTypeToUpdatedAtResolver<TParent>;
}
export interface InsurerBailTypeToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBailTypeToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBailTypeToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBailTypeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBailTypeToSubBranchIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBailTypeToSubBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBailTypeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBailTypeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBailTypeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceTypeResolver<TParent = any> {
    number?: PoliceToNumberResolver<TParent>;
    startValidity?: PoliceToStartValidityResolver<TParent>;
    endValidity?: PoliceToEndValidityResolver<TParent>;
    formaDePago?: PoliceToFormaDePagoResolver<TParent>;
    status?: PoliceToStatusResolver<TParent>;
    observations?: PoliceToObservationsResolver<TParent>;
    folio?: PoliceToFolioResolver<TParent>;
    internalNumber?: PoliceToInternalNumberResolver<TParent>;
    documentType?: PoliceToDocumentTypeResolver<TParent>;
    addressId?: PoliceToAddressIdResolver<TParent>;
    aseguradoraId?: PoliceToAseguradoraIdResolver<TParent>;
    claveId?: PoliceToClaveIdResolver<TParent>;
    ownerId?: PoliceToOwnerIdResolver<TParent>;
    packageId?: PoliceToPackageIdResolver<TParent>;
    projectAgentProviderBranchId?: PoliceToProjectAgentProviderBranchIdResolver<TParent>;
    fCurrency?: PoliceToFCurrencyResolver<TParent>;
    identifier?: PoliceToIdentifierResolver<TParent>;
    rigth?: PoliceToRigthResolver<TParent>;
    iVA?: PoliceToIVAResolver<TParent>;
    pNeta?: PoliceToPNetaResolver<TParent>;
    pTotal?: PoliceToPTotalResolver<TParent>;
    rPF?: PoliceToRPFResolver<TParent>;
    comision?: PoliceToComisionResolver<TParent>;
    administrationType?: PoliceToAdministrationTypeResolver<TParent>;
    caratule?: PoliceToCaratuleResolver<TParent>;
    certificadoIncisoActivo?: PoliceToCertificadoIncisoActivoResolver<TParent>;
    certificateNumber?: PoliceToCertificateNumberResolver<TParent>;
    comisionPercent?: PoliceToComisionPercentResolver<TParent>;
    hospitalLevel?: PoliceToHospitalLevelResolver<TParent>;
    name?: PoliceToNameResolver<TParent>;
    parentId?: PoliceToParentIdResolver<TParent>;
    discount?: PoliceToDiscountResolver<TParent>;
    isRenewable?: PoliceToIsRenewableResolver<TParent>;
    reasonRen?: PoliceToReasonRenResolver<TParent>;
    renewedStatus?: PoliceToRenewedStatusResolver<TParent>;
    contact?: PoliceToContactResolver<TParent>;
    fechaBajaInciso?: PoliceToFechaBajaIncisoResolver<TParent>;
    reasonCancel?: PoliceToReasonCancelResolver<TParent>;
    receiptsBy?: PoliceToReceiptsByResolver<TParent>;
    responsableId?: PoliceToResponsableIdResolver<TParent>;
    comisionGiven?: PoliceToComisionGivenResolver<TParent>;
    recAntiquity?: PoliceToRecAntiquityResolver<TParent>;
    collectionExecutiveId?: PoliceToCollectionExecutiveIdResolver<TParent>;
    sucursalId?: PoliceToSucursalIdResolver<TParent>;
    subTotal?: PoliceToSubTotalResolver<TParent>;
    trackBitacora?: PoliceToTrackBitacoraResolver<TParent>;
    accidentRate?: PoliceToAccidentRateResolver<TParent>;
    scheme?: PoliceToSchemeResolver<TParent>;
    steps?: PoliceToStepsResolver<TParent>;
    totalReceipts?: PoliceToTotalReceiptsResolver<TParent>;
    conceptAnnulment?: PoliceToConceptAnnulmentResolver<TParent>;
    deductible?: PoliceToDeductibleResolver<TParent>;
    emisionDate?: PoliceToEmisionDateResolver<TParent>;
    emisionStatus?: PoliceToEmisionStatusResolver<TParent>;
    fechaAnuencia?: PoliceToFechaAnuenciaResolver<TParent>;
    fianzaTypeId?: PoliceToFianzaTypeIdResolver<TParent>;
    gastoInvestigacion?: PoliceToGastoInvestigacionResolver<TParent>;
    reasonRehabbilitate?: PoliceToReasonRehabbilitateResolver<TParent>;
    bussinessLine?: PoliceToBussinessLineResolver<TParent>;
    contratanteSubGroup?: PoliceToContratanteSubGroupResolver<TParent>;
    celulaId?: PoliceToCelulaIdResolver<TParent>;
    groupingLevelId?: PoliceToGroupingLevelIdResolver<TParent>;
    typePolicy?: PoliceToTypePolicyResolver<TParent>;
    conductoDePago?: PoliceToConductoDePagoResolver<TParent>;
    tabulator?: PoliceToTabulatorResolver<TParent>;
    bonoVariable?: PoliceToBonoVariableResolver<TParent>;
    hasProgramaDeProveedores?: PoliceToHasProgramaDeProveedoresResolver<TParent>;
    contractorId?: PoliceToContractorIdResolver<TParent>;
    programaDeProveedoresContractorId?: PoliceToProgramaDeProveedoresContractorIdResolver<TParent>;
    chargeDate?: PoliceToChargeDateResolver<TParent>;
    comisionEarned?: PoliceToComisionEarnedResolver<TParent>;
    comisionPercentEarned?: PoliceToComisionPercentEarnedResolver<TParent>;
    rigthEarned?: PoliceToRigthEarnedResolver<TParent>;
    discountEarned?: PoliceToDiscountEarnedResolver<TParent>;
    ivaEarned?: PoliceToIvaEarnedResolver<TParent>;
    pNetaEarned?: PoliceToPNetaEarnedResolver<TParent>;
    pTotalEarned?: PoliceToPTotalEarnedResolver<TParent>;
    rPFEarned?: PoliceToRPFEarnedResolver<TParent>;
    subTotalEarned?: PoliceToSubTotalEarnedResolver<TParent>;
    dateCancel?: PoliceToDateCancelResolver<TParent>;
    amountCanceled?: PoliceToAmountCanceledResolver<TParent>;
    stateCirculation?: PoliceToStateCirculationResolver<TParent>;
    fechaPagoComision?: PoliceToFechaPagoComisionResolver<TParent>;
    dateEmitionFactura?: PoliceToDateEmitionFacturaResolver<TParent>;
    folioFactura?: PoliceToFolioFacturaResolver<TParent>;
    monthFactura?: PoliceToMonthFacturaResolver<TParent>;
    exchangeRate?: PoliceToExchangeRateResolver<TParent>;
    projectAgentProviderBranch?: PoliceToProjectAgentProviderBranchResolver<TParent>;
    agentKey?: PoliceToAgentKeyResolver<TParent>;
    sucursal?: PoliceToSucursalResolver<TParent>;
    parent?: PoliceToParentResolver<TParent>;
    contractor?: PoliceToContractorResolver<TParent>;
    polices?: PoliceToPolicesResolver<TParent>;
    policeAssign?: PoliceToPoliceAssignResolver<TParent>;
    policePendient?: PoliceToPolicePendientResolver<TParent>;
    formAccidentDisease?: PoliceToFormAccidentDiseaseResolver<TParent>;
    formAutomobileDamage?: PoliceToFormAutomobileDamageResolver<TParent>;
    formDamage?: PoliceToFormDamageResolver<TParent>;
    formLife?: PoliceToFormLifeResolver<TParent>;
    personalInformation?: PoliceToPersonalInformationResolver<TParent>;
    involvedReferrer?: PoliceToInvolvedReferrerResolver<TParent>;
    oldPolices?: PoliceToOldPolicesResolver<TParent>;
    newPolices?: PoliceToNewPolicesResolver<TParent>;
    coverageInPolicies?: PoliceToCoverageInPoliciesResolver<TParent>;
    endorsements?: PoliceToEndorsementsResolver<TParent>;
    sinisters?: PoliceToSinistersResolver<TParent>;
    policeReceipts?: PoliceToPoliceReceiptsResolver<TParent>;
    policeFiles?: PoliceToPoliceFilesResolver<TParent>;
    id?: PoliceToIdResolver<TParent>;
    createdAt?: PoliceToCreatedAtResolver<TParent>;
    updatedAt?: PoliceToUpdatedAtResolver<TParent>;
}
export interface PoliceToNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToStartValidityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToEndValidityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToFormaDePagoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToObservationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToInternalNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToDocumentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToAddressIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToAseguradoraIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToClaveIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToPackageIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToProjectAgentProviderBranchIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToFCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToIdentifierResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToRigthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToIVAResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToPNetaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToPTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToRPFResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToComisionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToAdministrationTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToCaratuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToCertificadoIncisoActivoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToCertificateNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToComisionPercentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToHospitalLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToParentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToIsRenewableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToReasonRenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToRenewedStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToFechaBajaIncisoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToReasonCancelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToReceiptsByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToResponsableIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToComisionGivenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToRecAntiquityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToCollectionExecutiveIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToSucursalIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToSubTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToTrackBitacoraResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToAccidentRateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToSchemeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToStepsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToTotalReceiptsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToConceptAnnulmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToEmisionDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToEmisionStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToFechaAnuenciaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToFianzaTypeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToGastoInvestigacionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToReasonRehabbilitateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToBussinessLineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToContratanteSubGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToCelulaIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToGroupingLevelIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToTypePolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToConductoDePagoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToTabulatorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToBonoVariableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToHasProgramaDeProveedoresResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToContractorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToProgramaDeProveedoresContractorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToChargeDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToComisionEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToComisionPercentEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToRigthEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToDiscountEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToIvaEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToPNetaEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToPTotalEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToRPFEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToSubTotalEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToDateCancelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToAmountCanceledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToStateCirculationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToFechaPagoComisionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToDateEmitionFacturaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToFolioFacturaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToMonthFacturaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToExchangeRateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToProjectAgentProviderBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToAgentKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToSucursalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToParentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToContractorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToPolicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToPoliceAssignResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToPolicePendientResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToFormAccidentDiseaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToFormAutomobileDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToFormDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToFormLifeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToPersonalInformationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToInvolvedReferrerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToOldPolicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToNewPolicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToCoverageInPoliciesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToEndorsementsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToSinistersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToPoliceReceiptsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToPoliceFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISucursalTypeResolver<TParent = any> {
    name?: SucursalToNameResolver<TParent>;
    details?: SucursalToDetailsResolver<TParent>;
    ownerId?: SucursalToOwnerIdResolver<TParent>;
    projectId?: SucursalToProjectIdResolver<TParent>;
    police?: SucursalToPoliceResolver<TParent>;
    contractors?: SucursalToContractorsResolver<TParent>;
    id?: SucursalToIdResolver<TParent>;
    createdAt?: SucursalToCreatedAtResolver<TParent>;
    updatedAt?: SucursalToUpdatedAtResolver<TParent>;
}
export interface SucursalToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SucursalToDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SucursalToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SucursalToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SucursalToPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SucursalToContractorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SucursalToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SucursalToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SucursalToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface Isaam_ContractorTypeResolver<TParent = any> {
    projectId?: saam_ContractorToProjectIdResolver<TParent>;
    firstName?: saam_ContractorToFirstNameResolver<TParent>;
    lastName?: saam_ContractorToLastNameResolver<TParent>;
    secondLastName?: saam_ContractorToSecondLastNameResolver<TParent>;
    socialReason?: saam_ContractorToSocialReasonResolver<TParent>;
    fullName?: saam_ContractorToFullNameResolver<TParent>;
    gender?: saam_ContractorToGenderResolver<TParent>;
    birthDate?: saam_ContractorToBirthDateResolver<TParent>;
    phoneNumber?: saam_ContractorToPhoneNumberResolver<TParent>;
    rFC?: saam_ContractorToRFCResolver<TParent>;
    description?: saam_ContractorToDescriptionResolver<TParent>;
    email?: saam_ContractorToEmailResolver<TParent>;
    active?: saam_ContractorToActiveResolver<TParent>;
    contractorType?: saam_ContractorToContractorTypeResolver<TParent>;
    sucursalId?: saam_ContractorToSucursalIdResolver<TParent>;
    contractorClassificationId?: saam_ContractorToContractorClassificationIdResolver<TParent>;
    contractorClassification?: saam_ContractorToContractorClassificationResolver<TParent>;
    contractorGroupId?: saam_ContractorToContractorGroupIdResolver<TParent>;
    contractorGroup?: saam_ContractorToContractorGroupResolver<TParent>;
    contractorGroupingLevelId?: saam_ContractorToContractorGroupingLevelIdResolver<TParent>;
    contractorGroupingLevel?: saam_ContractorToContractorGroupingLevelResolver<TParent>;
    contractorCelulaId?: saam_ContractorToContractorCelulaIdResolver<TParent>;
    contractorCelula?: saam_ContractorToContractorCelulaResolver<TParent>;
    ownerId?: saam_ContractorToOwnerIdResolver<TParent>;
    memberId?: saam_ContractorToMemberIdResolver<TParent>;
    responsableId?: saam_ContractorToResponsableIdResolver<TParent>;
    referrerId?: saam_ContractorToReferrerIdResolver<TParent>;
    referrer?: saam_ContractorToReferrerResolver<TParent>;
    sucursal?: saam_ContractorToSucursalResolver<TParent>;
    contractorProcessDocuments?: saam_ContractorToContractorProcessDocumentsResolver<TParent>;
    agentProviderContact?: saam_ContractorToAgentProviderContactResolver<TParent>;
    policeQuotes?: saam_ContractorToPoliceQuotesResolver<TParent>;
    polices?: saam_ContractorToPolicesResolver<TParent>;
    id?: saam_ContractorToIdResolver<TParent>;
    createdAt?: saam_ContractorToCreatedAtResolver<TParent>;
    updatedAt?: saam_ContractorToUpdatedAtResolver<TParent>;
}
export interface saam_ContractorToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToSecondLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToSocialReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToFullNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToGenderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToBirthDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToPhoneNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToRFCResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToContractorTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToSucursalIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToContractorClassificationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToContractorClassificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToContractorGroupIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToContractorGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToContractorGroupingLevelIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToContractorGroupingLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToContractorCelulaIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToContractorCelulaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToResponsableIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToReferrerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToReferrerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToSucursalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToContractorProcessDocumentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToAgentProviderContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToPoliceQuotesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToPolicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_ContractorToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorClassificationTypeResolver<TParent = any> {
    name?: ContractorClassificationToNameResolver<TParent>;
    description?: ContractorClassificationToDescriptionResolver<TParent>;
    projectId?: ContractorClassificationToProjectIdResolver<TParent>;
    ownerId?: ContractorClassificationToOwnerIdResolver<TParent>;
    contractors?: ContractorClassificationToContractorsResolver<TParent>;
    id?: ContractorClassificationToIdResolver<TParent>;
    createdAt?: ContractorClassificationToCreatedAtResolver<TParent>;
    updatedAt?: ContractorClassificationToUpdatedAtResolver<TParent>;
}
export interface ContractorClassificationToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorClassificationToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorClassificationToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorClassificationToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorClassificationToContractorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorClassificationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorClassificationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorClassificationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorGroupTypeResolver<TParent = any> {
    name?: ContractorGroupToNameResolver<TParent>;
    description?: ContractorGroupToDescriptionResolver<TParent>;
    ownerId?: ContractorGroupToOwnerIdResolver<TParent>;
    parentId?: ContractorGroupToParentIdResolver<TParent>;
    responsableId?: ContractorGroupToResponsableIdResolver<TParent>;
    groupType?: ContractorGroupToGroupTypeResolver<TParent>;
    parent?: ContractorGroupToParentResolver<TParent>;
    contractorGroups?: ContractorGroupToContractorGroupsResolver<TParent>;
    agentProviderContact?: ContractorGroupToAgentProviderContactResolver<TParent>;
    id?: ContractorGroupToIdResolver<TParent>;
    createdAt?: ContractorGroupToCreatedAtResolver<TParent>;
    updatedAt?: ContractorGroupToUpdatedAtResolver<TParent>;
}
export interface ContractorGroupToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupToParentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupToResponsableIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupToGroupTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupToParentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupToContractorGroupsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupToAgentProviderContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAgentProviderContactTypeResolver<TParent = any> {
    projectAgentProviderBranchId?: AgentProviderContactToProjectAgentProviderBranchIdResolver<TParent>;
    name?: AgentProviderContactToNameResolver<TParent>;
    email?: AgentProviderContactToEmailResolver<TParent>;
    phone?: AgentProviderContactToPhoneResolver<TParent>;
    department?: AgentProviderContactToDepartmentResolver<TParent>;
    sinisterAccidentId?: AgentProviderContactToSinisterAccidentIdResolver<TParent>;
    ownerId?: AgentProviderContactToOwnerIdResolver<TParent>;
    contractorGroupId?: AgentProviderContactToContractorGroupIdResolver<TParent>;
    contractorGroup?: AgentProviderContactToContractorGroupResolver<TParent>;
    projectAgentProviderBranch?: AgentProviderContactToProjectAgentProviderBranchResolver<TParent>;
    contractorId?: AgentProviderContactToContractorIdResolver<TParent>;
    contractor?: AgentProviderContactToContractorResolver<TParent>;
    projectAgentProviderId?: AgentProviderContactToProjectAgentProviderIdResolver<TParent>;
    projectAgentProvider?: AgentProviderContactToProjectAgentProviderResolver<TParent>;
    sinisterAccident?: AgentProviderContactToSinisterAccidentResolver<TParent>;
    id?: AgentProviderContactToIdResolver<TParent>;
    createdAt?: AgentProviderContactToCreatedAtResolver<TParent>;
    updatedAt?: AgentProviderContactToUpdatedAtResolver<TParent>;
}
export interface AgentProviderContactToProjectAgentProviderBranchIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderContactToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderContactToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderContactToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderContactToDepartmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderContactToSinisterAccidentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderContactToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderContactToContractorGroupIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderContactToContractorGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderContactToProjectAgentProviderBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderContactToContractorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderContactToContractorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderContactToProjectAgentProviderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderContactToProjectAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderContactToSinisterAccidentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderContactToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderContactToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderContactToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterAccidentTypeResolver<TParent = any> {
    relationShip?: SinisterAccidentToRelationShipResolver<TParent>;
    kindSinister?: SinisterAccidentToKindSinisterResolver<TParent>;
    sinisterReason?: SinisterAccidentToSinisterReasonResolver<TParent>;
    sinisterComplement?: SinisterAccidentToSinisterComplementResolver<TParent>;
    sinisterType?: SinisterAccidentToSinisterTypeResolver<TParent>;
    paymentType?: SinisterAccidentToPaymentTypeResolver<TParent>;
    totalPayment?: SinisterAccidentToTotalPaymentResolver<TParent>;
    totalProcedent?: SinisterAccidentToTotalProcedentResolver<TParent>;
    totalCoaseguro?: SinisterAccidentToTotalCoaseguroResolver<TParent>;
    totalDeductible?: SinisterAccidentToTotalDeductibleResolver<TParent>;
    totalFinal?: SinisterAccidentToTotalFinalResolver<TParent>;
    initial?: SinisterAccidentToInitialResolver<TParent>;
    receiptStatus?: SinisterAccidentToReceiptStatusResolver<TParent>;
    dependientId?: SinisterAccidentToDependientIdResolver<TParent>;
    sinisterAilingId?: SinisterAccidentToSinisterAilingIdResolver<TParent>;
    sinisterId?: SinisterAccidentToSinisterIdResolver<TParent>;
    titularId?: SinisterAccidentToTitularIdResolver<TParent>;
    ailment?: SinisterAccidentToAilmentResolver<TParent>;
    anesthesiologist?: SinisterAccidentToAnesthesiologistResolver<TParent>;
    helper?: SinisterAccidentToHelperResolver<TParent>;
    surgeon?: SinisterAccidentToSurgeonResolver<TParent>;
    coasHonorarios?: SinisterAccidentToCoasHonorariosResolver<TParent>;
    coasHospital?: SinisterAccidentToCoasHospitalResolver<TParent>;
    dedHonorarios?: SinisterAccidentToDedHonorariosResolver<TParent>;
    dedHospital?: SinisterAccidentToDedHospitalResolver<TParent>;
    montoHonorarios?: SinisterAccidentToMontoHonorariosResolver<TParent>;
    montoHospital?: SinisterAccidentToMontoHospitalResolver<TParent>;
    others?: SinisterAccidentToOthersResolver<TParent>;
    surgeryDate?: SinisterAccidentToSurgeryDateResolver<TParent>;
    hospital?: SinisterAccidentToHospitalResolver<TParent>;
    affectedFullName?: SinisterAccidentToAffectedFullNameResolver<TParent>;
    complementConsecutiveNumber?: SinisterAccidentToComplementConsecutiveNumberResolver<TParent>;
    initialAccidentId?: SinisterAccidentToInitialAccidentIdResolver<TParent>;
    projectId?: SinisterAccidentToProjectIdResolver<TParent>;
    sinister?: SinisterAccidentToSinisterResolver<TParent>;
    personalInformation?: SinisterAccidentToPersonalInformationResolver<TParent>;
    dependient?: SinisterAccidentToDependientResolver<TParent>;
    initialAccident?: SinisterAccidentToInitialAccidentResolver<TParent>;
    sinisterAiling?: SinisterAccidentToSinisterAilingResolver<TParent>;
    sinisterAccidents?: SinisterAccidentToSinisterAccidentsResolver<TParent>;
    agentProviderContacts?: SinisterAccidentToAgentProviderContactsResolver<TParent>;
    id?: SinisterAccidentToIdResolver<TParent>;
    createdAt?: SinisterAccidentToCreatedAtResolver<TParent>;
    updatedAt?: SinisterAccidentToUpdatedAtResolver<TParent>;
}
export interface SinisterAccidentToRelationShipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToKindSinisterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToSinisterReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToSinisterComplementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToSinisterTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToPaymentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToTotalPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToTotalProcedentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToTotalCoaseguroResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToTotalDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToTotalFinalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToInitialResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToReceiptStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToDependientIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToSinisterAilingIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToSinisterIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToTitularIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToAilmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToAnesthesiologistResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToHelperResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToSurgeonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToCoasHonorariosResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToCoasHospitalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToDedHonorariosResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToDedHospitalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToMontoHonorariosResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToMontoHospitalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToOthersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToSurgeryDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToHospitalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToAffectedFullNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToComplementConsecutiveNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToInitialAccidentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToSinisterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToPersonalInformationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToDependientResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToInitialAccidentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToSinisterAilingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToSinisterAccidentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToAgentProviderContactsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterTypeResolver<TParent = any> {
    companyFolio?: SinisterToCompanyFolioResolver<TParent>;
    internFolio?: SinisterToInternFolioResolver<TParent>;
    status?: SinisterToStatusResolver<TParent>;
    promiseDate?: SinisterToPromiseDateResolver<TParent>;
    affectedItem?: SinisterToAffectedItemResolver<TParent>;
    sinisterNumber?: SinisterToSinisterNumberResolver<TParent>;
    sinisterDate?: SinisterToSinisterDateResolver<TParent>;
    typeSinisterGeneral?: SinisterToTypeSinisterGeneralResolver<TParent>;
    reason?: SinisterToReasonResolver<TParent>;
    observations?: SinisterToObservationsResolver<TParent>;
    ownerId?: SinisterToOwnerIdResolver<TParent>;
    policeId?: SinisterToPoliceIdResolver<TParent>;
    ingressDate?: SinisterToIngressDateResolver<TParent>;
    affectedAux?: SinisterToAffectedAuxResolver<TParent>;
    compromiseDate?: SinisterToCompromiseDateResolver<TParent>;
    affectedAuxRelationShip?: SinisterToAffectedAuxRelationShipResolver<TParent>;
    insurerZipCodeSepomexId?: SinisterToInsurerZipCodeSepomexIdResolver<TParent>;
    date?: SinisterToDateResolver<TParent>;
    projectId?: SinisterToProjectIdResolver<TParent>;
    terminationDate?: SinisterToTerminationDateResolver<TParent>;
    fileLoadedDate?: SinisterToFileLoadedDateResolver<TParent>;
    police?: SinisterToPoliceResolver<TParent>;
    sinisterCars?: SinisterToSinisterCarsResolver<TParent>;
    sinisterDamages?: SinisterToSinisterDamagesResolver<TParent>;
    sinisterFacturas?: SinisterToSinisterFacturasResolver<TParent>;
    sinisterLifes?: SinisterToSinisterLifesResolver<TParent>;
    sinisterAccidents?: SinisterToSinisterAccidentsResolver<TParent>;
    insurerZipCodeSepomex?: SinisterToInsurerZipCodeSepomexResolver<TParent>;
    id?: SinisterToIdResolver<TParent>;
    createdAt?: SinisterToCreatedAtResolver<TParent>;
    updatedAt?: SinisterToUpdatedAtResolver<TParent>;
}
export interface SinisterToCompanyFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToInternFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToPromiseDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToAffectedItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToSinisterNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToSinisterDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToTypeSinisterGeneralResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToObservationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToPoliceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToIngressDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToAffectedAuxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToCompromiseDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToAffectedAuxRelationShipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToInsurerZipCodeSepomexIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToTerminationDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToFileLoadedDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToSinisterCarsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToSinisterDamagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToSinisterFacturasResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToSinisterLifesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToSinisterAccidentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToInsurerZipCodeSepomexResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterCarTypeResolver<TParent = any> {
    typeSinister?: SinisterCarToTypeSinisterResolver<TParent>;
    explication?: SinisterCarToExplicationResolver<TParent>;
    third?: SinisterCarToThirdResolver<TParent>;
    imdemnization?: SinisterCarToImdemnizationResolver<TParent>;
    sinisterId?: SinisterCarToSinisterIdResolver<TParent>;
    driver?: SinisterCarToDriverResolver<TParent>;
    coaseguro?: SinisterCarToCoaseguroResolver<TParent>;
    deductible?: SinisterCarToDeductibleResolver<TParent>;
    projectId?: SinisterCarToProjectIdResolver<TParent>;
    firstSubTypeSinister?: SinisterCarToFirstSubTypeSinisterResolver<TParent>;
    secondSubTypeSinister?: SinisterCarToSecondSubTypeSinisterResolver<TParent>;
    sinister?: SinisterCarToSinisterResolver<TParent>;
    sinisterCarContacts?: SinisterCarToSinisterCarContactsResolver<TParent>;
    id?: SinisterCarToIdResolver<TParent>;
    createdAt?: SinisterCarToCreatedAtResolver<TParent>;
    updatedAt?: SinisterCarToUpdatedAtResolver<TParent>;
}
export interface SinisterCarToTypeSinisterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarToExplicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarToThirdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarToImdemnizationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarToSinisterIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarToDriverResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarToCoaseguroResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarToDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarToFirstSubTypeSinisterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarToSecondSubTypeSinisterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarToSinisterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarToSinisterCarContactsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterCarContactTypeResolver<TParent = any> {
    firstName?: SinisterCarContactToFirstNameResolver<TParent>;
    lastName?: SinisterCarContactToLastNameResolver<TParent>;
    secondLastName?: SinisterCarContactToSecondLastNameResolver<TParent>;
    phone?: SinisterCarContactToPhoneResolver<TParent>;
    email?: SinisterCarContactToEmailResolver<TParent>;
    references?: SinisterCarContactToReferencesResolver<TParent>;
    sinisterCarId?: SinisterCarContactToSinisterCarIdResolver<TParent>;
    projectId?: SinisterCarContactToProjectIdResolver<TParent>;
    sinisterCar?: SinisterCarContactToSinisterCarResolver<TParent>;
    id?: SinisterCarContactToIdResolver<TParent>;
    createdAt?: SinisterCarContactToCreatedAtResolver<TParent>;
    updatedAt?: SinisterCarContactToUpdatedAtResolver<TParent>;
}
export interface SinisterCarContactToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarContactToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarContactToSecondLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarContactToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarContactToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarContactToReferencesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarContactToSinisterCarIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarContactToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarContactToSinisterCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarContactToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarContactToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarContactToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterDamageTypeResolver<TParent = any> {
    insuredProperty?: SinisterDamageToInsuredPropertyResolver<TParent>;
    lossEstimate?: SinisterDamageToLossEstimateResolver<TParent>;
    claimCause?: SinisterDamageToClaimCauseResolver<TParent>;
    affectedCoverage?: SinisterDamageToAffectedCoverageResolver<TParent>;
    indemnization?: SinisterDamageToIndemnizationResolver<TParent>;
    totalClaim?: SinisterDamageToTotalClaimResolver<TParent>;
    sinisterId?: SinisterDamageToSinisterIdResolver<TParent>;
    currency?: SinisterDamageToCurrencyResolver<TParent>;
    exchangeRate?: SinisterDamageToExchangeRateResolver<TParent>;
    totalCoaseguro?: SinisterDamageToTotalCoaseguroResolver<TParent>;
    totalDeductible?: SinisterDamageToTotalDeductibleResolver<TParent>;
    projectId?: SinisterDamageToProjectIdResolver<TParent>;
    sinister?: SinisterDamageToSinisterResolver<TParent>;
    sinisterDamageContacts?: SinisterDamageToSinisterDamageContactsResolver<TParent>;
    id?: SinisterDamageToIdResolver<TParent>;
    createdAt?: SinisterDamageToCreatedAtResolver<TParent>;
    updatedAt?: SinisterDamageToUpdatedAtResolver<TParent>;
}
export interface SinisterDamageToInsuredPropertyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageToLossEstimateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageToClaimCauseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageToAffectedCoverageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageToIndemnizationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageToTotalClaimResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageToSinisterIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageToCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageToExchangeRateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageToTotalCoaseguroResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageToTotalDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageToSinisterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageToSinisterDamageContactsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterDamageContactTypeResolver<TParent = any> {
    firstName?: SinisterDamageContactToFirstNameResolver<TParent>;
    lastName?: SinisterDamageContactToLastNameResolver<TParent>;
    secondLastName?: SinisterDamageContactToSecondLastNameResolver<TParent>;
    phone?: SinisterDamageContactToPhoneResolver<TParent>;
    email?: SinisterDamageContactToEmailResolver<TParent>;
    references?: SinisterDamageContactToReferencesResolver<TParent>;
    sinisterDamageId?: SinisterDamageContactToSinisterDamageIdResolver<TParent>;
    projectId?: SinisterDamageContactToProjectIdResolver<TParent>;
    sinisterDamage?: SinisterDamageContactToSinisterDamageResolver<TParent>;
    id?: SinisterDamageContactToIdResolver<TParent>;
    createdAt?: SinisterDamageContactToCreatedAtResolver<TParent>;
    updatedAt?: SinisterDamageContactToUpdatedAtResolver<TParent>;
}
export interface SinisterDamageContactToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageContactToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageContactToSecondLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageContactToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageContactToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageContactToReferencesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageContactToSinisterDamageIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageContactToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageContactToSinisterDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageContactToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageContactToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageContactToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterFacturaTypeResolver<TParent = any> {
    facturaNumber?: SinisterFacturaToFacturaNumberResolver<TParent>;
    provider?: SinisterFacturaToProviderResolver<TParent>;
    facturaDate?: SinisterFacturaToFacturaDateResolver<TParent>;
    import?: SinisterFacturaToImportResolver<TParent>;
    iVA?: SinisterFacturaToIVAResolver<TParent>;
    total?: SinisterFacturaToTotalResolver<TParent>;
    procedent?: SinisterFacturaToProcedentResolver<TParent>;
    observations?: SinisterFacturaToObservationsResolver<TParent>;
    sinisterId?: SinisterFacturaToSinisterIdResolver<TParent>;
    concept?: SinisterFacturaToConceptResolver<TParent>;
    serie?: SinisterFacturaToSerieResolver<TParent>;
    projectId?: SinisterFacturaToProjectIdResolver<TParent>;
    sinister?: SinisterFacturaToSinisterResolver<TParent>;
    id?: SinisterFacturaToIdResolver<TParent>;
    createdAt?: SinisterFacturaToCreatedAtResolver<TParent>;
    updatedAt?: SinisterFacturaToUpdatedAtResolver<TParent>;
}
export interface SinisterFacturaToFacturaNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterFacturaToProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterFacturaToFacturaDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterFacturaToImportResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterFacturaToIVAResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterFacturaToTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterFacturaToProcedentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterFacturaToObservationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterFacturaToSinisterIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterFacturaToConceptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterFacturaToSerieResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterFacturaToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterFacturaToSinisterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterFacturaToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterFacturaToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterFacturaToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterLifeTypeResolver<TParent = any> {
    sinisterReason?: SinisterLifeToSinisterReasonResolver<TParent>;
    paymentType?: SinisterLifeToPaymentTypeResolver<TParent>;
    sinisterId?: SinisterLifeToSinisterIdResolver<TParent>;
    affectedName?: SinisterLifeToAffectedNameResolver<TParent>;
    relationAffected?: SinisterLifeToRelationAffectedResolver<TParent>;
    projectId?: SinisterLifeToProjectIdResolver<TParent>;
    sinister?: SinisterLifeToSinisterResolver<TParent>;
    sinisterLifes?: SinisterLifeToSinisterLifesResolver<TParent>;
    id?: SinisterLifeToIdResolver<TParent>;
    createdAt?: SinisterLifeToCreatedAtResolver<TParent>;
    updatedAt?: SinisterLifeToUpdatedAtResolver<TParent>;
}
export interface SinisterLifeToSinisterReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeToPaymentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeToSinisterIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeToAffectedNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeToRelationAffectedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeToSinisterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeToSinisterLifesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerZipCodeSepomexTypeResolver<TParent = any> {
    zipCode?: InsurerZipCodeSepomexToZipCodeResolver<TParent>;
    colony?: InsurerZipCodeSepomexToColonyResolver<TParent>;
    city?: InsurerZipCodeSepomexToCityResolver<TParent>;
    state?: InsurerZipCodeSepomexToStateResolver<TParent>;
    code?: InsurerZipCodeSepomexToCodeResolver<TParent>;
    cityId?: InsurerZipCodeSepomexToCityIdResolver<TParent>;
    sinisters?: InsurerZipCodeSepomexToSinistersResolver<TParent>;
    id?: InsurerZipCodeSepomexToIdResolver<TParent>;
    createdAt?: InsurerZipCodeSepomexToCreatedAtResolver<TParent>;
    updatedAt?: InsurerZipCodeSepomexToUpdatedAtResolver<TParent>;
}
export interface InsurerZipCodeSepomexToZipCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerZipCodeSepomexToColonyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerZipCodeSepomexToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerZipCodeSepomexToStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerZipCodeSepomexToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerZipCodeSepomexToCityIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerZipCodeSepomexToSinistersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerZipCodeSepomexToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerZipCodeSepomexToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerZipCodeSepomexToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPersonalInformationTypeResolver<TParent = any> {
    firstName?: PersonalInformationToFirstNameResolver<TParent>;
    lastName?: PersonalInformationToLastNameResolver<TParent>;
    secondLastName?: PersonalInformationToSecondLastNameResolver<TParent>;
    birthDate?: PersonalInformationToBirthDateResolver<TParent>;
    sex?: PersonalInformationToSexResolver<TParent>;
    ownerId?: PersonalInformationToOwnerIdResolver<TParent>;
    fullName?: PersonalInformationToFullNameResolver<TParent>;
    email?: PersonalInformationToEmailResolver<TParent>;
    salary?: PersonalInformationToSalaryResolver<TParent>;
    sumAssured?: PersonalInformationToSumAssuredResolver<TParent>;
    memberId?: PersonalInformationToMemberIdResolver<TParent>;
    antiquity?: PersonalInformationToAntiquityResolver<TParent>;
    policeId?: PersonalInformationToPoliceIdResolver<TParent>;
    policyType?: PersonalInformationToPolicyTypeResolver<TParent>;
    typeSA?: PersonalInformationToTypeSAResolver<TParent>;
    certificate?: PersonalInformationToCertificateResolver<TParent>;
    comision?: PersonalInformationToComisionResolver<TParent>;
    rigth?: PersonalInformationToRigthResolver<TParent>;
    iVA?: PersonalInformationToIVAResolver<TParent>;
    projectId?: PersonalInformationToProjectIdResolver<TParent>;
    pNeta?: PersonalInformationToPNetaResolver<TParent>;
    pTotal?: PersonalInformationToPTotalResolver<TParent>;
    rPF?: PersonalInformationToRPFResolver<TParent>;
    discount?: PersonalInformationToDiscountResolver<TParent>;
    gastosInvestigacion?: PersonalInformationToGastosInvestigacionResolver<TParent>;
    subTotal?: PersonalInformationToSubTotalResolver<TParent>;
    chargeDate?: PersonalInformationToChargeDateResolver<TParent>;
    comisionEarned?: PersonalInformationToComisionEarnedResolver<TParent>;
    comisionPercentEarned?: PersonalInformationToComisionPercentEarnedResolver<TParent>;
    rigthEarned?: PersonalInformationToRigthEarnedResolver<TParent>;
    discountEarned?: PersonalInformationToDiscountEarnedResolver<TParent>;
    dischargeDate?: PersonalInformationToDischargeDateResolver<TParent>;
    iVAEarned?: PersonalInformationToIVAEarnedResolver<TParent>;
    pNetaEarned?: PersonalInformationToPNetaEarnedResolver<TParent>;
    pTotalEarned?: PersonalInformationToPTotalEarnedResolver<TParent>;
    rPFEarned?: PersonalInformationToRPFEarnedResolver<TParent>;
    subTotalEarned?: PersonalInformationToSubTotalEarnedResolver<TParent>;
    endDate?: PersonalInformationToEndDateResolver<TParent>;
    initDate?: PersonalInformationToInitDateResolver<TParent>;
    comisionPaymentDate?: PersonalInformationToComisionPaymentDateResolver<TParent>;
    exchangeRate?: PersonalInformationToExchangeRateResolver<TParent>;
    maquila?: PersonalInformationToMaquilaResolver<TParent>;
    bonoDdate?: PersonalInformationToBonoDdateResolver<TParent>;
    maquilaDate?: PersonalInformationToMaquilaDateResolver<TParent>;
    facturaYear?: PersonalInformationToFacturaYearResolver<TParent>;
    formAccidentDisease?: PersonalInformationToFormAccidentDiseaseResolver<TParent>;
    formAutomobileDamage?: PersonalInformationToFormAutomobileDamageResolver<TParent>;
    formDamage?: PersonalInformationToFormDamageResolver<TParent>;
    formLife?: PersonalInformationToFormLifeResolver<TParent>;
    police?: PersonalInformationToPoliceResolver<TParent>;
    sinisterAccidents?: PersonalInformationToSinisterAccidentsResolver<TParent>;
    id?: PersonalInformationToIdResolver<TParent>;
    createdAt?: PersonalInformationToCreatedAtResolver<TParent>;
    updatedAt?: PersonalInformationToUpdatedAtResolver<TParent>;
}
export interface PersonalInformationToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToSecondLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToBirthDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToSexResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToFullNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToSalaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToSumAssuredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToAntiquityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToPoliceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToPolicyTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToTypeSAResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToCertificateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToComisionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToRigthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToIVAResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToPNetaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToPTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToRPFResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToGastosInvestigacionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToSubTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToChargeDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToComisionEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToComisionPercentEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToRigthEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToDiscountEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToDischargeDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToIVAEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToPNetaEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToPTotalEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToRPFEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToSubTotalEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToEndDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToInitDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToComisionPaymentDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToExchangeRateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToMaquilaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToBonoDdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToMaquilaDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToFacturaYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToFormAccidentDiseaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToFormAutomobileDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToFormDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToFormLifeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToSinisterAccidentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFormAccidentDiseaseTypeResolver<TParent = any> {
    diseaseType?: FormAccidentDiseaseToDiseaseTypeResolver<TParent>;
    coinsurance?: FormAccidentDiseaseToCoinsuranceResolver<TParent>;
    documentType?: FormAccidentDiseaseToDocumentTypeResolver<TParent>;
    ownerId?: FormAccidentDiseaseToOwnerIdResolver<TParent>;
    personalId?: FormAccidentDiseaseToPersonalIdResolver<TParent>;
    policeId?: FormAccidentDiseaseToPoliceIdResolver<TParent>;
    projectId?: FormAccidentDiseaseToProjectIdResolver<TParent>;
    personalInformation?: FormAccidentDiseaseToPersonalInformationResolver<TParent>;
    police?: FormAccidentDiseaseToPoliceResolver<TParent>;
    relationShips?: FormAccidentDiseaseToRelationShipsResolver<TParent>;
    id?: FormAccidentDiseaseToIdResolver<TParent>;
    createdAt?: FormAccidentDiseaseToCreatedAtResolver<TParent>;
    updatedAt?: FormAccidentDiseaseToUpdatedAtResolver<TParent>;
}
export interface FormAccidentDiseaseToDiseaseTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAccidentDiseaseToCoinsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAccidentDiseaseToDocumentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAccidentDiseaseToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAccidentDiseaseToPersonalIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAccidentDiseaseToPoliceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAccidentDiseaseToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAccidentDiseaseToPersonalInformationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAccidentDiseaseToPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAccidentDiseaseToRelationShipsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAccidentDiseaseToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAccidentDiseaseToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAccidentDiseaseToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRelationShipTypeResolver<TParent = any> {
    firstName?: RelationShipToFirstNameResolver<TParent>;
    lastName?: RelationShipToLastNameResolver<TParent>;
    secondLastName?: RelationShipToSecondLastNameResolver<TParent>;
    birthDate?: RelationShipToBirthDateResolver<TParent>;
    sex?: RelationShipToSexResolver<TParent>;
    relationship?: RelationShipToRelationshipResolver<TParent>;
    accidentId?: RelationShipToAccidentIdResolver<TParent>;
    ownerId?: RelationShipToOwnerIdResolver<TParent>;
    fullName?: RelationShipToFullNameResolver<TParent>;
    isActive?: RelationShipToIsActiveResolver<TParent>;
    endorsementId?: RelationShipToEndorsementIdResolver<TParent>;
    antiquity?: RelationShipToAntiquityResolver<TParent>;
    certificate?: RelationShipToCertificateResolver<TParent>;
    comision?: RelationShipToComisionResolver<TParent>;
    rigth?: RelationShipToRigthResolver<TParent>;
    iVA?: RelationShipToIVAResolver<TParent>;
    projectId?: RelationShipToProjectIdResolver<TParent>;
    pNeta?: RelationShipToPNetaResolver<TParent>;
    pTotal?: RelationShipToPTotalResolver<TParent>;
    rPF?: RelationShipToRPFResolver<TParent>;
    discount?: RelationShipToDiscountResolver<TParent>;
    gastosInvestigacion?: RelationShipToGastosInvestigacionResolver<TParent>;
    subTotal?: RelationShipToSubTotalResolver<TParent>;
    chargeDate?: RelationShipToChargeDateResolver<TParent>;
    comisionEarned?: RelationShipToComisionEarnedResolver<TParent>;
    comisionPercentEarned?: RelationShipToComisionPercentEarnedResolver<TParent>;
    rigthEarned?: RelationShipToRigthEarnedResolver<TParent>;
    discountEarned?: RelationShipToDiscountEarnedResolver<TParent>;
    dischangeDate?: RelationShipToDischangeDateResolver<TParent>;
    iVAEarned?: RelationShipToIVAEarnedResolver<TParent>;
    pNetaEarned?: RelationShipToPNetaEarnedResolver<TParent>;
    pTotalEarned?: RelationShipToPTotalEarnedResolver<TParent>;
    rPFEarned?: RelationShipToRPFEarnedResolver<TParent>;
    subTotalEarned?: RelationShipToSubTotalEarnedResolver<TParent>;
    comisionPaymentDate?: RelationShipToComisionPaymentDateResolver<TParent>;
    exchangeRate?: RelationShipToExchangeRateResolver<TParent>;
    maquila?: RelationShipToMaquilaResolver<TParent>;
    bonoDate?: RelationShipToBonoDateResolver<TParent>;
    maquilaDate?: RelationShipToMaquilaDateResolver<TParent>;
    facturaYear?: RelationShipToFacturaYearResolver<TParent>;
    formAccidentDisease?: RelationShipToFormAccidentDiseaseResolver<TParent>;
    endorsement?: RelationShipToEndorsementResolver<TParent>;
    endorsementCerts?: RelationShipToEndorsementCertsResolver<TParent>;
    sinisterAccidents?: RelationShipToSinisterAccidentsResolver<TParent>;
    id?: RelationShipToIdResolver<TParent>;
    createdAt?: RelationShipToCreatedAtResolver<TParent>;
    updatedAt?: RelationShipToUpdatedAtResolver<TParent>;
}
export interface RelationShipToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToSecondLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToBirthDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToSexResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToRelationshipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToAccidentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToFullNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToEndorsementIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToAntiquityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToCertificateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToComisionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToRigthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToIVAResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToPNetaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToPTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToRPFResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToGastosInvestigacionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToSubTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToChargeDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToComisionEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToComisionPercentEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToRigthEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToDiscountEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToDischangeDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToIVAEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToPNetaEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToPTotalEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToRPFEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToSubTotalEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToComisionPaymentDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToExchangeRateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToMaquilaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToBonoDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToMaquilaDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToFacturaYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToFormAccidentDiseaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToEndorsementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToEndorsementCertsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToSinisterAccidentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEndorsementTypeResolver<TParent = any> {
    type?: EndorsementToTypeResolver<TParent>;
    status?: EndorsementToStatusResolver<TParent>;
    initDate?: EndorsementToInitDateResolver<TParent>;
    endDate?: EndorsementToEndDateResolver<TParent>;
    numberEndorsement?: EndorsementToNumberEndorsementResolver<TParent>;
    internalNumber?: EndorsementToInternalNumberResolver<TParent>;
    concept?: EndorsementToConceptResolver<TParent>;
    otherDesc?: EndorsementToOtherDescResolver<TParent>;
    original?: EndorsementToOriginalResolver<TParent>;
    change?: EndorsementToChangeResolver<TParent>;
    observations?: EndorsementToObservationsResolver<TParent>;
    pNeta?: EndorsementToPNetaResolver<TParent>;
    rPF?: EndorsementToRPFResolver<TParent>;
    rigth?: EndorsementToRigthResolver<TParent>;
    iVA?: EndorsementToIVAResolver<TParent>;
    pTotal?: EndorsementToPTotalResolver<TParent>;
    comision?: EndorsementToComisionResolver<TParent>;
    ownerId?: EndorsementToOwnerIdResolver<TParent>;
    policeId?: EndorsementToPoliceIdResolver<TParent>;
    comisionPercent?: EndorsementToComisionPercentResolver<TParent>;
    anuency?: EndorsementToAnuencyResolver<TParent>;
    projectId?: EndorsementToProjectIdResolver<TParent>;
    discount?: EndorsementToDiscountResolver<TParent>;
    researchCost?: EndorsementToResearchCostResolver<TParent>;
    comisionPercentEarned?: EndorsementToComisionPercentEarnedResolver<TParent>;
    discoutnEarned?: EndorsementToDiscoutnEarnedResolver<TParent>;
    iVaEarned?: EndorsementToIVaEarnedResolver<TParent>;
    pNETAEarned?: EndorsementToPNETAEarnedResolver<TParent>;
    pTotalEarned?: EndorsementToPTotalEarnedResolver<TParent>;
    rPFEarned?: EndorsementToRPFEarnedResolver<TParent>;
    subTotalEarned?: EndorsementToSubTotalEarnedResolver<TParent>;
    insuranceFolio?: EndorsementToInsuranceFolioResolver<TParent>;
    comitionPatmentDate?: EndorsementToComitionPatmentDateResolver<TParent>;
    exchangeRate?: EndorsementToExchangeRateResolver<TParent>;
    maquila?: EndorsementToMaquilaResolver<TParent>;
    bonoDate?: EndorsementToBonoDateResolver<TParent>;
    variableBono?: EndorsementToVariableBonoResolver<TParent>;
    emisionFacturaDate?: EndorsementToEmisionFacturaDateResolver<TParent>;
    maquilaDate?: EndorsementToMaquilaDateResolver<TParent>;
    folioFactura?: EndorsementToFolioFacturaResolver<TParent>;
    monthFactura?: EndorsementToMonthFacturaResolver<TParent>;
    fechaEntrega?: EndorsementToFechaEntregaResolver<TParent>;
    police?: EndorsementToPoliceResolver<TParent>;
    beneficiaries?: EndorsementToBeneficiariesResolver<TParent>;
    relationShips?: EndorsementToRelationShipsResolver<TParent>;
    endorsementCerts?: EndorsementToEndorsementCertsResolver<TParent>;
    policeReceipts?: EndorsementToPoliceReceiptsResolver<TParent>;
    id?: EndorsementToIdResolver<TParent>;
    createdAt?: EndorsementToCreatedAtResolver<TParent>;
    updatedAt?: EndorsementToUpdatedAtResolver<TParent>;
}
export interface EndorsementToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToInitDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToEndDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToNumberEndorsementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToInternalNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToConceptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToOtherDescResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToOriginalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToChangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToObservationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToPNetaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToRPFResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToRigthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToIVAResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToPTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToComisionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToPoliceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToComisionPercentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToAnuencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToResearchCostResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToComisionPercentEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToDiscoutnEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToIVaEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToPNETAEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToPTotalEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToRPFEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToSubTotalEarnedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToInsuranceFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToComitionPatmentDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToExchangeRateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToMaquilaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToBonoDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToVariableBonoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToEmisionFacturaDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToMaquilaDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToFolioFacturaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToMonthFacturaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToFechaEntregaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToBeneficiariesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToRelationShipsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToEndorsementCertsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToPoliceReceiptsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBeneficiarieTypeResolver<TParent = any> {
    firstName?: BeneficiarieToFirstNameResolver<TParent>;
    lastName?: BeneficiarieToLastNameResolver<TParent>;
    secondLastName?: BeneficiarieToSecondLastNameResolver<TParent>;
    birthDate?: BeneficiarieToBirthDateResolver<TParent>;
    sex?: BeneficiarieToSexResolver<TParent>;
    percentage?: BeneficiarieToPercentageResolver<TParent>;
    optionalRelation?: BeneficiarieToOptionalRelationResolver<TParent>;
    lifeId?: BeneficiarieToLifeIdResolver<TParent>;
    ownerId?: BeneficiarieToOwnerIdResolver<TParent>;
    fullName?: BeneficiarieToFullNameResolver<TParent>;
    iSR?: BeneficiarieToISRResolver<TParent>;
    procedente?: BeneficiarieToProcedenteResolver<TParent>;
    clause?: BeneficiarieToClauseResolver<TParent>;
    jName?: BeneficiarieToJNameResolver<TParent>;
    rFC?: BeneficiarieToRFCResolver<TParent>;
    active?: BeneficiarieToActiveResolver<TParent>;
    endorsementId?: BeneficiarieToEndorsementIdResolver<TParent>;
    antiquity?: BeneficiarieToAntiquityResolver<TParent>;
    projectId?: BeneficiarieToProjectIdResolver<TParent>;
    chargeDate?: BeneficiarieToChargeDateResolver<TParent>;
    dishargeDate?: BeneficiarieToDishargeDateResolver<TParent>;
    formLife?: BeneficiarieToFormLifeResolver<TParent>;
    endorsement?: BeneficiarieToEndorsementResolver<TParent>;
    endorsementCerts?: BeneficiarieToEndorsementCertsResolver<TParent>;
    id?: BeneficiarieToIdResolver<TParent>;
    createdAt?: BeneficiarieToCreatedAtResolver<TParent>;
    updatedAt?: BeneficiarieToUpdatedAtResolver<TParent>;
}
export interface BeneficiarieToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToSecondLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToBirthDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToSexResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToPercentageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToOptionalRelationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToLifeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToFullNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToISRResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToProcedenteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToClauseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToJNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToRFCResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToEndorsementIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToAntiquityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToChargeDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToDishargeDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToFormLifeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToEndorsementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToEndorsementCertsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFormLifeTypeResolver<TParent = any> {
    smoker?: FormLifeToSmokerResolver<TParent>;
    documentType?: FormLifeToDocumentTypeResolver<TParent>;
    ownerId?: FormLifeToOwnerIdResolver<TParent>;
    personalId?: FormLifeToPersonalIdResolver<TParent>;
    policeId?: FormLifeToPoliceIdResolver<TParent>;
    projectId?: FormLifeToProjectIdResolver<TParent>;
    beneficiarie?: FormLifeToBeneficiarieResolver<TParent>;
    personalInformation?: FormLifeToPersonalInformationResolver<TParent>;
    police?: FormLifeToPoliceResolver<TParent>;
    id?: FormLifeToIdResolver<TParent>;
    createdAt?: FormLifeToCreatedAtResolver<TParent>;
    updatedAt?: FormLifeToUpdatedAtResolver<TParent>;
}
export interface FormLifeToSmokerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormLifeToDocumentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormLifeToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormLifeToPersonalIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormLifeToPoliceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormLifeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormLifeToBeneficiarieResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormLifeToPersonalInformationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormLifeToPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormLifeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormLifeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormLifeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEndorsementCertTypeResolver<TParent = any> {
    proceed?: EndorsementCertToProceedResolver<TParent>;
    certificate?: EndorsementCertToCertificateResolver<TParent>;
    endorsementId?: EndorsementCertToEndorsementIdResolver<TParent>;
    projectId?: EndorsementCertToProjectIdResolver<TParent>;
    beneficiarieId?: EndorsementCertToBeneficiarieIdResolver<TParent>;
    relationShipId?: EndorsementCertToRelationShipIdResolver<TParent>;
    endorsement?: EndorsementCertToEndorsementResolver<TParent>;
    beneficiarie?: EndorsementCertToBeneficiarieResolver<TParent>;
    relationShip?: EndorsementCertToRelationShipResolver<TParent>;
    id?: EndorsementCertToIdResolver<TParent>;
    createdAt?: EndorsementCertToCreatedAtResolver<TParent>;
    updatedAt?: EndorsementCertToUpdatedAtResolver<TParent>;
}
export interface EndorsementCertToProceedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementCertToCertificateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementCertToEndorsementIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementCertToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementCertToBeneficiarieIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementCertToRelationShipIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementCertToEndorsementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementCertToBeneficiarieResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementCertToRelationShipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementCertToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementCertToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementCertToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceReceiptTypeResolver<TParent = any> {
    number?: PoliceReceiptToNumberResolver<TParent>;
    primaNeta?: PoliceReceiptToPrimaNetaResolver<TParent>;
    rPF?: PoliceReceiptToRPFResolver<TParent>;
    right?: PoliceReceiptToRightResolver<TParent>;
    iVA?: PoliceReceiptToIVAResolver<TParent>;
    subTotal?: PoliceReceiptToSubTotalResolver<TParent>;
    primaTotal?: PoliceReceiptToPrimaTotalResolver<TParent>;
    status?: PoliceReceiptToStatusResolver<TParent>;
    startDate?: PoliceReceiptToStartDateResolver<TParent>;
    endDate?: PoliceReceiptToEndDateResolver<TParent>;
    description?: PoliceReceiptToDescriptionResolver<TParent>;
    folio?: PoliceReceiptToFolioResolver<TParent>;
    type?: PoliceReceiptToTypeResolver<TParent>;
    payForm?: PoliceReceiptToPayFormResolver<TParent>;
    paymentDocument?: PoliceReceiptToPaymentDocumentResolver<TParent>;
    isCopy?: PoliceReceiptToIsCopyResolver<TParent>;
    isActive?: PoliceReceiptToIsActiveResolver<TParent>;
    bank?: PoliceReceiptToBankResolver<TParent>;
    ownerId?: PoliceReceiptToOwnerIdResolver<TParent>;
    policeId?: PoliceReceiptToPoliceIdResolver<TParent>;
    comision?: PoliceReceiptToComisionResolver<TParent>;
    validityDate?: PoliceReceiptToValidityDateResolver<TParent>;
    reconciledComision?: PoliceReceiptToReconciledComisionResolver<TParent>;
    reconciledDate?: PoliceReceiptToReconciledDateResolver<TParent>;
    reconciledObservation?: PoliceReceiptToReconciledObservationResolver<TParent>;
    settlementFolio?: PoliceReceiptToSettlementFolioResolver<TParent>;
    reconciledFolio?: PoliceReceiptToReconciledFolioResolver<TParent>;
    settlementDate?: PoliceReceiptToSettlementDateResolver<TParent>;
    reconcilationAccountId?: PoliceReceiptToReconcilationAccountIdResolver<TParent>;
    paymentDate?: PoliceReceiptToPaymentDateResolver<TParent>;
    endorsementId?: PoliceReceiptToEndorsementIdResolver<TParent>;
    delivered?: PoliceReceiptToDeliveredResolver<TParent>;
    paymentFolio?: PoliceReceiptToPaymentFolioResolver<TParent>;
    settlementBank?: PoliceReceiptToSettlementBankResolver<TParent>;
    settlementCurrRate?: PoliceReceiptToSettlementCurrRateResolver<TParent>;
    settlementDoc?: PoliceReceiptToSettlementDocResolver<TParent>;
    settlementForm?: PoliceReceiptToSettlementFormResolver<TParent>;
    excedent?: PoliceReceiptToExcedentResolver<TParent>;
    agentProviderBonoId?: PoliceReceiptToAgentProviderBonoIdResolver<TParent>;
    changeReferrerComision?: PoliceReceiptToChangeReferrerComisionResolver<TParent>;
    referrerComosion?: PoliceReceiptToReferrerComosionResolver<TParent>;
    binnacleTrack?: PoliceReceiptToBinnacleTrackResolver<TParent>;
    emailTrack?: PoliceReceiptToEmailTrackResolver<TParent>;
    phoneTrack?: PoliceReceiptToPhoneTrackResolver<TParent>;
    referrerClosedNew?: PoliceReceiptToReferrerClosedNewResolver<TParent>;
    memberPaymentId?: PoliceReceiptToMemberPaymentIdResolver<TParent>;
    paymentPromise?: PoliceReceiptToPaymentPromiseResolver<TParent>;
    researchCost?: PoliceReceiptToResearchCostResolver<TParent>;
    projectId?: PoliceReceiptToProjectIdResolver<TParent>;
    conductPayment?: PoliceReceiptToConductPaymentResolver<TParent>;
    exchangeRate?: PoliceReceiptToExchangeRateResolver<TParent>;
    manualSerie?: PoliceReceiptToManualSerieResolver<TParent>;
    settlementMethod?: PoliceReceiptToSettlementMethodResolver<TParent>;
    memberSettlementId?: PoliceReceiptToMemberSettlementIdResolver<TParent>;
    police?: PoliceReceiptToPoliceResolver<TParent>;
    endorsement?: PoliceReceiptToEndorsementResolver<TParent>;
    policeReceiptAccount?: PoliceReceiptToPoliceReceiptAccountResolver<TParent>;
    agentProviderbono?: PoliceReceiptToAgentProviderbonoResolver<TParent>;
    policeReceiptAccountStates?: PoliceReceiptToPoliceReceiptAccountStatesResolver<TParent>;
    policeReceiptPayments?: PoliceReceiptToPoliceReceiptPaymentsResolver<TParent>;
    id?: PoliceReceiptToIdResolver<TParent>;
    createdAt?: PoliceReceiptToCreatedAtResolver<TParent>;
    updatedAt?: PoliceReceiptToUpdatedAtResolver<TParent>;
}
export interface PoliceReceiptToNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToPrimaNetaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToRPFResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToRightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToIVAResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToSubTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToPrimaTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToStartDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToEndDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToPayFormResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToPaymentDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToIsCopyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToBankResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToPoliceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToComisionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToValidityDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToReconciledComisionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToReconciledDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToReconciledObservationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToSettlementFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToReconciledFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToSettlementDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToReconcilationAccountIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToPaymentDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToEndorsementIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToDeliveredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToPaymentFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToSettlementBankResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToSettlementCurrRateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToSettlementDocResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToSettlementFormResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToExcedentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToAgentProviderBonoIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToChangeReferrerComisionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToReferrerComosionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToBinnacleTrackResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToEmailTrackResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToPhoneTrackResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToReferrerClosedNewResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToMemberPaymentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToPaymentPromiseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToResearchCostResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToConductPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToExchangeRateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToManualSerieResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToSettlementMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToMemberSettlementIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToEndorsementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToPoliceReceiptAccountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToAgentProviderbonoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToPoliceReceiptAccountStatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToPoliceReceiptPaymentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceReceiptAccountTypeResolver<TParent = any> {
    name?: PoliceReceiptAccountToNameResolver<TParent>;
    account?: PoliceReceiptAccountToAccountResolver<TParent>;
    observations?: PoliceReceiptAccountToObservationsResolver<TParent>;
    bank?: PoliceReceiptAccountToBankResolver<TParent>;
    ownerId?: PoliceReceiptAccountToOwnerIdResolver<TParent>;
    projectId?: PoliceReceiptAccountToProjectIdResolver<TParent>;
    policeReceiptAccountStates?: PoliceReceiptAccountToPoliceReceiptAccountStatesResolver<TParent>;
    policeReceipts?: PoliceReceiptAccountToPoliceReceiptsResolver<TParent>;
    id?: PoliceReceiptAccountToIdResolver<TParent>;
    createdAt?: PoliceReceiptAccountToCreatedAtResolver<TParent>;
    updatedAt?: PoliceReceiptAccountToUpdatedAtResolver<TParent>;
}
export interface PoliceReceiptAccountToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountToAccountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountToObservationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountToBankResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountToPoliceReceiptAccountStatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountToPoliceReceiptsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceReceiptAccountStateTypeResolver<TParent = any> {
    policeReceiptAccountId?: PoliceReceiptAccountStateToPoliceReceiptAccountIdResolver<TParent>;
    policeReceiptId?: PoliceReceiptAccountStateToPoliceReceiptIdResolver<TParent>;
    policeReceipt?: PoliceReceiptAccountStateToPoliceReceiptResolver<TParent>;
    policeReceiptAccount?: PoliceReceiptAccountStateToPoliceReceiptAccountResolver<TParent>;
    id?: PoliceReceiptAccountStateToIdResolver<TParent>;
    createdAt?: PoliceReceiptAccountStateToCreatedAtResolver<TParent>;
    updatedAt?: PoliceReceiptAccountStateToUpdatedAtResolver<TParent>;
}
export interface PoliceReceiptAccountStateToPoliceReceiptAccountIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountStateToPoliceReceiptIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountStateToPoliceReceiptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountStateToPoliceReceiptAccountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountStateToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountStateToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountStateToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceReceiptPaymentTypeResolver<TParent = any> {
    paymentMethod?: PoliceReceiptPaymentToPaymentMethodResolver<TParent>;
    paymentDocument?: PoliceReceiptPaymentToPaymentDocumentResolver<TParent>;
    amount?: PoliceReceiptPaymentToAmountResolver<TParent>;
    paymentDate?: PoliceReceiptPaymentToPaymentDateResolver<TParent>;
    ownerId?: PoliceReceiptPaymentToOwnerIdResolver<TParent>;
    policeReceiptId?: PoliceReceiptPaymentToPoliceReceiptIdResolver<TParent>;
    projectId?: PoliceReceiptPaymentToProjectIdResolver<TParent>;
    policeReceipt?: PoliceReceiptPaymentToPoliceReceiptResolver<TParent>;
    id?: PoliceReceiptPaymentToIdResolver<TParent>;
    createdAt?: PoliceReceiptPaymentToCreatedAtResolver<TParent>;
    updatedAt?: PoliceReceiptPaymentToUpdatedAtResolver<TParent>;
}
export interface PoliceReceiptPaymentToPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptPaymentToPaymentDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptPaymentToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptPaymentToPaymentDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptPaymentToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptPaymentToPoliceReceiptIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptPaymentToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptPaymentToPoliceReceiptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptPaymentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptPaymentToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptPaymentToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFormAutomobileDamageTypeResolver<TParent = any> {
    brand?: FormAutomobileDamageToBrandResolver<TParent>;
    model?: FormAutomobileDamageToModelResolver<TParent>;
    year?: FormAutomobileDamageToYearResolver<TParent>;
    version?: FormAutomobileDamageToVersionResolver<TParent>;
    serial?: FormAutomobileDamageToSerialResolver<TParent>;
    engine?: FormAutomobileDamageToEngineResolver<TParent>;
    color?: FormAutomobileDamageToColorResolver<TParent>;
    licensePlates?: FormAutomobileDamageToLicensePlatesResolver<TParent>;
    documentType?: FormAutomobileDamageToDocumentTypeResolver<TParent>;
    ownerId?: FormAutomobileDamageToOwnerIdResolver<TParent>;
    policeId?: FormAutomobileDamageToPoliceIdResolver<TParent>;
    usage?: FormAutomobileDamageToUsageResolver<TParent>;
    email?: FormAutomobileDamageToEmailResolver<TParent>;
    beneficiaryAddress?: FormAutomobileDamageToBeneficiaryAddressResolver<TParent>;
    beneficiaryName?: FormAutomobileDamageToBeneficiaryNameResolver<TParent>;
    beneficiaryRFC?: FormAutomobileDamageToBeneficiaryRFCResolver<TParent>;
    adjusment?: FormAutomobileDamageToAdjusmentResolver<TParent>;
    drive?: FormAutomobileDamageToDriveResolver<TParent>;
    montAdjustment?: FormAutomobileDamageToMontAdjustmentResolver<TParent>;
    montSpecialTeam?: FormAutomobileDamageToMontSpecialTeamResolver<TParent>;
    specialTeam?: FormAutomobileDamageToSpecialTeamResolver<TParent>;
    service?: FormAutomobileDamageToServiceResolver<TParent>;
    policyType?: FormAutomobileDamageToPolicyTypeResolver<TParent>;
    chargeType?: FormAutomobileDamageToChargeTypeResolver<TParent>;
    procedencia?: FormAutomobileDamageToProcedenciaResolver<TParent>;
    personalId?: FormAutomobileDamageToPersonalIdResolver<TParent>;
    preferencialBeneficiary?: FormAutomobileDamageToPreferencialBeneficiaryResolver<TParent>;
    sumInsured?: FormAutomobileDamageToSumInsuredResolver<TParent>;
    carOwner?: FormAutomobileDamageToCarOwnerResolver<TParent>;
    noEmployee?: FormAutomobileDamageToNoEmployeeResolver<TParent>;
    projectId?: FormAutomobileDamageToProjectIdResolver<TParent>;
    personalInformation?: FormAutomobileDamageToPersonalInformationResolver<TParent>;
    police?: FormAutomobileDamageToPoliceResolver<TParent>;
    id?: FormAutomobileDamageToIdResolver<TParent>;
    createdAt?: FormAutomobileDamageToCreatedAtResolver<TParent>;
    updatedAt?: FormAutomobileDamageToUpdatedAtResolver<TParent>;
}
export interface FormAutomobileDamageToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToModelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToVersionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToSerialResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToEngineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToColorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToLicensePlatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToDocumentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToPoliceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToUsageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToBeneficiaryAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToBeneficiaryNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToBeneficiaryRFCResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToAdjusmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToDriveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToMontAdjustmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToMontSpecialTeamResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToSpecialTeamResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToPolicyTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToChargeTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToProcedenciaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToPersonalIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToPreferencialBeneficiaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToSumInsuredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToCarOwnerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToNoEmployeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToPersonalInformationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFormDamageTypeResolver<TParent = any> {
    damageType?: FormDamageToDamageTypeResolver<TParent>;
    insuredItem?: FormDamageToInsuredItemResolver<TParent>;
    itemAddress?: FormDamageToItemAddressResolver<TParent>;
    itemDetails?: FormDamageToItemDetailsResolver<TParent>;
    coinsurance?: FormDamageToCoinsuranceResolver<TParent>;
    documentType?: FormDamageToDocumentTypeResolver<TParent>;
    ownerId?: FormDamageToOwnerIdResolver<TParent>;
    policeId?: FormDamageToPoliceIdResolver<TParent>;
    personalId?: FormDamageToPersonalIdResolver<TParent>;
    brand?: FormDamageToBrandResolver<TParent>;
    color?: FormDamageToColorResolver<TParent>;
    constructionYear?: FormDamageToConstructionYearResolver<TParent>;
    damOwner?: FormDamageToDamOwnerResolver<TParent>;
    email?: FormDamageToEmailResolver<TParent>;
    engine?: FormDamageToEngineResolver<TParent>;
    fHMZone?: FormDamageToFHMZoneResolver<TParent>;
    girp?: FormDamageToGirpResolver<TParent>;
    matricula?: FormDamageToMatriculaResolver<TParent>;
    model?: FormDamageToModelResolver<TParent>;
    noEmployee?: FormDamageToNoEmployeeResolver<TParent>;
    noLevels?: FormDamageToNoLevelsResolver<TParent>;
    permiso?: FormDamageToPermisoResolver<TParent>;
    purchaseValue?: FormDamageToPurchaseValueResolver<TParent>;
    reconstructionYear?: FormDamageToReconstructionYearResolver<TParent>;
    serial?: FormDamageToSerialResolver<TParent>;
    sucursal?: FormDamageToSucursalResolver<TParent>;
    tYEVZone?: FormDamageToTYEVZoneResolver<TParent>;
    typeConstruction?: FormDamageToTypeConstructionResolver<TParent>;
    usage?: FormDamageToUsageResolver<TParent>;
    version?: FormDamageToVersionResolver<TParent>;
    projectId?: FormDamageToProjectIdResolver<TParent>;
    personalInformation?: FormDamageToPersonalInformationResolver<TParent>;
    police?: FormDamageToPoliceResolver<TParent>;
    id?: FormDamageToIdResolver<TParent>;
    createdAt?: FormDamageToCreatedAtResolver<TParent>;
    updatedAt?: FormDamageToUpdatedAtResolver<TParent>;
}
export interface FormDamageToDamageTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToInsuredItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToItemAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToItemDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToCoinsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToDocumentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToPoliceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToPersonalIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToColorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToConstructionYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToDamOwnerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToEngineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToFHMZoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToGirpResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToMatriculaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToModelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToNoEmployeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToNoLevelsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToPermisoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToPurchaseValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToReconstructionYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToSerialResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToSucursalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToTYEVZoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToTypeConstructionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToUsageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToVersionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToPersonalInformationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterAilingTypeResolver<TParent = any> {
    code?: SinisterAilingToCodeResolver<TParent>;
    description?: SinisterAilingToDescriptionResolver<TParent>;
    sinisterAccidents?: SinisterAilingToSinisterAccidentsResolver<TParent>;
    id?: SinisterAilingToIdResolver<TParent>;
    createdAt?: SinisterAilingToCreatedAtResolver<TParent>;
    updatedAt?: SinisterAilingToUpdatedAtResolver<TParent>;
}
export interface SinisterAilingToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAilingToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAilingToSinisterAccidentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAilingToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAilingToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAilingToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorGroupingLevelTypeResolver<TParent = any> {
    levelGrouping?: ContractorGroupingLevelToLevelGroupingResolver<TParent>;
    description?: ContractorGroupingLevelToDescriptionResolver<TParent>;
    ownerId?: ContractorGroupingLevelToOwnerIdResolver<TParent>;
    parentId?: ContractorGroupingLevelToParentIdResolver<TParent>;
    responsableId?: ContractorGroupingLevelToResponsableIdResolver<TParent>;
    projectId?: ContractorGroupingLevelToProjectIdResolver<TParent>;
    groupingType?: ContractorGroupingLevelToGroupingTypeResolver<TParent>;
    contractors?: ContractorGroupingLevelToContractorsResolver<TParent>;
    parent?: ContractorGroupingLevelToParentResolver<TParent>;
    contractorGroupingLevels?: ContractorGroupingLevelToContractorGroupingLevelsResolver<TParent>;
    id?: ContractorGroupingLevelToIdResolver<TParent>;
    createdAt?: ContractorGroupingLevelToCreatedAtResolver<TParent>;
    updatedAt?: ContractorGroupingLevelToUpdatedAtResolver<TParent>;
}
export interface ContractorGroupingLevelToLevelGroupingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupingLevelToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupingLevelToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupingLevelToParentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupingLevelToResponsableIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupingLevelToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupingLevelToGroupingTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupingLevelToContractorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupingLevelToParentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupingLevelToContractorGroupingLevelsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupingLevelToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupingLevelToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupingLevelToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorCelulaTypeResolver<TParent = any> {
    celulaName?: ContractorCelulaToCelulaNameResolver<TParent>;
    description?: ContractorCelulaToDescriptionResolver<TParent>;
    active?: ContractorCelulaToActiveResolver<TParent>;
    projectId?: ContractorCelulaToProjectIdResolver<TParent>;
    ownerId?: ContractorCelulaToOwnerIdResolver<TParent>;
    contractors?: ContractorCelulaToContractorsResolver<TParent>;
    id?: ContractorCelulaToIdResolver<TParent>;
    createdAt?: ContractorCelulaToCreatedAtResolver<TParent>;
    updatedAt?: ContractorCelulaToUpdatedAtResolver<TParent>;
}
export interface ContractorCelulaToCelulaNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorCelulaToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorCelulaToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorCelulaToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorCelulaToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorCelulaToContractorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorCelulaToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorCelulaToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorCelulaToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IReferrerTypeResolver<TParent = any> {
    memberId?: ReferrerToMemberIdResolver<TParent>;
    projectId?: ReferrerToProjectIdResolver<TParent>;
    hiredDate?: ReferrerToHiredDateResolver<TParent>;
    email?: ReferrerToEmailResolver<TParent>;
    address?: ReferrerToAddressResolver<TParent>;
    operationFactures?: ReferrerToOperationFacturesResolver<TParent>;
    paymentType?: ReferrerToPaymentTypeResolver<TParent>;
    paymentFrequency?: ReferrerToPaymentFrequencyResolver<TParent>;
    referenceNumber?: ReferrerToReferenceNumberResolver<TParent>;
    bank?: ReferrerToBankResolver<TParent>;
    phones?: ReferrerToPhonesResolver<TParent>;
    referrerAccountStates?: ReferrerToReferrerAccountStatesResolver<TParent>;
    referrerBranches?: ReferrerToReferrerBranchesResolver<TParent>;
    contractors?: ReferrerToContractorsResolver<TParent>;
    involvedReferrer?: ReferrerToInvolvedReferrerResolver<TParent>;
    id?: ReferrerToIdResolver<TParent>;
    createdAt?: ReferrerToCreatedAtResolver<TParent>;
    updatedAt?: ReferrerToUpdatedAtResolver<TParent>;
}
export interface ReferrerToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerToHiredDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerToAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerToOperationFacturesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerToPaymentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerToPaymentFrequencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerToReferenceNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerToBankResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerToPhonesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerToReferrerAccountStatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerToReferrerBranchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerToContractorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerToInvolvedReferrerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IReferrerAccountStateTypeResolver<TParent = any> {
    projectId?: ReferrerAccountStateToProjectIdResolver<TParent>;
    ownerId?: ReferrerAccountStateToOwnerIdResolver<TParent>;
    folio?: ReferrerAccountStateToFolioResolver<TParent>;
    total?: ReferrerAccountStateToTotalResolver<TParent>;
    printDate?: ReferrerAccountStateToPrintDateResolver<TParent>;
    status?: ReferrerAccountStateToStatusResolver<TParent>;
    transactionNumber?: ReferrerAccountStateToTransactionNumberResolver<TParent>;
    reasonReject?: ReferrerAccountStateToReasonRejectResolver<TParent>;
    observation?: ReferrerAccountStateToObservationResolver<TParent>;
    referrerId?: ReferrerAccountStateToReferrerIdResolver<TParent>;
    referrer?: ReferrerAccountStateToReferrerResolver<TParent>;
    id?: ReferrerAccountStateToIdResolver<TParent>;
    createdAt?: ReferrerAccountStateToCreatedAtResolver<TParent>;
    updatedAt?: ReferrerAccountStateToUpdatedAtResolver<TParent>;
}
export interface ReferrerAccountStateToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerAccountStateToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerAccountStateToFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerAccountStateToTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerAccountStateToPrintDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerAccountStateToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerAccountStateToTransactionNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerAccountStateToReasonRejectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerAccountStateToObservationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerAccountStateToReferrerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerAccountStateToReferrerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerAccountStateToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerAccountStateToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerAccountStateToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IReferrerBranchTypeResolver<TParent = any> {
    projectAgentProviderId?: ReferrerBranchToProjectAgentProviderIdResolver<TParent>;
    projectAgentProviderBranchId?: ReferrerBranchToProjectAgentProviderBranchIdResolver<TParent>;
    referrerId?: ReferrerBranchToReferrerIdResolver<TParent>;
    comition?: ReferrerBranchToComitionResolver<TParent>;
    referrer?: ReferrerBranchToReferrerResolver<TParent>;
    projectAgentProvider?: ReferrerBranchToProjectAgentProviderResolver<TParent>;
    projectAgentProviderBranch?: ReferrerBranchToProjectAgentProviderBranchResolver<TParent>;
    id?: ReferrerBranchToIdResolver<TParent>;
    createdAt?: ReferrerBranchToCreatedAtResolver<TParent>;
    updatedAt?: ReferrerBranchToUpdatedAtResolver<TParent>;
}
export interface ReferrerBranchToProjectAgentProviderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerBranchToProjectAgentProviderBranchIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerBranchToReferrerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerBranchToComitionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerBranchToReferrerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerBranchToProjectAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerBranchToProjectAgentProviderBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerBranchToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerBranchToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerBranchToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInvolvedReferrerTypeResolver<TParent = any> {
    comisionVendedor?: InvolvedReferrerToComisionVendedorResolver<TParent>;
    ownerId?: InvolvedReferrerToOwnerIdResolver<TParent>;
    policeId?: InvolvedReferrerToPoliceIdResolver<TParent>;
    referrerId?: InvolvedReferrerToReferrerIdResolver<TParent>;
    projectId?: InvolvedReferrerToProjectIdResolver<TParent>;
    referrer?: InvolvedReferrerToReferrerResolver<TParent>;
    police?: InvolvedReferrerToPoliceResolver<TParent>;
    id?: InvolvedReferrerToIdResolver<TParent>;
    createdAt?: InvolvedReferrerToCreatedAtResolver<TParent>;
    updatedAt?: InvolvedReferrerToUpdatedAtResolver<TParent>;
}
export interface InvolvedReferrerToComisionVendedorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvolvedReferrerToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvolvedReferrerToPoliceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvolvedReferrerToReferrerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvolvedReferrerToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvolvedReferrerToReferrerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvolvedReferrerToPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvolvedReferrerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvolvedReferrerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvolvedReferrerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorProcessDocumentTypeResolver<TParent = any> {
    delivered?: ContractorProcessDocumentToDeliveredResolver<TParent>;
    validated?: ContractorProcessDocumentToValidatedResolver<TParent>;
    processDocumentId?: ContractorProcessDocumentToProcessDocumentIdResolver<TParent>;
    contractorId?: ContractorProcessDocumentToContractorIdResolver<TParent>;
    contractor?: ContractorProcessDocumentToContractorResolver<TParent>;
    processDocument?: ContractorProcessDocumentToProcessDocumentResolver<TParent>;
    id?: ContractorProcessDocumentToIdResolver<TParent>;
    createdAt?: ContractorProcessDocumentToCreatedAtResolver<TParent>;
    updatedAt?: ContractorProcessDocumentToUpdatedAtResolver<TParent>;
}
export interface ContractorProcessDocumentToDeliveredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorProcessDocumentToValidatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorProcessDocumentToProcessDocumentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorProcessDocumentToContractorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorProcessDocumentToContractorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorProcessDocumentToProcessDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorProcessDocumentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorProcessDocumentToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorProcessDocumentToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProcessDocumentTypeResolver<TParent = any> {
    name?: ProcessDocumentToNameResolver<TParent>;
    slug?: ProcessDocumentToSlugResolver<TParent>;
    active?: ProcessDocumentToActiveResolver<TParent>;
    typeAgentProvider?: ProcessDocumentToTypeAgentProviderResolver<TParent>;
    contractorProcessDocuments?: ProcessDocumentToContractorProcessDocumentsResolver<TParent>;
    id?: ProcessDocumentToIdResolver<TParent>;
    createdAt?: ProcessDocumentToCreatedAtResolver<TParent>;
    updatedAt?: ProcessDocumentToUpdatedAtResolver<TParent>;
}
export interface ProcessDocumentToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProcessDocumentToSlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProcessDocumentToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProcessDocumentToTypeAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProcessDocumentToContractorProcessDocumentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProcessDocumentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProcessDocumentToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProcessDocumentToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceQuoteTypeResolver<TParent = any> {
    projectAgentProviderBranchId?: PoliceQuoteToProjectAgentProviderBranchIdResolver<TParent>;
    ramoCode?: PoliceQuoteToRamoCodeResolver<TParent>;
    subRamoCode?: PoliceQuoteToSubRamoCodeResolver<TParent>;
    status?: PoliceQuoteToStatusResolver<TParent>;
    firstName?: PoliceQuoteToFirstNameResolver<TParent>;
    lastName?: PoliceQuoteToLastNameResolver<TParent>;
    secondLastName?: PoliceQuoteToSecondLastNameResolver<TParent>;
    email?: PoliceQuoteToEmailResolver<TParent>;
    phone?: PoliceQuoteToPhoneResolver<TParent>;
    car?: PoliceQuoteToCarResolver<TParent>;
    observations?: PoliceQuoteToObservationsResolver<TParent>;
    accidents?: PoliceQuoteToAccidentsResolver<TParent>;
    damages?: PoliceQuoteToDamagesResolver<TParent>;
    life?: PoliceQuoteToLifeResolver<TParent>;
    isComplete?: PoliceQuoteToIsCompleteResolver<TParent>;
    type?: PoliceQuoteToTypeResolver<TParent>;
    ownerId?: PoliceQuoteToOwnerIdResolver<TParent>;
    projectId?: PoliceQuoteToProjectIdResolver<TParent>;
    mainParent?: PoliceQuoteToMainParentResolver<TParent>;
    active?: PoliceQuoteToActiveResolver<TParent>;
    prospectId?: PoliceQuoteToProspectIdResolver<TParent>;
    agentProviders?: PoliceQuoteToAgentProvidersResolver<TParent>;
    selectedAgentProvider?: PoliceQuoteToSelectedAgentProviderResolver<TParent>;
    contractorId?: PoliceQuoteToContractorIdResolver<TParent>;
    contractor?: PoliceQuoteToContractorResolver<TParent>;
    projectAgentProviderBranch?: PoliceQuoteToProjectAgentProviderBranchResolver<TParent>;
    policeQuotePrimas?: PoliceQuoteToPoliceQuotePrimasResolver<TParent>;
    id?: PoliceQuoteToIdResolver<TParent>;
    createdAt?: PoliceQuoteToCreatedAtResolver<TParent>;
    updatedAt?: PoliceQuoteToUpdatedAtResolver<TParent>;
}
export interface PoliceQuoteToProjectAgentProviderBranchIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToRamoCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToSubRamoCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToSecondLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToObservationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToAccidentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToDamagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToLifeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToIsCompleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToMainParentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToProspectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToAgentProvidersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToSelectedAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToContractorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToContractorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToProjectAgentProviderBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToPoliceQuotePrimasResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceQuotePrimaTypeResolver<TParent = any> {
    aseguradora?: PoliceQuotePrimaToAseguradoraResolver<TParent>;
    prima?: PoliceQuotePrimaToPrimaResolver<TParent>;
    checked?: PoliceQuotePrimaToCheckedResolver<TParent>;
    projectId?: PoliceQuotePrimaToProjectIdResolver<TParent>;
    policeQuoteId?: PoliceQuotePrimaToPoliceQuoteIdResolver<TParent>;
    policeQuote?: PoliceQuotePrimaToPoliceQuoteResolver<TParent>;
    id?: PoliceQuotePrimaToIdResolver<TParent>;
    createdAt?: PoliceQuotePrimaToCreatedAtResolver<TParent>;
    updatedAt?: PoliceQuotePrimaToUpdatedAtResolver<TParent>;
}
export interface PoliceQuotePrimaToAseguradoraResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuotePrimaToPrimaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuotePrimaToCheckedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuotePrimaToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuotePrimaToPoliceQuoteIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuotePrimaToPoliceQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuotePrimaToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuotePrimaToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuotePrimaToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceAssignTypeResolver<TParent = any> {
    isOwner?: PoliceAssignToIsOwnerResolver<TParent>;
    active?: PoliceAssignToActiveResolver<TParent>;
    policeId?: PoliceAssignToPoliceIdResolver<TParent>;
    memberId?: PoliceAssignToMemberIdResolver<TParent>;
    police?: PoliceAssignToPoliceResolver<TParent>;
    id?: PoliceAssignToIdResolver<TParent>;
    createdAt?: PoliceAssignToCreatedAtResolver<TParent>;
    updatedAt?: PoliceAssignToUpdatedAtResolver<TParent>;
}
export interface PoliceAssignToIsOwnerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceAssignToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceAssignToPoliceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceAssignToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceAssignToPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceAssignToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceAssignToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceAssignToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPolicePendientTypeResolver<TParent = any> {
    email?: PolicePendientToEmailResolver<TParent>;
    isOwner?: PolicePendientToIsOwnerResolver<TParent>;
    active?: PolicePendientToActiveResolver<TParent>;
    policeId?: PolicePendientToPoliceIdResolver<TParent>;
    police?: PolicePendientToPoliceResolver<TParent>;
    id?: PolicePendientToIdResolver<TParent>;
    createdAt?: PolicePendientToCreatedAtResolver<TParent>;
    updatedAt?: PolicePendientToUpdatedAtResolver<TParent>;
}
export interface PolicePendientToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicePendientToIsOwnerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicePendientToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicePendientToPoliceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicePendientToPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicePendientToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicePendientToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicePendientToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IOldPoliceTypeResolver<TParent = any> {
    basePolicyId?: OldPoliceToBasePolicyIdResolver<TParent>;
    ownerId?: OldPoliceToOwnerIdResolver<TParent>;
    newPolicyId?: OldPoliceToNewPolicyIdResolver<TParent>;
    projectId?: OldPoliceToProjectIdResolver<TParent>;
    basePolice?: OldPoliceToBasePoliceResolver<TParent>;
    newPolice?: OldPoliceToNewPoliceResolver<TParent>;
    id?: OldPoliceToIdResolver<TParent>;
    createdAt?: OldPoliceToCreatedAtResolver<TParent>;
    updatedAt?: OldPoliceToUpdatedAtResolver<TParent>;
}
export interface OldPoliceToBasePolicyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OldPoliceToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OldPoliceToNewPolicyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OldPoliceToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OldPoliceToBasePoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OldPoliceToNewPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OldPoliceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OldPoliceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OldPoliceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoverageInPolicyTypeResolver<TParent = any> {
    name?: CoverageInPolicyToNameResolver<TParent>;
    sumInsured?: CoverageInPolicyToSumInsuredResolver<TParent>;
    deductible?: CoverageInPolicyToDeductibleResolver<TParent>;
    prima?: CoverageInPolicyToPrimaResolver<TParent>;
    coinsurance?: CoverageInPolicyToCoinsuranceResolver<TParent>;
    topecoinsurance?: CoverageInPolicyToTopecoinsuranceResolver<TParent>;
    priority?: CoverageInPolicyToPriorityResolver<TParent>;
    ownerId?: CoverageInPolicyToOwnerIdResolver<TParent>;
    projectId?: CoverageInPolicyToProjectIdResolver<TParent>;
    policyId?: CoverageInPolicyToPolicyIdResolver<TParent>;
    packageId?: CoverageInPolicyToPackageIdResolver<TParent>;
    coveragePackage?: CoverageInPolicyToCoveragePackageResolver<TParent>;
    police?: CoverageInPolicyToPoliceResolver<TParent>;
    id?: CoverageInPolicyToIdResolver<TParent>;
    createdAt?: CoverageInPolicyToCreatedAtResolver<TParent>;
    updatedAt?: CoverageInPolicyToUpdatedAtResolver<TParent>;
}
export interface CoverageInPolicyToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageInPolicyToSumInsuredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageInPolicyToDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageInPolicyToPrimaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageInPolicyToCoinsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageInPolicyToTopecoinsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageInPolicyToPriorityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageInPolicyToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageInPolicyToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageInPolicyToPolicyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageInPolicyToPackageIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageInPolicyToCoveragePackageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageInPolicyToPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageInPolicyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageInPolicyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageInPolicyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceFileTypeResolver<TParent = any> {
    url?: PoliceFileToUrlResolver<TParent>;
    ownerId?: PoliceFileToOwnerIdResolver<TParent>;
    projectId?: PoliceFileToProjectIdResolver<TParent>;
    name?: PoliceFileToNameResolver<TParent>;
    sensible?: PoliceFileToSensibleResolver<TParent>;
    shared?: PoliceFileToSharedResolver<TParent>;
    documentType?: PoliceFileToDocumentTypeResolver<TParent>;
    checked?: PoliceFileToCheckedResolver<TParent>;
    active?: PoliceFileToActiveResolver<TParent>;
    folio?: PoliceFileToFolioResolver<TParent>;
    baseModel?: PoliceFileToBaseModelResolver<TParent>;
    height?: PoliceFileToHeightResolver<TParent>;
    width?: PoliceFileToWidthResolver<TParent>;
    policeId?: PoliceFileToPoliceIdResolver<TParent>;
    police?: PoliceFileToPoliceResolver<TParent>;
    id?: PoliceFileToIdResolver<TParent>;
    createdAt?: PoliceFileToCreatedAtResolver<TParent>;
    updatedAt?: PoliceFileToUpdatedAtResolver<TParent>;
}
export interface PoliceFileToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceFileToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceFileToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceFileToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceFileToSensibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceFileToSharedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceFileToDocumentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceFileToCheckedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceFileToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceFileToFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceFileToBaseModelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceFileToHeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceFileToWidthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceFileToPoliceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceFileToPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceFileToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceFileToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceFileToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IComissionTypeResolver<TParent = any> {
    projectAgentProviderBranchId?: ComissionToProjectAgentProviderBranchIdResolver<TParent>;
    name?: ComissionToNameResolver<TParent>;
    amount?: ComissionToAmountResolver<TParent>;
    uDI?: ComissionToUDIResolver<TParent>;
    other?: ComissionToOtherResolver<TParent>;
    observations?: ComissionToObservationsResolver<TParent>;
    efectiveDate?: ComissionToEfectiveDateResolver<TParent>;
    expireDate?: ComissionToExpireDateResolver<TParent>;
    commisionRPF?: ComissionToCommisionRPFResolver<TParent>;
    otherRPF?: ComissionToOtherRPFResolver<TParent>;
    rigth?: ComissionToRigthResolver<TParent>;
    otherRigths?: ComissionToOtherRigthsResolver<TParent>;
    initialPeriod?: ComissionToInitialPeriodResolver<TParent>;
    subSequentPeriod?: ComissionToSubSequentPeriodResolver<TParent>;
    anualRPF?: ComissionToAnualRPFResolver<TParent>;
    bimestralRPF?: ComissionToBimestralRPFResolver<TParent>;
    mensualRPF?: ComissionToMensualRPFResolver<TParent>;
    trimestralRPF?: ComissionToTrimestralRPFResolver<TParent>;
    rigthUDI?: ComissionToRigthUDIResolver<TParent>;
    rigthComission?: ComissionToRigthComissionResolver<TParent>;
    keyId?: ComissionToKeyIdResolver<TParent>;
    projectAgentProviderBranch?: ComissionToProjectAgentProviderBranchResolver<TParent>;
    agentKey?: ComissionToAgentKeyResolver<TParent>;
    id?: ComissionToIdResolver<TParent>;
    createdAt?: ComissionToCreatedAtResolver<TParent>;
    updatedAt?: ComissionToUpdatedAtResolver<TParent>;
}
export interface ComissionToProjectAgentProviderBranchIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToUDIResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToOtherResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToObservationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToEfectiveDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToExpireDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToCommisionRPFResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToOtherRPFResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToRigthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToOtherRigthsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToInitialPeriodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToSubSequentPeriodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToAnualRPFResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToBimestralRPFResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToMensualRPFResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToTrimestralRPFResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToRigthUDIResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToRigthComissionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToKeyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToProjectAgentProviderBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToAgentKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerReminderProjectAgentProviderTypeResolver<TParent = any> {
    insurerReminderId?: InsurerReminderProjectAgentProviderToInsurerReminderIdResolver<TParent>;
    projectAgentProviderId?: InsurerReminderProjectAgentProviderToProjectAgentProviderIdResolver<TParent>;
    projectId?: InsurerReminderProjectAgentProviderToProjectIdResolver<TParent>;
    insurerReminder?: InsurerReminderProjectAgentProviderToInsurerReminderResolver<TParent>;
    projectAgentProvider?: InsurerReminderProjectAgentProviderToProjectAgentProviderResolver<TParent>;
    id?: InsurerReminderProjectAgentProviderToIdResolver<TParent>;
    createdAt?: InsurerReminderProjectAgentProviderToCreatedAtResolver<TParent>;
    updatedAt?: InsurerReminderProjectAgentProviderToUpdatedAtResolver<TParent>;
}
export interface InsurerReminderProjectAgentProviderToInsurerReminderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderProjectAgentProviderToProjectAgentProviderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderProjectAgentProviderToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderProjectAgentProviderToInsurerReminderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderProjectAgentProviderToProjectAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderProjectAgentProviderToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderProjectAgentProviderToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderProjectAgentProviderToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerReminderTypeResolver<TParent = any> {
    name?: InsurerReminderToNameResolver<TParent>;
    description?: InsurerReminderToDescriptionResolver<TParent>;
    sended?: InsurerReminderToSendedResolver<TParent>;
    type?: InsurerReminderToTypeResolver<TParent>;
    instanceType?: InsurerReminderToInstanceTypeResolver<TParent>;
    reminderDate?: InsurerReminderToReminderDateResolver<TParent>;
    projectId?: InsurerReminderToProjectIdResolver<TParent>;
    insurerReminderRecords?: InsurerReminderToInsurerReminderRecordsResolver<TParent>;
    insurerReminderSubBranchs?: InsurerReminderToInsurerReminderSubBranchsResolver<TParent>;
    insurerReminderProjectAgentProviders?: InsurerReminderToInsurerReminderProjectAgentProvidersResolver<TParent>;
    id?: InsurerReminderToIdResolver<TParent>;
    createdAt?: InsurerReminderToCreatedAtResolver<TParent>;
    updatedAt?: InsurerReminderToUpdatedAtResolver<TParent>;
}
export interface InsurerReminderToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderToSendedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderToInstanceTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderToReminderDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderToInsurerReminderRecordsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderToInsurerReminderSubBranchsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderToInsurerReminderProjectAgentProvidersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerReminderRecordTypeResolver<TParent = any> {
    insurerReminderId?: InsurerReminderRecordToInsurerReminderIdResolver<TParent>;
    seen?: InsurerReminderRecordToSeenResolver<TParent>;
    projectId?: InsurerReminderRecordToProjectIdResolver<TParent>;
    recordId?: InsurerReminderRecordToRecordIdResolver<TParent>;
    recordModel?: InsurerReminderRecordToRecordModelResolver<TParent>;
    insurerReminder?: InsurerReminderRecordToInsurerReminderResolver<TParent>;
    id?: InsurerReminderRecordToIdResolver<TParent>;
    createdAt?: InsurerReminderRecordToCreatedAtResolver<TParent>;
    updatedAt?: InsurerReminderRecordToUpdatedAtResolver<TParent>;
}
export interface InsurerReminderRecordToInsurerReminderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderRecordToSeenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderRecordToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderRecordToRecordIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderRecordToRecordModelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderRecordToInsurerReminderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderRecordToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderRecordToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderRecordToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerReminderSubBranchTypeResolver<TParent = any> {
    insurerReminderId?: InsurerReminderSubBranchToInsurerReminderIdResolver<TParent>;
    subBranch?: InsurerReminderSubBranchToSubBranchResolver<TParent>;
    projectId?: InsurerReminderSubBranchToProjectIdResolver<TParent>;
    insurerReminder?: InsurerReminderSubBranchToInsurerReminderResolver<TParent>;
    id?: InsurerReminderSubBranchToIdResolver<TParent>;
    createdAt?: InsurerReminderSubBranchToCreatedAtResolver<TParent>;
    updatedAt?: InsurerReminderSubBranchToUpdatedAtResolver<TParent>;
}
export interface InsurerReminderSubBranchToInsurerReminderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderSubBranchToSubBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderSubBranchToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderSubBranchToInsurerReminderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderSubBranchToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderSubBranchToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderSubBranchToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectAgentProviderEmailReminderTypeResolver<TParent = any> {
    model?: ProjectAgentProviderEmailReminderToModelResolver<TParent>;
    text?: ProjectAgentProviderEmailReminderToTextResolver<TParent>;
    footer?: ProjectAgentProviderEmailReminderToFooterResolver<TParent>;
    ownerId?: ProjectAgentProviderEmailReminderToOwnerIdResolver<TParent>;
    frequency?: ProjectAgentProviderEmailReminderToFrequencyResolver<TParent>;
    ramoCode?: ProjectAgentProviderEmailReminderToRamoCodeResolver<TParent>;
    policyType?: ProjectAgentProviderEmailReminderToPolicyTypeResolver<TParent>;
    chargeType?: ProjectAgentProviderEmailReminderToChargeTypeResolver<TParent>;
    dateType?: ProjectAgentProviderEmailReminderToDateTypeResolver<TParent>;
    projectAgentProviders?: ProjectAgentProviderEmailReminderToProjectAgentProvidersResolver<TParent>;
    subbranches?: ProjectAgentProviderEmailReminderToSubbranchesResolver<TParent>;
    projectAgentProviderId?: ProjectAgentProviderEmailReminderToProjectAgentProviderIdResolver<TParent>;
    projectAgentProvider?: ProjectAgentProviderEmailReminderToProjectAgentProviderResolver<TParent>;
    id?: ProjectAgentProviderEmailReminderToIdResolver<TParent>;
    createdAt?: ProjectAgentProviderEmailReminderToCreatedAtResolver<TParent>;
    updatedAt?: ProjectAgentProviderEmailReminderToUpdatedAtResolver<TParent>;
}
export interface ProjectAgentProviderEmailReminderToModelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderEmailReminderToTextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderEmailReminderToFooterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderEmailReminderToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderEmailReminderToFrequencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderEmailReminderToRamoCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderEmailReminderToPolicyTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderEmailReminderToChargeTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderEmailReminderToDateTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderEmailReminderToProjectAgentProvidersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderEmailReminderToSubbranchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderEmailReminderToProjectAgentProviderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderEmailReminderToProjectAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderEmailReminderToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderEmailReminderToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderEmailReminderToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBeneficiarieCollectionSegmentTypeResolver<TParent = any> {
    items?: BeneficiarieCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: BeneficiarieCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: BeneficiarieCollectionSegmentToTotalCountResolver<TParent>;
}
export interface BeneficiarieCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeneficiarieCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFormAccidentDiseaseCollectionSegmentTypeResolver<TParent = any> {
    items?: FormAccidentDiseaseCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: FormAccidentDiseaseCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: FormAccidentDiseaseCollectionSegmentToTotalCountResolver<TParent>;
}
export interface FormAccidentDiseaseCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAccidentDiseaseCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAccidentDiseaseCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFormAutomobileDamageCollectionSegmentTypeResolver<TParent = any> {
    items?: FormAutomobileDamageCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: FormAutomobileDamageCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: FormAutomobileDamageCollectionSegmentToTotalCountResolver<TParent>;
}
export interface FormAutomobileDamageCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormAutomobileDamageCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFormCarCatalogCollectionSegmentTypeResolver<TParent = any> {
    items?: FormCarCatalogCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: FormCarCatalogCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: FormCarCatalogCollectionSegmentToTotalCountResolver<TParent>;
}
export interface FormCarCatalogCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormCarCatalogCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormCarCatalogCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFormCarCatalogTypeResolver<TParent = any> {
    carModel?: FormCarCatalogToCarModelResolver<TParent>;
    carBrand?: FormCarCatalogToCarBrandResolver<TParent>;
    carYear?: FormCarCatalogToCarYearResolver<TParent>;
    description?: FormCarCatalogToDescriptionResolver<TParent>;
    carSubbrand?: FormCarCatalogToCarSubbrandResolver<TParent>;
    shortDescription?: FormCarCatalogToShortDescriptionResolver<TParent>;
    carType?: FormCarCatalogToCarTypeResolver<TParent>;
    carOccupants?: FormCarCatalogToCarOccupantsResolver<TParent>;
    carClass?: FormCarCatalogToCarClassResolver<TParent>;
    carSearch?: FormCarCatalogToCarSearchResolver<TParent>;
    id?: FormCarCatalogToIdResolver<TParent>;
    createdAt?: FormCarCatalogToCreatedAtResolver<TParent>;
    updatedAt?: FormCarCatalogToUpdatedAtResolver<TParent>;
}
export interface FormCarCatalogToCarModelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormCarCatalogToCarBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormCarCatalogToCarYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormCarCatalogToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormCarCatalogToCarSubbrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormCarCatalogToShortDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormCarCatalogToCarTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormCarCatalogToCarOccupantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormCarCatalogToCarClassResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormCarCatalogToCarSearchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormCarCatalogToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormCarCatalogToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormCarCatalogToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFormDamageCollectionSegmentTypeResolver<TParent = any> {
    items?: FormDamageCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: FormDamageCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: FormDamageCollectionSegmentToTotalCountResolver<TParent>;
}
export interface FormDamageCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormDamageCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFormLifeCollectionSegmentTypeResolver<TParent = any> {
    items?: FormLifeCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: FormLifeCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: FormLifeCollectionSegmentToTotalCountResolver<TParent>;
}
export interface FormLifeCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormLifeCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface FormLifeCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInvolvedReferrerCollectionSegmentTypeResolver<TParent = any> {
    items?: InvolvedReferrerCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InvolvedReferrerCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InvolvedReferrerCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InvolvedReferrerCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvolvedReferrerCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InvolvedReferrerCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IOldPoliceCollectionSegmentTypeResolver<TParent = any> {
    items?: OldPoliceCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: OldPoliceCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: OldPoliceCollectionSegmentToTotalCountResolver<TParent>;
}
export interface OldPoliceCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OldPoliceCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface OldPoliceCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPersonalInformationCollectionSegmentTypeResolver<TParent = any> {
    items?: PersonalInformationCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: PersonalInformationCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: PersonalInformationCollectionSegmentToTotalCountResolver<TParent>;
}
export interface PersonalInformationCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PersonalInformationCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceCollectionSegmentTypeResolver<TParent = any> {
    items?: PoliceCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: PoliceCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: PoliceCollectionSegmentToTotalCountResolver<TParent>;
}
export interface PoliceCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceAssignCollectionSegmentTypeResolver<TParent = any> {
    items?: PoliceAssignCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: PoliceAssignCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: PoliceAssignCollectionSegmentToTotalCountResolver<TParent>;
}
export interface PoliceAssignCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceAssignCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceAssignCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPolicePendientCollectionSegmentTypeResolver<TParent = any> {
    items?: PolicePendientCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: PolicePendientCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: PolicePendientCollectionSegmentToTotalCountResolver<TParent>;
}
export interface PolicePendientCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicePendientCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicePendientCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceQuoteCollectionSegmentTypeResolver<TParent = any> {
    items?: PoliceQuoteCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: PoliceQuoteCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: PoliceQuoteCollectionSegmentToTotalCountResolver<TParent>;
}
export interface PoliceQuoteCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuoteCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceQuotePrimaCollectionSegmentTypeResolver<TParent = any> {
    items?: PoliceQuotePrimaCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: PoliceQuotePrimaCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: PoliceQuotePrimaCollectionSegmentToTotalCountResolver<TParent>;
}
export interface PoliceQuotePrimaCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuotePrimaCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceQuotePrimaCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRelationShipCollectionSegmentTypeResolver<TParent = any> {
    items?: RelationShipCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: RelationShipCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: RelationShipCollectionSegmentToTotalCountResolver<TParent>;
}
export interface RelationShipCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RelationShipCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISucursalCollectionSegmentTypeResolver<TParent = any> {
    items?: SucursalCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: SucursalCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: SucursalCollectionSegmentToTotalCountResolver<TParent>;
}
export interface SucursalCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SucursalCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SucursalCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEndorsementCollectionSegmentTypeResolver<TParent = any> {
    items?: EndorsementCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: EndorsementCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: EndorsementCollectionSegmentToTotalCountResolver<TParent>;
}
export interface EndorsementCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEndorsementCertCollectionSegmentTypeResolver<TParent = any> {
    items?: EndorsementCertCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: EndorsementCertCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: EndorsementCertCollectionSegmentToTotalCountResolver<TParent>;
}
export interface EndorsementCertCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementCertCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface EndorsementCertCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterCollectionSegmentTypeResolver<TParent = any> {
    items?: SinisterCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: SinisterCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: SinisterCollectionSegmentToTotalCountResolver<TParent>;
}
export interface SinisterCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterAccidentCollectionSegmentTypeResolver<TParent = any> {
    items?: SinisterAccidentCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: SinisterAccidentCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: SinisterAccidentCollectionSegmentToTotalCountResolver<TParent>;
}
export interface SinisterAccidentCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAccidentCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterAilingCollectionSegmentTypeResolver<TParent = any> {
    items?: SinisterAilingCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: SinisterAilingCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: SinisterAilingCollectionSegmentToTotalCountResolver<TParent>;
}
export interface SinisterAilingCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAilingCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterAilingCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterCarCollectionSegmentTypeResolver<TParent = any> {
    items?: SinisterCarCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: SinisterCarCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: SinisterCarCollectionSegmentToTotalCountResolver<TParent>;
}
export interface SinisterCarCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterCarContactCollectionSegmentTypeResolver<TParent = any> {
    items?: SinisterCarContactCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: SinisterCarContactCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: SinisterCarContactCollectionSegmentToTotalCountResolver<TParent>;
}
export interface SinisterCarContactCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarContactCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterCarContactCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterDamageCollectionSegmentTypeResolver<TParent = any> {
    items?: SinisterDamageCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: SinisterDamageCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: SinisterDamageCollectionSegmentToTotalCountResolver<TParent>;
}
export interface SinisterDamageCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterDamageContactCollectionSegmentTypeResolver<TParent = any> {
    items?: SinisterDamageContactCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: SinisterDamageContactCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: SinisterDamageContactCollectionSegmentToTotalCountResolver<TParent>;
}
export interface SinisterDamageContactCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageContactCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterDamageContactCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterFacturaCollectionSegmentTypeResolver<TParent = any> {
    items?: SinisterFacturaCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: SinisterFacturaCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: SinisterFacturaCollectionSegmentToTotalCountResolver<TParent>;
}
export interface SinisterFacturaCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterFacturaCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterFacturaCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterHospitalCollectionSegmentTypeResolver<TParent = any> {
    items?: SinisterHospitalCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: SinisterHospitalCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: SinisterHospitalCollectionSegmentToTotalCountResolver<TParent>;
}
export interface SinisterHospitalCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterHospitalCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterHospitalCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterHospitalTypeResolver<TParent = any> {
    description?: SinisterHospitalToDescriptionResolver<TParent>;
    id?: SinisterHospitalToIdResolver<TParent>;
    createdAt?: SinisterHospitalToCreatedAtResolver<TParent>;
    updatedAt?: SinisterHospitalToUpdatedAtResolver<TParent>;
}
export interface SinisterHospitalToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterHospitalToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterHospitalToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterHospitalToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterLifeCollectionSegmentTypeResolver<TParent = any> {
    items?: SinisterLifeCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: SinisterLifeCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: SinisterLifeCollectionSegmentToTotalCountResolver<TParent>;
}
export interface SinisterLifeCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterLifeContactCollectionSegmentTypeResolver<TParent = any> {
    items?: SinisterLifeContactCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: SinisterLifeContactCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: SinisterLifeContactCollectionSegmentToTotalCountResolver<TParent>;
}
export interface SinisterLifeContactCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeContactCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeContactCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterLifeContactTypeResolver<TParent = any> {
    firstName?: SinisterLifeContactToFirstNameResolver<TParent>;
    lastName?: SinisterLifeContactToLastNameResolver<TParent>;
    secondLastName?: SinisterLifeContactToSecondLastNameResolver<TParent>;
    phone?: SinisterLifeContactToPhoneResolver<TParent>;
    email?: SinisterLifeContactToEmailResolver<TParent>;
    references?: SinisterLifeContactToReferencesResolver<TParent>;
    sinisterLifeId?: SinisterLifeContactToSinisterLifeIdResolver<TParent>;
    projectId?: SinisterLifeContactToProjectIdResolver<TParent>;
    sinisterLife?: SinisterLifeContactToSinisterLifeResolver<TParent>;
    id?: SinisterLifeContactToIdResolver<TParent>;
    createdAt?: SinisterLifeContactToCreatedAtResolver<TParent>;
    updatedAt?: SinisterLifeContactToUpdatedAtResolver<TParent>;
}
export interface SinisterLifeContactToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeContactToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeContactToSecondLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeContactToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeContactToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeContactToReferencesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeContactToSinisterLifeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeContactToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeContactToSinisterLifeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeContactToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeContactToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SinisterLifeContactToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceReceiptCollectionSegmentTypeResolver<TParent = any> {
    items?: PoliceReceiptCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: PoliceReceiptCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: PoliceReceiptCollectionSegmentToTotalCountResolver<TParent>;
}
export interface PoliceReceiptCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceReceiptAccountCollectionSegmentTypeResolver<TParent = any> {
    items?: PoliceReceiptAccountCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: PoliceReceiptAccountCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: PoliceReceiptAccountCollectionSegmentToTotalCountResolver<TParent>;
}
export interface PoliceReceiptAccountCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceReceiptAccountStateCollectionSegmentTypeResolver<TParent = any> {
    items?: PoliceReceiptAccountStateCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: PoliceReceiptAccountStateCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: PoliceReceiptAccountStateCollectionSegmentToTotalCountResolver<TParent>;
}
export interface PoliceReceiptAccountStateCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountStateCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptAccountStateCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceReceiptFolioCollectionSegmentTypeResolver<TParent = any> {
    items?: PoliceReceiptFolioCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: PoliceReceiptFolioCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: PoliceReceiptFolioCollectionSegmentToTotalCountResolver<TParent>;
}
export interface PoliceReceiptFolioCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptFolioCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptFolioCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceReceiptFolioTypeResolver<TParent = any> {
    paymentMethod?: PoliceReceiptFolioToPaymentMethodResolver<TParent>;
    paymentDocument?: PoliceReceiptFolioToPaymentDocumentResolver<TParent>;
    currentRate?: PoliceReceiptFolioToCurrentRateResolver<TParent>;
    paymentDate?: PoliceReceiptFolioToPaymentDateResolver<TParent>;
    folio?: PoliceReceiptFolioToFolioResolver<TParent>;
    bank?: PoliceReceiptFolioToBankResolver<TParent>;
    projectId?: PoliceReceiptFolioToProjectIdResolver<TParent>;
    id?: PoliceReceiptFolioToIdResolver<TParent>;
    createdAt?: PoliceReceiptFolioToCreatedAtResolver<TParent>;
    updatedAt?: PoliceReceiptFolioToUpdatedAtResolver<TParent>;
}
export interface PoliceReceiptFolioToPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptFolioToPaymentDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptFolioToCurrentRateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptFolioToPaymentDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptFolioToFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptFolioToBankResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptFolioToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptFolioToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptFolioToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptFolioToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceReceiptPaymentCollectionSegmentTypeResolver<TParent = any> {
    items?: PoliceReceiptPaymentCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: PoliceReceiptPaymentCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: PoliceReceiptPaymentCollectionSegmentToTotalCountResolver<TParent>;
}
export interface PoliceReceiptPaymentCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptPaymentCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceReceiptPaymentCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceFileCollectionSegmentTypeResolver<TParent = any> {
    items?: PoliceFileCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: PoliceFileCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: PoliceFileCollectionSegmentToTotalCountResolver<TParent>;
}
export interface PoliceFileCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceFileCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PoliceFileCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerCommentCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerCommentCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerCommentCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerCommentCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerCommentCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCommentCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCommentCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerCommentTypeResolver<TParent = any> {
    model?: InsurerCommentToModelResolver<TParent>;
    modelId?: InsurerCommentToModelIdResolver<TParent>;
    content?: InsurerCommentToContentResolver<TParent>;
    isChild?: InsurerCommentToIsChildResolver<TParent>;
    memberId?: InsurerCommentToMemberIdResolver<TParent>;
    hasReminder?: InsurerCommentToHasReminderResolver<TParent>;
    reminderDate?: InsurerCommentToReminderDateResolver<TParent>;
    taskModel?: InsurerCommentToTaskModelResolver<TParent>;
    projectId?: InsurerCommentToProjectIdResolver<TParent>;
    parentId?: InsurerCommentToParentIdResolver<TParent>;
    parent?: InsurerCommentToParentResolver<TParent>;
    insurerComments?: InsurerCommentToInsurerCommentsResolver<TParent>;
    insurerLogEmails?: InsurerCommentToInsurerLogEmailsResolver<TParent>;
    insurerTickets?: InsurerCommentToInsurerTicketsResolver<TParent>;
    id?: InsurerCommentToIdResolver<TParent>;
    createdAt?: InsurerCommentToCreatedAtResolver<TParent>;
    updatedAt?: InsurerCommentToUpdatedAtResolver<TParent>;
}
export interface InsurerCommentToModelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCommentToModelIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCommentToContentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCommentToIsChildResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCommentToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCommentToHasReminderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCommentToReminderDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCommentToTaskModelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCommentToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCommentToParentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCommentToParentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCommentToInsurerCommentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCommentToInsurerLogEmailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCommentToInsurerTicketsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCommentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCommentToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerCommentToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerLogEmailTypeResolver<TParent = any> {
    moldel?: InsurerLogEmailToMoldelResolver<TParent>;
    associatedId?: InsurerLogEmailToAssociatedIdResolver<TParent>;
    to?: InsurerLogEmailToToResolver<TParent>;
    cC?: InsurerLogEmailToCCResolver<TParent>;
    cCO?: InsurerLogEmailToCCOResolver<TParent>;
    subject?: InsurerLogEmailToSubjectResolver<TParent>;
    body?: InsurerLogEmailToBodyResolver<TParent>;
    file?: InsurerLogEmailToFileResolver<TParent>;
    insurerCommentId?: InsurerLogEmailToInsurerCommentIdResolver<TParent>;
    insurerLogId?: InsurerLogEmailToInsurerLogIdResolver<TParent>;
    insurerComment?: InsurerLogEmailToInsurerCommentResolver<TParent>;
    insurerLog?: InsurerLogEmailToInsurerLogResolver<TParent>;
    id?: InsurerLogEmailToIdResolver<TParent>;
    createdAt?: InsurerLogEmailToCreatedAtResolver<TParent>;
    updatedAt?: InsurerLogEmailToUpdatedAtResolver<TParent>;
}
export interface InsurerLogEmailToMoldelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogEmailToAssociatedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogEmailToToResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogEmailToCCResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogEmailToCCOResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogEmailToSubjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogEmailToBodyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogEmailToFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogEmailToInsurerCommentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogEmailToInsurerLogIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogEmailToInsurerCommentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogEmailToInsurerLogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogEmailToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogEmailToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogEmailToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerLogTypeResolver<TParent = any> {
    moldel?: InsurerLogToMoldelResolver<TParent>;
    event?: InsurerLogToEventResolver<TParent>;
    associatedId?: InsurerLogToAssociatedIdResolver<TParent>;
    identifier?: InsurerLogToIdentifierResolver<TParent>;
    memberId?: InsurerLogToMemberIdResolver<TParent>;
    projectId?: InsurerLogToProjectIdResolver<TParent>;
    original?: InsurerLogToOriginalResolver<TParent>;
    change?: InsurerLogToChangeResolver<TParent>;
    insurerLogEmails?: InsurerLogToInsurerLogEmailsResolver<TParent>;
    id?: InsurerLogToIdResolver<TParent>;
    createdAt?: InsurerLogToCreatedAtResolver<TParent>;
    updatedAt?: InsurerLogToUpdatedAtResolver<TParent>;
}
export interface InsurerLogToMoldelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogToEventResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogToAssociatedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogToIdentifierResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogToOriginalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogToChangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogToInsurerLogEmailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerTicketTypeResolver<TParent = any> {
    title?: InsurerTicketToTitleResolver<TParent>;
    description?: InsurerTicketToDescriptionResolver<TParent>;
    date?: InsurerTicketToDateResolver<TParent>;
    priority?: InsurerTicketToPriorityResolver<TParent>;
    closeDay?: InsurerTicketToCloseDayResolver<TParent>;
    closed?: InsurerTicketToClosedResolver<TParent>;
    identifier?: InsurerTicketToIdentifierResolver<TParent>;
    assignedId?: InsurerTicketToAssignedIdResolver<TParent>;
    ownerId?: InsurerTicketToOwnerIdResolver<TParent>;
    archived?: InsurerTicketToArchivedResolver<TParent>;
    associated?: InsurerTicketToAssociatedResolver<TParent>;
    model?: InsurerTicketToModelResolver<TParent>;
    route?: InsurerTicketToRouteResolver<TParent>;
    concept?: InsurerTicketToConceptResolver<TParent>;
    insurerCommentId?: InsurerTicketToInsurerCommentIdResolver<TParent>;
    closedBy?: InsurerTicketToClosedByResolver<TParent>;
    projectId?: InsurerTicketToProjectIdResolver<TParent>;
    reassingBy?: InsurerTicketToReassingByResolver<TParent>;
    reassignDate?: InsurerTicketToReassignDateResolver<TParent>;
    insurerComment?: InsurerTicketToInsurerCommentResolver<TParent>;
    insurerInvolved?: InsurerTicketToInsurerInvolvedResolver<TParent>;
    id?: InsurerTicketToIdResolver<TParent>;
    createdAt?: InsurerTicketToCreatedAtResolver<TParent>;
    updatedAt?: InsurerTicketToUpdatedAtResolver<TParent>;
}
export interface InsurerTicketToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToPriorityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToCloseDayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToClosedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToIdentifierResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToAssignedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToArchivedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToAssociatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToModelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToRouteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToConceptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToInsurerCommentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToClosedByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToReassingByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToReassignDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToInsurerCommentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToInsurerInvolvedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerInvolvedTypeResolver<TParent = any> {
    involvedId?: InsurerInvolvedToInvolvedIdResolver<TParent>;
    ownerId?: InsurerInvolvedToOwnerIdResolver<TParent>;
    personId?: InsurerInvolvedToPersonIdResolver<TParent>;
    projetId?: InsurerInvolvedToProjetIdResolver<TParent>;
    insurerTicket?: InsurerInvolvedToInsurerTicketResolver<TParent>;
    id?: InsurerInvolvedToIdResolver<TParent>;
    createdAt?: InsurerInvolvedToCreatedAtResolver<TParent>;
    updatedAt?: InsurerInvolvedToUpdatedAtResolver<TParent>;
}
export interface InsurerInvolvedToInvolvedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerInvolvedToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerInvolvedToPersonIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerInvolvedToProjetIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerInvolvedToInsurerTicketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerInvolvedToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerInvolvedToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerInvolvedToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerFileReadingCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerFileReadingCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerFileReadingCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerFileReadingCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerFileReadingCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerFileReadingTypeResolver<TParent = any> {
    projectId?: InsurerFileReadingToProjectIdResolver<TParent>;
    name?: InsurerFileReadingToNameResolver<TParent>;
    policeType?: InsurerFileReadingToPoliceTypeResolver<TParent>;
    insurer?: InsurerFileReadingToInsurerResolver<TParent>;
    branch?: InsurerFileReadingToBranchResolver<TParent>;
    subBranch?: InsurerFileReadingToSubBranchResolver<TParent>;
    ownerId?: InsurerFileReadingToOwnerIdResolver<TParent>;
    id?: InsurerFileReadingToIdResolver<TParent>;
    createdAt?: InsurerFileReadingToCreatedAtResolver<TParent>;
    updatedAt?: InsurerFileReadingToUpdatedAtResolver<TParent>;
}
export interface InsurerFileReadingToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingToPoliceTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingToInsurerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingToBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingToSubBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerFileReadingTagCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerFileReadingTagCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerFileReadingTagCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerFileReadingTagCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerFileReadingTagCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingTagCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingTagCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerFileReadingTagTypeResolver<TParent = any> {
    area?: InsurerFileReadingTagToAreaResolver<TParent>;
    cssClass?: InsurerFileReadingTagToCssClassResolver<TParent>;
    height?: InsurerFileReadingTagToHeightResolver<TParent>;
    width?: InsurerFileReadingTagToWidthResolver<TParent>;
    name?: InsurerFileReadingTagToNameResolver<TParent>;
    pageNumber?: InsurerFileReadingTagToPageNumberResolver<TParent>;
    tag?: InsurerFileReadingTagToTagResolver<TParent>;
    x?: InsurerFileReadingTagToXResolver<TParent>;
    y?: InsurerFileReadingTagToYResolver<TParent>;
    z?: InsurerFileReadingTagToZResolver<TParent>;
    projectId?: InsurerFileReadingTagToProjectIdResolver<TParent>;
    ownerId?: InsurerFileReadingTagToOwnerIdResolver<TParent>;
    id?: InsurerFileReadingTagToIdResolver<TParent>;
    createdAt?: InsurerFileReadingTagToCreatedAtResolver<TParent>;
    updatedAt?: InsurerFileReadingTagToUpdatedAtResolver<TParent>;
}
export interface InsurerFileReadingTagToAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingTagToCssClassResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingTagToHeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingTagToWidthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingTagToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingTagToPageNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingTagToTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingTagToXResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingTagToYResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingTagToZResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingTagToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingTagToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingTagToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingTagToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerFileReadingTagToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerInvolvedCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerInvolvedCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerInvolvedCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerInvolvedCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerInvolvedCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerInvolvedCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerInvolvedCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerLogCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerLogCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerLogCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerLogCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerLogCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerLogEmailCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerLogEmailCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerLogEmailCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerLogEmailCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerLogEmailCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogEmailCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerLogEmailCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerOrgInfoCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerOrgInfoCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerOrgInfoCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerOrgInfoCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerOrgInfoCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerOrgInfoTypeResolver<TParent = any> {
    policeRequest?: InsurerOrgInfoToPoliceRequestResolver<TParent>;
    endosoRequest?: InsurerOrgInfoToEndosoRequestResolver<TParent>;
    renewal?: InsurerOrgInfoToRenewalResolver<TParent>;
    policeRecord?: InsurerOrgInfoToPoliceRecordResolver<TParent>;
    endosoRecord?: InsurerOrgInfoToEndosoRecordResolver<TParent>;
    sinisterRequest?: InsurerOrgInfoToSinisterRequestResolver<TParent>;
    sinisterEnd?: InsurerOrgInfoToSinisterEndResolver<TParent>;
    coberageReminder?: InsurerOrgInfoToCoberageReminderResolver<TParent>;
    renReminder?: InsurerOrgInfoToRenReminderResolver<TParent>;
    collectionRemider?: InsurerOrgInfoToCollectionRemiderResolver<TParent>;
    noteCreated?: InsurerOrgInfoToNoteCreatedResolver<TParent>;
    noteApplied?: InsurerOrgInfoToNoteAppliedResolver<TParent>;
    sinisterCancel?: InsurerOrgInfoToSinisterCancelResolver<TParent>;
    sinisterReject?: InsurerOrgInfoToSinisterRejectResolver<TParent>;
    sinisterOnHold?: InsurerOrgInfoToSinisterOnHoldResolver<TParent>;
    sinisterInProcess?: InsurerOrgInfoToSinisterInProcessResolver<TParent>;
    cumReminder?: InsurerOrgInfoToCumReminderResolver<TParent>;
    projectId?: InsurerOrgInfoToProjectIdResolver<TParent>;
    id?: InsurerOrgInfoToIdResolver<TParent>;
    createdAt?: InsurerOrgInfoToCreatedAtResolver<TParent>;
    updatedAt?: InsurerOrgInfoToUpdatedAtResolver<TParent>;
}
export interface InsurerOrgInfoToPoliceRequestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToEndosoRequestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToRenewalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToPoliceRecordResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToEndosoRecordResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToSinisterRequestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToSinisterEndResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToCoberageReminderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToRenReminderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToCollectionRemiderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToNoteCreatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToNoteAppliedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToSinisterCancelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToSinisterRejectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToSinisterOnHoldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToSinisterInProcessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToCumReminderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerOrgInfoToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerTicketCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerTicketCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerTicketCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerTicketCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerTicketCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerTicketCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerScheduleCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerScheduleCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerScheduleCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerScheduleCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerScheduleCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerScheduleTypeResolver<TParent = any> {
    title?: InsurerScheduleToTitleResolver<TParent>;
    color?: InsurerScheduleToColorResolver<TParent>;
    startsAt?: InsurerScheduleToStartsAtResolver<TParent>;
    endsAt?: InsurerScheduleToEndsAtResolver<TParent>;
    resizable?: InsurerScheduleToResizableResolver<TParent>;
    draggable?: InsurerScheduleToDraggableResolver<TParent>;
    ownerId?: InsurerScheduleToOwnerIdResolver<TParent>;
    observations?: InsurerScheduleToObservationsResolver<TParent>;
    projectId?: InsurerScheduleToProjectIdResolver<TParent>;
    insurerScheduleParticipant?: InsurerScheduleToInsurerScheduleParticipantResolver<TParent>;
    id?: InsurerScheduleToIdResolver<TParent>;
    createdAt?: InsurerScheduleToCreatedAtResolver<TParent>;
    updatedAt?: InsurerScheduleToUpdatedAtResolver<TParent>;
}
export interface InsurerScheduleToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleToColorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleToStartsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleToEndsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleToResizableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleToDraggableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleToObservationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleToInsurerScheduleParticipantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerScheduleParticipantTypeResolver<TParent = any> {
    insurerScheduleId?: InsurerScheduleParticipantToInsurerScheduleIdResolver<TParent>;
    memberId?: InsurerScheduleParticipantToMemberIdResolver<TParent>;
    insurerSchedule?: InsurerScheduleParticipantToInsurerScheduleResolver<TParent>;
    id?: InsurerScheduleParticipantToIdResolver<TParent>;
    createdAt?: InsurerScheduleParticipantToCreatedAtResolver<TParent>;
    updatedAt?: InsurerScheduleParticipantToUpdatedAtResolver<TParent>;
}
export interface InsurerScheduleParticipantToInsurerScheduleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleParticipantToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleParticipantToInsurerScheduleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleParticipantToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleParticipantToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleParticipantToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerScheduleParticipantCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerScheduleParticipantCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerScheduleParticipantCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerScheduleParticipantCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerScheduleParticipantCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleParticipantCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerScheduleParticipantCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerNotificationCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerNotificationCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerNotificationCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerNotificationCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerNotificationCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerNotificationTypeResolver<TParent = any> {
    model?: InsurerNotificationToModelResolver<TParent>;
    modelId?: InsurerNotificationToModelIdResolver<TParent>;
    title?: InsurerNotificationToTitleResolver<TParent>;
    description?: InsurerNotificationToDescriptionResolver<TParent>;
    seen?: InsurerNotificationToSeenResolver<TParent>;
    involved?: InsurerNotificationToInvolvedResolver<TParent>;
    assignedId?: InsurerNotificationToAssignedIdResolver<TParent>;
    ownerId?: InsurerNotificationToOwnerIdResolver<TParent>;
    areaInvolved?: InsurerNotificationToAreaInvolvedResolver<TParent>;
    projectId?: InsurerNotificationToProjectIdResolver<TParent>;
    contractorPolice?: InsurerNotificationToContractorPoliceResolver<TParent>;
    policeGroupongLevel?: InsurerNotificationToPoliceGroupongLevelResolver<TParent>;
    policeProvider?: InsurerNotificationToPoliceProviderResolver<TParent>;
    policeBranch?: InsurerNotificationToPoliceBranchResolver<TParent>;
    site?: InsurerNotificationToSiteResolver<TParent>;
    startsAt?: InsurerNotificationToStartsAtResolver<TParent>;
    type?: InsurerNotificationToTypeResolver<TParent>;
    reminderRecordId?: InsurerNotificationToReminderRecordIdResolver<TParent>;
    insurerReminderRecord?: InsurerNotificationToInsurerReminderRecordResolver<TParent>;
    id?: InsurerNotificationToIdResolver<TParent>;
    createdAt?: InsurerNotificationToCreatedAtResolver<TParent>;
    updatedAt?: InsurerNotificationToUpdatedAtResolver<TParent>;
}
export interface InsurerNotificationToModelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToModelIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToSeenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToInvolvedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToAssignedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToAreaInvolvedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToContractorPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToPoliceGroupongLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToPoliceProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToPoliceBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToSiteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToStartsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToReminderRecordIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToInsurerReminderRecordResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerNotificationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerReminderCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerReminderCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerReminderCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerReminderCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerReminderCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerReminderProjectAgentProviderCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerReminderProjectAgentProviderCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerReminderProjectAgentProviderCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerReminderProjectAgentProviderCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerReminderProjectAgentProviderCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderProjectAgentProviderCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderProjectAgentProviderCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerReminderRecordCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerReminderRecordCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerReminderRecordCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerReminderRecordCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerReminderRecordCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderRecordCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderRecordCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerReminderSubBranchCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerReminderSubBranchCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerReminderSubBranchCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerReminderSubBranchCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerReminderSubBranchCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderSubBranchCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerReminderSubBranchCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerBailTypeCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerBailTypeCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerBailTypeCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerBailTypeCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerBailTypeCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBailTypeCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBailTypeCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerBirthDateTemplateCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerBirthDateTemplateCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerBirthDateTemplateCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerBirthDateTemplateCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerBirthDateTemplateCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBirthDateTemplateCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBirthDateTemplateCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerBirthDateTemplateTypeResolver<TParent = any> {
    subject?: InsurerBirthDateTemplateToSubjectResolver<TParent>;
    text?: InsurerBirthDateTemplateToTextResolver<TParent>;
    enabled?: InsurerBirthDateTemplateToEnabledResolver<TParent>;
    projectId?: InsurerBirthDateTemplateToProjectIdResolver<TParent>;
    id?: InsurerBirthDateTemplateToIdResolver<TParent>;
    createdAt?: InsurerBirthDateTemplateToCreatedAtResolver<TParent>;
    updatedAt?: InsurerBirthDateTemplateToUpdatedAtResolver<TParent>;
}
export interface InsurerBirthDateTemplateToSubjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBirthDateTemplateToTextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBirthDateTemplateToEnabledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBirthDateTemplateToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBirthDateTemplateToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBirthDateTemplateToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerBirthDateTemplateToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerDirectoryCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerDirectoryCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerDirectoryCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerDirectoryCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerDirectoryCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerDirectoryCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerDirectoryCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerDirectoryTypeResolver<TParent = any> {
    name?: InsurerDirectoryToNameResolver<TParent>;
    phone?: InsurerDirectoryToPhoneResolver<TParent>;
    area?: InsurerDirectoryToAreaResolver<TParent>;
    employment?: InsurerDirectoryToEmploymentResolver<TParent>;
    branch?: InsurerDirectoryToBranchResolver<TParent>;
    gender?: InsurerDirectoryToGenderResolver<TParent>;
    projectId?: InsurerDirectoryToProjectIdResolver<TParent>;
    id?: InsurerDirectoryToIdResolver<TParent>;
    createdAt?: InsurerDirectoryToCreatedAtResolver<TParent>;
    updatedAt?: InsurerDirectoryToUpdatedAtResolver<TParent>;
}
export interface InsurerDirectoryToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerDirectoryToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerDirectoryToAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerDirectoryToEmploymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerDirectoryToBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerDirectoryToGenderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerDirectoryToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerDirectoryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerDirectoryToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerDirectoryToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerExpenseCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerExpenseCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerExpenseCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerExpenseCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerExpenseCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerExpenseCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerExpenseCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerExpenseTypeResolver<TParent = any> {
    quantity?: InsurerExpenseToQuantityResolver<TParent>;
    concept?: InsurerExpenseToConceptResolver<TParent>;
    month?: InsurerExpenseToMonthResolver<TParent>;
    porjectId?: InsurerExpenseToPorjectIdResolver<TParent>;
    id?: InsurerExpenseToIdResolver<TParent>;
    createdAt?: InsurerExpenseToCreatedAtResolver<TParent>;
    updatedAt?: InsurerExpenseToUpdatedAtResolver<TParent>;
}
export interface InsurerExpenseToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerExpenseToConceptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerExpenseToMonthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerExpenseToPorjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerExpenseToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerExpenseToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerExpenseToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerIbisFormCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerIbisFormCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerIbisFormCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerIbisFormCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerIbisFormCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisFormCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisFormCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerIbisFormTypeResolver<TParent = any> {
    file?: InsurerIbisFormToFileResolver<TParent>;
    name?: InsurerIbisFormToNameResolver<TParent>;
    branch?: InsurerIbisFormToBranchResolver<TParent>;
    projectId?: InsurerIbisFormToProjectIdResolver<TParent>;
    id?: InsurerIbisFormToIdResolver<TParent>;
    createdAt?: InsurerIbisFormToCreatedAtResolver<TParent>;
    updatedAt?: InsurerIbisFormToUpdatedAtResolver<TParent>;
}
export interface InsurerIbisFormToFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisFormToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisFormToBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisFormToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisFormToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisFormToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisFormToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerIbisProviderCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerIbisProviderCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerIbisProviderCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerIbisProviderCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerIbisProviderCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisProviderCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisProviderCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerIbisProviderTypeResolver<TParent = any> {
    name?: InsurerIbisProviderToNameResolver<TParent>;
    street?: InsurerIbisProviderToStreetResolver<TParent>;
    number?: InsurerIbisProviderToNumberResolver<TParent>;
    colony?: InsurerIbisProviderToColonyResolver<TParent>;
    city?: InsurerIbisProviderToCityResolver<TParent>;
    zipCode?: InsurerIbisProviderToZipCodeResolver<TParent>;
    state?: InsurerIbisProviderToStateResolver<TParent>;
    phone?: InsurerIbisProviderToPhoneResolver<TParent>;
    latitude?: InsurerIbisProviderToLatitudeResolver<TParent>;
    length?: InsurerIbisProviderToLengthResolver<TParent>;
    branch?: InsurerIbisProviderToBranchResolver<TParent>;
    type?: InsurerIbisProviderToTypeResolver<TParent>;
    projectId?: InsurerIbisProviderToProjectIdResolver<TParent>;
    id?: InsurerIbisProviderToIdResolver<TParent>;
    createdAt?: InsurerIbisProviderToCreatedAtResolver<TParent>;
    updatedAt?: InsurerIbisProviderToUpdatedAtResolver<TParent>;
}
export interface InsurerIbisProviderToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisProviderToStreetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisProviderToNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisProviderToColonyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisProviderToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisProviderToZipCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisProviderToStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisProviderToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisProviderToLatitudeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisProviderToLengthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisProviderToBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisProviderToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisProviderToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisProviderToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisProviderToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerIbisProviderToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerSenderCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerSenderCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerSenderCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerSenderCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerSenderCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerSenderCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerSenderCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerSenderTypeResolver<TParent = any> {
    email?: InsurerSenderToEmailResolver<TParent>;
    passApp?: InsurerSenderToPassAppResolver<TParent>;
    area?: InsurerSenderToAreaResolver<TParent>;
    active?: InsurerSenderToActiveResolver<TParent>;
    projectId?: InsurerSenderToProjectIdResolver<TParent>;
    id?: InsurerSenderToIdResolver<TParent>;
    createdAt?: InsurerSenderToCreatedAtResolver<TParent>;
    updatedAt?: InsurerSenderToUpdatedAtResolver<TParent>;
}
export interface InsurerSenderToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerSenderToPassAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerSenderToAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerSenderToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerSenderToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerSenderToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerSenderToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerSenderToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerZipCodeSepomexCollectionSegmentTypeResolver<TParent = any> {
    items?: InsurerZipCodeSepomexCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: InsurerZipCodeSepomexCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: InsurerZipCodeSepomexCollectionSegmentToTotalCountResolver<TParent>;
}
export interface InsurerZipCodeSepomexCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerZipCodeSepomexCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface InsurerZipCodeSepomexCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IComissionCollectionSegmentTypeResolver<TParent = any> {
    items?: ComissionCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ComissionCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ComissionCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ComissionCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComissionCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoverageTopecoinsuranceCollectionSegmentTypeResolver<TParent = any> {
    items?: CoverageTopecoinsuranceCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: CoverageTopecoinsuranceCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: CoverageTopecoinsuranceCollectionSegmentToTotalCountResolver<TParent>;
}
export interface CoverageTopecoinsuranceCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageTopecoinsuranceCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageTopecoinsuranceCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoverageTopecoinsuranceTypeResolver<TParent = any> {
    topecinsurance?: CoverageTopecoinsuranceToTopecinsuranceResolver<TParent>;
    topecinsuranceId?: CoverageTopecoinsuranceToTopecinsuranceIdResolver<TParent>;
    projectId?: CoverageTopecoinsuranceToProjectIdResolver<TParent>;
    id?: CoverageTopecoinsuranceToIdResolver<TParent>;
    createdAt?: CoverageTopecoinsuranceToCreatedAtResolver<TParent>;
    updatedAt?: CoverageTopecoinsuranceToUpdatedAtResolver<TParent>;
}
export interface CoverageTopecoinsuranceToTopecinsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageTopecoinsuranceToTopecinsuranceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageTopecoinsuranceToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageTopecoinsuranceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageTopecoinsuranceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageTopecoinsuranceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoverageSuminsuredCollectionSegmentTypeResolver<TParent = any> {
    items?: CoverageSuminsuredCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: CoverageSuminsuredCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: CoverageSuminsuredCollectionSegmentToTotalCountResolver<TParent>;
}
export interface CoverageSuminsuredCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageSuminsuredCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageSuminsuredCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoverageSuminsuredTypeResolver<TParent = any> {
    sumInsured?: CoverageSuminsuredToSumInsuredResolver<TParent>;
    sumId?: CoverageSuminsuredToSumIdResolver<TParent>;
    default?: CoverageSuminsuredToDefaultResolver<TParent>;
    projectId?: CoverageSuminsuredToProjectIdResolver<TParent>;
    id?: CoverageSuminsuredToIdResolver<TParent>;
    createdAt?: CoverageSuminsuredToCreatedAtResolver<TParent>;
    updatedAt?: CoverageSuminsuredToUpdatedAtResolver<TParent>;
}
export interface CoverageSuminsuredToSumInsuredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageSuminsuredToSumIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageSuminsuredToDefaultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageSuminsuredToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageSuminsuredToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageSuminsuredToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageSuminsuredToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoveragePackageCollectionSegmentTypeResolver<TParent = any> {
    items?: CoveragePackageCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: CoveragePackageCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: CoveragePackageCollectionSegmentToTotalCountResolver<TParent>;
}
export interface CoveragePackageCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragePackageCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoveragePackageCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoverageCollectionSegmentTypeResolver<TParent = any> {
    items?: CoverageCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: CoverageCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: CoverageCollectionSegmentToTotalCountResolver<TParent>;
}
export interface CoverageCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface Isaam_CoverageTypeResolver<TParent = any> {
    name?: saam_CoverageToNameResolver<TParent>;
    default?: saam_CoverageToDefaultResolver<TParent>;
    ownerId?: saam_CoverageToOwnerIdResolver<TParent>;
    packageId?: saam_CoverageToPackageIdResolver<TParent>;
    projectAgentProviderId?: saam_CoverageToProjectAgentProviderIdResolver<TParent>;
    priority?: saam_CoverageToPriorityResolver<TParent>;
    typeCoverage?: saam_CoverageToTypeCoverageResolver<TParent>;
    coveragePackage?: saam_CoverageToCoveragePackageResolver<TParent>;
    projectAgentProvider?: saam_CoverageToProjectAgentProviderResolver<TParent>;
    id?: saam_CoverageToIdResolver<TParent>;
    createdAt?: saam_CoverageToCreatedAtResolver<TParent>;
    updatedAt?: saam_CoverageToUpdatedAtResolver<TParent>;
}
export interface saam_CoverageToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_CoverageToDefaultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_CoverageToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_CoverageToPackageIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_CoverageToProjectAgentProviderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_CoverageToPriorityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_CoverageToTypeCoverageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_CoverageToCoveragePackageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_CoverageToProjectAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_CoverageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_CoverageToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface saam_CoverageToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoverageInPolicyCollectionSegmentTypeResolver<TParent = any> {
    items?: CoverageInPolicyCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: CoverageInPolicyCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: CoverageInPolicyCollectionSegmentToTotalCountResolver<TParent>;
}
export interface CoverageInPolicyCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageInPolicyCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageInPolicyCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoverageDeductibleCollectionSegmentTypeResolver<TParent = any> {
    items?: CoverageDeductibleCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: CoverageDeductibleCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: CoverageDeductibleCollectionSegmentToTotalCountResolver<TParent>;
}
export interface CoverageDeductibleCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageDeductibleCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageDeductibleCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoverageDeductibleTypeResolver<TParent = any> {
    deductible?: CoverageDeductibleToDeductibleResolver<TParent>;
    deductibleId?: CoverageDeductibleToDeductibleIdResolver<TParent>;
    default?: CoverageDeductibleToDefaultResolver<TParent>;
    projectId?: CoverageDeductibleToProjectIdResolver<TParent>;
    id?: CoverageDeductibleToIdResolver<TParent>;
    createdAt?: CoverageDeductibleToCreatedAtResolver<TParent>;
    updatedAt?: CoverageDeductibleToUpdatedAtResolver<TParent>;
}
export interface CoverageDeductibleToDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageDeductibleToDeductibleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageDeductibleToDefaultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageDeductibleToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageDeductibleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageDeductibleToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageDeductibleToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoverageCoinsuranceCollectionSegmentTypeResolver<TParent = any> {
    items?: CoverageCoinsuranceCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: CoverageCoinsuranceCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: CoverageCoinsuranceCollectionSegmentToTotalCountResolver<TParent>;
}
export interface CoverageCoinsuranceCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageCoinsuranceCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageCoinsuranceCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoverageCoinsuranceTypeResolver<TParent = any> {
    coinsurance?: CoverageCoinsuranceToCoinsuranceResolver<TParent>;
    coinsuranceId?: CoverageCoinsuranceToCoinsuranceIdResolver<TParent>;
    projectId?: CoverageCoinsuranceToProjectIdResolver<TParent>;
    id?: CoverageCoinsuranceToIdResolver<TParent>;
    createdAt?: CoverageCoinsuranceToCreatedAtResolver<TParent>;
    updatedAt?: CoverageCoinsuranceToUpdatedAtResolver<TParent>;
}
export interface CoverageCoinsuranceToCoinsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageCoinsuranceToCoinsuranceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageCoinsuranceToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageCoinsuranceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageCoinsuranceToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CoverageCoinsuranceToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IResponsableInvolvedCollectionSegmentTypeResolver<TParent = any> {
    items?: ResponsableInvolvedCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ResponsableInvolvedCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ResponsableInvolvedCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ResponsableInvolvedCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponsableInvolvedCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponsableInvolvedCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IResponsableInvolvedTypeResolver<TParent = any> {
    projectId?: ResponsableInvolvedToProjectIdResolver<TParent>;
    responsableId?: ResponsableInvolvedToResponsableIdResolver<TParent>;
    ownerId?: ResponsableInvolvedToOwnerIdResolver<TParent>;
    area?: ResponsableInvolvedToAreaResolver<TParent>;
    name?: ResponsableInvolvedToNameResolver<TParent>;
    contractorId?: ResponsableInvolvedToContractorIdResolver<TParent>;
    contractor?: ResponsableInvolvedToContractorResolver<TParent>;
    id?: ResponsableInvolvedToIdResolver<TParent>;
    createdAt?: ResponsableInvolvedToCreatedAtResolver<TParent>;
    updatedAt?: ResponsableInvolvedToUpdatedAtResolver<TParent>;
}
export interface ResponsableInvolvedToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponsableInvolvedToResponsableIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponsableInvolvedToOwnerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponsableInvolvedToAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponsableInvolvedToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponsableInvolvedToContractorIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponsableInvolvedToContractorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponsableInvolvedToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponsableInvolvedToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ResponsableInvolvedToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectAgentProviderEmailReminderCollectionSegmentTypeResolver<TParent = any> {
    items?: ProjectAgentProviderEmailReminderCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ProjectAgentProviderEmailReminderCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ProjectAgentProviderEmailReminderCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ProjectAgentProviderEmailReminderCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderEmailReminderCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderEmailReminderCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectAgentProviderCollectionSegmentTypeResolver<TParent = any> {
    items?: ProjectAgentProviderCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ProjectAgentProviderCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ProjectAgentProviderCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ProjectAgentProviderCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAgentProviderContactCollectionSegmentTypeResolver<TParent = any> {
    items?: AgentProviderContactCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: AgentProviderContactCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: AgentProviderContactCollectionSegmentToTotalCountResolver<TParent>;
}
export interface AgentProviderContactCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderContactCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderContactCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAgentProviderCollectionSegmentTypeResolver<TParent = any> {
    items?: AgentProviderCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: AgentProviderCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: AgentProviderCollectionSegmentToTotalCountResolver<TParent>;
}
export interface AgentProviderCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentProviderCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAgentKeyCollectionSegmentTypeResolver<TParent = any> {
    items?: AgentKeyCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: AgentKeyCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: AgentKeyCollectionSegmentToTotalCountResolver<TParent>;
}
export interface AgentKeyCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentKeyCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AgentKeyCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IReferrerCollectionSegmentTypeResolver<TParent = any> {
    items?: ReferrerCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ReferrerCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ReferrerCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ReferrerCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IReferrerBranchCollectionSegmentTypeResolver<TParent = any> {
    items?: ReferrerBranchCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ReferrerBranchCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ReferrerBranchCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ReferrerBranchCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerBranchCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerBranchCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IReferrerAccountStateCollectionSegmentTypeResolver<TParent = any> {
    items?: ReferrerAccountStateCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ReferrerAccountStateCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ReferrerAccountStateCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ReferrerAccountStateCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerAccountStateCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ReferrerAccountStateCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorCollectionSegmentTypeResolver<TParent = any> {
    items?: ContractorCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ContractorCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ContractorCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ContractorCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorCelulaCollectionSegmentTypeResolver<TParent = any> {
    items?: ContractorCelulaCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ContractorCelulaCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ContractorCelulaCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ContractorCelulaCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorCelulaCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorCelulaCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorGroupCollectionSegmentTypeResolver<TParent = any> {
    items?: ContractorGroupCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ContractorGroupCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ContractorGroupCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ContractorGroupCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorGroupingLevelCollectionSegmentTypeResolver<TParent = any> {
    items?: ContractorGroupingLevelCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ContractorGroupingLevelCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ContractorGroupingLevelCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ContractorGroupingLevelCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupingLevelCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorGroupingLevelCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorClassificationCollectionSegmentTypeResolver<TParent = any> {
    items?: ContractorClassificationCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ContractorClassificationCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ContractorClassificationCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ContractorClassificationCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorClassificationCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorClassificationCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorProcessDocumentCollectionSegmentTypeResolver<TParent = any> {
    items?: ContractorProcessDocumentCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ContractorProcessDocumentCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ContractorProcessDocumentCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ContractorProcessDocumentCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorProcessDocumentCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ContractorProcessDocumentCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProcessDocumentCollectionSegmentTypeResolver<TParent = any> {
    items?: ProcessDocumentCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ProcessDocumentCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ProcessDocumentCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ProcessDocumentCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProcessDocumentCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProcessDocumentCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBranchCollectionSegmentTypeResolver<TParent = any> {
    items?: BranchCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: BranchCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: BranchCollectionSegmentToTotalCountResolver<TParent>;
}
export interface BranchCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BranchCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISubBranchCollectionSegmentTypeResolver<TParent = any> {
    items?: SubBranchCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: SubBranchCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: SubBranchCollectionSegmentToTotalCountResolver<TParent>;
}
export interface SubBranchCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SubBranchCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SubBranchCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectAgentProviderBranchCollectionSegmentTypeResolver<TParent = any> {
    items?: ProjectAgentProviderBranchCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: ProjectAgentProviderBranchCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: ProjectAgentProviderBranchCollectionSegmentToTotalCountResolver<TParent>;
}
export interface ProjectAgentProviderBranchCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderBranchCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectAgentProviderBranchCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeviceCollectionSegmentTypeResolver<TParent = any> {
    items?: DeviceCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: DeviceCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: DeviceCollectionSegmentToTotalCountResolver<TParent>;
}
export interface DeviceCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DeviceCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DeviceCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface INotificationCollectionSegmentTypeResolver<TParent = any> {
    items?: NotificationCollectionSegmentToItemsResolver<TParent>;
    pageInfo?: NotificationCollectionSegmentToPageInfoResolver<TParent>;
    totalCount?: NotificationCollectionSegmentToTotalCountResolver<TParent>;
}
export interface NotificationCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NotificationCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface NotificationCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICodeTypeResolver<TParent = any> {
    projectId?: CodeToProjectIdResolver<TParent>;
    uniqueCode?: CodeToUniqueCodeResolver<TParent>;
    expiration?: CodeToExpirationResolver<TParent>;
    orderId?: CodeToOrderIdResolver<TParent>;
    brandId?: CodeToBrandIdResolver<TParent>;
    brand?: CodeToBrandResolver<TParent>;
    batch?: CodeToBatchResolver<TParent>;
    dots?: CodeToDotsResolver<TParent>;
    providerId?: CodeToProviderIdResolver<TParent>;
    provider?: CodeToProviderResolver<TParent>;
    state?: CodeToStateResolver<TParent>;
    id?: CodeToIdResolver<TParent>;
    createdAt?: CodeToCreatedAtResolver<TParent>;
    updatedAt?: CodeToUpdatedAtResolver<TParent>;
}
export interface CodeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CodeToUniqueCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CodeToExpirationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CodeToOrderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CodeToBrandIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CodeToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CodeToBatchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CodeToDotsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CodeToProviderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CodeToProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CodeToStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CodeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CodeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CodeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBrandTypeResolver<TParent = any> {
    projectId?: BrandToProjectIdResolver<TParent>;
    name?: BrandToNameResolver<TParent>;
    image?: BrandToImageResolver<TParent>;
    codes?: BrandToCodesResolver<TParent>;
    id?: BrandToIdResolver<TParent>;
    createdAt?: BrandToCreatedAtResolver<TParent>;
    updatedAt?: BrandToUpdatedAtResolver<TParent>;
}
export interface BrandToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BrandToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BrandToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BrandToCodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BrandToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BrandToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BrandToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProviderTypeResolver<TParent = any> {
    projectId?: ProviderToProjectIdResolver<TParent>;
    name?: ProviderToNameResolver<TParent>;
    id?: ProviderToIdResolver<TParent>;
    createdAt?: ProviderToCreatedAtResolver<TParent>;
    updatedAt?: ProviderToUpdatedAtResolver<TParent>;
}
export interface ProviderToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProviderToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProviderToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProviderToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProviderToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDotMovementTypeResolver<TParent = any> {
    codeId?: DotMovementToCodeIdResolver<TParent>;
    code?: DotMovementToCodeResolver<TParent>;
    memberId?: DotMovementToMemberIdResolver<TParent>;
    dots?: DotMovementToDotsResolver<TParent>;
    name?: DotMovementToNameResolver<TParent>;
    email?: DotMovementToEmailResolver<TParent>;
    phone?: DotMovementToPhoneResolver<TParent>;
    status?: DotMovementToStatusResolver<TParent>;
    movementType?: DotMovementToMovementTypeResolver<TParent>;
    prizeCategoryId?: DotMovementToPrizeCategoryIdResolver<TParent>;
    prizeCategory?: DotMovementToPrizeCategoryResolver<TParent>;
    providerId?: DotMovementToProviderIdResolver<TParent>;
    provider?: DotMovementToProviderResolver<TParent>;
    prizeCodeId?: DotMovementToPrizeCodeIdResolver<TParent>;
    prizeCode?: DotMovementToPrizeCodeResolver<TParent>;
    image?: DotMovementToImageResolver<TParent>;
    id?: DotMovementToIdResolver<TParent>;
    createdAt?: DotMovementToCreatedAtResolver<TParent>;
    updatedAt?: DotMovementToUpdatedAtResolver<TParent>;
}
export interface DotMovementToCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DotMovementToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DotMovementToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DotMovementToDotsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DotMovementToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DotMovementToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DotMovementToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DotMovementToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DotMovementToMovementTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DotMovementToPrizeCategoryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DotMovementToPrizeCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DotMovementToProviderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DotMovementToProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DotMovementToPrizeCodeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DotMovementToPrizeCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DotMovementToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DotMovementToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DotMovementToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface DotMovementToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPrizeCategoryTypeResolver<TParent = any> {
    projectId?: PrizeCategoryToProjectIdResolver<TParent>;
    name?: PrizeCategoryToNameResolver<TParent>;
    image?: PrizeCategoryToImageResolver<TParent>;
    dots?: PrizeCategoryToDotsResolver<TParent>;
    id?: PrizeCategoryToIdResolver<TParent>;
    createdAt?: PrizeCategoryToCreatedAtResolver<TParent>;
    updatedAt?: PrizeCategoryToUpdatedAtResolver<TParent>;
}
export interface PrizeCategoryToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PrizeCategoryToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PrizeCategoryToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PrizeCategoryToDotsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PrizeCategoryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PrizeCategoryToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PrizeCategoryToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPrizeCodeTypeResolver<TParent = any> {
    projectId?: PrizeCodeToProjectIdResolver<TParent>;
    title?: PrizeCodeToTitleResolver<TParent>;
    description?: PrizeCodeToDescriptionResolver<TParent>;
    status?: PrizeCodeToStatusResolver<TParent>;
    prizeCategoryId?: PrizeCodeToPrizeCategoryIdResolver<TParent>;
    dots?: PrizeCodeToDotsResolver<TParent>;
    code?: PrizeCodeToCodeResolver<TParent>;
    prizeCategory?: PrizeCodeToPrizeCategoryResolver<TParent>;
    value?: PrizeCodeToValueResolver<TParent>;
    id?: PrizeCodeToIdResolver<TParent>;
    createdAt?: PrizeCodeToCreatedAtResolver<TParent>;
    updatedAt?: PrizeCodeToUpdatedAtResolver<TParent>;
}
export interface PrizeCodeToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PrizeCodeToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PrizeCodeToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PrizeCodeToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PrizeCodeToPrizeCategoryIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PrizeCodeToDotsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PrizeCodeToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PrizeCodeToPrizeCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PrizeCodeToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PrizeCodeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PrizeCodeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PrizeCodeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMutationTypeResolver<TParent = any> {
    sendQuizToEmail?: MutationToSendQuizToEmailResolver<TParent>;
    translateCountries?: MutationToTranslateCountriesResolver<TParent>;
    updateWithIdProfile?: MutationToUpdateWithIdProfileResolver<TParent>;
    createNiche?: MutationToCreateNicheResolver<TParent>;
    updateNiche?: MutationToUpdateNicheResolver<TParent>;
    deleteNiche?: MutationToDeleteNicheResolver<TParent>;
    createNicheService?: MutationToCreateNicheServiceResolver<TParent>;
    createBulkTutor?: MutationToCreateBulkTutorResolver<TParent>;
    updateNicheService?: MutationToUpdateNicheServiceResolver<TParent>;
    deleteNicheService?: MutationToDeleteNicheServiceResolver<TParent>;
    updateBillingData?: MutationToUpdateBillingDataResolver<TParent>;
    updateCompanyData?: MutationToUpdateCompanyDataResolver<TParent>;
    createBulkTeacher?: MutationToCreateBulkTeacherResolver<TParent>;
    updateHealthInsurance?: MutationToUpdateHealthInsuranceResolver<TParent>;
    createAttendanceExcel?: MutationToCreateAttendanceExcelResolver<TParent>;
    createBulkUser?: MutationToCreateBulkUserResolver<TParent>;
    createAttendance?: MutationToCreateAttendanceResolver<TParent>;
    createCheisiUsersExcel?: MutationToCreateCheisiUsersExcelResolver<TParent>;
    newContactForm?: MutationToNewContactFormResolver<TParent>;
    newExternalLogin?: MutationToNewExternalLoginResolver<TParent>;
    deleteUser?: MutationToDeleteUserResolver<TParent>;
    testBulk?: MutationToTestBulkResolver<TParent>;
    updatePositionColumns?: MutationToUpdatePositionColumnsResolver<TParent>;
    updatePositionBlockColumns?: MutationToUpdatePositionBlockColumnsResolver<TParent>;
    loginWithProvider?: MutationToLoginWithProviderResolver<TParent>;
    createProjectSocialNetwork?: MutationToCreateProjectSocialNetworkResolver<TParent>;
    updateProjectSocialNetwork?: MutationToUpdateProjectSocialNetworkResolver<TParent>;
    deleteProjectSocialNetwork?: MutationToDeleteProjectSocialNetworkResolver<TParent>;
    createRecommendedProject?: MutationToCreateRecommendedProjectResolver<TParent>;
    updateRecommendedProject?: MutationToUpdateRecommendedProjectResolver<TParent>;
    deleteRecommendedProject?: MutationToDeleteRecommendedProjectResolver<TParent>;
    setProjectToProduction?: MutationToSetProjectToProductionResolver<TParent>;
    createProjectTemplate?: MutationToCreateProjectTemplateResolver<TParent>;
    updateProjectTemplate?: MutationToUpdateProjectTemplateResolver<TParent>;
    deleteProjectTemplate?: MutationToDeleteProjectTemplateResolver<TParent>;
    createMember?: MutationToCreateMemberResolver<TParent>;
    loginMember?: MutationToLoginMemberResolver<TParent>;
    createCompany?: MutationToCreateCompanyResolver<TParent>;
    createProject?: MutationToCreateProjectResolver<TParent>;
    generateSlug?: MutationToGenerateSlugResolver<TParent>;
    createNewRoles?: MutationToCreateNewRolesResolver<TParent>;
    createUser?: MutationToCreateUserResolver<TParent>;
    createOrFindUser?: MutationToCreateOrFindUserResolver<TParent>;
    createOrdinaryUser?: MutationToCreateOrdinaryUserResolver<TParent>;
    createUserWithoutMail?: MutationToCreateUserWithoutMailResolver<TParent>;
    updateProfile?: MutationToUpdateProfileResolver<TParent>;
    updatePassword?: MutationToUpdatePasswordResolver<TParent>;
    activeMember?: MutationToActiveMemberResolver<TParent>;
    createProjectRole?: MutationToCreateProjectRoleResolver<TParent>;
    removeAccent?: MutationToRemoveAccentResolver<TParent>;
    uploadPhotoProfile?: MutationToUploadPhotoProfileResolver<TParent>;
    deleteProject?: MutationToDeleteProjectResolver<TParent>;
    updateCompany?: MutationToUpdateCompanyResolver<TParent>;
    restorePassword?: MutationToRestorePasswordResolver<TParent>;
    recoverPassword?: MutationToRecoverPasswordResolver<TParent>;
    verifyToken?: MutationToVerifyTokenResolver<TParent>;
    createGroup?: MutationToCreateGroupResolver<TParent>;
    addGroupToMember?: MutationToAddGroupToMemberResolver<TParent>;
    addGroupToTaxonomy?: MutationToAddGroupToTaxonomyResolver<TParent>;
    addTaxonomyToMember?: MutationToAddTaxonomyToMemberResolver<TParent>;
    deleteGroup?: MutationToDeleteGroupResolver<TParent>;
    deleteGroupTaxonomy?: MutationToDeleteGroupTaxonomyResolver<TParent>;
    deleteMemberGroup?: MutationToDeleteMemberGroupResolver<TParent>;
    deleteMemberTaxonomy?: MutationToDeleteMemberTaxonomyResolver<TParent>;
    deleteMember?: MutationToDeleteMemberResolver<TParent>;
    deleteProjectRole?: MutationToDeleteProjectRoleResolver<TParent>;
    createUpdatePermission?: MutationToCreateUpdatePermissionResolver<TParent>;
    updateProject?: MutationToUpdateProjectResolver<TParent>;
    updateProjectRole?: MutationToUpdateProjectRoleResolver<TParent>;
    updateGroup?: MutationToUpdateGroupResolver<TParent>;
    addMemberAsAdmin?: MutationToAddMemberAsAdminResolver<TParent>;
    createMemberStream?: MutationToCreateMemberStreamResolver<TParent>;
    deleteMemberFromMemberProjects?: MutationToDeleteMemberFromMemberProjectsResolver<TParent>;
    addMemberToCompany?: MutationToAddMemberToCompanyResolver<TParent>;
    createPageManager?: MutationToCreatePageManagerResolver<TParent>;
    createViewManager?: MutationToCreateViewManagerResolver<TParent>;
    createViewColumn?: MutationToCreateViewColumnResolver<TParent>;
    createViewBlockColumn?: MutationToCreateViewBlockColumnResolver<TParent>;
    updatePageManager?: MutationToUpdatePageManagerResolver<TParent>;
    updateViewManager?: MutationToUpdateViewManagerResolver<TParent>;
    updateViewColumn?: MutationToUpdateViewColumnResolver<TParent>;
    updateViewBlockColumn?: MutationToUpdateViewBlockColumnResolver<TParent>;
    deletePageManager?: MutationToDeletePageManagerResolver<TParent>;
    deleteViewManager?: MutationToDeleteViewManagerResolver<TParent>;
    deleteViewColumn?: MutationToDeleteViewColumnResolver<TParent>;
    linkTransactionToSell?: MutationToLinkTransactionToSellResolver<TParent>;
    updateSell?: MutationToUpdateSellResolver<TParent>;
    deleteViewBlockColumn?: MutationToDeleteViewBlockColumnResolver<TParent>;
    createMultipleMemberRelation?: MutationToCreateMultipleMemberRelationResolver<TParent>;
    createMemberRelation?: MutationToCreateMemberRelationResolver<TParent>;
    updateMemberRelation?: MutationToUpdateMemberRelationResolver<TParent>;
    deleteMemberRelation?: MutationToDeleteMemberRelationResolver<TParent>;
    updateProductSell?: MutationToUpdateProductSellResolver<TParent>;
    createTax?: MutationToCreateTaxResolver<TParent>;
    deleteTax?: MutationToDeleteTaxResolver<TParent>;
    importProductsFromExcel?: MutationToImportProductsFromExcelResolver<TParent>;
    createRoute?: MutationToCreateRouteResolver<TParent>;
    deleteRoute?: MutationToDeleteRouteResolver<TParent>;
    createProductSell?: MutationToCreateProductSellResolver<TParent>;
    deleteProductSell?: MutationToDeleteProductSellResolver<TParent>;
    createPurchaseQuote?: MutationToCreatePurchaseQuoteResolver<TParent>;
    deletePurchaseQuote?: MutationToDeletePurchaseQuoteResolver<TParent>;
    createStockAlert?: MutationToCreateStockAlertResolver<TParent>;
    deleteStockAlert?: MutationToDeleteStockAlertResolver<TParent>;
    updateStockAlert?: MutationToUpdateStockAlertResolver<TParent>;
    createLegalTerm?: MutationToCreateLegalTermResolver<TParent>;
    createInsuranceForm?: MutationToCreateInsuranceFormResolver<TParent>;
    updateInsuranceForm?: MutationToUpdateInsuranceFormResolver<TParent>;
    updateLegalTerm?: MutationToUpdateLegalTermResolver<TParent>;
    deleteLegalTerm?: MutationToDeleteLegalTermResolver<TParent>;
    createArticle?: MutationToCreateArticleResolver<TParent>;
    updateStatusArticle?: MutationToUpdateStatusArticleResolver<TParent>;
    createTaxonomy?: MutationToCreateTaxonomyResolver<TParent>;
    blog_generateSlug?: MutationToBlog_generateSlugResolver<TParent>;
    updateArticle?: MutationToUpdateArticleResolver<TParent>;
    updateTaxonomy?: MutationToUpdateTaxonomyResolver<TParent>;
    deleteArticle?: MutationToDeleteArticleResolver<TParent>;
    deleteTaxonomy?: MutationToDeleteTaxonomyResolver<TParent>;
    newSurvey?: MutationToNewSurveyResolver<TParent>;
    updateSurvey?: MutationToUpdateSurveyResolver<TParent>;
    deleteSurvey?: MutationToDeleteSurveyResolver<TParent>;
    newQuestion?: MutationToNewQuestionResolver<TParent>;
    deleteQuestion?: MutationToDeleteQuestionResolver<TParent>;
    updateQuestion?: MutationToUpdateQuestionResolver<TParent>;
    newOption?: MutationToNewOptionResolver<TParent>;
    deleteOption?: MutationToDeleteOptionResolver<TParent>;
    updateOption?: MutationToUpdateOptionResolver<TParent>;
    answerQuestion?: MutationToAnswerQuestionResolver<TParent>;
    createProduct?: MutationToCreateProductResolver<TParent>;
    updateProduct?: MutationToUpdateProductResolver<TParent>;
    deleteProduct?: MutationToDeleteProductResolver<TParent>;
    createAddress?: MutationToCreateAddressResolver<TParent>;
    updateAddress?: MutationToUpdateAddressResolver<TParent>;
    deleteAddress?: MutationToDeleteAddressResolver<TParent>;
    createUpdateShop?: MutationToCreateUpdateShopResolver<TParent>;
    createDisease?: MutationToCreateDiseaseResolver<TParent>;
    updateDisease?: MutationToUpdateDiseaseResolver<TParent>;
    deleteDisease?: MutationToDeleteDiseaseResolver<TParent>;
    createTopicDisease?: MutationToCreateTopicDiseaseResolver<TParent>;
    updateTopicDisease?: MutationToUpdateTopicDiseaseResolver<TParent>;
    deleteTopicDisease?: MutationToDeleteTopicDiseaseResolver<TParent>;
    createFAQ?: MutationToCreateFAQResolver<TParent>;
    updateFAQ?: MutationToUpdateFAQResolver<TParent>;
    deleteFAQ?: MutationToDeleteFAQResolver<TParent>;
    runJobShop?: MutationToRunJobShopResolver<TParent>;
    createCourse?: MutationToCreateCourseResolver<TParent>;
    createBeginCourse?: MutationToCreateBeginCourseResolver<TParent>;
    createCourseForm?: MutationToCreateCourseFormResolver<TParent>;
    updateCourse?: MutationToUpdateCourseResolver<TParent>;
    updateBeginCourse?: MutationToUpdateBeginCourseResolver<TParent>;
    updateCourseForm?: MutationToUpdateCourseFormResolver<TParent>;
    deleteCourse?: MutationToDeleteCourseResolver<TParent>;
    deleteBeginCourse?: MutationToDeleteBeginCourseResolver<TParent>;
    deleteCourseForm?: MutationToDeleteCourseFormResolver<TParent>;
    fixProduct?: MutationToFixProductResolver<TParent>;
    deleteCourseSchedule?: MutationToDeleteCourseScheduleResolver<TParent>;
    updateCourseSchedule?: MutationToUpdateCourseScheduleResolver<TParent>;
    createBranchOffice?: MutationToCreateBranchOfficeResolver<TParent>;
    createManager?: MutationToCreateManagerResolver<TParent>;
    createProductPurchase?: MutationToCreateProductPurchaseResolver<TParent>;
    createPurchase?: MutationToCreatePurchaseResolver<TParent>;
    createStore?: MutationToCreateStoreResolver<TParent>;
    newStoreTransfer?: MutationToNewStoreTransferResolver<TParent>;
    createProvider?: MutationToCreateProviderResolver<TParent>;
    updateBranchOffice?: MutationToUpdateBranchOfficeResolver<TParent>;
    updateManager?: MutationToUpdateManagerResolver<TParent>;
    updatePurchase?: MutationToUpdatePurchaseResolver<TParent>;
    updateStore?: MutationToUpdateStoreResolver<TParent>;
    deleteStore?: MutationToDeleteStoreResolver<TParent>;
    deleteManager?: MutationToDeleteManagerResolver<TParent>;
    updateProvider?: MutationToUpdateProviderResolver<TParent>;
    deleteProvider?: MutationToDeleteProviderResolver<TParent>;
    deletePurchase?: MutationToDeletePurchaseResolver<TParent>;
    deleteProductPurchase?: MutationToDeleteProductPurchaseResolver<TParent>;
    deleteBranchOffice?: MutationToDeleteBranchOfficeResolver<TParent>;
    associationServiceToProject?: MutationToAssociationServiceToProjectResolver<TParent>;
    createArrayFunction?: MutationToCreateArrayFunctionResolver<TParent>;
    deleteArrayFunction?: MutationToDeleteArrayFunctionResolver<TParent>;
    updateServiceProject?: MutationToUpdateServiceProjectResolver<TParent>;
    deleteServiceProject?: MutationToDeleteServiceProjectResolver<TParent>;
    cancelEvent?: MutationToCancelEventResolver<TParent>;
    createEventType?: MutationToCreateEventTypeResolver<TParent>;
    createSubEventType?: MutationToCreateSubEventTypeResolver<TParent>;
    deleteSubEventType?: MutationToDeleteSubEventTypeResolver<TParent>;
    updateSubEventType?: MutationToUpdateSubEventTypeResolver<TParent>;
    addSubTypeToEventType?: MutationToAddSubTypeToEventTypeResolver<TParent>;
    deleteEventType?: MutationToDeleteEventTypeResolver<TParent>;
    updateEventType?: MutationToUpdateEventTypeResolver<TParent>;
    createEvent?: MutationToCreateEventResolver<TParent>;
    createEventMember?: MutationToCreateEventMemberResolver<TParent>;
    updateEvent?: MutationToUpdateEventResolver<TParent>;
    deleteEvent?: MutationToDeleteEventResolver<TParent>;
    createEventSession?: MutationToCreateEventSessionResolver<TParent>;
    updateEventSession?: MutationToUpdateEventSessionResolver<TParent>;
    deleteEventSession?: MutationToDeleteEventSessionResolver<TParent>;
    sendRecordatory?: MutationToSendRecordatoryResolver<TParent>;
    createSchedule?: MutationToCreateScheduleResolver<TParent>;
    associationMemberToConsult?: MutationToAssociationMemberToConsultResolver<TParent>;
    cancellationMemberToConsult?: MutationToCancellationMemberToConsultResolver<TParent>;
    changeStatusEvent?: MutationToChangeStatusEventResolver<TParent>;
    deleteSchedule?: MutationToDeleteScheduleResolver<TParent>;
    deleteTurn?: MutationToDeleteTurnResolver<TParent>;
    createResourceQuote?: MutationToCreateResourceQuoteResolver<TParent>;
    updateResourceQuote?: MutationToUpdateResourceQuoteResolver<TParent>;
    deleteResourceQuote?: MutationToDeleteResourceQuoteResolver<TParent>;
    createResourceQuoteDetail?: MutationToCreateResourceQuoteDetailResolver<TParent>;
    updateResourceQuoteDetail?: MutationToUpdateResourceQuoteDetailResolver<TParent>;
    deleteResourceQuoteDetail?: MutationToDeleteResourceQuoteDetailResolver<TParent>;
    createProposal?: MutationToCreateProposalResolver<TParent>;
    updateProposal?: MutationToUpdateProposalResolver<TParent>;
    deleteProposal?: MutationToDeleteProposalResolver<TParent>;
    createCollaborator?: MutationToCreateCollaboratorResolver<TParent>;
    updateCollaborator?: MutationToUpdateCollaboratorResolver<TParent>;
    deleteCollaborator?: MutationToDeleteCollaboratorResolver<TParent>;
    createCollaboratorHours?: MutationToCreateCollaboratorHoursResolver<TParent>;
    updateCollaboratorHours?: MutationToUpdateCollaboratorHoursResolver<TParent>;
    deleteCollaboratorHours?: MutationToDeleteCollaboratorHoursResolver<TParent>;
    createHiring?: MutationToCreateHiringResolver<TParent>;
    updateHiring?: MutationToUpdateHiringResolver<TParent>;
    deleteHiring?: MutationToDeleteHiringResolver<TParent>;
    createHiringService?: MutationToCreateHiringServiceResolver<TParent>;
    updateHiringService?: MutationToUpdateHiringServiceResolver<TParent>;
    deleteHiringService?: MutationToDeleteHiringServiceResolver<TParent>;
    createHiringType?: MutationToCreateHiringTypeResolver<TParent>;
    updateHiringType?: MutationToUpdateHiringTypeResolver<TParent>;
    deleteHiringType?: MutationToDeleteHiringTypeResolver<TParent>;
    createShift?: MutationToCreateShiftResolver<TParent>;
    updateShift?: MutationToUpdateShiftResolver<TParent>;
    deleteShift?: MutationToDeleteShiftResolver<TParent>;
    createBusinessType?: MutationToCreateBusinessTypeResolver<TParent>;
    updateBusinessType?: MutationToUpdateBusinessTypeResolver<TParent>;
    deleteBusinessType?: MutationToDeleteBusinessTypeResolver<TParent>;
    createBusinessRule?: MutationToCreateBusinessRuleResolver<TParent>;
    updateBusinessRule?: MutationToUpdateBusinessRuleResolver<TParent>;
    deleteBusinessRule?: MutationToDeleteBusinessRuleResolver<TParent>;
    deleteCouponFromTemplate?: MutationToDeleteCouponFromTemplateResolver<TParent>;
    addCouponsToTemplate?: MutationToAddCouponsToTemplateResolver<TParent>;
    createUpdateConfigurationTemplate?: MutationToCreateUpdateConfigurationTemplateResolver<TParent>;
    sendTemplate?: MutationToSendTemplateResolver<TParent>;
    putFirebaseDevice?: MutationToPutFirebaseDeviceResolver<TParent>;
    createCoupon?: MutationToCreateCouponResolver<TParent>;
    updateCoupon?: MutationToUpdateCouponResolver<TParent>;
    deleteCoupon?: MutationToDeleteCouponResolver<TParent>;
    createTemplate?: MutationToCreateTemplateResolver<TParent>;
    updateTemplate?: MutationToUpdateTemplateResolver<TParent>;
    deleteTemplate?: MutationToDeleteTemplateResolver<TParent>;
    createErrorPage?: MutationToCreateErrorPageResolver<TParent>;
    updateErrorPage?: MutationToUpdateErrorPageResolver<TParent>;
    deleteErrorPage?: MutationToDeleteErrorPageResolver<TParent>;
    createErrorPageValidation?: MutationToCreateErrorPageValidationResolver<TParent>;
    updateErrorPageValidation?: MutationToUpdateErrorPageValidationResolver<TParent>;
    deleteErrorValidationPage?: MutationToDeleteErrorValidationPageResolver<TParent>;
    createBusiness?: MutationToCreateBusinessResolver<TParent>;
    updateBusiness?: MutationToUpdateBusinessResolver<TParent>;
    deleteBusiness?: MutationToDeleteBusinessResolver<TParent>;
    associateBusinessRules?: MutationToAssociateBusinessRulesResolver<TParent>;
    associateProjectPlanSubscription?: MutationToAssociateProjectPlanSubscriptionResolver<TParent>;
    createProjectPlan?: MutationToCreateProjectPlanResolver<TParent>;
    updateProjectPlan?: MutationToUpdateProjectPlanResolver<TParent>;
    deleteProjectPlan?: MutationToDeleteProjectPlanResolver<TParent>;
    deleteProjectPlanSubscription?: MutationToDeleteProjectPlanSubscriptionResolver<TParent>;
    putConfig?: MutationToPutConfigResolver<TParent>;
    deleteConfig?: MutationToDeleteConfigResolver<TParent>;
    updateOrderPages?: MutationToUpdateOrderPagesResolver<TParent>;
    updateBatchWewbsiteComponent?: MutationToUpdateBatchWewbsiteComponentResolver<TParent>;
    createComponent?: MutationToCreateComponentResolver<TParent>;
    createWebsiteComponent?: MutationToCreateWebsiteComponentResolver<TParent>;
    createWebsitePage?: MutationToCreateWebsitePageResolver<TParent>;
    createWebsiteSeo?: MutationToCreateWebsiteSeoResolver<TParent>;
    updateComponent?: MutationToUpdateComponentResolver<TParent>;
    updateWebsiteComponent?: MutationToUpdateWebsiteComponentResolver<TParent>;
    updateWebsitePage?: MutationToUpdateWebsitePageResolver<TParent>;
    updateWebsiteSeo?: MutationToUpdateWebsiteSeoResolver<TParent>;
    deleteComponent?: MutationToDeleteComponentResolver<TParent>;
    deleteWebsiteComponent?: MutationToDeleteWebsiteComponentResolver<TParent>;
    deleteWebsitePage?: MutationToDeleteWebsitePageResolver<TParent>;
    deleteWebsiteSeo?: MutationToDeleteWebsiteSeoResolver<TParent>;
    deleteBusinessRuleProjectPlans?: MutationToDeleteBusinessRuleProjectPlansResolver<TParent>;
    createDocumentCategory?: MutationToCreateDocumentCategoryResolver<TParent>;
    updateDocumentCategory?: MutationToUpdateDocumentCategoryResolver<TParent>;
    deleteDocumentCategory?: MutationToDeleteDocumentCategoryResolver<TParent>;
    createDocumentCategoryDetail?: MutationToCreateDocumentCategoryDetailResolver<TParent>;
    updateDocumentCategoryDetail?: MutationToUpdateDocumentCategoryDetailResolver<TParent>;
    deleteDocumentCategoryDetail?: MutationToDeleteDocumentCategoryDetailResolver<TParent>;
    createDocument?: MutationToCreateDocumentResolver<TParent>;
    updateDocument?: MutationToUpdateDocumentResolver<TParent>;
    deleteDocument?: MutationToDeleteDocumentResolver<TParent>;
    createDocumentTemplate?: MutationToCreateDocumentTemplateResolver<TParent>;
    updateDocumentTemplate?: MutationToUpdateDocumentTemplateResolver<TParent>;
    deleteDocumentTemplate?: MutationToDeleteDocumentTemplateResolver<TParent>;
    createTemplatePage?: MutationToCreateTemplatePageResolver<TParent>;
    updateTemplatePage?: MutationToUpdateTemplatePageResolver<TParent>;
    deleteTemplatePage?: MutationToDeleteTemplatePageResolver<TParent>;
    createDocumentTag?: MutationToCreateDocumentTagResolver<TParent>;
    updateDocumentTag?: MutationToUpdateDocumentTagResolver<TParent>;
    deleteDocumentTag?: MutationToDeleteDocumentTagResolver<TParent>;
    createDocumentScan?: MutationToCreateDocumentScanResolver<TParent>;
    updateDocumentScan?: MutationToUpdateDocumentScanResolver<TParent>;
    deleteDocumentScan?: MutationToDeleteDocumentScanResolver<TParent>;
    createDocumentRead?: MutationToCreateDocumentReadResolver<TParent>;
    updateDocumentRead?: MutationToUpdateDocumentReadResolver<TParent>;
    deleteDocumentRead?: MutationToDeleteDocumentReadResolver<TParent>;
    readTextFromImage?: MutationToReadTextFromImageResolver<TParent>;
    createVideoCall?: MutationToCreateVideoCallResolver<TParent>;
    updateVideoCall?: MutationToUpdateVideoCallResolver<TParent>;
    deleteVideoCall?: MutationToDeleteVideoCallResolver<TParent>;
    createAccessToken?: MutationToCreateAccessTokenResolver<TParent>;
    createVideoRoom?: MutationToCreateVideoRoomResolver<TParent>;
    sendNotification?: MutationToSendNotificationResolver<TParent>;
    sendEmailDownload?: MutationToSendEmailDownloadResolver<TParent>;
    sendEmailNotification?: MutationToSendEmailNotificationResolver<TParent>;
    muteParticipant?: MutationToMuteParticipantResolver<TParent>;
    removeParticipantRoom?: MutationToRemoveParticipantRoomResolver<TParent>;
    updateParticipantRoom?: MutationToUpdateParticipantRoomResolver<TParent>;
    startRecordRoom2?: MutationToStartRecordRoom2Resolver<TParent>;
    endRecordRoom?: MutationToEndRecordRoomResolver<TParent>;
    createUpdateContactEmail?: MutationToCreateUpdateContactEmailResolver<TParent>;
    sendEmail?: MutationToSendEmailResolver<TParent>;
    deleteContactEmail?: MutationToDeleteContactEmailResolver<TParent>;
    sendMailBot?: MutationToSendMailBotResolver<TParent>;
    sendQuiz?: MutationToSendQuizResolver<TParent>;
    mainSection?: MutationToMainSectionResolver<TParent>;
    hyperVincule?: MutationToHyperVinculeResolver<TParent>;
    sendQuizGratitude?: MutationToSendQuizGratitudeResolver<TParent>;
    createServiceArea?: MutationToCreateServiceAreaResolver<TParent>;
    updateServiceArea?: MutationToUpdateServiceAreaResolver<TParent>;
    deleteServiceArea?: MutationToDeleteServiceAreaResolver<TParent>;
    createArea?: MutationToCreateAreaResolver<TParent>;
    updateArea?: MutationToUpdateAreaResolver<TParent>;
    deleteArea?: MutationToDeleteAreaResolver<TParent>;
    updateBatchServiceMember?: MutationToUpdateBatchServiceMemberResolver<TParent>;
    createServiceMember?: MutationToCreateServiceMemberResolver<TParent>;
    updateServiceMember?: MutationToUpdateServiceMemberResolver<TParent>;
    deleteServiceMember?: MutationToDeleteServiceMemberResolver<TParent>;
    createServiceQuiz?: MutationToCreateServiceQuizResolver<TParent>;
    updateServiceQuiz?: MutationToUpdateServiceQuizResolver<TParent>;
    deleteServiceQuiz?: MutationToDeleteServiceQuizResolver<TParent>;
    createQuiz?: MutationToCreateQuizResolver<TParent>;
    updateQuiz?: MutationToUpdateQuizResolver<TParent>;
    deleteQuiz?: MutationToDeleteQuizResolver<TParent>;
    createQuizSection?: MutationToCreateQuizSectionResolver<TParent>;
    updateQuizSection?: MutationToUpdateQuizSectionResolver<TParent>;
    deleteQuizSection?: MutationToDeleteQuizSectionResolver<TParent>;
    duplicateQuizQuestion?: MutationToDuplicateQuizQuestionResolver<TParent>;
    createQuizQuestion?: MutationToCreateQuizQuestionResolver<TParent>;
    updateQuizQuestion?: MutationToUpdateQuizQuestionResolver<TParent>;
    deleteQuizQuestion?: MutationToDeleteQuizQuestionResolver<TParent>;
    createQuizQuestionNested?: MutationToCreateQuizQuestionNestedResolver<TParent>;
    updateQuizQuestionNested?: MutationToUpdateQuizQuestionNestedResolver<TParent>;
    deleteQuizQuestionNested?: MutationToDeleteQuizQuestionNestedResolver<TParent>;
    updateBatchQuizQuestion?: MutationToUpdateBatchQuizQuestionResolver<TParent>;
    createQuizQuestionAnswer?: MutationToCreateQuizQuestionAnswerResolver<TParent>;
    updateQuizQuestionAnswer?: MutationToUpdateQuizQuestionAnswerResolver<TParent>;
    deleteQuizQuestionAnswer?: MutationToDeleteQuizQuestionAnswerResolver<TParent>;
    updateBatchQuizQuestionAnswer?: MutationToUpdateBatchQuizQuestionAnswerResolver<TParent>;
    createQuizAnswer?: MutationToCreateQuizAnswerResolver<TParent>;
    updateQuizAnswer?: MutationToUpdateQuizAnswerResolver<TParent>;
    deleteQuizAnswer?: MutationToDeleteQuizAnswerResolver<TParent>;
    createQuizMember?: MutationToCreateQuizMemberResolver<TParent>;
    updateQuizMember?: MutationToUpdateQuizMemberResolver<TParent>;
    deleteQuizMember?: MutationToDeleteQuizMemberResolver<TParent>;
    createQuizQuestionMember?: MutationToCreateQuizQuestionMemberResolver<TParent>;
    updateQuizQuestionMember?: MutationToUpdateQuizQuestionMemberResolver<TParent>;
    deleteQuizQuestionMember?: MutationToDeleteQuizQuestionMemberResolver<TParent>;
    updateBatchQuizQuestionMember?: MutationToUpdateBatchQuizQuestionMemberResolver<TParent>;
    createQuizMemberAnswer?: MutationToCreateQuizMemberAnswerResolver<TParent>;
    updateQuizMemberAnswer?: MutationToUpdateQuizMemberAnswerResolver<TParent>;
    deleteQuizMemberAnswer?: MutationToDeleteQuizMemberAnswerResolver<TParent>;
    updateBatchQuizMemberAnswer?: MutationToUpdateBatchQuizMemberAnswerResolver<TParent>;
    createQuizMemberDescription?: MutationToCreateQuizMemberDescriptionResolver<TParent>;
    updateQuizMemberDescription?: MutationToUpdateQuizMemberDescriptionResolver<TParent>;
    deleteQuizMemberDescription?: MutationToDeleteQuizMemberDescriptionResolver<TParent>;
    updateBatchQuizMemberDescription?: MutationToUpdateBatchQuizMemberDescriptionResolver<TParent>;
    createKey?: MutationToCreateKeyResolver<TParent>;
    createQuotationAarco?: MutationToCreateQuotationAarcoResolver<TParent>;
    loginAarco?: MutationToLoginAarcoResolver<TParent>;
    policyAarco?: MutationToPolicyAarcoResolver<TParent>;
    quotationDownloadPDFAarco?: MutationToQuotationDownloadPDFAarcoResolver<TParent>;
    quotationEmitAarco?: MutationToQuotationEmitAarcoResolver<TParent>;
    quotationSendPDFAarco?: MutationToQuotationSendPDFAarcoResolver<TParent>;
    attachPaymentMethodToCustomer?: MutationToAttachPaymentMethodToCustomerResolver<TParent>;
    createSetupIntentStripe?: MutationToCreateSetupIntentStripeResolver<TParent>;
    setDefaultPaymentMethodOnCustomer?: MutationToSetDefaultPaymentMethodOnCustomerResolver<TParent>;
    updatePriceStripe?: MutationToUpdatePriceStripeResolver<TParent>;
    newPaymentsAnyType?: MutationToNewPaymentsAnyTypeResolver<TParent>;
    createProductStripe?: MutationToCreateProductStripeResolver<TParent>;
    createPlan?: MutationToCreatePlanResolver<TParent>;
    createStripePrice?: MutationToCreateStripePriceResolver<TParent>;
    createMethodPayment?: MutationToCreateMethodPaymentResolver<TParent>;
    updateMethodPayment?: MutationToUpdateMethodPaymentResolver<TParent>;
    deleteMethodPayment?: MutationToDeleteMethodPaymentResolver<TParent>;
    createPaymentStripe?: MutationToCreatePaymentStripeResolver<TParent>;
    createPaymentStripeToAccount?: MutationToCreatePaymentStripeToAccountResolver<TParent>;
    createSuscriptionStripe?: MutationToCreateSuscriptionStripeResolver<TParent>;
    createSuscriptionExternalStripe?: MutationToCreateSuscriptionExternalStripeResolver<TParent>;
    deleteSuscriptionExternalStripe?: MutationToDeleteSuscriptionExternalStripeResolver<TParent>;
    createAccountStripe?: MutationToCreateAccountStripeResolver<TParent>;
    deletePayment?: MutationToDeletePaymentResolver<TParent>;
    updatePayment?: MutationToUpdatePaymentResolver<TParent>;
    createInvoice?: MutationToCreateInvoiceResolver<TParent>;
    updateStatusInvoice?: MutationToUpdateStatusInvoiceResolver<TParent>;
    createPaymentMethod?: MutationToCreatePaymentMethodResolver<TParent>;
    deletePaymentMethod?: MutationToDeletePaymentMethodResolver<TParent>;
    createBatchInsurerCoverages?: MutationToCreateBatchInsurerCoveragesResolver<TParent>;
    createQuote?: MutationToCreateQuoteResolver<TParent>;
    createNewOffices?: MutationToCreateNewOfficesResolver<TParent>;
    createNewProfiles?: MutationToCreateNewProfilesResolver<TParent>;
    createInsurer?: MutationToCreateInsurerResolver<TParent>;
    createOffice?: MutationToCreateOfficeResolver<TParent>;
    createRegistration?: MutationToCreateRegistrationResolver<TParent>;
    createQuatorProfile?: MutationToCreateQuatorProfileResolver<TParent>;
    deleteInsurer?: MutationToDeleteInsurerResolver<TParent>;
    deleteOffice?: MutationToDeleteOfficeResolver<TParent>;
    deleteQuoterProfile?: MutationToDeleteQuoterProfileResolver<TParent>;
    updateInsurer?: MutationToUpdateInsurerResolver<TParent>;
    updateOffice?: MutationToUpdateOfficeResolver<TParent>;
    updateQuoterProfile?: MutationToUpdateQuoterProfileResolver<TParent>;
    createCatalog?: MutationToCreateCatalogResolver<TParent>;
    populateCredentials?: MutationToPopulateCredentialsResolver<TParent>;
    populateServices?: MutationToPopulateServicesResolver<TParent>;
    registrarPersona?: MutationToRegistrarPersonaResolver<TParent>;
    runServiceQuote?: MutationToRunServiceQuoteResolver<TParent>;
    emissionCar?: MutationToEmissionCarResolver<TParent>;
    printEmission?: MutationToPrintEmissionResolver<TParent>;
    createQuoteCoverage?: MutationToCreateQuoteCoverageResolver<TParent>;
    updateQuoteCoverage?: MutationToUpdateQuoteCoverageResolver<TParent>;
    deleteQuoteCoverage?: MutationToDeleteQuoteCoverageResolver<TParent>;
    associationWithQuoterProfile?: MutationToAssociationWithQuoterProfileResolver<TParent>;
    updateQuote?: MutationToUpdateQuoteResolver<TParent>;
    createInsurerCredential?: MutationToCreateInsurerCredentialResolver<TParent>;
    updateInsurerCredential?: MutationToUpdateInsurerCredentialResolver<TParent>;
    associationRelationCar?: MutationToAssociationRelationCarResolver<TParent>;
    createCoverageProject?: MutationToCreateCoverageProjectResolver<TParent>;
    updateCoverageProject?: MutationToUpdateCoverageProjectResolver<TParent>;
    updateBatchCoverageProject?: MutationToUpdateBatchCoverageProjectResolver<TParent>;
    createApiService?: MutationToCreateApiServiceResolver<TParent>;
    updateApiService?: MutationToUpdateApiServiceResolver<TParent>;
    createDynamicCustomMeta?: MutationToCreateDynamicCustomMetaResolver<TParent>;
    updateDynamicCustomMeta?: MutationToUpdateDynamicCustomMetaResolver<TParent>;
    deleteDynamicCustomMeta?: MutationToDeleteDynamicCustomMetaResolver<TParent>;
    updateBatchDynamicCustomMeta?: MutationToUpdateBatchDynamicCustomMetaResolver<TParent>;
    createDynamicCustomValue?: MutationToCreateDynamicCustomValueResolver<TParent>;
    updateDynamicCustomValue?: MutationToUpdateDynamicCustomValueResolver<TParent>;
    deleteDynamicCustomValue?: MutationToDeleteDynamicCustomValueResolver<TParent>;
    updateBatchDynamicCustomValue?: MutationToUpdateBatchDynamicCustomValueResolver<TParent>;
    createDynamicPage?: MutationToCreateDynamicPageResolver<TParent>;
    updateDynamicPage?: MutationToUpdateDynamicPageResolver<TParent>;
    deleteDynamicPage?: MutationToDeleteDynamicPageResolver<TParent>;
    createDynamicBlock?: MutationToCreateDynamicBlockResolver<TParent>;
    updateDynamicBlock?: MutationToUpdateDynamicBlockResolver<TParent>;
    deleteDynamicBlock?: MutationToDeleteDynamicBlockResolver<TParent>;
    createDynamicSection?: MutationToCreateDynamicSectionResolver<TParent>;
    updateDynamicSection?: MutationToUpdateDynamicSectionResolver<TParent>;
    deleteDynamicSection?: MutationToDeleteDynamicSectionResolver<TParent>;
    createDynamicSectionBlock?: MutationToCreateDynamicSectionBlockResolver<TParent>;
    updateDynamicSectionBlock?: MutationToUpdateDynamicSectionBlockResolver<TParent>;
    deleteDynamicSectionBlock?: MutationToDeleteDynamicSectionBlockResolver<TParent>;
    createDynamicTab?: MutationToCreateDynamicTabResolver<TParent>;
    updateDynamicTabBlock?: MutationToUpdateDynamicTabBlockResolver<TParent>;
    deleteDynamicTab?: MutationToDeleteDynamicTabResolver<TParent>;
    createCharge?: MutationToCreateChargeResolver<TParent>;
    createClinicHistory?: MutationToCreateClinicHistoryResolver<TParent>;
    createClinicHistoryMedicalBackgroundDetail?: MutationToCreateClinicHistoryMedicalBackgroundDetailResolver<TParent>;
    createEventDetail?: MutationToCreateEventDetailResolver<TParent>;
    createFisicExam?: MutationToCreateFisicExamResolver<TParent>;
    createFormat?: MutationToCreateFormatResolver<TParent>;
    createMedicalBackgroundDetail?: MutationToCreateMedicalBackgroundDetailResolver<TParent>;
    createMedicalBackground?: MutationToCreateMedicalBackgroundResolver<TParent>;
    createMedicalConfig?: MutationToCreateMedicalConfigResolver<TParent>;
    createMedicalService?: MutationToCreateMedicalServiceResolver<TParent>;
    createMedicine?: MutationToCreateMedicineResolver<TParent>;
    createVaccine?: MutationToCreateVaccineResolver<TParent>;
    createVitalSigns?: MutationToCreateVitalSignsResolver<TParent>;
    createMedicRecipe?: MutationToCreateMedicRecipeResolver<TParent>;
    createRecipeConfig?: MutationToCreateRecipeConfigResolver<TParent>;
    createRegistSesion?: MutationToCreateRegistSesionResolver<TParent>;
    createPacientNote?: MutationToCreatePacientNoteResolver<TParent>;
    createTherapy?: MutationToCreateTherapyResolver<TParent>;
    createDiagnostic?: MutationToCreateDiagnosticResolver<TParent>;
    createConsultNote?: MutationToCreateConsultNoteResolver<TParent>;
    createMedicalBackgroundSet?: MutationToCreateMedicalBackgroundSetResolver<TParent>;
    createMedicalBackgroundTemplate?: MutationToCreateMedicalBackgroundTemplateResolver<TParent>;
    createVitalSignsTemplate?: MutationToCreateVitalSignsTemplateResolver<TParent>;
    createPacientMedicalBackground?: MutationToCreatePacientMedicalBackgroundResolver<TParent>;
    createPatientVitalSignsResponse?: MutationToCreatePatientVitalSignsResponseResolver<TParent>;
    updateCharge?: MutationToUpdateChargeResolver<TParent>;
    updateClinicHistory?: MutationToUpdateClinicHistoryResolver<TParent>;
    updateClinicHistoryMedicalBackgroundDetail?: MutationToUpdateClinicHistoryMedicalBackgroundDetailResolver<TParent>;
    updateEventDetail?: MutationToUpdateEventDetailResolver<TParent>;
    updateFisicExam?: MutationToUpdateFisicExamResolver<TParent>;
    updateFormat?: MutationToUpdateFormatResolver<TParent>;
    updateMedicalBackgroundDetail?: MutationToUpdateMedicalBackgroundDetailResolver<TParent>;
    updateMedicalBackground?: MutationToUpdateMedicalBackgroundResolver<TParent>;
    updateMedicalConfig?: MutationToUpdateMedicalConfigResolver<TParent>;
    updateMedicalService?: MutationToUpdateMedicalServiceResolver<TParent>;
    updateMedicine?: MutationToUpdateMedicineResolver<TParent>;
    updateVaccine?: MutationToUpdateVaccineResolver<TParent>;
    updateVitalSigns?: MutationToUpdateVitalSignsResolver<TParent>;
    updateMedicRecipe?: MutationToUpdateMedicRecipeResolver<TParent>;
    updateRecipeConfig?: MutationToUpdateRecipeConfigResolver<TParent>;
    updateRegistSesion?: MutationToUpdateRegistSesionResolver<TParent>;
    updatePacientNote?: MutationToUpdatePacientNoteResolver<TParent>;
    updateTherapy?: MutationToUpdateTherapyResolver<TParent>;
    updateDiagnostic?: MutationToUpdateDiagnosticResolver<TParent>;
    updateConsultNote?: MutationToUpdateConsultNoteResolver<TParent>;
    updatePacientMedicalBackground?: MutationToUpdatePacientMedicalBackgroundResolver<TParent>;
    updateBillingRequest?: MutationToUpdateBillingRequestResolver<TParent>;
    updateSortFormat?: MutationToUpdateSortFormatResolver<TParent>;
    updatePatientVitalSignsResponse?: MutationToUpdatePatientVitalSignsResponseResolver<TParent>;
    deleteCharge?: MutationToDeleteChargeResolver<TParent>;
    deleteClinicHistory?: MutationToDeleteClinicHistoryResolver<TParent>;
    deleteClinicHistoryMedicalBackgrounDetail?: MutationToDeleteClinicHistoryMedicalBackgrounDetailResolver<TParent>;
    deleteConsult?: MutationToDeleteConsultResolver<TParent>;
    deleteFisicExam?: MutationToDeleteFisicExamResolver<TParent>;
    deleteMedicalBackgroundDetail?: MutationToDeleteMedicalBackgroundDetailResolver<TParent>;
    deleteMedicalBackground?: MutationToDeleteMedicalBackgroundResolver<TParent>;
    deleteMedicalConfig?: MutationToDeleteMedicalConfigResolver<TParent>;
    deleteMedicalService?: MutationToDeleteMedicalServiceResolver<TParent>;
    deleteMedicine?: MutationToDeleteMedicineResolver<TParent>;
    deleteVaccine?: MutationToDeleteVaccineResolver<TParent>;
    deleteVitalSign?: MutationToDeleteVitalSignResolver<TParent>;
    deleteMedicRecipe?: MutationToDeleteMedicRecipeResolver<TParent>;
    deleteRecipeConfig?: MutationToDeleteRecipeConfigResolver<TParent>;
    deleteRegistSesion?: MutationToDeleteRegistSesionResolver<TParent>;
    deleteTherapy?: MutationToDeleteTherapyResolver<TParent>;
    deleteDiagnostic?: MutationToDeleteDiagnosticResolver<TParent>;
    deleteConsultNote?: MutationToDeleteConsultNoteResolver<TParent>;
    deletePacientNote?: MutationToDeletePacientNoteResolver<TParent>;
    deletePacientMedicalBackground?: MutationToDeletePacientMedicalBackgroundResolver<TParent>;
    deleteBillingRequest?: MutationToDeleteBillingRequestResolver<TParent>;
    deleteFormat?: MutationToDeleteFormatResolver<TParent>;
    printWithImageFromUrl?: MutationToPrintWithImageFromUrlResolver<TParent>;
    bulkWorkSpace?: MutationToBulkWorkSpaceResolver<TParent>;
    orderingMemberBoard?: MutationToOrderingMemberBoardResolver<TParent>;
    createSpace?: MutationToCreateSpaceResolver<TParent>;
    updateSpace?: MutationToUpdateSpaceResolver<TParent>;
    deleteSpace?: MutationToDeleteSpaceResolver<TParent>;
    updateBatchMemberSpace?: MutationToUpdateBatchMemberSpaceResolver<TParent>;
    createMemberSpace?: MutationToCreateMemberSpaceResolver<TParent>;
    updateMemberSpace?: MutationToUpdateMemberSpaceResolver<TParent>;
    deleteMemberSpace?: MutationToDeleteMemberSpaceResolver<TParent>;
    createBoardStatus?: MutationToCreateBoardStatusResolver<TParent>;
    updateBoardStatus?: MutationToUpdateBoardStatusResolver<TParent>;
    deleteBoardStatus?: MutationToDeleteBoardStatusResolver<TParent>;
    updateBatchMemberBoard?: MutationToUpdateBatchMemberBoardResolver<TParent>;
    createBoard?: MutationToCreateBoardResolver<TParent>;
    updateBoard?: MutationToUpdateBoardResolver<TParent>;
    deleteBoard?: MutationToDeleteBoardResolver<TParent>;
    createBoardList?: MutationToCreateBoardListResolver<TParent>;
    updateBoardList?: MutationToUpdateBoardListResolver<TParent>;
    updateBatchBoardList?: MutationToUpdateBatchBoardListResolver<TParent>;
    deleteBoardList?: MutationToDeleteBoardListResolver<TParent>;
    createBoardGroupColumn?: MutationToCreateBoardGroupColumnResolver<TParent>;
    updateBoardGroupColumn?: MutationToUpdateBoardGroupColumnResolver<TParent>;
    updateBatchBoardGroupColumn?: MutationToUpdateBatchBoardGroupColumnResolver<TParent>;
    deleteBoardGroupColumn?: MutationToDeleteBoardGroupColumnResolver<TParent>;
    createBoardColumnType?: MutationToCreateBoardColumnTypeResolver<TParent>;
    updateBoardColumnType?: MutationToUpdateBoardColumnTypeResolver<TParent>;
    deleteBoardColumnType?: MutationToDeleteBoardColumnTypeResolver<TParent>;
    createBoardColumnValue?: MutationToCreateBoardColumnValueResolver<TParent>;
    updateBoardColumnValue?: MutationToUpdateBoardColumnValueResolver<TParent>;
    deleteBoardColumnValue?: MutationToDeleteBoardColumnValueResolver<TParent>;
    createCardColumnValue?: MutationToCreateCardColumnValueResolver<TParent>;
    updateCardColumnValue?: MutationToUpdateCardColumnValueResolver<TParent>;
    deleteCardColumnValue?: MutationToDeleteCardColumnValueResolver<TParent>;
    createBoardMemberReference?: MutationToCreateBoardMemberReferenceResolver<TParent>;
    updateBoardMemberReference?: MutationToUpdateBoardMemberReferenceResolver<TParent>;
    deleteBoardMemberReference?: MutationToDeleteBoardMemberReferenceResolver<TParent>;
    createBoardRowForResourceQuote?: MutationToCreateBoardRowForResourceQuoteResolver<TParent>;
    createBoardRow?: MutationToCreateBoardRowResolver<TParent>;
    updateBoardRow?: MutationToUpdateBoardRowResolver<TParent>;
    updateBatchBoardRow?: MutationToUpdateBatchBoardRowResolver<TParent>;
    deleteBoardRow?: MutationToDeleteBoardRowResolver<TParent>;
    createCard?: MutationToCreateCardResolver<TParent>;
    updateCard?: MutationToUpdateCardResolver<TParent>;
    deleteCard?: MutationToDeleteCardResolver<TParent>;
    createCardChecklist?: MutationToCreateCardChecklistResolver<TParent>;
    updateCardChecklist?: MutationToUpdateCardChecklistResolver<TParent>;
    deleteCardChecklist?: MutationToDeleteCardChecklistResolver<TParent>;
    updateBatchCardCheckComponent?: MutationToUpdateBatchCardCheckComponentResolver<TParent>;
    createCardCheckComponent?: MutationToCreateCardCheckComponentResolver<TParent>;
    updateCardCheckComponent?: MutationToUpdateCardCheckComponentResolver<TParent>;
    deleteCardCheckComponent?: MutationToDeleteCardCheckComponentResolver<TParent>;
    createCardReply?: MutationToCreateCardReplyResolver<TParent>;
    updateCardReply?: MutationToUpdateCardReplyResolver<TParent>;
    deleteCardReply?: MutationToDeleteCardReplyResolver<TParent>;
    createNestedFiles?: MutationToCreateNestedFilesResolver<TParent>;
    updateNestedFiles?: MutationToUpdateNestedFilesResolver<TParent>;
    deleteNestedFiles?: MutationToDeleteNestedFilesResolver<TParent>;
    createMemberCard?: MutationToCreateMemberCardResolver<TParent>;
    updateMemberCard?: MutationToUpdateMemberCardResolver<TParent>;
    deleteMemberCard?: MutationToDeleteMemberCardResolver<TParent>;
    createMemberBoard?: MutationToCreateMemberBoardResolver<TParent>;
    updateMemberBoard?: MutationToUpdateMemberBoardResolver<TParent>;
    deleteMemberBoard?: MutationToDeleteMemberBoardResolver<TParent>;
    deleteMeasure?: MutationToDeleteMeasureResolver<TParent>;
    updateMeasure?: MutationToUpdateMeasureResolver<TParent>;
    deleteMaterialCategory?: MutationToDeleteMaterialCategoryResolver<TParent>;
    createMeasureValue?: MutationToCreateMeasureValueResolver<TParent>;
    updateMeasureValue?: MutationToUpdateMeasureValueResolver<TParent>;
    deleteMeasureValue?: MutationToDeleteMeasureValueResolver<TParent>;
    deleteMeasureUnityTwo?: MutationToDeleteMeasureUnityTwoResolver<TParent>;
    updateModule?: MutationToUpdateModuleResolver<TParent>;
    createMaterialQuotation?: MutationToCreateMaterialQuotationResolver<TParent>;
    updateMaterialQuotation?: MutationToUpdateMaterialQuotationResolver<TParent>;
    deleteMaterialQuotation?: MutationToDeleteMaterialQuotationResolver<TParent>;
    createMaterialModule?: MutationToCreateMaterialModuleResolver<TParent>;
    updateMaterialModule?: MutationToUpdateMaterialModuleResolver<TParent>;
    deleteMaterialModule?: MutationToDeleteMaterialModuleResolver<TParent>;
    createUserCustomer?: MutationToCreateUserCustomerResolver<TParent>;
    createMeasureUnity?: MutationToCreateMeasureUnityResolver<TParent>;
    updateMeasureUnity?: MutationToUpdateMeasureUnityResolver<TParent>;
    deleteMeasureUnity?: MutationToDeleteMeasureUnityResolver<TParent>;
    createAttribute?: MutationToCreateAttributeResolver<TParent>;
    createAttributeValue?: MutationToCreateAttributeValueResolver<TParent>;
    createBuildingSite?: MutationToCreateBuildingSiteResolver<TParent>;
    createMadreQuotation?: MutationToCreateMadreQuotationResolver<TParent>;
    createMaterialCategory?: MutationToCreateMaterialCategoryResolver<TParent>;
    createMaterialCombination?: MutationToCreateMaterialCombinationResolver<TParent>;
    createMaterial?: MutationToCreateMaterialResolver<TParent>;
    createMaterialStockMeasure?: MutationToCreateMaterialStockMeasureResolver<TParent>;
    createMaterialStock?: MutationToCreateMaterialStockResolver<TParent>;
    createMaterialVariableQuotation?: MutationToCreateMaterialVariableQuotationResolver<TParent>;
    createMeasure?: MutationToCreateMeasureResolver<TParent>;
    createMeasureUnityTwo?: MutationToCreateMeasureUnityTwoResolver<TParent>;
    createModuleCategory?: MutationToCreateModuleCategoryResolver<TParent>;
    createModule?: MutationToCreateModuleResolver<TParent>;
    createQuotation?: MutationToCreateQuotationResolver<TParent>;
    createQuotationModule?: MutationToCreateQuotationModuleResolver<TParent>;
    createVariable?: MutationToCreateVariableResolver<TParent>;
    deleteAttribute?: MutationToDeleteAttributeResolver<TParent>;
    deleteAttributeValue?: MutationToDeleteAttributeValueResolver<TParent>;
    deleteBuildingSiteAddress?: MutationToDeleteBuildingSiteAddressResolver<TParent>;
    deleteMaterialCombination?: MutationToDeleteMaterialCombinationResolver<TParent>;
    deleteMaterial?: MutationToDeleteMaterialResolver<TParent>;
    deleteMaterialStock?: MutationToDeleteMaterialStockResolver<TParent>;
    deleteMaterialStockMeasure?: MutationToDeleteMaterialStockMeasureResolver<TParent>;
    deleteMaterialVariableQuotation?: MutationToDeleteMaterialVariableQuotationResolver<TParent>;
    deleteModuleCategory?: MutationToDeleteModuleCategoryResolver<TParent>;
    deleteModule?: MutationToDeleteModuleResolver<TParent>;
    deleteQuotationModule?: MutationToDeleteQuotationModuleResolver<TParent>;
    deleteQuotation?: MutationToDeleteQuotationResolver<TParent>;
    deleteVariable?: MutationToDeleteVariableResolver<TParent>;
    updateAttribute?: MutationToUpdateAttributeResolver<TParent>;
    updateAttributeValue?: MutationToUpdateAttributeValueResolver<TParent>;
    updateBuildingSiteAddress?: MutationToUpdateBuildingSiteAddressResolver<TParent>;
    updateMaterialCategory?: MutationToUpdateMaterialCategoryResolver<TParent>;
    updateMaterialCombination?: MutationToUpdateMaterialCombinationResolver<TParent>;
    updateMaterial?: MutationToUpdateMaterialResolver<TParent>;
    updateMaterialStockMeasure?: MutationToUpdateMaterialStockMeasureResolver<TParent>;
    updateMaterialStock?: MutationToUpdateMaterialStockResolver<TParent>;
    updateMadreQuotation?: MutationToUpdateMadreQuotationResolver<TParent>;
    deleteMadreQuotation?: MutationToDeleteMadreQuotationResolver<TParent>;
    updateMaterialVariableQuotation?: MutationToUpdateMaterialVariableQuotationResolver<TParent>;
    updateMeasureUnityTwo?: MutationToUpdateMeasureUnityTwoResolver<TParent>;
    updateCategoryModule?: MutationToUpdateCategoryModuleResolver<TParent>;
    updateQuotationModule?: MutationToUpdateQuotationModuleResolver<TParent>;
    updateQuotation?: MutationToUpdateQuotationResolver<TParent>;
    updateVariable?: MutationToUpdateVariableResolver<TParent>;
    updateAnalysis?: MutationToUpdateAnalysisResolver<TParent>;
    createClient?: MutationToCreateClientResolver<TParent>;
    updateClient?: MutationToUpdateClientResolver<TParent>;
    createConsult?: MutationToCreateConsultResolver<TParent>;
    updateConsult?: MutationToUpdateConsultResolver<TParent>;
    calculator_deleteConsult?: MutationToCalculator_deleteConsultResolver<TParent>;
    createCompared?: MutationToCreateComparedResolver<TParent>;
    updateCompared?: MutationToUpdateComparedResolver<TParent>;
    deleteCompared?: MutationToDeleteComparedResolver<TParent>;
    createCarMercado?: MutationToCreateCarMercadoResolver<TParent>;
    createCarMercadoMassive?: MutationToCreateCarMercadoMassiveResolver<TParent>;
    deleteCarMercado?: MutationToDeleteCarMercadoResolver<TParent>;
    uploadFile?: MutationToUploadFileResolver<TParent>;
    zipFolderContent?: MutationToZipFolderContentResolver<TParent>;
    createFolder?: MutationToCreateFolderResolver<TParent>;
    updateFolder?: MutationToUpdateFolderResolver<TParent>;
    deleteFolder?: MutationToDeleteFolderResolver<TParent>;
    createFile?: MutationToCreateFileResolver<TParent>;
    updateFile?: MutationToUpdateFileResolver<TParent>;
    deleteFile?: MutationToDeleteFileResolver<TParent>;
    shareFile?: MutationToShareFileResolver<TParent>;
    shareFolder?: MutationToShareFolderResolver<TParent>;
    stopSharingFolder?: MutationToStopSharingFolderResolver<TParent>;
    stopSharingFile?: MutationToStopSharingFileResolver<TParent>;
    uploadFilePrivate?: MutationToUploadFilePrivateResolver<TParent>;
    addChatMember?: MutationToAddChatMemberResolver<TParent>;
    addChatMemberWs?: MutationToAddChatMemberWsResolver<TParent>;
    conversationId?: MutationToConversationIdResolver<TParent>;
    deleteReply?: MutationToDeleteReplyResolver<TParent>;
    createWallet?: MutationToCreateWalletResolver<TParent>;
    updateWallet?: MutationToUpdateWalletResolver<TParent>;
    deleteWallet?: MutationToDeleteWalletResolver<TParent>;
    createWalletTransaction?: MutationToCreateWalletTransactionResolver<TParent>;
    createMultipleWalletTransaction?: MutationToCreateMultipleWalletTransactionResolver<TParent>;
    createWalletTransactionStatus?: MutationToCreateWalletTransactionStatusResolver<TParent>;
    createWalletTransactionMemberRelation?: MutationToCreateWalletTransactionMemberRelationResolver<TParent>;
    createMemberWallet?: MutationToCreateMemberWalletResolver<TParent>;
    updateMemberWallet?: MutationToUpdateMemberWalletResolver<TParent>;
    deleteMemberWallet?: MutationToDeleteMemberWalletResolver<TParent>;
    createProjectWalletKey?: MutationToCreateProjectWalletKeyResolver<TParent>;
    updateProjectWalletKey?: MutationToUpdateProjectWalletKeyResolver<TParent>;
    deleteProjectWalletKey?: MutationToDeleteProjectWalletKeyResolver<TParent>;
    createCertificateMovement?: MutationToCreateCertificateMovementResolver<TParent>;
    deleteCertificate?: MutationToDeleteCertificateResolver<TParent>;
    updateInsurerModule?: MutationToUpdateInsurerModuleResolver<TParent>;
    createInsurerModule?: MutationToCreateInsurerModuleResolver<TParent>;
    createPolicyModule?: MutationToCreatePolicyModuleResolver<TParent>;
    updatePolicyModule?: MutationToUpdatePolicyModuleResolver<TParent>;
    deletePolicyModule?: MutationToDeletePolicyModuleResolver<TParent>;
    createInsurerFee?: MutationToCreateInsurerFeeResolver<TParent>;
    deleteInsurerFee?: MutationToDeleteInsurerFeeResolver<TParent>;
    updateInsurerFee?: MutationToUpdateInsurerFeeResolver<TParent>;
    createPolicy?: MutationToCreatePolicyResolver<TParent>;
    cancelCertificate?: MutationToCancelCertificateResolver<TParent>;
    createBeneficiary?: MutationToCreateBeneficiaryResolver<TParent>;
    createCertificate?: MutationToCreateCertificateResolver<TParent>;
    createCertificateFile?: MutationToCreateCertificateFileResolver<TParent>;
    createContact?: MutationToCreateContactResolver<TParent>;
    createContractorBranchOffice?: MutationToCreateContractorBranchOfficeResolver<TParent>;
    createContractorContact?: MutationToCreateContractorContactResolver<TParent>;
    createContractor?: MutationToCreateContractorResolver<TParent>;
    createContractorPolicy?: MutationToCreateContractorPolicyResolver<TParent>;
    createCountryRequest?: MutationToCreateCountryRequestResolver<TParent>;
    createFee?: MutationToCreateFeeResolver<TParent>;
    createInsurerCompany?: MutationToCreateInsurerCompanyResolver<TParent>;
    createIssuedReport?: MutationToCreateIssuedReportResolver<TParent>;
    createMerchandiseDetail?: MutationToCreateMerchandiseDetailResolver<TParent>;
    createMerchandise?: MutationToCreateMerchandiseResolver<TParent>;
    createMoney?: MutationToCreateMoneyResolver<TParent>;
    createMoneyPolicy?: MutationToCreateMoneyPolicyResolver<TParent>;
    itus_createOffice?: MutationToItus_createOfficeResolver<TParent>;
    deleteBeneficiary?: MutationToDeleteBeneficiaryResolver<TParent>;
    deleteContact?: MutationToDeleteContactResolver<TParent>;
    deleteContractor?: MutationToDeleteContractorResolver<TParent>;
    deleteContractorOffice?: MutationToDeleteContractorOfficeResolver<TParent>;
    deleteContractorPolicy?: MutationToDeleteContractorPolicyResolver<TParent>;
    deleteInsurerModule?: MutationToDeleteInsurerModuleResolver<TParent>;
    deleteFee?: MutationToDeleteFeeResolver<TParent>;
    deleteMerchandise?: MutationToDeleteMerchandiseResolver<TParent>;
    deleteInsurerCompany?: MutationToDeleteInsurerCompanyResolver<TParent>;
    deleteMoney?: MutationToDeleteMoneyResolver<TParent>;
    deletePolicy?: MutationToDeletePolicyResolver<TParent>;
    updateBeneficiary?: MutationToUpdateBeneficiaryResolver<TParent>;
    updateCertificate?: MutationToUpdateCertificateResolver<TParent>;
    updateContact?: MutationToUpdateContactResolver<TParent>;
    updateContractor?: MutationToUpdateContractorResolver<TParent>;
    updateFee?: MutationToUpdateFeeResolver<TParent>;
    updateInsurerCompany?: MutationToUpdateInsurerCompanyResolver<TParent>;
    updateMerchandise?: MutationToUpdateMerchandiseResolver<TParent>;
    updateMoney?: MutationToUpdateMoneyResolver<TParent>;
    updatePolicy?: MutationToUpdatePolicyResolver<TParent>;
    createAttendanceStudent?: MutationToCreateAttendanceStudentResolver<TParent>;
    createClassroom?: MutationToCreateClassroomResolver<TParent>;
    createDayService?: MutationToCreateDayServiceResolver<TParent>;
    createGrade?: MutationToCreateGradeResolver<TParent>;
    createLevel?: MutationToCreateLevelResolver<TParent>;
    createSchool?: MutationToCreateSchoolResolver<TParent>;
    createStudent?: MutationToCreateStudentResolver<TParent>;
    createBulkStudent?: MutationToCreateBulkStudentResolver<TParent>;
    updateAttendanceStudents?: MutationToUpdateAttendanceStudentsResolver<TParent>;
    updateClassroom?: MutationToUpdateClassroomResolver<TParent>;
    updateDayService?: MutationToUpdateDayServiceResolver<TParent>;
    updateGrade?: MutationToUpdateGradeResolver<TParent>;
    updateLevel?: MutationToUpdateLevelResolver<TParent>;
    updateSchool?: MutationToUpdateSchoolResolver<TParent>;
    updateStudent?: MutationToUpdateStudentResolver<TParent>;
    deleteAttendanceStudent?: MutationToDeleteAttendanceStudentResolver<TParent>;
    deleteClassroom?: MutationToDeleteClassroomResolver<TParent>;
    deleteDayService?: MutationToDeleteDayServiceResolver<TParent>;
    deleteGrade?: MutationToDeleteGradeResolver<TParent>;
    deleteLevel?: MutationToDeleteLevelResolver<TParent>;
    deleteSchool?: MutationToDeleteSchoolResolver<TParent>;
    deleteStudent?: MutationToDeleteStudentResolver<TParent>;
    deleteStudentTutor?: MutationToDeleteStudentTutorResolver<TParent>;
    createBeneficiarie?: MutationToCreateBeneficiarieResolver<TParent>;
    updateBeneficiarie?: MutationToUpdateBeneficiarieResolver<TParent>;
    deleteBeneficiarie?: MutationToDeleteBeneficiarieResolver<TParent>;
    createFormAccidentDisease?: MutationToCreateFormAccidentDiseaseResolver<TParent>;
    updateFormAccidentDisease?: MutationToUpdateFormAccidentDiseaseResolver<TParent>;
    deleteFormAccidentDisease?: MutationToDeleteFormAccidentDiseaseResolver<TParent>;
    createFormAutomobileDamage?: MutationToCreateFormAutomobileDamageResolver<TParent>;
    updateFormAutomobileDamage?: MutationToUpdateFormAutomobileDamageResolver<TParent>;
    deleteFormAutomobileDamage?: MutationToDeleteFormAutomobileDamageResolver<TParent>;
    createFormCarCatalog?: MutationToCreateFormCarCatalogResolver<TParent>;
    updateFormCarCatalog?: MutationToUpdateFormCarCatalogResolver<TParent>;
    deleteFormCarCatalog?: MutationToDeleteFormCarCatalogResolver<TParent>;
    createFormDamage?: MutationToCreateFormDamageResolver<TParent>;
    updateFormDamage?: MutationToUpdateFormDamageResolver<TParent>;
    deleteFormDamage?: MutationToDeleteFormDamageResolver<TParent>;
    createFormLife?: MutationToCreateFormLifeResolver<TParent>;
    updateFormLife?: MutationToUpdateFormLifeResolver<TParent>;
    deleteFormLife?: MutationToDeleteFormLifeResolver<TParent>;
    createInvolvedReferrer?: MutationToCreateInvolvedReferrerResolver<TParent>;
    updateInvolvedReferrer?: MutationToUpdateInvolvedReferrerResolver<TParent>;
    deleteInvolvedReferrer?: MutationToDeleteInvolvedReferrerResolver<TParent>;
    createOldPolice?: MutationToCreateOldPoliceResolver<TParent>;
    updateOldPolice?: MutationToUpdateOldPoliceResolver<TParent>;
    deleteOldPolice?: MutationToDeleteOldPoliceResolver<TParent>;
    createPersonalInformation?: MutationToCreatePersonalInformationResolver<TParent>;
    updatePersonalInformation?: MutationToUpdatePersonalInformationResolver<TParent>;
    deletePersonalInformation?: MutationToDeletePersonalInformationResolver<TParent>;
    createPolice?: MutationToCreatePoliceResolver<TParent>;
    updatePolice?: MutationToUpdatePoliceResolver<TParent>;
    deletePolice?: MutationToDeletePoliceResolver<TParent>;
    createPoliceAssign?: MutationToCreatePoliceAssignResolver<TParent>;
    updatePoliceAssign?: MutationToUpdatePoliceAssignResolver<TParent>;
    deletePoliceAssign?: MutationToDeletePoliceAssignResolver<TParent>;
    createPolicePendient?: MutationToCreatePolicePendientResolver<TParent>;
    updatePolicePendient?: MutationToUpdatePolicePendientResolver<TParent>;
    deletePolicePendient?: MutationToDeletePolicePendientResolver<TParent>;
    createPoliceQuote?: MutationToCreatePoliceQuoteResolver<TParent>;
    updatePoliceQuote?: MutationToUpdatePoliceQuoteResolver<TParent>;
    deletePoliceQuote?: MutationToDeletePoliceQuoteResolver<TParent>;
    updatePoliceQuotePrima?: MutationToUpdatePoliceQuotePrimaResolver<TParent>;
    deletePoliceQuotePrima?: MutationToDeletePoliceQuotePrimaResolver<TParent>;
    createRelationShip?: MutationToCreateRelationShipResolver<TParent>;
    updateRelationShip?: MutationToUpdateRelationShipResolver<TParent>;
    deleteRelationShip?: MutationToDeleteRelationShipResolver<TParent>;
    createSucursal?: MutationToCreateSucursalResolver<TParent>;
    updateSucursal?: MutationToUpdateSucursalResolver<TParent>;
    deleteSucursal?: MutationToDeleteSucursalResolver<TParent>;
    createAgentKey?: MutationToCreateAgentKeyResolver<TParent>;
    updateAgentKey?: MutationToUpdateAgentKeyResolver<TParent>;
    deleteAgentKey?: MutationToDeleteAgentKeyResolver<TParent>;
    createAgentProviderContact?: MutationToCreateAgentProviderContactResolver<TParent>;
    updateAgentProviderContact?: MutationToUpdateAgentProviderContactResolver<TParent>;
    deleteAgentProviderContact?: MutationToDeleteAgentProviderContactResolver<TParent>;
    createAgentProvider?: MutationToCreateAgentProviderResolver<TParent>;
    updateAgentProvider?: MutationToUpdateAgentProviderResolver<TParent>;
    deleteAgentProvider?: MutationToDeleteAgentProviderResolver<TParent>;
    createBranch?: MutationToCreateBranchResolver<TParent>;
    updateBranch?: MutationToUpdateBranchResolver<TParent>;
    deleteBranch?: MutationToDeleteBranchResolver<TParent>;
    createComission?: MutationToCreateComissionResolver<TParent>;
    updateComission?: MutationToUpdateComissionResolver<TParent>;
    deleteComission?: MutationToDeleteComissionResolver<TParent>;
    createContractorCelula?: MutationToCreateContractorCelulaResolver<TParent>;
    updateContractorCelula?: MutationToUpdateContractorCelulaResolver<TParent>;
    deleteContractorCelula?: MutationToDeleteContractorCelulaResolver<TParent>;
    createContractorClassification?: MutationToCreateContractorClassificationResolver<TParent>;
    updateContractorClassification?: MutationToUpdateContractorClassificationResolver<TParent>;
    deleteContractorClassification?: MutationToDeleteContractorClassificationResolver<TParent>;
    createContractorGroupingLevel?: MutationToCreateContractorGroupingLevelResolver<TParent>;
    updateContractorGroupingLevel?: MutationToUpdateContractorGroupingLevelResolver<TParent>;
    deleteContractorGroupingLevel?: MutationToDeleteContractorGroupingLevelResolver<TParent>;
    saam_createContractor?: MutationToSaam_createContractorResolver<TParent>;
    saam_updateContractor?: MutationToSaam_updateContractorResolver<TParent>;
    saam_deleteContractor?: MutationToSaam_deleteContractorResolver<TParent>;
    createContractorProcessDocument?: MutationToCreateContractorProcessDocumentResolver<TParent>;
    updateContractorProcessDocument?: MutationToUpdateContractorProcessDocumentResolver<TParent>;
    deleteContractorProcessDocument?: MutationToDeleteContractorProcessDocumentResolver<TParent>;
    createCoverageCoinsurance?: MutationToCreateCoverageCoinsuranceResolver<TParent>;
    updateCoverageCoinsurance?: MutationToUpdateCoverageCoinsuranceResolver<TParent>;
    deleteCoverageCoinsurance?: MutationToDeleteCoverageCoinsuranceResolver<TParent>;
    createCoverageDeductible?: MutationToCreateCoverageDeductibleResolver<TParent>;
    updateCoverageDeductible?: MutationToUpdateCoverageDeductibleResolver<TParent>;
    deleteCoverageDeductible?: MutationToDeleteCoverageDeductibleResolver<TParent>;
    createCoverageInPolicy?: MutationToCreateCoverageInPolicyResolver<TParent>;
    updateCoverageInPolicy?: MutationToUpdateCoverageInPolicyResolver<TParent>;
    deleteCoverageInPolicy?: MutationToDeleteCoverageInPolicyResolver<TParent>;
    createCoverage?: MutationToCreateCoverageResolver<TParent>;
    updateCoverage?: MutationToUpdateCoverageResolver<TParent>;
    deleteCoverage?: MutationToDeleteCoverageResolver<TParent>;
    createCoveragePackage?: MutationToCreateCoveragePackageResolver<TParent>;
    updateCoveragePackage?: MutationToUpdateCoveragePackageResolver<TParent>;
    deleteCoveragePackage?: MutationToDeleteCoveragePackageResolver<TParent>;
    createCoverageSuminsured?: MutationToCreateCoverageSuminsuredResolver<TParent>;
    updateCoverageSuminsured?: MutationToUpdateCoverageSuminsuredResolver<TParent>;
    deleteCoverageSuminsured?: MutationToDeleteCoverageSuminsuredResolver<TParent>;
    createCoverageTopecoinsurance?: MutationToCreateCoverageTopecoinsuranceResolver<TParent>;
    updateCoverageTopecoinsurance?: MutationToUpdateCoverageTopecoinsuranceResolver<TParent>;
    deleteCoverageTopecoinsurance?: MutationToDeleteCoverageTopecoinsuranceResolver<TParent>;
    createProcessDocument?: MutationToCreateProcessDocumentResolver<TParent>;
    updateProcessDocument?: MutationToUpdateProcessDocumentResolver<TParent>;
    deleteProcessDocument?: MutationToDeleteProcessDocumentResolver<TParent>;
    createProjectAgentProviderBranch?: MutationToCreateProjectAgentProviderBranchResolver<TParent>;
    updateProjectAgentProviderBranch?: MutationToUpdateProjectAgentProviderBranchResolver<TParent>;
    deleteProjectAgentProviderBranch?: MutationToDeleteProjectAgentProviderBranchResolver<TParent>;
    createProjectAgentProvider?: MutationToCreateProjectAgentProviderResolver<TParent>;
    updateProjectAgentProvider?: MutationToUpdateProjectAgentProviderResolver<TParent>;
    deleteProjectAgentProvider?: MutationToDeleteProjectAgentProviderResolver<TParent>;
    createReferrerAccountState?: MutationToCreateReferrerAccountStateResolver<TParent>;
    updateReferrerAccountState?: MutationToUpdateReferrerAccountStateResolver<TParent>;
    deleteReferrerAccountState?: MutationToDeleteReferrerAccountStateResolver<TParent>;
    createReferrerBranch?: MutationToCreateReferrerBranchResolver<TParent>;
    updateReferrerBranch?: MutationToUpdateReferrerBranchResolver<TParent>;
    deleteReferrerBranch?: MutationToDeleteReferrerBranchResolver<TParent>;
    createReferrer?: MutationToCreateReferrerResolver<TParent>;
    updateReferrer?: MutationToUpdateReferrerResolver<TParent>;
    deleteReferrer?: MutationToDeleteReferrerResolver<TParent>;
    createResponsableInvolved?: MutationToCreateResponsableInvolvedResolver<TParent>;
    updateResponsableInvolved?: MutationToUpdateResponsableInvolvedResolver<TParent>;
    deleteResponsableInvolved?: MutationToDeleteResponsableInvolvedResolver<TParent>;
    createSubBranch?: MutationToCreateSubBranchResolver<TParent>;
    updateSubBranch?: MutationToUpdateSubBranchResolver<TParent>;
    deleteSubBranch?: MutationToDeleteSubBranchResolver<TParent>;
    createProjectAgentProviderEmailReminder?: MutationToCreateProjectAgentProviderEmailReminderResolver<TParent>;
    updateProjectAgentProviderEmailReminder?: MutationToUpdateProjectAgentProviderEmailReminderResolver<TParent>;
    deleteProjectAgentProviderEmailReminder?: MutationToDeleteProjectAgentProviderEmailReminderResolver<TParent>;
    createEndorsement?: MutationToCreateEndorsementResolver<TParent>;
    updateEndorsement?: MutationToUpdateEndorsementResolver<TParent>;
    deleteEndorsement?: MutationToDeleteEndorsementResolver<TParent>;
    createEndorsementCert?: MutationToCreateEndorsementCertResolver<TParent>;
    updateEndorsementCert?: MutationToUpdateEndorsementCertResolver<TParent>;
    deleteEndorsementCert?: MutationToDeleteEndorsementCertResolver<TParent>;
    createSinister?: MutationToCreateSinisterResolver<TParent>;
    updateSinister?: MutationToUpdateSinisterResolver<TParent>;
    deleteSinister?: MutationToDeleteSinisterResolver<TParent>;
    createSinisterAiling?: MutationToCreateSinisterAilingResolver<TParent>;
    updateSinisterAiling?: MutationToUpdateSinisterAilingResolver<TParent>;
    deleteSinisterAiling?: MutationToDeleteSinisterAilingResolver<TParent>;
    createSinisterCar?: MutationToCreateSinisterCarResolver<TParent>;
    updateSinisterCar?: MutationToUpdateSinisterCarResolver<TParent>;
    deleteSinisterCar?: MutationToDeleteSinisterCarResolver<TParent>;
    createSinisterCarContact?: MutationToCreateSinisterCarContactResolver<TParent>;
    updateSinisterCarContact?: MutationToUpdateSinisterCarContactResolver<TParent>;
    deleteSinisterCarContact?: MutationToDeleteSinisterCarContactResolver<TParent>;
    createSinisterDamage?: MutationToCreateSinisterDamageResolver<TParent>;
    updateSinisterDamage?: MutationToUpdateSinisterDamageResolver<TParent>;
    deleteSinisterDamage?: MutationToDeleteSinisterDamageResolver<TParent>;
    createSinisterDamageContact?: MutationToCreateSinisterDamageContactResolver<TParent>;
    updateSinisterDamageContact?: MutationToUpdateSinisterDamageContactResolver<TParent>;
    deleteSinisterDamageContact?: MutationToDeleteSinisterDamageContactResolver<TParent>;
    createSinisterLife?: MutationToCreateSinisterLifeResolver<TParent>;
    updateSinisterLife?: MutationToUpdateSinisterLifeResolver<TParent>;
    deleteSinisterLife?: MutationToDeleteSinisterLifeResolver<TParent>;
    createSinisterLifeContact?: MutationToCreateSinisterLifeContactResolver<TParent>;
    updateSinisterLifeContact?: MutationToUpdateSinisterLifeContactResolver<TParent>;
    deleteSinisterLifeContact?: MutationToDeleteSinisterLifeContactResolver<TParent>;
    createSinisterHospital?: MutationToCreateSinisterHospitalResolver<TParent>;
    updateSinisterHospital?: MutationToUpdateSinisterHospitalResolver<TParent>;
    deleteSinisterHospital?: MutationToDeleteSinisterHospitalResolver<TParent>;
    createSinisterFactura?: MutationToCreateSinisterFacturaResolver<TParent>;
    updateSinisterFactura?: MutationToUpdateSinisterFacturaResolver<TParent>;
    deleteSinisterFactura?: MutationToDeleteSinisterFacturaResolver<TParent>;
    createPoliceReceipt?: MutationToCreatePoliceReceiptResolver<TParent>;
    updatePoliceReceipt?: MutationToUpdatePoliceReceiptResolver<TParent>;
    deletePoliceReceipt?: MutationToDeletePoliceReceiptResolver<TParent>;
    createPoliceReceiptAccount?: MutationToCreatePoliceReceiptAccountResolver<TParent>;
    updatePoliceReceiptAccount?: MutationToUpdatePoliceReceiptAccountResolver<TParent>;
    deletePoliceReceiptAccount?: MutationToDeletePoliceReceiptAccountResolver<TParent>;
    createPoliceReceiptAccountState?: MutationToCreatePoliceReceiptAccountStateResolver<TParent>;
    updatePoliceReceiptAccountState?: MutationToUpdatePoliceReceiptAccountStateResolver<TParent>;
    deletePoliceReceiptAccountState?: MutationToDeletePoliceReceiptAccountStateResolver<TParent>;
    createPoliceReceiptFolio?: MutationToCreatePoliceReceiptFolioResolver<TParent>;
    updatePoliceReceiptFolio?: MutationToUpdatePoliceReceiptFolioResolver<TParent>;
    deletePoliceReceiptFolio?: MutationToDeletePoliceReceiptFolioResolver<TParent>;
    createPoliceReceiptPayment?: MutationToCreatePoliceReceiptPaymentResolver<TParent>;
    updatePoliceReceiptPayment?: MutationToUpdatePoliceReceiptPaymentResolver<TParent>;
    deletePoliceReceiptPayment?: MutationToDeletePoliceReceiptPaymentResolver<TParent>;
    createPoliceFile?: MutationToCreatePoliceFileResolver<TParent>;
    updatePoliceFile?: MutationToUpdatePoliceFileResolver<TParent>;
    deletePoliceFile?: MutationToDeletePoliceFileResolver<TParent>;
    createInsurerComment?: MutationToCreateInsurerCommentResolver<TParent>;
    updateInsurerComment?: MutationToUpdateInsurerCommentResolver<TParent>;
    deleteInsurerComment?: MutationToDeleteInsurerCommentResolver<TParent>;
    createInsurerFileReading?: MutationToCreateInsurerFileReadingResolver<TParent>;
    updateInsurerFileReading?: MutationToUpdateInsurerFileReadingResolver<TParent>;
    deleteInsurerFileReading?: MutationToDeleteInsurerFileReadingResolver<TParent>;
    createInsurerFileReadingTag?: MutationToCreateInsurerFileReadingTagResolver<TParent>;
    updateInsurerFileReadingTag?: MutationToUpdateInsurerFileReadingTagResolver<TParent>;
    deleteInsurerFileReadingTag?: MutationToDeleteInsurerFileReadingTagResolver<TParent>;
    updateInsurerBailType?: MutationToUpdateInsurerBailTypeResolver<TParent>;
    deleteInsurerBailType?: MutationToDeleteInsurerBailTypeResolver<TParent>;
    createInsurerInvolved?: MutationToCreateInsurerInvolvedResolver<TParent>;
    updateInsurerInvolved?: MutationToUpdateInsurerInvolvedResolver<TParent>;
    deleteInsurerInvolved?: MutationToDeleteInsurerInvolvedResolver<TParent>;
    createInsurerLog?: MutationToCreateInsurerLogResolver<TParent>;
    updateInsurerLog?: MutationToUpdateInsurerLogResolver<TParent>;
    deleteInsurerLog?: MutationToDeleteInsurerLogResolver<TParent>;
    createInsurerLogEmail?: MutationToCreateInsurerLogEmailResolver<TParent>;
    updateInsurerLogEmail?: MutationToUpdateInsurerLogEmailResolver<TParent>;
    deleteInsurerLogEmail?: MutationToDeleteInsurerLogEmailResolver<TParent>;
    createInsurerOrgInfo?: MutationToCreateInsurerOrgInfoResolver<TParent>;
    updateInsurerOrgInfo?: MutationToUpdateInsurerOrgInfoResolver<TParent>;
    deleteInsurerOrgInfo?: MutationToDeleteInsurerOrgInfoResolver<TParent>;
    createInsurerTicket?: MutationToCreateInsurerTicketResolver<TParent>;
    updateInsurerTicket?: MutationToUpdateInsurerTicketResolver<TParent>;
    deleteInsurerTicket?: MutationToDeleteInsurerTicketResolver<TParent>;
    createInsurerSchedule?: MutationToCreateInsurerScheduleResolver<TParent>;
    updateInsurerSchedule?: MutationToUpdateInsurerScheduleResolver<TParent>;
    deleteInsurerSchedule?: MutationToDeleteInsurerScheduleResolver<TParent>;
    createInsurerScheduleParticipant?: MutationToCreateInsurerScheduleParticipantResolver<TParent>;
    updateInsurerScheduleParticipant?: MutationToUpdateInsurerScheduleParticipantResolver<TParent>;
    deleteInsurerScheduleParticipant?: MutationToDeleteInsurerScheduleParticipantResolver<TParent>;
    createInsurerNotification?: MutationToCreateInsurerNotificationResolver<TParent>;
    updateInsurerNotification?: MutationToUpdateInsurerNotificationResolver<TParent>;
    deleteInsurerNotification?: MutationToDeleteInsurerNotificationResolver<TParent>;
    createInsurerReminder?: MutationToCreateInsurerReminderResolver<TParent>;
    updateInsurerReminder?: MutationToUpdateInsurerReminderResolver<TParent>;
    deleteInsurerReminder?: MutationToDeleteInsurerReminderResolver<TParent>;
    createInsurerReminderProjectAgentProvider?: MutationToCreateInsurerReminderProjectAgentProviderResolver<TParent>;
    updateInsurerReminderProjectAgentProvider?: MutationToUpdateInsurerReminderProjectAgentProviderResolver<TParent>;
    deleteInsurerReminderProjectAgentProvider?: MutationToDeleteInsurerReminderProjectAgentProviderResolver<TParent>;
    createInsurerReminderRecord?: MutationToCreateInsurerReminderRecordResolver<TParent>;
    updateInsurerReminderRecord?: MutationToUpdateInsurerReminderRecordResolver<TParent>;
    deleteInsurerReminderRecord?: MutationToDeleteInsurerReminderRecordResolver<TParent>;
    createInsurerReminderSubBranch?: MutationToCreateInsurerReminderSubBranchResolver<TParent>;
    updateInsurerReminderSubBranch?: MutationToUpdateInsurerReminderSubBranchResolver<TParent>;
    deleteInsurerReminderSubBranch?: MutationToDeleteInsurerReminderSubBranchResolver<TParent>;
    createInsurerBailType?: MutationToCreateInsurerBailTypeResolver<TParent>;
    createInsurerBirthDateTemplate?: MutationToCreateInsurerBirthDateTemplateResolver<TParent>;
    updateInsurerBirthDateTemplate?: MutationToUpdateInsurerBirthDateTemplateResolver<TParent>;
    deleteInsurerBirthDateTemplate?: MutationToDeleteInsurerBirthDateTemplateResolver<TParent>;
    createInsurerDirectory?: MutationToCreateInsurerDirectoryResolver<TParent>;
    updateInsurerDirectory?: MutationToUpdateInsurerDirectoryResolver<TParent>;
    deleteInsurerDirectory?: MutationToDeleteInsurerDirectoryResolver<TParent>;
    createInsurerExpense?: MutationToCreateInsurerExpenseResolver<TParent>;
    updateInsurerExpense?: MutationToUpdateInsurerExpenseResolver<TParent>;
    deleteInsurerExpense?: MutationToDeleteInsurerExpenseResolver<TParent>;
    createInsurerIbisForm?: MutationToCreateInsurerIbisFormResolver<TParent>;
    updateInsurerIbisForm?: MutationToUpdateInsurerIbisFormResolver<TParent>;
    deleteInsurerIbisForm?: MutationToDeleteInsurerIbisFormResolver<TParent>;
    createInsurerIbisProvider?: MutationToCreateInsurerIbisProviderResolver<TParent>;
    updateInsurerIbisProvider?: MutationToUpdateInsurerIbisProviderResolver<TParent>;
    deleteInsurerIbisProvider?: MutationToDeleteInsurerIbisProviderResolver<TParent>;
    createInsurerSender?: MutationToCreateInsurerSenderResolver<TParent>;
    updateInsurerSender?: MutationToUpdateInsurerSenderResolver<TParent>;
    deleteInsurerSender?: MutationToDeleteInsurerSenderResolver<TParent>;
    createInsurerZipCodeSepomex?: MutationToCreateInsurerZipCodeSepomexResolver<TParent>;
    updateInsurerZipCodeSepomex?: MutationToUpdateInsurerZipCodeSepomexResolver<TParent>;
    deleteInsurerZipCodeSepomex?: MutationToDeleteInsurerZipCodeSepomexResolver<TParent>;
    createAgentProviderBono?: MutationToCreateAgentProviderBonoResolver<TParent>;
    updateAgentProviderBono?: MutationToUpdateAgentProviderBonoResolver<TParent>;
    deleteAgentProviderBono?: MutationToDeleteAgentProviderBonoResolver<TParent>;
    saam_sendNotification?: MutationToSaam_sendNotificationResolver<TParent>;
    createMultipleNotification?: MutationToCreateMultipleNotificationResolver<TParent>;
    createMultipleMemberNotification?: MutationToCreateMultipleMemberNotificationResolver<TParent>;
    createMemberNotification?: MutationToCreateMemberNotificationResolver<TParent>;
    createNotification?: MutationToCreateNotificationResolver<TParent>;
    updateMultipleNotification?: MutationToUpdateMultipleNotificationResolver<TParent>;
    updateNotification?: MutationToUpdateNotificationResolver<TParent>;
    deleteNotification?: MutationToDeleteNotificationResolver<TParent>;
    createDevice?: MutationToCreateDeviceResolver<TParent>;
    updateDevice?: MutationToUpdateDeviceResolver<TParent>;
    deleteDevice?: MutationToDeleteDeviceResolver<TParent>;
    addDots?: MutationToAddDotsResolver<TParent>;
    setCodeAsUnavailable?: MutationToSetCodeAsUnavailableResolver<TParent>;
    createAdminCode?: MutationToCreateAdminCodeResolver<TParent>;
    scanCode?: MutationToScanCodeResolver<TParent>;
    sendMessage?: MutationToSendMessageResolver<TParent>;
    lookForCode?: MutationToLookForCodeResolver<TParent>;
    createCode?: MutationToCreateCodeResolver<TParent>;
    exchange_createProvider?: MutationToExchange_createProviderResolver<TParent>;
    createPrizeCategory?: MutationToCreatePrizeCategoryResolver<TParent>;
    createPrizeCode?: MutationToCreatePrizeCodeResolver<TParent>;
    deleteCode?: MutationToDeleteCodeResolver<TParent>;
    deletePrizeCode?: MutationToDeletePrizeCodeResolver<TParent>;
    exchange_deleteProvider?: MutationToExchange_deleteProviderResolver<TParent>;
    exchangeDots?: MutationToExchangeDotsResolver<TParent>;
    createAdverseEvent?: MutationToCreateAdverseEventResolver<TParent>;
    execCreateCodes?: MutationToExecCreateCodesResolver<TParent>;
    setGlobalCode?: MutationToSetGlobalCodeResolver<TParent>;
    deleteAdverseEvent?: MutationToDeleteAdverseEventResolver<TParent>;
    createBrand?: MutationToCreateBrandResolver<TParent>;
}
export interface MutationToSendQuizToEmailArgs {
    input: ISendQuizToEmailInput;
}
export interface MutationToSendQuizToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSendQuizToEmailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToTranslateCountriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateWithIdProfileArgs {
    input: IUpdateProfileWithIdInput;
}
export interface MutationToUpdateWithIdProfileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateWithIdProfileArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateNicheArgs {
    input: INicheInput;
}
export interface MutationToCreateNicheResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateNicheArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateNicheArgs {
    id: IUUID;
    input: INicheInput;
}
export interface MutationToUpdateNicheResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateNicheArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteNicheArgs {
    id: IUUID;
}
export interface MutationToDeleteNicheResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteNicheArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateNicheServiceArgs {
    input: INicheServiceInput;
}
export interface MutationToCreateNicheServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateNicheServiceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBulkTutorArgs {
    input: ICreateBulkTutorInput;
}
export interface MutationToCreateBulkTutorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBulkTutorArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateNicheServiceArgs {
    id: IUUID;
    input: INicheServiceInput;
}
export interface MutationToUpdateNicheServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateNicheServiceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteNicheServiceArgs {
    id: IUUID;
}
export interface MutationToDeleteNicheServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteNicheServiceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBillingDataArgs {
    input: IUpdateBillingDataInput;
}
export interface MutationToUpdateBillingDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBillingDataArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCompanyDataArgs {
    input: IUpdateCompanyDataInput;
}
export interface MutationToUpdateCompanyDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCompanyDataArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBulkTeacherArgs {
    input: ICreateBulkTeacherInput;
}
export interface MutationToCreateBulkTeacherResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBulkTeacherArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateHealthInsuranceArgs {
    input: IUpdateHealthInsuranceInput;
}
export interface MutationToUpdateHealthInsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateHealthInsuranceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateAttendanceExcelArgs {
    input: ICreateAttendanceExcelInput;
}
export interface MutationToCreateAttendanceExcelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateAttendanceExcelArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBulkUserArgs {
    input: ICreateBulkUserInput;
}
export interface MutationToCreateBulkUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBulkUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateAttendanceArgs {
    input: ICreateAttendanceInput;
}
export interface MutationToCreateAttendanceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateAttendanceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCheisiUsersExcelArgs {
    input: ICreateCheisiUsersExcelInput;
}
export interface MutationToCreateCheisiUsersExcelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCheisiUsersExcelArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToNewContactFormArgs {
    input: INewContactFormInput;
}
export interface MutationToNewContactFormResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToNewContactFormArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToNewExternalLoginArgs {
    input: INewExternalLoginInput;
}
export interface MutationToNewExternalLoginResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToNewExternalLoginArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteUserArgs {
    input: IDeleteUserInput;
}
export interface MutationToDeleteUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToTestBulkArgs {
    input: ITestBulkInput;
}
export interface MutationToTestBulkResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToTestBulkArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePositionColumnsArgs {
    input: IUpdatePositionColumnsInput;
}
export interface MutationToUpdatePositionColumnsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePositionColumnsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePositionBlockColumnsArgs {
    input: IUpdatePositionBlockColumnsInput;
}
export interface MutationToUpdatePositionBlockColumnsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePositionBlockColumnsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToLoginWithProviderArgs {
    input: ILoginWithProviderInput;
}
export interface MutationToLoginWithProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToLoginWithProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateProjectSocialNetworkArgs {
    input: ICreateProjectSocialNetworkInput;
}
export interface MutationToCreateProjectSocialNetworkResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateProjectSocialNetworkArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateProjectSocialNetworkArgs {
    input: IUpdateProjectSocialNetworkInput;
}
export interface MutationToUpdateProjectSocialNetworkResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateProjectSocialNetworkArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteProjectSocialNetworkArgs {
    input: IDeleteProjectSocialNetworkInput;
}
export interface MutationToDeleteProjectSocialNetworkResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProjectSocialNetworkArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateRecommendedProjectArgs {
    input: ICreateRecommendedProjectInput;
}
export interface MutationToCreateRecommendedProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateRecommendedProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateRecommendedProjectArgs {
    input: IUpdateRecommendedProjectInput;
}
export interface MutationToUpdateRecommendedProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateRecommendedProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteRecommendedProjectArgs {
    input: IDeleteRecommendedProjectInput;
}
export interface MutationToDeleteRecommendedProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteRecommendedProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToSetProjectToProductionArgs {
    input: ISetProjectToProductionInput;
}
export interface MutationToSetProjectToProductionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSetProjectToProductionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateProjectTemplateArgs {
    input: ICreateProjectTemplateInput;
}
export interface MutationToCreateProjectTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateProjectTemplateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateProjectTemplateArgs {
    input: IUpdateProjectTemplateInput;
}
export interface MutationToUpdateProjectTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateProjectTemplateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteProjectTemplateArgs {
    input: IDeleteProjectTemplateInput;
}
export interface MutationToDeleteProjectTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProjectTemplateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMemberArgs {
    input: ICreateMemberInput;
}
export interface MutationToCreateMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToLoginMemberArgs {
    input: ILoginMemberInput;
}
export interface MutationToLoginMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToLoginMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCompanyArgs {
    input: ICreateCompanyInput;
}
export interface MutationToCreateCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCompanyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateProjectArgs {
    input: ICreateProjectInput;
}
export interface MutationToCreateProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToGenerateSlugArgs {
    phrase: string;
}
export interface MutationToGenerateSlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToGenerateSlugArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateNewRolesArgs {
    projectId: IUUID;
}
export interface MutationToCreateNewRolesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateNewRolesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateUserArgs {
    input: ICreateUserInput;
}
export interface MutationToCreateUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateOrFindUserArgs {
    input: ICreateOrFindUserInput;
}
export interface MutationToCreateOrFindUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateOrFindUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateOrdinaryUserArgs {
    input: ICreateOrdinaryUserInput;
}
export interface MutationToCreateOrdinaryUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateOrdinaryUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateUserWithoutMailArgs {
    input: ICreateUserWithoutMailInput;
}
export interface MutationToCreateUserWithoutMailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateUserWithoutMailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateProfileArgs {
    input: IUpdateProfileInput;
}
export interface MutationToUpdateProfileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateProfileArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePasswordArgs {
    input: IUpdatePasswordInput;
}
export interface MutationToUpdatePasswordResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePasswordArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToActiveMemberArgs {
    input: IActiveMemberInput;
}
export interface MutationToActiveMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToActiveMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateProjectRoleArgs {
    input: ICreateProjectRoleInput;
}
export interface MutationToCreateProjectRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateProjectRoleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToRemoveAccentArgs {
    txt: string;
}
export interface MutationToRemoveAccentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToRemoveAccentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUploadPhotoProfileArgs {
    input: IUploadPhotoProfileInput;
}
export interface MutationToUploadPhotoProfileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUploadPhotoProfileArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteProjectArgs {
    input: IDeleteProjectInput;
}
export interface MutationToDeleteProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCompanyArgs {
    input: IUpdateCompanyInput;
}
export interface MutationToUpdateCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCompanyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToRestorePasswordArgs {
    input: IRestorePasswordInput;
}
export interface MutationToRestorePasswordResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToRestorePasswordArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToRecoverPasswordArgs {
    input: IRecoverPasswordInput;
}
export interface MutationToRecoverPasswordResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToRecoverPasswordArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToVerifyTokenArgs {
    input: IVerifyTokenInput;
}
export interface MutationToVerifyTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToVerifyTokenArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateGroupArgs {
    input: ICreateGroupInput;
}
export interface MutationToCreateGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToAddGroupToMemberArgs {
    input: IAddGroupToMemberInput;
}
export interface MutationToAddGroupToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAddGroupToMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToAddGroupToTaxonomyArgs {
    input: IAddGroupToTaxonomyInput;
}
export interface MutationToAddGroupToTaxonomyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAddGroupToTaxonomyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToAddTaxonomyToMemberArgs {
    input: IAddTaxonomyToMemberInput;
}
export interface MutationToAddTaxonomyToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAddTaxonomyToMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteGroupArgs {
    input: IDeleteGroupInput;
}
export interface MutationToDeleteGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteGroupTaxonomyArgs {
    input: IDeleteGroupTaxonomyInput;
}
export interface MutationToDeleteGroupTaxonomyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteGroupTaxonomyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMemberGroupArgs {
    input: IDeleteMemberGroupMutationInput;
}
export interface MutationToDeleteMemberGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMemberGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMemberTaxonomyArgs {
    input: IDeleteMemberTaxonomyInput;
}
export interface MutationToDeleteMemberTaxonomyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMemberTaxonomyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMemberArgs {
    id: IUUID;
}
export interface MutationToDeleteMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteProjectRoleArgs {
    input: IDeleteProjectRoleInput;
}
export interface MutationToDeleteProjectRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProjectRoleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateUpdatePermissionArgs {
    input: ICreateUpdatePermissionInput;
}
export interface MutationToCreateUpdatePermissionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateUpdatePermissionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateProjectArgs {
    input: IUpdateProjectInput;
}
export interface MutationToUpdateProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateProjectRoleArgs {
    input: IUpdateProjectRoleInput;
}
export interface MutationToUpdateProjectRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateProjectRoleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateGroupArgs {
    input: IUpdateGroupInput;
}
export interface MutationToUpdateGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToAddMemberAsAdminArgs {
    input: IAddMemberAsAdminInput;
}
export interface MutationToAddMemberAsAdminResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAddMemberAsAdminArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMemberStreamArgs {
    input: ICreateMemberStreamInput;
}
export interface MutationToCreateMemberStreamResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMemberStreamArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMemberFromMemberProjectsArgs {
    input: IDeleteMemberFromMemberProjectsInput;
}
export interface MutationToDeleteMemberFromMemberProjectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMemberFromMemberProjectsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToAddMemberToCompanyArgs {
    input: IAddMemberToCompanyInput;
}
export interface MutationToAddMemberToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAddMemberToCompanyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePageManagerArgs {
    input: ICreatePageManagerInput;
}
export interface MutationToCreatePageManagerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePageManagerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateViewManagerArgs {
    input: ICreateViewManagerInput;
}
export interface MutationToCreateViewManagerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateViewManagerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateViewColumnArgs {
    input: ICreateViewColumnInput;
}
export interface MutationToCreateViewColumnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateViewColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateViewBlockColumnArgs {
    input: ICreateViewBlockColumnInput;
}
export interface MutationToCreateViewBlockColumnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateViewBlockColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePageManagerArgs {
    input: IUpdatePageManagerInput;
}
export interface MutationToUpdatePageManagerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePageManagerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateViewManagerArgs {
    input: IUpdateViewManagerInput;
}
export interface MutationToUpdateViewManagerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateViewManagerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateViewColumnArgs {
    input: IUpdateViewColumnInput;
}
export interface MutationToUpdateViewColumnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateViewColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateViewBlockColumnArgs {
    input: IUpdateViewBlockColumnInput;
}
export interface MutationToUpdateViewBlockColumnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateViewBlockColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePageManagerArgs {
    input: IDeletePageManagerInput;
}
export interface MutationToDeletePageManagerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePageManagerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteViewManagerArgs {
    input: IDeleteViewManagerInput;
}
export interface MutationToDeleteViewManagerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteViewManagerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteViewColumnArgs {
    input: IDeleteViewColumnInput;
}
export interface MutationToDeleteViewColumnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteViewColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToLinkTransactionToSellArgs {
    input: ILinkTransactionToSellInput;
}
export interface MutationToLinkTransactionToSellResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToLinkTransactionToSellArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateSellArgs {
    id: IUUID;
    input: IUpdateSellInput;
}
export interface MutationToUpdateSellResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSellArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteViewBlockColumnArgs {
    input: IDeleteViewBlockColumnInput;
}
export interface MutationToDeleteViewBlockColumnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteViewBlockColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMultipleMemberRelationArgs {
    input: IMultipleMemberRelationInput;
}
export interface MutationToCreateMultipleMemberRelationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMultipleMemberRelationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMemberRelationArgs {
    input: IMemberRelationInput;
}
export interface MutationToCreateMemberRelationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMemberRelationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMemberRelationArgs {
    id: IUUID;
    input: IMemberRelationInput;
}
export interface MutationToUpdateMemberRelationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMemberRelationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMemberRelationArgs {
    id: IUUID;
}
export interface MutationToDeleteMemberRelationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMemberRelationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateProductSellArgs {
    input: IUpdateProductSellInput;
}
export interface MutationToUpdateProductSellResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateProductSellArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateTaxArgs {
    input: ICreateTaxInput;
}
export interface MutationToCreateTaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateTaxArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteTaxArgs {
    input: IDeleteTaxInput;
}
export interface MutationToDeleteTaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteTaxArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToImportProductsFromExcelArgs {
    input: IImportProductsFromExcelInput;
}
export interface MutationToImportProductsFromExcelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToImportProductsFromExcelArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateRouteArgs {
    input: ICreateRouteInput;
}
export interface MutationToCreateRouteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateRouteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteRouteArgs {
    input: IDeleteRouteInput;
}
export interface MutationToDeleteRouteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteRouteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateProductSellArgs {
    input: ICreateProductSellInput;
}
export interface MutationToCreateProductSellResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateProductSellArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteProductSellArgs {
    input: IDeleteProductSellInput;
}
export interface MutationToDeleteProductSellResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProductSellArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePurchaseQuoteArgs {
    input: ICreatePurchaseQuoteInput;
}
export interface MutationToCreatePurchaseQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePurchaseQuoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePurchaseQuoteArgs {
    input: IDeletePurchaseQuoteInput;
}
export interface MutationToDeletePurchaseQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePurchaseQuoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateStockAlertArgs {
    input: ICreateStockAlertInput;
}
export interface MutationToCreateStockAlertResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateStockAlertArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteStockAlertArgs {
    input: IDeleteStockAlertInput;
}
export interface MutationToDeleteStockAlertResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteStockAlertArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateStockAlertArgs {
    input: IUpdateStockAlertInput;
}
export interface MutationToUpdateStockAlertResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateStockAlertArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateLegalTermArgs {
    input: ICreateLegalTermInput;
}
export interface MutationToCreateLegalTermResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateLegalTermArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsuranceFormArgs {
    input: ICreateInsuranceFormInput;
}
export interface MutationToCreateInsuranceFormResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsuranceFormArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsuranceFormArgs {
    input: IUpdateInsuranceFormInput;
}
export interface MutationToUpdateInsuranceFormResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsuranceFormArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateLegalTermArgs {
    input: IUpdateLegalTermInput;
}
export interface MutationToUpdateLegalTermResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateLegalTermArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteLegalTermArgs {
    input: IDeleteLegalTermInput;
}
export interface MutationToDeleteLegalTermResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteLegalTermArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateArticleArgs {
    input: ICreateArticleInput;
}
export interface MutationToCreateArticleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateArticleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateStatusArticleArgs {
    input: IUpdateStatusArticleInput;
}
export interface MutationToUpdateStatusArticleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateStatusArticleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateTaxonomyArgs {
    input: ICreateTaxonomyInput;
}
export interface MutationToCreateTaxonomyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateTaxonomyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToBlog_generateSlugArgs {
    phrase: string;
}
export interface MutationToBlog_generateSlugResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToBlog_generateSlugArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateArticleArgs {
    input: IUpdateArticleInput;
}
export interface MutationToUpdateArticleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateArticleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateTaxonomyArgs {
    input: IUpdateTaxonomyInput;
}
export interface MutationToUpdateTaxonomyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateTaxonomyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteArticleArgs {
    input: IDeleteArticleInput;
}
export interface MutationToDeleteArticleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteArticleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteTaxonomyArgs {
    input: IDeleteTaxonomyInput;
}
export interface MutationToDeleteTaxonomyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteTaxonomyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToNewSurveyArgs {
    input: INewSurveyInput;
}
export interface MutationToNewSurveyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToNewSurveyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateSurveyArgs {
    input: IUpdateSurveyInput;
}
export interface MutationToUpdateSurveyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSurveyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteSurveyArgs {
    input: IDeleteSurveyInput;
}
export interface MutationToDeleteSurveyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteSurveyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToNewQuestionArgs {
    input: INewQuestionInput;
}
export interface MutationToNewQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToNewQuestionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteQuestionArgs {
    input: IDeleteQuestionInput;
}
export interface MutationToDeleteQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteQuestionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateQuestionArgs {
    input: IUpdateQuestionInput;
}
export interface MutationToUpdateQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateQuestionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToNewOptionArgs {
    input: INewOptionInput;
}
export interface MutationToNewOptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToNewOptionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteOptionArgs {
    input: IDeleteOptionInput;
}
export interface MutationToDeleteOptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteOptionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateOptionArgs {
    input: IUpdateOptionInput;
}
export interface MutationToUpdateOptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateOptionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToAnswerQuestionArgs {
    input: IAnswerQuestionInput;
}
export interface MutationToAnswerQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAnswerQuestionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateProductArgs {
    input: ICreateProductInput;
}
export interface MutationToCreateProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateProductArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateProductArgs {
    input: IUpdateProductInput;
}
export interface MutationToUpdateProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateProductArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteProductArgs {
    input: IDeleteProductInput;
}
export interface MutationToDeleteProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProductArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateAddressArgs {
    input: ICreateAddressInput;
}
export interface MutationToCreateAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateAddressArgs {
    input: IUpdateAddressInput;
}
export interface MutationToUpdateAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteAddressArgs {
    input: IDeleteAddressInput;
}
export interface MutationToDeleteAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateUpdateShopArgs {
    input: ICreateUpdateShopInput;
}
export interface MutationToCreateUpdateShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateUpdateShopArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateDiseaseArgs {
    input: ICreateDiseaseInput;
}
export interface MutationToCreateDiseaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateDiseaseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateDiseaseArgs {
    input: IUpdateDiseaseInput;
}
export interface MutationToUpdateDiseaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateDiseaseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteDiseaseArgs {
    input: IDeleteDiseaseInput;
}
export interface MutationToDeleteDiseaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteDiseaseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateTopicDiseaseArgs {
    input: ICreateTopicDiseaseInput;
}
export interface MutationToCreateTopicDiseaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateTopicDiseaseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateTopicDiseaseArgs {
    input: IUpdateTopicDiseaseInput;
}
export interface MutationToUpdateTopicDiseaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateTopicDiseaseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteTopicDiseaseArgs {
    input: IDeleteTopicDiseaseInput;
}
export interface MutationToDeleteTopicDiseaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteTopicDiseaseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateFAQArgs {
    input: ICreateFAQInput;
}
export interface MutationToCreateFAQResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateFAQArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateFAQArgs {
    input: IUpdateFAQInput;
}
export interface MutationToUpdateFAQResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateFAQArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteFAQArgs {
    input: IDeleteFAQInput;
}
export interface MutationToDeleteFAQResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteFAQArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToRunJobShopArgs {
    input: IRunJobShopInput;
}
export interface MutationToRunJobShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToRunJobShopArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCourseArgs {
    input: ICreateCourseInput;
}
export interface MutationToCreateCourseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCourseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBeginCourseArgs {
    input: ICreateBeginCourseInput;
}
export interface MutationToCreateBeginCourseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBeginCourseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCourseFormArgs {
    input: ICreateCourseFormInput;
}
export interface MutationToCreateCourseFormResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCourseFormArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCourseArgs {
    input: IUpdateCourseInput;
}
export interface MutationToUpdateCourseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCourseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBeginCourseArgs {
    input: IUpdateBeginCourseInput;
}
export interface MutationToUpdateBeginCourseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBeginCourseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCourseFormArgs {
    input: IUpdateCourseFormInput;
}
export interface MutationToUpdateCourseFormResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCourseFormArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCourseArgs {
    input: IDeleteCourseInput;
}
export interface MutationToDeleteCourseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCourseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteBeginCourseArgs {
    input: IDeleteBeginCourseInput;
}
export interface MutationToDeleteBeginCourseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteBeginCourseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCourseFormArgs {
    input: IDeleteCourseFormInput;
}
export interface MutationToDeleteCourseFormResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCourseFormArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToFixProductArgs {
    input: IFixProductInput;
}
export interface MutationToFixProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFixProductArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCourseScheduleArgs {
    input: IDeleteCourseScheduleInput;
}
export interface MutationToDeleteCourseScheduleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCourseScheduleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCourseScheduleArgs {
    input: IUpdateCourseScheduleInput;
}
export interface MutationToUpdateCourseScheduleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCourseScheduleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBranchOfficeArgs {
    input: ICreateBranchOfficeInput;
}
export interface MutationToCreateBranchOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBranchOfficeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateManagerArgs {
    input: ICreateManagerInput;
}
export interface MutationToCreateManagerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateManagerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateProductPurchaseArgs {
    input: ICreateProductPurchaseInput;
}
export interface MutationToCreateProductPurchaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateProductPurchaseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePurchaseArgs {
    input: ICreatePurchaseInput;
}
export interface MutationToCreatePurchaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePurchaseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateStoreArgs {
    input: ICreateStoreInput;
}
export interface MutationToCreateStoreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateStoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToNewStoreTransferArgs {
    input: INewStoreTransferInput;
}
export interface MutationToNewStoreTransferResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToNewStoreTransferArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateProviderArgs {
    input: ICreateProviderInput;
}
export interface MutationToCreateProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBranchOfficeArgs {
    input: IUpdateBranchOfficeInput;
}
export interface MutationToUpdateBranchOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBranchOfficeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateManagerArgs {
    input: IUpdateManagerInput;
}
export interface MutationToUpdateManagerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateManagerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePurchaseArgs {
    input: IUpdatePurchaseInput;
}
export interface MutationToUpdatePurchaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePurchaseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateStoreArgs {
    input: IUpdateStoreInput;
}
export interface MutationToUpdateStoreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateStoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteStoreArgs {
    input: IDeleteStoreInput;
}
export interface MutationToDeleteStoreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteStoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteManagerArgs {
    input: IDeleteManagerInput;
}
export interface MutationToDeleteManagerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteManagerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateProviderArgs {
    input: IUpdateProviderInput;
}
export interface MutationToUpdateProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteProviderArgs {
    input: IDeleteProviderInput;
}
export interface MutationToDeleteProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePurchaseArgs {
    input: IDeletePurchaseInput;
}
export interface MutationToDeletePurchaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePurchaseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteProductPurchaseArgs {
    input: IDeleteProductPurchaseInput;
}
export interface MutationToDeleteProductPurchaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProductPurchaseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteBranchOfficeArgs {
    input: IDeleteBranchOfficeInput;
}
export interface MutationToDeleteBranchOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteBranchOfficeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToAssociationServiceToProjectArgs {
    input: IAssociationServiceToProjectInput;
}
export interface MutationToAssociationServiceToProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAssociationServiceToProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateArrayFunctionArgs {
    input: ICreateArrayFunctionInput;
}
export interface MutationToCreateArrayFunctionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateArrayFunctionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteArrayFunctionArgs {
    input: IDeleteArrayFunctionInput;
}
export interface MutationToDeleteArrayFunctionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteArrayFunctionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateServiceProjectArgs {
    input: IUpdateServiceProjectInput;
}
export interface MutationToUpdateServiceProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateServiceProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteServiceProjectArgs {
    input: IDeleteServiceProjectInput;
}
export interface MutationToDeleteServiceProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteServiceProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCancelEventArgs {
    input: ICancelEventInput;
}
export interface MutationToCancelEventResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCancelEventArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateEventTypeArgs {
    input: ICreateEventTypeInput;
}
export interface MutationToCreateEventTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateEventTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateSubEventTypeArgs {
    input: ICreateSubEventTypeInput;
}
export interface MutationToCreateSubEventTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateSubEventTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteSubEventTypeArgs {
    input: IDeleteSubEventTypeInput;
}
export interface MutationToDeleteSubEventTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteSubEventTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateSubEventTypeArgs {
    input: IUpdateSubEventTypeInput;
}
export interface MutationToUpdateSubEventTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSubEventTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToAddSubTypeToEventTypeArgs {
    input: IAddSubTypeToEventTypeInput;
}
export interface MutationToAddSubTypeToEventTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAddSubTypeToEventTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteEventTypeArgs {
    eventTypeId: IUUID;
}
export interface MutationToDeleteEventTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteEventTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateEventTypeArgs {
    input: IUpdateEventTypeInput;
}
export interface MutationToUpdateEventTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateEventTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateEventArgs {
    input: ICreateEventInput;
}
export interface MutationToCreateEventResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateEventArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateEventMemberArgs {
    input: ICreateEventMemberInput;
}
export interface MutationToCreateEventMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateEventMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateEventArgs {
    input: IUpdateEventInput;
}
export interface MutationToUpdateEventResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateEventArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteEventArgs {
    input: IDeleteEventInput;
}
export interface MutationToDeleteEventResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteEventArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateEventSessionArgs {
    input: ICreateEventSessionInput;
}
export interface MutationToCreateEventSessionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateEventSessionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateEventSessionArgs {
    input: IUpdateEventSessionInput;
}
export interface MutationToUpdateEventSessionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateEventSessionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteEventSessionArgs {
    input: IDeleteEventSessionInput;
}
export interface MutationToDeleteEventSessionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteEventSessionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToSendRecordatoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateScheduleArgs {
    input: ICreateScheduleInput;
}
export interface MutationToCreateScheduleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateScheduleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToAssociationMemberToConsultArgs {
    input: IAssociationMemberToConsultInput;
}
export interface MutationToAssociationMemberToConsultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAssociationMemberToConsultArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCancellationMemberToConsultArgs {
    input: ICancellationMemberToConsultInput;
}
export interface MutationToCancellationMemberToConsultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCancellationMemberToConsultArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToChangeStatusEventArgs {
    input: IChangeStatusEventInput;
}
export interface MutationToChangeStatusEventResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToChangeStatusEventArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteScheduleArgs {
    input: IDeleteScheduleInput;
}
export interface MutationToDeleteScheduleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteScheduleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteTurnArgs {
    input: IDeleteTurnInput;
}
export interface MutationToDeleteTurnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteTurnArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateResourceQuoteArgs {
    input: IResourceQuoteInput;
}
export interface MutationToCreateResourceQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateResourceQuoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateResourceQuoteArgs {
    id: IUUID;
    input: IResourceQuoteInput;
}
export interface MutationToUpdateResourceQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateResourceQuoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteResourceQuoteArgs {
    id: IUUID;
}
export interface MutationToDeleteResourceQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteResourceQuoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateResourceQuoteDetailArgs {
    input: IResourceQuoteDetailInput;
}
export interface MutationToCreateResourceQuoteDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateResourceQuoteDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateResourceQuoteDetailArgs {
    id: IUUID;
    input: IResourceQuoteDetailInput;
}
export interface MutationToUpdateResourceQuoteDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateResourceQuoteDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteResourceQuoteDetailArgs {
    id: IUUID;
}
export interface MutationToDeleteResourceQuoteDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteResourceQuoteDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateProposalArgs {
    input: IProposalInput;
}
export interface MutationToCreateProposalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateProposalArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateProposalArgs {
    id: IUUID;
    input: IProposalInput;
}
export interface MutationToUpdateProposalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateProposalArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteProposalArgs {
    id: IUUID;
}
export interface MutationToDeleteProposalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProposalArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCollaboratorArgs {
    input: ICollaboratorInput;
}
export interface MutationToCreateCollaboratorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCollaboratorArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCollaboratorArgs {
    id: IUUID;
    input: ICollaboratorInput;
}
export interface MutationToUpdateCollaboratorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCollaboratorArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCollaboratorArgs {
    id: IUUID;
}
export interface MutationToDeleteCollaboratorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCollaboratorArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCollaboratorHoursArgs {
    input: ICollaboratorHoursInput;
}
export interface MutationToCreateCollaboratorHoursResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCollaboratorHoursArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCollaboratorHoursArgs {
    id: IUUID;
    input: ICollaboratorHoursInput;
}
export interface MutationToUpdateCollaboratorHoursResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCollaboratorHoursArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCollaboratorHoursArgs {
    id: IUUID;
}
export interface MutationToDeleteCollaboratorHoursResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCollaboratorHoursArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateHiringArgs {
    input: IHiringInput;
}
export interface MutationToCreateHiringResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateHiringArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateHiringArgs {
    id: IUUID;
    input: IHiringInput;
}
export interface MutationToUpdateHiringResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateHiringArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteHiringArgs {
    id: IUUID;
}
export interface MutationToDeleteHiringResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteHiringArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateHiringServiceArgs {
    input: IHiringServiceInput;
}
export interface MutationToCreateHiringServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateHiringServiceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateHiringServiceArgs {
    id: IUUID;
    input: IHiringServiceInput;
}
export interface MutationToUpdateHiringServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateHiringServiceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteHiringServiceArgs {
    id: IUUID;
}
export interface MutationToDeleteHiringServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteHiringServiceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateHiringTypeArgs {
    input: IHiringTypeInput;
}
export interface MutationToCreateHiringTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateHiringTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateHiringTypeArgs {
    id: IUUID;
    input: IHiringTypeInput;
}
export interface MutationToUpdateHiringTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateHiringTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteHiringTypeArgs {
    id: IUUID;
}
export interface MutationToDeleteHiringTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteHiringTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateShiftArgs {
    input: IShiftInput;
}
export interface MutationToCreateShiftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateShiftArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateShiftArgs {
    id: IUUID;
    input: IShiftInput;
}
export interface MutationToUpdateShiftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateShiftArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteShiftArgs {
    id: IUUID;
}
export interface MutationToDeleteShiftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteShiftArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBusinessTypeArgs {
    input: ICreateBusinessTypeInput;
}
export interface MutationToCreateBusinessTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBusinessTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBusinessTypeArgs {
    input: IUpdateBusinessTypeInput;
}
export interface MutationToUpdateBusinessTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBusinessTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteBusinessTypeArgs {
    input: IDeleteBusinessTypeInput;
}
export interface MutationToDeleteBusinessTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteBusinessTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBusinessRuleArgs {
    input: ICreateBusinessRuleInput;
}
export interface MutationToCreateBusinessRuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBusinessRuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBusinessRuleArgs {
    input: IUpdateBusinessRuleInput;
}
export interface MutationToUpdateBusinessRuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBusinessRuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteBusinessRuleArgs {
    input: IDeleteBusinessRuleInput;
}
export interface MutationToDeleteBusinessRuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteBusinessRuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCouponFromTemplateArgs {
    input: IDeleteCouponFromTemplateInput;
}
export interface MutationToDeleteCouponFromTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCouponFromTemplateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToAddCouponsToTemplateArgs {
    input: IAddCouponsToTemplateInput;
}
export interface MutationToAddCouponsToTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAddCouponsToTemplateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateUpdateConfigurationTemplateArgs {
    input: ICreateUpdateConfigurationTemplateInput;
}
export interface MutationToCreateUpdateConfigurationTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateUpdateConfigurationTemplateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToSendTemplateArgs {
    input: ISendTemplateInput;
}
export interface MutationToSendTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSendTemplateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToPutFirebaseDeviceArgs {
    input: IPutFirebaseDeviceInput;
}
export interface MutationToPutFirebaseDeviceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPutFirebaseDeviceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCouponArgs {
    input: ICreateCouponInput;
}
export interface MutationToCreateCouponResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCouponArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCouponArgs {
    input: IUpdateCouponInput;
}
export interface MutationToUpdateCouponResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCouponArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCouponArgs {
    input: IDeleteCouponInput;
}
export interface MutationToDeleteCouponResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCouponArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateTemplateArgs {
    input: ICreateTemplateInput;
}
export interface MutationToCreateTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateTemplateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateTemplateArgs {
    input: IUpdateTemplateInput;
}
export interface MutationToUpdateTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateTemplateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteTemplateArgs {
    input: IDeleteTemplateInput;
}
export interface MutationToDeleteTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteTemplateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateErrorPageArgs {
    input: ICreateErrorPageInput;
}
export interface MutationToCreateErrorPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateErrorPageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateErrorPageArgs {
    input: IUpdateErrorPageInput;
}
export interface MutationToUpdateErrorPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateErrorPageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteErrorPageArgs {
    input: IDeleteErrorPageInput;
}
export interface MutationToDeleteErrorPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteErrorPageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateErrorPageValidationArgs {
    input: ICreateErrorPageValidationInput;
}
export interface MutationToCreateErrorPageValidationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateErrorPageValidationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateErrorPageValidationArgs {
    input: IUpdateErrorPageValidationInput;
}
export interface MutationToUpdateErrorPageValidationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateErrorPageValidationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteErrorValidationPageArgs {
    input: IDeleteErrorPageValidationInput;
}
export interface MutationToDeleteErrorValidationPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteErrorValidationPageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBusinessArgs {
    input: ICreateBusinessInput;
}
export interface MutationToCreateBusinessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBusinessArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBusinessArgs {
    input: IUpdateBusinessInput;
}
export interface MutationToUpdateBusinessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBusinessArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteBusinessArgs {
    input: IDeleteBusinessInput;
}
export interface MutationToDeleteBusinessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteBusinessArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToAssociateBusinessRulesArgs {
    input: IAssociateBusinessRulesInput;
}
export interface MutationToAssociateBusinessRulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAssociateBusinessRulesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToAssociateProjectPlanSubscriptionArgs {
    input: IAssociateProjectPlanSubscriptionInput;
}
export interface MutationToAssociateProjectPlanSubscriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAssociateProjectPlanSubscriptionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateProjectPlanArgs {
    input: ICreateProjectPlanInput;
}
export interface MutationToCreateProjectPlanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateProjectPlanArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateProjectPlanArgs {
    input: IUpdateProjectPlanInput;
}
export interface MutationToUpdateProjectPlanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateProjectPlanArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteProjectPlanArgs {
    input: IDeleteProjectPlanInput;
}
export interface MutationToDeleteProjectPlanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProjectPlanArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteProjectPlanSubscriptionArgs {
    input: IDeleteProjectPlanSubscriptionInput;
}
export interface MutationToDeleteProjectPlanSubscriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProjectPlanSubscriptionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToPutConfigArgs {
    input: IPutConfigInput;
}
export interface MutationToPutConfigResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPutConfigArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteConfigArgs {
    input: IDeleteConfigInput;
}
export interface MutationToDeleteConfigResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteConfigArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateOrderPagesArgs {
    input: IUpdateOrderPageInput;
}
export interface MutationToUpdateOrderPagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateOrderPagesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBatchWewbsiteComponentArgs {
    input: IUpdateBatchWewbsiteComponentInput;
}
export interface MutationToUpdateBatchWewbsiteComponentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBatchWewbsiteComponentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateComponentArgs {
    input: ICreateComponentInput;
}
export interface MutationToCreateComponentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateComponentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateWebsiteComponentArgs {
    input: ICreateWebsiteComponentInput;
}
export interface MutationToCreateWebsiteComponentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateWebsiteComponentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateWebsitePageArgs {
    input: ICreateWebsitePageInput;
}
export interface MutationToCreateWebsitePageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateWebsitePageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateWebsiteSeoArgs {
    input: ICreateWebsiteSeoInput;
}
export interface MutationToCreateWebsiteSeoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateWebsiteSeoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateComponentArgs {
    input: IUpdateComponentInput;
}
export interface MutationToUpdateComponentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateComponentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateWebsiteComponentArgs {
    input: IUpdateWebsiteComponentInput;
}
export interface MutationToUpdateWebsiteComponentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateWebsiteComponentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateWebsitePageArgs {
    input: IUpdateWebsitePageInput;
}
export interface MutationToUpdateWebsitePageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateWebsitePageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateWebsiteSeoArgs {
    input: IUpdateWebsiteSeoInput;
}
export interface MutationToUpdateWebsiteSeoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateWebsiteSeoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteComponentArgs {
    input: IDeleteComponentInput;
}
export interface MutationToDeleteComponentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteComponentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteWebsiteComponentArgs {
    input: IDeleteWebsiteComponentInput;
}
export interface MutationToDeleteWebsiteComponentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteWebsiteComponentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteWebsitePageArgs {
    input: IDeleteWebsitePageInput;
}
export interface MutationToDeleteWebsitePageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteWebsitePageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteWebsiteSeoArgs {
    input: IDeleteWebsiteSeoInput;
}
export interface MutationToDeleteWebsiteSeoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteWebsiteSeoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteBusinessRuleProjectPlansArgs {
    id: IUUID;
}
export interface MutationToDeleteBusinessRuleProjectPlansResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteBusinessRuleProjectPlansArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateDocumentCategoryArgs {
    input: IDocumentCategoryInput;
}
export interface MutationToCreateDocumentCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateDocumentCategoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateDocumentCategoryArgs {
    id: IUUID;
    input: IDocumentCategoryInput;
}
export interface MutationToUpdateDocumentCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateDocumentCategoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteDocumentCategoryArgs {
    id: IUUID;
}
export interface MutationToDeleteDocumentCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteDocumentCategoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateDocumentCategoryDetailArgs {
    input: IDocumentCategoryDetailInput;
}
export interface MutationToCreateDocumentCategoryDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateDocumentCategoryDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateDocumentCategoryDetailArgs {
    id: IUUID;
    input: IDocumentCategoryDetailInput;
}
export interface MutationToUpdateDocumentCategoryDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateDocumentCategoryDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteDocumentCategoryDetailArgs {
    id: IUUID;
}
export interface MutationToDeleteDocumentCategoryDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteDocumentCategoryDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateDocumentArgs {
    input: IDocumentInput;
}
export interface MutationToCreateDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateDocumentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateDocumentArgs {
    id: IUUID;
    input: IDocumentInput;
}
export interface MutationToUpdateDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateDocumentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteDocumentArgs {
    id: IUUID;
}
export interface MutationToDeleteDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteDocumentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateDocumentTemplateArgs {
    input: IDocumentTemplateInput;
}
export interface MutationToCreateDocumentTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateDocumentTemplateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateDocumentTemplateArgs {
    id: IUUID;
    input: IDocumentTemplateInput;
}
export interface MutationToUpdateDocumentTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateDocumentTemplateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteDocumentTemplateArgs {
    id: IUUID;
}
export interface MutationToDeleteDocumentTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteDocumentTemplateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateTemplatePageArgs {
    input: ITemplatePageInput;
}
export interface MutationToCreateTemplatePageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateTemplatePageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateTemplatePageArgs {
    id: IUUID;
    input: ITemplatePageInput;
}
export interface MutationToUpdateTemplatePageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateTemplatePageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteTemplatePageArgs {
    id: IUUID;
}
export interface MutationToDeleteTemplatePageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteTemplatePageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateDocumentTagArgs {
    input: IDocumentTagInput;
}
export interface MutationToCreateDocumentTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateDocumentTagArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateDocumentTagArgs {
    id: IUUID;
    input: IDocumentTagInput;
}
export interface MutationToUpdateDocumentTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateDocumentTagArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteDocumentTagArgs {
    id: IUUID;
}
export interface MutationToDeleteDocumentTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteDocumentTagArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateDocumentScanArgs {
    input: IDocumentScanInput;
}
export interface MutationToCreateDocumentScanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateDocumentScanArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateDocumentScanArgs {
    id: IUUID;
    input: IDocumentScanInput;
}
export interface MutationToUpdateDocumentScanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateDocumentScanArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteDocumentScanArgs {
    id: IUUID;
}
export interface MutationToDeleteDocumentScanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteDocumentScanArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateDocumentReadArgs {
    input: IDocumentReadInput;
}
export interface MutationToCreateDocumentReadResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateDocumentReadArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateDocumentReadArgs {
    id: IUUID;
    input: IDocumentReadInput;
}
export interface MutationToUpdateDocumentReadResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateDocumentReadArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteDocumentReadArgs {
    id: IUUID;
}
export interface MutationToDeleteDocumentReadResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteDocumentReadArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToReadTextFromImageArgs {
    input: ICreateTemplateInput;
}
export interface MutationToReadTextFromImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToReadTextFromImageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateVideoCallArgs {
    input: ICreateVideoCallInput;
}
export interface MutationToCreateVideoCallResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateVideoCallArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateVideoCallArgs {
    input: IUpdateVideoCallInput;
}
export interface MutationToUpdateVideoCallResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateVideoCallArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteVideoCallArgs {
    input: IDeleteVideoCallInput;
}
export interface MutationToDeleteVideoCallResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteVideoCallArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateAccessTokenArgs {
    input: ICreateAccessTokenInput;
}
export interface MutationToCreateAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateAccessTokenArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateVideoRoomArgs {
    input: ICreateVideoRoomInput;
}
export interface MutationToCreateVideoRoomResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateVideoRoomArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToSendNotificationArgs {
    input: ISendNotificationUsersInput;
}
export interface MutationToSendNotificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSendNotificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToSendEmailDownloadArgs {
    input: ISendEmailDownloadInput;
}
export interface MutationToSendEmailDownloadResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSendEmailDownloadArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToSendEmailNotificationArgs {
    input: ISendEmailNotificationInput;
}
export interface MutationToSendEmailNotificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSendEmailNotificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToMuteParticipantArgs {
    input: IMuteParticipantInput;
}
export interface MutationToMuteParticipantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMuteParticipantArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToRemoveParticipantRoomArgs {
    input: IRemoveParticipantRoomInput;
}
export interface MutationToRemoveParticipantRoomResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToRemoveParticipantRoomArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateParticipantRoomArgs {
    input: IUpdateParticipantRoomInput;
}
export interface MutationToUpdateParticipantRoomResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateParticipantRoomArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToStartRecordRoom2Args {
    input: IStartRecordRoomInput;
}
export interface MutationToStartRecordRoom2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToStartRecordRoom2Args, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToEndRecordRoomArgs {
    input: IEndRecordRoomInput;
}
export interface MutationToEndRecordRoomResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToEndRecordRoomArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateUpdateContactEmailArgs {
    input: ICreateUpdateContactEmailInput;
}
export interface MutationToCreateUpdateContactEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateUpdateContactEmailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToSendEmailArgs {
    input: ISendEmailInput;
}
export interface MutationToSendEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSendEmailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteContactEmailArgs {
    input: IDeleteContactEmailInput;
}
export interface MutationToDeleteContactEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteContactEmailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToSendMailBotArgs {
    input: ISendMailBotInput;
}
export interface MutationToSendMailBotResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSendMailBotArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToSendQuizArgs {
    input: ISendQuizInput;
}
export interface MutationToSendQuizResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSendQuizArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToMainSectionArgs {
    content: string;
    banner: string;
}
export interface MutationToMainSectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMainSectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToHyperVinculeArgs {
    href: string;
    name: string;
}
export interface MutationToHyperVinculeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToHyperVinculeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToSendQuizGratitudeArgs {
    input: ISendQuizGratitudeInput;
}
export interface MutationToSendQuizGratitudeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSendQuizGratitudeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateServiceAreaArgs {
    input: IServiceAreaInput;
}
export interface MutationToCreateServiceAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateServiceAreaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateServiceAreaArgs {
    id: IUUID;
    input: IServiceAreaInput;
}
export interface MutationToUpdateServiceAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateServiceAreaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteServiceAreaArgs {
    id: IUUID;
}
export interface MutationToDeleteServiceAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteServiceAreaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateAreaArgs {
    input: IAreaInput;
}
export interface MutationToCreateAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateAreaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateAreaArgs {
    id: IUUID;
    input: IAreaInput;
}
export interface MutationToUpdateAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateAreaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteAreaArgs {
    id: IUUID;
}
export interface MutationToDeleteAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteAreaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBatchServiceMemberArgs {
    input: IUpdateBatchServiceMemberInput;
}
export interface MutationToUpdateBatchServiceMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBatchServiceMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateServiceMemberArgs {
    input: IServiceMemberInput;
}
export interface MutationToCreateServiceMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateServiceMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateServiceMemberArgs {
    id: IUUID;
    input: IServiceMemberInput;
}
export interface MutationToUpdateServiceMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateServiceMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteServiceMemberArgs {
    id: IUUID;
}
export interface MutationToDeleteServiceMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteServiceMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateServiceQuizArgs {
    input: IServiceQuizInput;
}
export interface MutationToCreateServiceQuizResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateServiceQuizArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateServiceQuizArgs {
    id: IUUID;
    input: IServiceQuizInput;
}
export interface MutationToUpdateServiceQuizResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateServiceQuizArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteServiceQuizArgs {
    id: IUUID;
}
export interface MutationToDeleteServiceQuizResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteServiceQuizArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateQuizArgs {
    input: IQuizInput;
}
export interface MutationToCreateQuizResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateQuizArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateQuizArgs {
    id: IUUID;
    input: IQuizInput;
}
export interface MutationToUpdateQuizResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateQuizArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteQuizArgs {
    id: IUUID;
}
export interface MutationToDeleteQuizResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteQuizArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateQuizSectionArgs {
    input: IQuizSectionInput;
}
export interface MutationToCreateQuizSectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateQuizSectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateQuizSectionArgs {
    id: IUUID;
    input: IQuizSectionInput;
}
export interface MutationToUpdateQuizSectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateQuizSectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteQuizSectionArgs {
    id: IUUID;
}
export interface MutationToDeleteQuizSectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteQuizSectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDuplicateQuizQuestionArgs {
    id: IUUID;
}
export interface MutationToDuplicateQuizQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDuplicateQuizQuestionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateQuizQuestionArgs {
    input: IQuizQuestionInput;
}
export interface MutationToCreateQuizQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateQuizQuestionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateQuizQuestionArgs {
    id: IUUID;
    input: IQuizQuestionInput;
}
export interface MutationToUpdateQuizQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateQuizQuestionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteQuizQuestionArgs {
    id: IUUID;
}
export interface MutationToDeleteQuizQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteQuizQuestionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateQuizQuestionNestedArgs {
    input: IQuizQuestionNestedInput;
}
export interface MutationToCreateQuizQuestionNestedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateQuizQuestionNestedArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateQuizQuestionNestedArgs {
    id: IUUID;
    input: IQuizQuestionNestedInput;
}
export interface MutationToUpdateQuizQuestionNestedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateQuizQuestionNestedArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteQuizQuestionNestedArgs {
    id: IUUID;
}
export interface MutationToDeleteQuizQuestionNestedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteQuizQuestionNestedArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBatchQuizQuestionArgs {
    input: IUpdateBatchQuizQuestionInput;
}
export interface MutationToUpdateBatchQuizQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBatchQuizQuestionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateQuizQuestionAnswerArgs {
    input: IQuizQuestionAnswerInput;
}
export interface MutationToCreateQuizQuestionAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateQuizQuestionAnswerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateQuizQuestionAnswerArgs {
    id: IUUID;
    input: IQuizQuestionAnswerInput;
}
export interface MutationToUpdateQuizQuestionAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateQuizQuestionAnswerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteQuizQuestionAnswerArgs {
    id: IUUID;
}
export interface MutationToDeleteQuizQuestionAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteQuizQuestionAnswerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBatchQuizQuestionAnswerArgs {
    input: IUpdateBatchQuizQuestionAnswerInput;
}
export interface MutationToUpdateBatchQuizQuestionAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBatchQuizQuestionAnswerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateQuizAnswerArgs {
    input: IQuizAnswerInput;
}
export interface MutationToCreateQuizAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateQuizAnswerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateQuizAnswerArgs {
    id: IUUID;
    input: IQuizAnswerInput;
}
export interface MutationToUpdateQuizAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateQuizAnswerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteQuizAnswerArgs {
    id: IUUID;
}
export interface MutationToDeleteQuizAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteQuizAnswerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateQuizMemberArgs {
    input: IQuizMemberInput;
}
export interface MutationToCreateQuizMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateQuizMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateQuizMemberArgs {
    id: IUUID;
    input: IQuizMemberInput;
}
export interface MutationToUpdateQuizMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateQuizMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteQuizMemberArgs {
    id: IUUID;
}
export interface MutationToDeleteQuizMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteQuizMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateQuizQuestionMemberArgs {
    input: IQuizQuestionMemberInput;
}
export interface MutationToCreateQuizQuestionMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateQuizQuestionMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateQuizQuestionMemberArgs {
    id: IUUID;
    input: IQuizQuestionMemberInput;
}
export interface MutationToUpdateQuizQuestionMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateQuizQuestionMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteQuizQuestionMemberArgs {
    id: IUUID;
}
export interface MutationToDeleteQuizQuestionMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteQuizQuestionMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBatchQuizQuestionMemberArgs {
    input: IUpdateBatchQuizQuestionMemberInput;
}
export interface MutationToUpdateBatchQuizQuestionMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBatchQuizQuestionMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateQuizMemberAnswerArgs {
    input: IQuizMemberAnswerInput;
}
export interface MutationToCreateQuizMemberAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateQuizMemberAnswerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateQuizMemberAnswerArgs {
    id: IUUID;
    input: IQuizMemberAnswerInput;
}
export interface MutationToUpdateQuizMemberAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateQuizMemberAnswerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteQuizMemberAnswerArgs {
    id: IUUID;
}
export interface MutationToDeleteQuizMemberAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteQuizMemberAnswerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBatchQuizMemberAnswerArgs {
    input: IUpdateBatchQuizMemberAnswerInput;
}
export interface MutationToUpdateBatchQuizMemberAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBatchQuizMemberAnswerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateQuizMemberDescriptionArgs {
    input: IQuizMemberDescriptionInput;
}
export interface MutationToCreateQuizMemberDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateQuizMemberDescriptionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateQuizMemberDescriptionArgs {
    id: IUUID;
    input: IQuizMemberDescriptionInput;
}
export interface MutationToUpdateQuizMemberDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateQuizMemberDescriptionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteQuizMemberDescriptionArgs {
    id: IUUID;
}
export interface MutationToDeleteQuizMemberDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteQuizMemberDescriptionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBatchQuizMemberDescriptionArgs {
    input: IUpdateBatchQuizMemberDescriptionInput;
}
export interface MutationToUpdateBatchQuizMemberDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBatchQuizMemberDescriptionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateKeyArgs {
    input: IKeyInput;
}
export interface MutationToCreateKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateKeyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateQuotationAarcoArgs {
    input: IQuotationInput;
}
export interface MutationToCreateQuotationAarcoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateQuotationAarcoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToLoginAarcoArgs {
    input: ILoginInput;
}
export interface MutationToLoginAarcoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToLoginAarcoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToPolicyAarcoArgs {
    input: IPolicyInput;
}
export interface MutationToPolicyAarcoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPolicyAarcoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToQuotationDownloadPDFAarcoArgs {
    input: IQuotationDownloadPDFInput;
}
export interface MutationToQuotationDownloadPDFAarcoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToQuotationDownloadPDFAarcoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToQuotationEmitAarcoArgs {
    input: IQuotationEmitInput;
}
export interface MutationToQuotationEmitAarcoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToQuotationEmitAarcoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToQuotationSendPDFAarcoArgs {
    input: ISendQuotationInput;
}
export interface MutationToQuotationSendPDFAarcoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToQuotationSendPDFAarcoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToAttachPaymentMethodToCustomerArgs {
    input: IAttachPaymentMethodToCustomerInput;
}
export interface MutationToAttachPaymentMethodToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAttachPaymentMethodToCustomerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateSetupIntentStripeArgs {
    input: ISetupIntentStripeInput;
}
export interface MutationToCreateSetupIntentStripeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateSetupIntentStripeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToSetDefaultPaymentMethodOnCustomerArgs {
    input: ISetDefaultPaymentMethodOnCustomerInput;
}
export interface MutationToSetDefaultPaymentMethodOnCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSetDefaultPaymentMethodOnCustomerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePriceStripeArgs {
    input: IUpdatePriceStripeInput;
}
export interface MutationToUpdatePriceStripeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePriceStripeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToNewPaymentsAnyTypeArgs {
    input: INewPaymentsAnyTypeInput;
}
export interface MutationToNewPaymentsAnyTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToNewPaymentsAnyTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateProductStripeArgs {
    input: ICreateProductStripeInput;
}
export interface MutationToCreateProductStripeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateProductStripeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePlanArgs {
    input: IPlanInput;
}
export interface MutationToCreatePlanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePlanArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateStripePriceArgs {
    input: ICreateStripePriceInput;
}
export interface MutationToCreateStripePriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateStripePriceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMethodPaymentArgs {
    input: ICreateMethodPaymentInput;
}
export interface MutationToCreateMethodPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMethodPaymentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMethodPaymentArgs {
    input: IUpdateMethodPaymentInput;
}
export interface MutationToUpdateMethodPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMethodPaymentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMethodPaymentArgs {
    input: IDeleteMethodPaymentInput;
}
export interface MutationToDeleteMethodPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMethodPaymentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePaymentStripeArgs {
    input: ICreatePaymentStripeInput;
}
export interface MutationToCreatePaymentStripeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePaymentStripeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePaymentStripeToAccountArgs {
    input: ICreatePaymentStripeToAccountInput;
}
export interface MutationToCreatePaymentStripeToAccountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePaymentStripeToAccountArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateSuscriptionStripeArgs {
    input: ICreateSuscriptionStripeInput;
}
export interface MutationToCreateSuscriptionStripeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateSuscriptionStripeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateSuscriptionExternalStripeArgs {
    input: ICreateSuscriptionExternalStripeInput;
}
export interface MutationToCreateSuscriptionExternalStripeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateSuscriptionExternalStripeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteSuscriptionExternalStripeArgs {
    input: IDeleteSuscriptionExternalStripeInput;
}
export interface MutationToDeleteSuscriptionExternalStripeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteSuscriptionExternalStripeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateAccountStripeArgs {
    input: ICreateStripeAccountInput;
}
export interface MutationToCreateAccountStripeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateAccountStripeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePaymentArgs {
    input: IDeletePaymentInput;
}
export interface MutationToDeletePaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePaymentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePaymentArgs {
    input: IUpdatePaymentInput;
}
export interface MutationToUpdatePaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePaymentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInvoiceArgs {
    input: ICreateInvoiceInput;
}
export interface MutationToCreateInvoiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInvoiceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateStatusInvoiceArgs {
    input: IUpdateStatusInvoiceInput;
}
export interface MutationToUpdateStatusInvoiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateStatusInvoiceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePaymentMethodArgs {
    input: ICreatePaymentMethodInput;
}
export interface MutationToCreatePaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePaymentMethodArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePaymentMethodArgs {
    input: IDeletePaymentMethodInput;
}
export interface MutationToDeletePaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePaymentMethodArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBatchInsurerCoveragesArgs {
    input: ICreateBatchInsurerCoveragesInput;
}
export interface MutationToCreateBatchInsurerCoveragesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBatchInsurerCoveragesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateQuoteArgs {
    input: ICreateQuoteInput;
}
export interface MutationToCreateQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateQuoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateNewOfficesArgs {
    projectId: IUUID;
}
export interface MutationToCreateNewOfficesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateNewOfficesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateNewProfilesArgs {
    projectId: IUUID;
}
export interface MutationToCreateNewProfilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateNewProfilesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerArgs {
    input: ICreateInsurerInput;
}
export interface MutationToCreateInsurerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateOfficeArgs {
    input: ICreateOfficeInput;
}
export interface MutationToCreateOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateOfficeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateRegistrationArgs {
    input: ICreateRegistrationInput;
}
export interface MutationToCreateRegistrationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateRegistrationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateQuatorProfileArgs {
    input: ICreateQuatorProfileInput;
}
export interface MutationToCreateQuatorProfileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateQuatorProfileArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerArgs {
    input: IDeleteInsurerInput;
}
export interface MutationToDeleteInsurerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteOfficeArgs {
    input: IDeleteOfficeInput;
}
export interface MutationToDeleteOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteOfficeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteQuoterProfileArgs {
    input: IDeleteQuoterProfileInput;
}
export interface MutationToDeleteQuoterProfileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteQuoterProfileArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerArgs {
    input: IUpdateInsurerInput;
}
export interface MutationToUpdateInsurerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateOfficeArgs {
    input: IUpdateOfficeInput;
}
export interface MutationToUpdateOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateOfficeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateQuoterProfileArgs {
    input: IUpdateQuoterProfileInput;
}
export interface MutationToUpdateQuoterProfileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateQuoterProfileArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCatalogArgs {
    input: ICreateCatalogInput;
}
export interface MutationToCreateCatalogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCatalogArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToPopulateCredentialsArgs {
    input: IPopulateCredentialsInput;
}
export interface MutationToPopulateCredentialsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPopulateCredentialsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToPopulateServicesArgs {
    input: IPopulateServicesInput;
}
export interface MutationToPopulateServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPopulateServicesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToRegistrarPersonaArgs {
    rfc: string;
    homoclave: string;
    nombre: string;
    segNombre: string;
    appellidoPaterno: string;
    appMaterno: string;
    sexo: number;
    edoCivil: number;
    calle: string;
    numExt: string;
    numInt: string;
    colonia: string;
    cp: string;
    pob: string;
    correo: string;
}
export interface MutationToRegistrarPersonaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToRegistrarPersonaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToRunServiceQuoteArgs {
    input: IQuoterRequestInput;
}
export interface MutationToRunServiceQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToRunServiceQuoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToEmissionCarArgs {
    input: IEmitionRequestInput;
}
export interface MutationToEmissionCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToEmissionCarArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToPrintEmissionArgs {
    input: IPrintEmitionRequestInput;
}
export interface MutationToPrintEmissionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPrintEmissionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateQuoteCoverageArgs {
    input: ICreateQuoteCoverageInput;
}
export interface MutationToCreateQuoteCoverageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateQuoteCoverageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateQuoteCoverageArgs {
    input: IUpdateQuoteCoverageInput;
}
export interface MutationToUpdateQuoteCoverageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateQuoteCoverageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteQuoteCoverageArgs {
    input: IDeleteQuoteCoverageInput;
}
export interface MutationToDeleteQuoteCoverageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteQuoteCoverageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToAssociationWithQuoterProfileArgs {
    input: IAssociationWithQuoterProfileInput;
}
export interface MutationToAssociationWithQuoterProfileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAssociationWithQuoterProfileArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateQuoteArgs {
    input: IUpdateQuoteInput;
}
export interface MutationToUpdateQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateQuoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerCredentialArgs {
    input: ICreateInsurerCredentialInput;
}
export interface MutationToCreateInsurerCredentialResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerCredentialArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerCredentialArgs {
    input: IUpdateInsurerCredentialInput;
}
export interface MutationToUpdateInsurerCredentialResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerCredentialArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToAssociationRelationCarArgs {
    input: IAssociationRelationCarInput;
}
export interface MutationToAssociationRelationCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAssociationRelationCarArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCoverageProjectArgs {
    input: ICreateCoverageProjectInput;
}
export interface MutationToCreateCoverageProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCoverageProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCoverageProjectArgs {
    id: IUUID;
    input: IUpdateCoverageProjectInput;
}
export interface MutationToUpdateCoverageProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCoverageProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBatchCoverageProjectArgs {
    input: IUpdateBatchCoverageProjectInput;
}
export interface MutationToUpdateBatchCoverageProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBatchCoverageProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateApiServiceArgs {
    input: ICreateApiServiceInput;
}
export interface MutationToCreateApiServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateApiServiceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateApiServiceArgs {
    input: IUpdateApiServiceInput;
}
export interface MutationToUpdateApiServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateApiServiceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateDynamicCustomMetaArgs {
    input: IDynamicCustomMetaInput;
}
export interface MutationToCreateDynamicCustomMetaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateDynamicCustomMetaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateDynamicCustomMetaArgs {
    id: IUUID;
    input: IDynamicCustomMetaInput;
}
export interface MutationToUpdateDynamicCustomMetaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateDynamicCustomMetaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteDynamicCustomMetaArgs {
    id: IUUID;
}
export interface MutationToDeleteDynamicCustomMetaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteDynamicCustomMetaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBatchDynamicCustomMetaArgs {
    input: IUpdateBatchDynamicCustomMetaInput;
}
export interface MutationToUpdateBatchDynamicCustomMetaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBatchDynamicCustomMetaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateDynamicCustomValueArgs {
    input: IDynamicCustomValueInput;
}
export interface MutationToCreateDynamicCustomValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateDynamicCustomValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateDynamicCustomValueArgs {
    id: IUUID;
    input: IDynamicCustomValueInput;
}
export interface MutationToUpdateDynamicCustomValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateDynamicCustomValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteDynamicCustomValueArgs {
    id: IUUID;
}
export interface MutationToDeleteDynamicCustomValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteDynamicCustomValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBatchDynamicCustomValueArgs {
    input: IUpdateBatchDynamicCustomValueInput;
}
export interface MutationToUpdateBatchDynamicCustomValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBatchDynamicCustomValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateDynamicPageArgs {
    input: IDynamicPageInput;
}
export interface MutationToCreateDynamicPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateDynamicPageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateDynamicPageArgs {
    id: IUUID;
    input: IDynamicPageInput;
}
export interface MutationToUpdateDynamicPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateDynamicPageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteDynamicPageArgs {
    id: IUUID;
}
export interface MutationToDeleteDynamicPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteDynamicPageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateDynamicBlockArgs {
    input: IDynamicBlockInput;
}
export interface MutationToCreateDynamicBlockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateDynamicBlockArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateDynamicBlockArgs {
    id: IUUID;
    input: IDynamicBlockInput;
}
export interface MutationToUpdateDynamicBlockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateDynamicBlockArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteDynamicBlockArgs {
    id: IUUID;
}
export interface MutationToDeleteDynamicBlockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteDynamicBlockArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateDynamicSectionArgs {
    input: IDynamicSectionInput;
}
export interface MutationToCreateDynamicSectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateDynamicSectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateDynamicSectionArgs {
    id: IUUID;
    input: IDynamicSectionInput;
}
export interface MutationToUpdateDynamicSectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateDynamicSectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteDynamicSectionArgs {
    id: IUUID;
}
export interface MutationToDeleteDynamicSectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteDynamicSectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateDynamicSectionBlockArgs {
    input: IDynamicSectionBlockInput;
}
export interface MutationToCreateDynamicSectionBlockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateDynamicSectionBlockArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateDynamicSectionBlockArgs {
    id: IUUID;
    input: IDynamicSectionBlockInput;
}
export interface MutationToUpdateDynamicSectionBlockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateDynamicSectionBlockArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteDynamicSectionBlockArgs {
    id: IUUID;
}
export interface MutationToDeleteDynamicSectionBlockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteDynamicSectionBlockArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateDynamicTabArgs {
    input: IDynamicTabInput;
}
export interface MutationToCreateDynamicTabResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateDynamicTabArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateDynamicTabBlockArgs {
    id: IUUID;
    input: IDynamicTabInput;
}
export interface MutationToUpdateDynamicTabBlockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateDynamicTabBlockArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteDynamicTabArgs {
    id: IUUID;
}
export interface MutationToDeleteDynamicTabResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteDynamicTabArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateChargeArgs {
    input: ICreateChargeInput;
}
export interface MutationToCreateChargeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateChargeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateClinicHistoryArgs {
    input: ICreateClinicHistoryInput;
}
export interface MutationToCreateClinicHistoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateClinicHistoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateClinicHistoryMedicalBackgroundDetailArgs {
    input: ICreateClinicHistoryMedicalBackgroundDetailInput;
}
export interface MutationToCreateClinicHistoryMedicalBackgroundDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateClinicHistoryMedicalBackgroundDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateEventDetailArgs {
    input: ICreateEventDetailInput;
}
export interface MutationToCreateEventDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateEventDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateFisicExamArgs {
    input: ICreateFisicExamInput;
}
export interface MutationToCreateFisicExamResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateFisicExamArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateFormatArgs {
    input: ICreateFormatInput;
}
export interface MutationToCreateFormatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateFormatArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMedicalBackgroundDetailArgs {
    input: ICreateMedicalBackgroundDetailInput;
}
export interface MutationToCreateMedicalBackgroundDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMedicalBackgroundDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMedicalBackgroundArgs {
    input: ICreateMedicalBackgroundInput;
}
export interface MutationToCreateMedicalBackgroundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMedicalBackgroundArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMedicalConfigArgs {
    input: ICreateMedicalConfigInput;
}
export interface MutationToCreateMedicalConfigResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMedicalConfigArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMedicalServiceArgs {
    input: ICreateMedicalServiceInput;
}
export interface MutationToCreateMedicalServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMedicalServiceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMedicineArgs {
    input: ICreateMedicineInput;
}
export interface MutationToCreateMedicineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMedicineArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateVaccineArgs {
    input: ICreateVaccineInput;
}
export interface MutationToCreateVaccineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateVaccineArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateVitalSignsArgs {
    input: ICreateVitalSignsInput;
}
export interface MutationToCreateVitalSignsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateVitalSignsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMedicRecipeArgs {
    input: ICreateMedicRecipeInput;
}
export interface MutationToCreateMedicRecipeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMedicRecipeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateRecipeConfigArgs {
    input: ICreateRecipeConfigInput;
}
export interface MutationToCreateRecipeConfigResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateRecipeConfigArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateRegistSesionArgs {
    input: ICreateRegistSesionInput;
}
export interface MutationToCreateRegistSesionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateRegistSesionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePacientNoteArgs {
    input: ICreatePacientNoteInput;
}
export interface MutationToCreatePacientNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePacientNoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateTherapyArgs {
    input: ICreateTherapyInput;
}
export interface MutationToCreateTherapyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateTherapyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateDiagnosticArgs {
    input: ICreateDiagnosticInput;
}
export interface MutationToCreateDiagnosticResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateDiagnosticArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateConsultNoteArgs {
    input: ICreateConsultNoteInput;
}
export interface MutationToCreateConsultNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateConsultNoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMedicalBackgroundSetArgs {
    input: ICreateMedicalBackgroundSetInput;
}
export interface MutationToCreateMedicalBackgroundSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMedicalBackgroundSetArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMedicalBackgroundTemplateArgs {
    projectId: IUUID;
    formatId: IUUID;
}
export interface MutationToCreateMedicalBackgroundTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMedicalBackgroundTemplateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateVitalSignsTemplateArgs {
    input: ICreateVitalSignsTemplateInput;
}
export interface MutationToCreateVitalSignsTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateVitalSignsTemplateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePacientMedicalBackgroundArgs {
    input: ICreatePacientMedicalBackgroundInput;
}
export interface MutationToCreatePacientMedicalBackgroundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePacientMedicalBackgroundArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePatientVitalSignsResponseArgs {
    input: ICreatePatientVitalSignsResponseInput;
}
export interface MutationToCreatePatientVitalSignsResponseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePatientVitalSignsResponseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateChargeArgs {
    input: IUpdateChargeInput;
}
export interface MutationToUpdateChargeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateChargeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateClinicHistoryArgs {
    input: IUpdateClinicHistoryInput;
}
export interface MutationToUpdateClinicHistoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateClinicHistoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateClinicHistoryMedicalBackgroundDetailArgs {
    input: IUpdateClinicHistoryMedicalBackgroundDetailInput;
}
export interface MutationToUpdateClinicHistoryMedicalBackgroundDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateClinicHistoryMedicalBackgroundDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateEventDetailArgs {
    input: IUpdateEventDetailInput;
}
export interface MutationToUpdateEventDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateEventDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateFisicExamArgs {
    input: IUpdateFisicExamInput;
}
export interface MutationToUpdateFisicExamResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateFisicExamArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateFormatArgs {
    input: IUpdateFormatInput;
}
export interface MutationToUpdateFormatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateFormatArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMedicalBackgroundDetailArgs {
    input: IUpdateMedicalBackgroundDetailInput;
}
export interface MutationToUpdateMedicalBackgroundDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMedicalBackgroundDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMedicalBackgroundArgs {
    input: IUpdateMedicalBackgroundInput;
}
export interface MutationToUpdateMedicalBackgroundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMedicalBackgroundArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMedicalConfigArgs {
    input: IUpdateMedicalConfigInput;
}
export interface MutationToUpdateMedicalConfigResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMedicalConfigArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMedicalServiceArgs {
    input: IUpdateMedicalServiceInput;
}
export interface MutationToUpdateMedicalServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMedicalServiceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMedicineArgs {
    input: IUpdateMedicineInput;
}
export interface MutationToUpdateMedicineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMedicineArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateVaccineArgs {
    input: IUpdateVaccineInput;
}
export interface MutationToUpdateVaccineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateVaccineArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateVitalSignsArgs {
    input: IUpdateVitalSingsInput;
}
export interface MutationToUpdateVitalSignsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateVitalSignsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMedicRecipeArgs {
    input: IUpdateMedicRecipeInput;
}
export interface MutationToUpdateMedicRecipeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMedicRecipeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateRecipeConfigArgs {
    input: IUpdateRecipeConfigInput;
}
export interface MutationToUpdateRecipeConfigResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateRecipeConfigArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateRegistSesionArgs {
    input: IUpdateRegistSesionInput;
}
export interface MutationToUpdateRegistSesionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateRegistSesionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePacientNoteArgs {
    input: IUpdatePacientNoteInput;
}
export interface MutationToUpdatePacientNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePacientNoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateTherapyArgs {
    input: IUpdateTherapyInput;
}
export interface MutationToUpdateTherapyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateTherapyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateDiagnosticArgs {
    input: IUpdateDiagnosticInput;
}
export interface MutationToUpdateDiagnosticResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateDiagnosticArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateConsultNoteArgs {
    input: IUpdateConsultNoteInput;
}
export interface MutationToUpdateConsultNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateConsultNoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePacientMedicalBackgroundArgs {
    input: IUpdatePacientMedicalBackgroundInput;
}
export interface MutationToUpdatePacientMedicalBackgroundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePacientMedicalBackgroundArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBillingRequestArgs {
    input: IUpdateBillingRequestInput;
}
export interface MutationToUpdateBillingRequestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBillingRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateSortFormatArgs {
    input: IUpdateSortFormatInput;
}
export interface MutationToUpdateSortFormatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSortFormatArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePatientVitalSignsResponseArgs {
    input: IUpdatePatientVitalSignsResponseInput;
}
export interface MutationToUpdatePatientVitalSignsResponseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePatientVitalSignsResponseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteChargeArgs {
    input: IDeleteChargeInput;
}
export interface MutationToDeleteChargeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteChargeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteClinicHistoryArgs {
    input: IDeleteClinicHistoryInput;
}
export interface MutationToDeleteClinicHistoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteClinicHistoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteClinicHistoryMedicalBackgrounDetailArgs {
    input: IDeleteClinicHistoryMedicalBackgroundDetailInput;
}
export interface MutationToDeleteClinicHistoryMedicalBackgrounDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteClinicHistoryMedicalBackgrounDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteConsultArgs {
    input: IDeleteConsultInput;
}
export interface MutationToDeleteConsultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteConsultArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteFisicExamArgs {
    input: IDeleteFisicalExamInput;
}
export interface MutationToDeleteFisicExamResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteFisicExamArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMedicalBackgroundDetailArgs {
    input: IDeleteMedicalBackgroundDetailInput;
}
export interface MutationToDeleteMedicalBackgroundDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMedicalBackgroundDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMedicalBackgroundArgs {
    input: IDeleteMedicalBackgroundInput;
}
export interface MutationToDeleteMedicalBackgroundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMedicalBackgroundArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMedicalConfigArgs {
    input: IDeleteMedicalConfigInput;
}
export interface MutationToDeleteMedicalConfigResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMedicalConfigArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMedicalServiceArgs {
    input: IDeleteMedicalServiceinputInput;
}
export interface MutationToDeleteMedicalServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMedicalServiceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMedicineArgs {
    input: IDeleteMedicineinputInput;
}
export interface MutationToDeleteMedicineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMedicineArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteVaccineArgs {
    input: IDeleteVaccineinputInput;
}
export interface MutationToDeleteVaccineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteVaccineArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteVitalSignArgs {
    input: IDeleteVitalSignInput;
}
export interface MutationToDeleteVitalSignResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteVitalSignArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMedicRecipeArgs {
    input: IDeleteMedicRecipeinputInput;
}
export interface MutationToDeleteMedicRecipeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMedicRecipeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteRecipeConfigArgs {
    input: IDeleteRecipeConfiginputInput;
}
export interface MutationToDeleteRecipeConfigResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteRecipeConfigArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteRegistSesionArgs {
    input: IDeleteRegisSesioninputInput;
}
export interface MutationToDeleteRegistSesionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteRegistSesionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteTherapyArgs {
    input: IDeleteTherapyinputInput;
}
export interface MutationToDeleteTherapyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteTherapyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteDiagnosticArgs {
    input: IDeleteDiagnosticInput;
}
export interface MutationToDeleteDiagnosticResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteDiagnosticArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteConsultNoteArgs {
    input: IDeleteConsultNoteInput;
}
export interface MutationToDeleteConsultNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteConsultNoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePacientNoteArgs {
    input: IDeletePacientNoteInput;
}
export interface MutationToDeletePacientNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePacientNoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePacientMedicalBackgroundArgs {
    input: IDeletePacientMedicalBackgroundInput;
}
export interface MutationToDeletePacientMedicalBackgroundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePacientMedicalBackgroundArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteBillingRequestArgs {
    input: IDeleteBillingRequestinputInput;
}
export interface MutationToDeleteBillingRequestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteBillingRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteFormatArgs {
    input: IDeleteFormatInput;
}
export interface MutationToDeleteFormatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteFormatArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToPrintWithImageFromUrlArgs {
    input: ICreatePdfInput;
}
export interface MutationToPrintWithImageFromUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPrintWithImageFromUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToBulkWorkSpaceArgs {
    input: IBulkWorkSpaceInput;
}
export interface MutationToBulkWorkSpaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToBulkWorkSpaceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToOrderingMemberBoardArgs {
    input: IOrderingMemberBoardInput;
}
export interface MutationToOrderingMemberBoardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToOrderingMemberBoardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateSpaceArgs {
    input: ISpaceInput;
}
export interface MutationToCreateSpaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateSpaceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateSpaceArgs {
    id: IUUID;
    input: ISpaceInput;
}
export interface MutationToUpdateSpaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSpaceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteSpaceArgs {
    id: IUUID;
}
export interface MutationToDeleteSpaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteSpaceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBatchMemberSpaceArgs {
    input: IUpdateBatchMemberSpaceInput;
}
export interface MutationToUpdateBatchMemberSpaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBatchMemberSpaceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMemberSpaceArgs {
    input: IMemberSpaceInput;
}
export interface MutationToCreateMemberSpaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMemberSpaceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMemberSpaceArgs {
    id: IUUID;
    input: IMemberSpaceInput;
}
export interface MutationToUpdateMemberSpaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMemberSpaceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMemberSpaceArgs {
    id: IUUID;
}
export interface MutationToDeleteMemberSpaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMemberSpaceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBoardStatusArgs {
    input: IBoardStatusInput;
}
export interface MutationToCreateBoardStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBoardStatusArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBoardStatusArgs {
    id: IUUID;
    input: IBoardStatusInput;
}
export interface MutationToUpdateBoardStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBoardStatusArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteBoardStatusArgs {
    id: IUUID;
}
export interface MutationToDeleteBoardStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteBoardStatusArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBatchMemberBoardArgs {
    input: IUpdateBatchMemberBoardInput;
}
export interface MutationToUpdateBatchMemberBoardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBatchMemberBoardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBoardArgs {
    input: IBoardInput;
}
export interface MutationToCreateBoardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBoardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBoardArgs {
    id: IUUID;
    input: IBoardInput;
}
export interface MutationToUpdateBoardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBoardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteBoardArgs {
    id: IUUID;
}
export interface MutationToDeleteBoardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteBoardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBoardListArgs {
    input: IBoardListInput;
}
export interface MutationToCreateBoardListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBoardListArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBoardListArgs {
    id: IUUID;
    input: IBoardListInput;
}
export interface MutationToUpdateBoardListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBoardListArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBatchBoardListArgs {
    input: IUpdateBatchBoardListInput;
}
export interface MutationToUpdateBatchBoardListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBatchBoardListArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteBoardListArgs {
    id: IUUID;
}
export interface MutationToDeleteBoardListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteBoardListArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBoardGroupColumnArgs {
    input: IBoardGroupColumnInput;
}
export interface MutationToCreateBoardGroupColumnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBoardGroupColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBoardGroupColumnArgs {
    id: IUUID;
    input: IBoardGroupColumnInput;
}
export interface MutationToUpdateBoardGroupColumnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBoardGroupColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBatchBoardGroupColumnArgs {
    input: IUpdateBatchBoardGroupColumnInput;
}
export interface MutationToUpdateBatchBoardGroupColumnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBatchBoardGroupColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteBoardGroupColumnArgs {
    id: IUUID;
}
export interface MutationToDeleteBoardGroupColumnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteBoardGroupColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBoardColumnTypeArgs {
    input: IBoardColumnTypeInput;
}
export interface MutationToCreateBoardColumnTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBoardColumnTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBoardColumnTypeArgs {
    id: IUUID;
    input: IBoardColumnTypeInput;
}
export interface MutationToUpdateBoardColumnTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBoardColumnTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteBoardColumnTypeArgs {
    id: IUUID;
}
export interface MutationToDeleteBoardColumnTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteBoardColumnTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBoardColumnValueArgs {
    input: IBoardColumnValueInput;
}
export interface MutationToCreateBoardColumnValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBoardColumnValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBoardColumnValueArgs {
    id: IUUID;
    input: IBoardColumnValueInput;
}
export interface MutationToUpdateBoardColumnValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBoardColumnValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteBoardColumnValueArgs {
    id: IUUID;
}
export interface MutationToDeleteBoardColumnValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteBoardColumnValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCardColumnValueArgs {
    input: ICardColumnValueInput;
}
export interface MutationToCreateCardColumnValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCardColumnValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCardColumnValueArgs {
    id: IUUID;
    input: ICardColumnValueInput;
}
export interface MutationToUpdateCardColumnValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCardColumnValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCardColumnValueArgs {
    id: IUUID;
}
export interface MutationToDeleteCardColumnValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCardColumnValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBoardMemberReferenceArgs {
    input: IBoardMemberReferenceInput;
}
export interface MutationToCreateBoardMemberReferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBoardMemberReferenceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBoardMemberReferenceArgs {
    id: IUUID;
    input: IBoardMemberReferenceInput;
}
export interface MutationToUpdateBoardMemberReferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBoardMemberReferenceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteBoardMemberReferenceArgs {
    id: IUUID;
}
export interface MutationToDeleteBoardMemberReferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteBoardMemberReferenceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBoardRowForResourceQuoteArgs {
    input: IBoardRowForResourceQuoteInput;
}
export interface MutationToCreateBoardRowForResourceQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBoardRowForResourceQuoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBoardRowArgs {
    input: IBoardRowInput;
}
export interface MutationToCreateBoardRowResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBoardRowArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBoardRowArgs {
    id: IUUID;
    input: IBoardRowInput;
}
export interface MutationToUpdateBoardRowResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBoardRowArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBatchBoardRowArgs {
    input: IUpdateBatchBoardRowInput;
}
export interface MutationToUpdateBatchBoardRowResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBatchBoardRowArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteBoardRowArgs {
    id: IUUID;
}
export interface MutationToDeleteBoardRowResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteBoardRowArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCardArgs {
    input: ICardInput;
}
export interface MutationToCreateCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCardArgs {
    id: IUUID;
    input: ICardInput;
}
export interface MutationToUpdateCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCardArgs {
    id: IUUID;
}
export interface MutationToDeleteCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCardChecklistArgs {
    input: ICardChecklistInput;
}
export interface MutationToCreateCardChecklistResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCardChecklistArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCardChecklistArgs {
    id: IUUID;
    input: ICardChecklistInput;
}
export interface MutationToUpdateCardChecklistResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCardChecklistArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCardChecklistArgs {
    id: IUUID;
}
export interface MutationToDeleteCardChecklistResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCardChecklistArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBatchCardCheckComponentArgs {
    input: IUpdateBatchCardCheckComponentInput;
}
export interface MutationToUpdateBatchCardCheckComponentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBatchCardCheckComponentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCardCheckComponentArgs {
    input: ICardCheckComponentInput;
}
export interface MutationToCreateCardCheckComponentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCardCheckComponentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCardCheckComponentArgs {
    id: IUUID;
    input: ICardCheckComponentInput;
}
export interface MutationToUpdateCardCheckComponentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCardCheckComponentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCardCheckComponentArgs {
    id: IUUID;
}
export interface MutationToDeleteCardCheckComponentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCardCheckComponentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCardReplyArgs {
    input: ICardReplyInput;
}
export interface MutationToCreateCardReplyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCardReplyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCardReplyArgs {
    id: IUUID;
    input: ICardReplyInput;
}
export interface MutationToUpdateCardReplyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCardReplyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCardReplyArgs {
    id: IUUID;
}
export interface MutationToDeleteCardReplyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCardReplyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateNestedFilesArgs {
    input: INestedFilesInput;
}
export interface MutationToCreateNestedFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateNestedFilesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateNestedFilesArgs {
    id: IUUID;
    input: INestedFilesInput;
}
export interface MutationToUpdateNestedFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateNestedFilesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteNestedFilesArgs {
    id: IUUID;
}
export interface MutationToDeleteNestedFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteNestedFilesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMemberCardArgs {
    input: IMemberCardInput;
}
export interface MutationToCreateMemberCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMemberCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMemberCardArgs {
    id: IUUID;
    input: IMemberCardInput;
}
export interface MutationToUpdateMemberCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMemberCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMemberCardArgs {
    id: IUUID;
}
export interface MutationToDeleteMemberCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMemberCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMemberBoardArgs {
    input: IMemberBoardInput;
}
export interface MutationToCreateMemberBoardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMemberBoardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMemberBoardArgs {
    id: IUUID;
    input: IMemberBoardInput;
}
export interface MutationToUpdateMemberBoardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMemberBoardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMemberBoardArgs {
    id: IUUID;
}
export interface MutationToDeleteMemberBoardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMemberBoardArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMeasureArgs {
    input: IDeleteMeasureInput;
}
export interface MutationToDeleteMeasureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMeasureArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMeasureArgs {
    input: IUpdateMeasureInput;
}
export interface MutationToUpdateMeasureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMeasureArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMaterialCategoryArgs {
    input: IDeleteMaterialCategoryInput;
}
export interface MutationToDeleteMaterialCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMaterialCategoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMeasureValueArgs {
    input: ICreateMeasureValueInput;
}
export interface MutationToCreateMeasureValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMeasureValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMeasureValueArgs {
    input: IUpdateMeasureValueInput;
}
export interface MutationToUpdateMeasureValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMeasureValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMeasureValueArgs {
    input: IDeleteMeasureValueInput;
}
export interface MutationToDeleteMeasureValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMeasureValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMeasureUnityTwoArgs {
    input: IDeleteMeasureUnityTwoInput;
}
export interface MutationToDeleteMeasureUnityTwoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMeasureUnityTwoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateModuleArgs {
    input: IUpdateModuleInput;
}
export interface MutationToUpdateModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateModuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMaterialQuotationArgs {
    input: ICreateMaterialQuotationInput;
}
export interface MutationToCreateMaterialQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMaterialQuotationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMaterialQuotationArgs {
    input: IUpdateMaterialQuotationInput;
}
export interface MutationToUpdateMaterialQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMaterialQuotationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMaterialQuotationArgs {
    input: IDeleteMaterialQuotationInput;
}
export interface MutationToDeleteMaterialQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMaterialQuotationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMaterialModuleArgs {
    input: ICreateMaterialModuleInput;
}
export interface MutationToCreateMaterialModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMaterialModuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMaterialModuleArgs {
    input: IUpdateMaterialModuleInput;
}
export interface MutationToUpdateMaterialModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMaterialModuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMaterialModuleArgs {
    input: IDeleteMaterialModuleInput;
}
export interface MutationToDeleteMaterialModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMaterialModuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateUserCustomerArgs {
    input: ICreateUserCustomerInput;
}
export interface MutationToCreateUserCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateUserCustomerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMeasureUnityArgs {
    input: ICreateMeasureUnityInput;
}
export interface MutationToCreateMeasureUnityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMeasureUnityArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMeasureUnityArgs {
    input: IUpdateMeasureUnityInput;
}
export interface MutationToUpdateMeasureUnityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMeasureUnityArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMeasureUnityArgs {
    input: IDeleteMeasureUnityInput;
}
export interface MutationToDeleteMeasureUnityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMeasureUnityArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateAttributeArgs {
    input: ICreateAttributeInput;
}
export interface MutationToCreateAttributeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateAttributeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateAttributeValueArgs {
    input: ICreateAttributeValueInput;
}
export interface MutationToCreateAttributeValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateAttributeValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBuildingSiteArgs {
    input: ICreateBuildingSiteAddressInput;
}
export interface MutationToCreateBuildingSiteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBuildingSiteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMadreQuotationArgs {
    input: ICreateMadreQuotationInput;
}
export interface MutationToCreateMadreQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMadreQuotationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMaterialCategoryArgs {
    input: ICreateMaterialCategoryInput;
}
export interface MutationToCreateMaterialCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMaterialCategoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMaterialCombinationArgs {
    input: ICreateMaterialCombinationInput;
}
export interface MutationToCreateMaterialCombinationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMaterialCombinationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMaterialArgs {
    input: ICreateMaterialInput;
}
export interface MutationToCreateMaterialResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMaterialArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMaterialStockMeasureArgs {
    input: ICreateMaterialStockMeasureInput;
}
export interface MutationToCreateMaterialStockMeasureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMaterialStockMeasureArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMaterialStockArgs {
    input: ICreateMaterialStockInput;
}
export interface MutationToCreateMaterialStockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMaterialStockArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMaterialVariableQuotationArgs {
    input: ICreateMaterialVariableQuotationInput;
}
export interface MutationToCreateMaterialVariableQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMaterialVariableQuotationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMeasureArgs {
    input: ICreateMeasureInput;
}
export interface MutationToCreateMeasureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMeasureArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMeasureUnityTwoArgs {
    input: ICreateMeasureTwoInput;
}
export interface MutationToCreateMeasureUnityTwoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMeasureUnityTwoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateModuleCategoryArgs {
    input: ICreateModuleCategoryInput;
}
export interface MutationToCreateModuleCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateModuleCategoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateModuleArgs {
    input: ICreateModuleInput;
}
export interface MutationToCreateModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateModuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateQuotationArgs {
    input: ICreateQuotationInput;
}
export interface MutationToCreateQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateQuotationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateQuotationModuleArgs {
    input: ICreateQuotationModuleInput;
}
export interface MutationToCreateQuotationModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateQuotationModuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateVariableArgs {
    input: ICreateVariableInput;
}
export interface MutationToCreateVariableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateVariableArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteAttributeArgs {
    input: IDeleteAttributeInput;
}
export interface MutationToDeleteAttributeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteAttributeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteAttributeValueArgs {
    input: IDeleteAttributeValueInput;
}
export interface MutationToDeleteAttributeValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteAttributeValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteBuildingSiteAddressArgs {
    input: IDeleteBuildingSiteAddresInput;
}
export interface MutationToDeleteBuildingSiteAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteBuildingSiteAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMaterialCombinationArgs {
    input: IDeleteMaterialCombinationInput;
}
export interface MutationToDeleteMaterialCombinationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMaterialCombinationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMaterialArgs {
    input: IDeleteMaterialInput;
}
export interface MutationToDeleteMaterialResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMaterialArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMaterialStockArgs {
    input: IDeleteMaterialStockInput;
}
export interface MutationToDeleteMaterialStockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMaterialStockArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMaterialStockMeasureArgs {
    input: IDeleteMaterialStockMeasureInput;
}
export interface MutationToDeleteMaterialStockMeasureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMaterialStockMeasureArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMaterialVariableQuotationArgs {
    input: IDeleteMaterialVariableQuotationInput;
}
export interface MutationToDeleteMaterialVariableQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMaterialVariableQuotationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteModuleCategoryArgs {
    input: IDeleteModuleCategoryInput;
}
export interface MutationToDeleteModuleCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteModuleCategoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteModuleArgs {
    input: IDeleteModuleInput;
}
export interface MutationToDeleteModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteModuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteQuotationModuleArgs {
    input: IDeleteQuotationModuleInput;
}
export interface MutationToDeleteQuotationModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteQuotationModuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteQuotationArgs {
    input: IDeleteQuotationInput;
}
export interface MutationToDeleteQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteQuotationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteVariableArgs {
    input: IDeleteVariableInput;
}
export interface MutationToDeleteVariableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteVariableArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateAttributeArgs {
    input: IUpdateAttributeInput;
}
export interface MutationToUpdateAttributeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateAttributeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateAttributeValueArgs {
    input: IUpdateAttributeValueInput;
}
export interface MutationToUpdateAttributeValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateAttributeValueArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBuildingSiteAddressArgs {
    input: IUpdateBuildingSiteAddressInput;
}
export interface MutationToUpdateBuildingSiteAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBuildingSiteAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMaterialCategoryArgs {
    input: IUpdateMaterialCategoryInput;
}
export interface MutationToUpdateMaterialCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMaterialCategoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMaterialCombinationArgs {
    input: IUpdateMaterialCombinationInput;
}
export interface MutationToUpdateMaterialCombinationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMaterialCombinationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMaterialArgs {
    input: IUpdateMaterialInput;
}
export interface MutationToUpdateMaterialResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMaterialArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMaterialStockMeasureArgs {
    input: IUpdateMaterialStockMeasureInput;
}
export interface MutationToUpdateMaterialStockMeasureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMaterialStockMeasureArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMaterialStockArgs {
    input: IUpdateMaterialStockInput;
}
export interface MutationToUpdateMaterialStockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMaterialStockArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMadreQuotationArgs {
    input: IUpdateMadreQuotationInput;
}
export interface MutationToUpdateMadreQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMadreQuotationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMadreQuotationArgs {
    input: IDeleteMadreQuotationInput;
}
export interface MutationToDeleteMadreQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMadreQuotationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMaterialVariableQuotationArgs {
    input: IUpdateMaterialVariableQuotationInput;
}
export interface MutationToUpdateMaterialVariableQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMaterialVariableQuotationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMeasureUnityTwoArgs {
    input: IUpdateMeasureUnityTwoInput;
}
export interface MutationToUpdateMeasureUnityTwoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMeasureUnityTwoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCategoryModuleArgs {
    input: IUpdateModuleCategoryInput;
}
export interface MutationToUpdateCategoryModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCategoryModuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateQuotationModuleArgs {
    input: IUpdateQuotationModuleInput;
}
export interface MutationToUpdateQuotationModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateQuotationModuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateQuotationArgs {
    input: IUpdateQuotationInput;
}
export interface MutationToUpdateQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateQuotationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateVariableArgs {
    input: IUpdateVariableInput;
}
export interface MutationToUpdateVariableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateVariableArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateAnalysisArgs {
    input: IUpdateAnalysisInput;
}
export interface MutationToUpdateAnalysisResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateAnalysisArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateClientArgs {
    input: ICreateClientInput;
}
export interface MutationToCreateClientResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateClientArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateClientArgs {
    input: IUpdateClientInput;
}
export interface MutationToUpdateClientResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateClientArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateConsultArgs {
    input: ICreateConsultInput;
}
export interface MutationToCreateConsultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateConsultArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateConsultArgs {
    input: IUpdateConsultInput;
}
export interface MutationToUpdateConsultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateConsultArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCalculator_deleteConsultArgs {
    input: IDeleteConsultInput;
}
export interface MutationToCalculator_deleteConsultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCalculator_deleteConsultArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateComparedArgs {
    input: ICreateComparedInput;
}
export interface MutationToCreateComparedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateComparedArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateComparedArgs {
    input: IUpdateComparedInput;
}
export interface MutationToUpdateComparedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateComparedArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteComparedArgs {
    input: IDeleteComparedInput;
}
export interface MutationToDeleteComparedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteComparedArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCarMercadoArgs {
    input: ICreateCarMercadoInput;
}
export interface MutationToCreateCarMercadoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCarMercadoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCarMercadoMassiveArgs {
    input: ICreateCarMercadoMassiveInput;
}
export interface MutationToCreateCarMercadoMassiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCarMercadoMassiveArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCarMercadoArgs {
    input: IDeleteCarMercadoInput;
}
export interface MutationToDeleteCarMercadoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCarMercadoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUploadFileArgs {
    bucketName: string;
    base64: string;
    projectId: IUUID;
    fileName: string;
}
export interface MutationToUploadFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUploadFileArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToZipFolderContentArgs {
    input: IZipFolderContentInput;
}
export interface MutationToZipFolderContentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToZipFolderContentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateFolderArgs {
    input: IFolderInput;
}
export interface MutationToCreateFolderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateFolderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateFolderArgs {
    id: IUUID;
    input: IFolderInput;
}
export interface MutationToUpdateFolderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateFolderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteFolderArgs {
    input: IDeleteFolderMutationInput;
}
export interface MutationToDeleteFolderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteFolderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateFileArgs {
    input: ICreateFileInput;
}
export interface MutationToCreateFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateFileArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateFileArgs {
    input: IUpdateFilesInput;
}
export interface MutationToUpdateFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateFileArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteFileArgs {
    input: IDeleteFileMutationInput;
}
export interface MutationToDeleteFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteFileArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToShareFileArgs {
    input: IShareFileInput;
}
export interface MutationToShareFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToShareFileArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToShareFolderArgs {
    input: IShareFolderInput;
}
export interface MutationToShareFolderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToShareFolderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToStopSharingFolderArgs {
    input: IStopSharingFolderInput;
}
export interface MutationToStopSharingFolderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToStopSharingFolderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToStopSharingFileArgs {
    input: IStopSharingFileInput;
}
export interface MutationToStopSharingFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToStopSharingFileArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUploadFilePrivateArgs {
    input: IUploadFilePrivateInput;
}
export interface MutationToUploadFilePrivateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUploadFilePrivateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToAddChatMemberArgs {
    input: IAddChatMemberInput;
}
export interface MutationToAddChatMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAddChatMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToAddChatMemberWsArgs {
    input: IAddChatMemberWsInput;
}
export interface MutationToAddChatMemberWsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAddChatMemberWsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToConversationIdArgs {
    input: IGetConversationIdInput;
}
export interface MutationToConversationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToConversationIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteReplyArgs {
    input: IDeleteReplyInput;
}
export interface MutationToDeleteReplyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteReplyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateWalletArgs {
    input: ICreateWalletInput;
}
export interface MutationToCreateWalletResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateWalletArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateWalletArgs {
    id: IUUID;
    input: IWalletInput;
}
export interface MutationToUpdateWalletResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateWalletArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteWalletArgs {
    id: IUUID;
}
export interface MutationToDeleteWalletResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteWalletArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateWalletTransactionArgs {
    input: IWalletTransactionInput;
}
export interface MutationToCreateWalletTransactionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateWalletTransactionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMultipleWalletTransactionArgs {
    input: IMultipleWalletTransactionInput;
}
export interface MutationToCreateMultipleWalletTransactionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMultipleWalletTransactionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateWalletTransactionStatusArgs {
    input: IWalletTransactionStatusInput;
}
export interface MutationToCreateWalletTransactionStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateWalletTransactionStatusArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateWalletTransactionMemberRelationArgs {
    input: IWalletTransactionMemberRelationInput;
}
export interface MutationToCreateWalletTransactionMemberRelationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateWalletTransactionMemberRelationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMemberWalletArgs {
    input: IMemberWalletInput;
}
export interface MutationToCreateMemberWalletResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMemberWalletArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMemberWalletArgs {
    id: IUUID;
    input: IMemberWalletInput;
}
export interface MutationToUpdateMemberWalletResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMemberWalletArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMemberWalletArgs {
    id: IUUID;
}
export interface MutationToDeleteMemberWalletResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMemberWalletArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateProjectWalletKeyArgs {
    input: IProjectWalletKeyInput;
}
export interface MutationToCreateProjectWalletKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateProjectWalletKeyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateProjectWalletKeyArgs {
    id: IUUID;
    input: IProjectWalletKeyInput;
}
export interface MutationToUpdateProjectWalletKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateProjectWalletKeyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteProjectWalletKeyArgs {
    id: IUUID;
}
export interface MutationToDeleteProjectWalletKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProjectWalletKeyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCertificateMovementArgs {
    input: ICreateCertificateMovementInput;
}
export interface MutationToCreateCertificateMovementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCertificateMovementArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCertificateArgs {
    input: IDeleteCertificateInput;
}
export interface MutationToDeleteCertificateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCertificateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerModuleArgs {
    input: IUpdateInsurerModuleInput;
}
export interface MutationToUpdateInsurerModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerModuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerModuleArgs {
    input: ICreateInsurerModuleInput;
}
export interface MutationToCreateInsurerModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerModuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePolicyModuleArgs {
    input: ICreatePolicyModuleInput;
}
export interface MutationToCreatePolicyModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePolicyModuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePolicyModuleArgs {
    input: IUpdatePolicyModuleInput;
}
export interface MutationToUpdatePolicyModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePolicyModuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePolicyModuleArgs {
    input: IDeletePolicyModuleInput;
}
export interface MutationToDeletePolicyModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePolicyModuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerFeeArgs {
    input: ICreateInsurerFeeInput;
}
export interface MutationToCreateInsurerFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerFeeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerFeeArgs {
    input: IDeleteInsurerFeeInput;
}
export interface MutationToDeleteInsurerFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerFeeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerFeeArgs {
    input: IUpdateInsurerFeeInput;
}
export interface MutationToUpdateInsurerFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerFeeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePolicyArgs {
    input: ICreatePolicyInput;
}
export interface MutationToCreatePolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePolicyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCancelCertificateArgs {
    input: ICancelCertificateInput;
}
export interface MutationToCancelCertificateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCancelCertificateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBeneficiaryArgs {
    input: ICreateBeneficiaryInput;
}
export interface MutationToCreateBeneficiaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBeneficiaryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCertificateArgs {
    input: ICreateCertificateInput;
}
export interface MutationToCreateCertificateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCertificateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCertificateFileArgs {
    input: ICreateCertificateFileInput;
}
export interface MutationToCreateCertificateFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCertificateFileArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateContactArgs {
    input: ICreateContactInput;
}
export interface MutationToCreateContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateContactArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateContractorBranchOfficeArgs {
    input: ICreateContractorBranchOfficeInput;
}
export interface MutationToCreateContractorBranchOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateContractorBranchOfficeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateContractorContactArgs {
    input: ICreateContractorContactInput;
}
export interface MutationToCreateContractorContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateContractorContactArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateContractorArgs {
    input: ICreateContractorInput;
}
export interface MutationToCreateContractorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateContractorArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateContractorPolicyArgs {
    input: ICreateContractorPolicyInput;
}
export interface MutationToCreateContractorPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateContractorPolicyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCountryRequestArgs {
    input: ICreateCountryRequestInput;
}
export interface MutationToCreateCountryRequestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCountryRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateFeeArgs {
    input: ICreateFeeInput;
}
export interface MutationToCreateFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateFeeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerCompanyArgs {
    input: ICreateInsurerCompanyInput;
}
export interface MutationToCreateInsurerCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerCompanyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateIssuedReportArgs {
    input: ICreateIssuedReportInput;
}
export interface MutationToCreateIssuedReportResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateIssuedReportArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMerchandiseDetailArgs {
    input: ICreateMerchandiseDetailInput;
}
export interface MutationToCreateMerchandiseDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMerchandiseDetailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMerchandiseArgs {
    input: ICreateMerchandiseInput;
}
export interface MutationToCreateMerchandiseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMerchandiseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMoneyArgs {
    input: ICreateMoneyInput;
}
export interface MutationToCreateMoneyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMoneyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMoneyPolicyArgs {
    input: ICreateMoneyPolicyInput;
}
export interface MutationToCreateMoneyPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMoneyPolicyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToItus_createOfficeArgs {
    input: ICreateOfficeInput;
}
export interface MutationToItus_createOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToItus_createOfficeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteBeneficiaryArgs {
    input: IDeleteBeneficiaryInput;
}
export interface MutationToDeleteBeneficiaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteBeneficiaryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteContactArgs {
    input: IDeleteContactInput;
}
export interface MutationToDeleteContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteContactArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteContractorArgs {
    input: IDeleteContractorInput;
}
export interface MutationToDeleteContractorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteContractorArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteContractorOfficeArgs {
    input: IDeleteContractorOfficeInput;
}
export interface MutationToDeleteContractorOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteContractorOfficeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteContractorPolicyArgs {
    input: IDeleteContractorPolicyInput;
}
export interface MutationToDeleteContractorPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteContractorPolicyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerModuleArgs {
    input: IDeleteInsurerModuleInput;
}
export interface MutationToDeleteInsurerModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerModuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteFeeArgs {
    input: IDeleteFeeInput;
}
export interface MutationToDeleteFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteFeeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMerchandiseArgs {
    input: IDeleteMerchandiseInput;
}
export interface MutationToDeleteMerchandiseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMerchandiseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerCompanyArgs {
    input: IDeleteInsurerCompanyInput;
}
export interface MutationToDeleteInsurerCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerCompanyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteMoneyArgs {
    input: IDeleteMoneyInput;
}
export interface MutationToDeleteMoneyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteMoneyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePolicyArgs {
    input: IDeletePolicyInput;
}
export interface MutationToDeletePolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePolicyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBeneficiaryArgs {
    input: IUpdateBeneficiaryInput;
}
export interface MutationToUpdateBeneficiaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBeneficiaryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCertificateArgs {
    input: IUpdateCertificateInput;
}
export interface MutationToUpdateCertificateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCertificateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateContactArgs {
    input: IUpdateContactInput;
}
export interface MutationToUpdateContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateContactArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateContractorArgs {
    input: IUpdateContractorInput;
}
export interface MutationToUpdateContractorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateContractorArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateFeeArgs {
    input: IUpdateFeeInput;
}
export interface MutationToUpdateFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateFeeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerCompanyArgs {
    input: IUpdateInsurerCompanyInput;
}
export interface MutationToUpdateInsurerCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerCompanyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMerchandiseArgs {
    input: IUpdateMerchandiseInput;
}
export interface MutationToUpdateMerchandiseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMerchandiseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMoneyArgs {
    input: IUpdateMoneyInput;
}
export interface MutationToUpdateMoneyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMoneyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePolicyArgs {
    input: IUpdatePolicyInput;
}
export interface MutationToUpdatePolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePolicyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateAttendanceStudentArgs {
    input: IAttendanceInput;
}
export interface MutationToCreateAttendanceStudentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateAttendanceStudentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateClassroomArgs {
    input: IClassroomInput;
}
export interface MutationToCreateClassroomResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateClassroomArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateDayServiceArgs {
    input: ICreateDayServiceInput;
}
export interface MutationToCreateDayServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateDayServiceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateGradeArgs {
    input: IGradeInput;
}
export interface MutationToCreateGradeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateGradeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateLevelArgs {
    input: ILevelInput;
}
export interface MutationToCreateLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateLevelArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateSchoolArgs {
    input: ICreateSchoolInput;
}
export interface MutationToCreateSchoolResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateSchoolArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateStudentArgs {
    input: IStudentInput;
}
export interface MutationToCreateStudentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateStudentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBulkStudentArgs {
    input: ICreateBulkStudentInput;
}
export interface MutationToCreateBulkStudentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBulkStudentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateAttendanceStudentsArgs {
    id: IUUID;
    input: IUpdateAttendanceInput;
}
export interface MutationToUpdateAttendanceStudentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateAttendanceStudentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateClassroomArgs {
    id: IUUID;
    input: IUpdateClassroomInput;
}
export interface MutationToUpdateClassroomResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateClassroomArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateDayServiceArgs {
    id: IUUID;
    input: IUpdateDayServiceInput;
}
export interface MutationToUpdateDayServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateDayServiceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateGradeArgs {
    id: IUUID;
    input: IUpdateGradeInput;
}
export interface MutationToUpdateGradeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateGradeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateLevelArgs {
    id: IUUID;
    input: IUpdateLevelInput;
}
export interface MutationToUpdateLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateLevelArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateSchoolArgs {
    id: IUUID;
    input: IUpdateSchoolInput;
}
export interface MutationToUpdateSchoolResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSchoolArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateStudentArgs {
    id: IUUID;
    input: IUpdateStudentInput;
}
export interface MutationToUpdateStudentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateStudentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteAttendanceStudentArgs {
    id: IUUID;
}
export interface MutationToDeleteAttendanceStudentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteAttendanceStudentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteClassroomArgs {
    id: IUUID;
}
export interface MutationToDeleteClassroomResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteClassroomArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteDayServiceArgs {
    id: IUUID;
}
export interface MutationToDeleteDayServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteDayServiceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteGradeArgs {
    id: IUUID;
}
export interface MutationToDeleteGradeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteGradeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteLevelArgs {
    id: IUUID;
}
export interface MutationToDeleteLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteLevelArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteSchoolArgs {
    id: IUUID;
}
export interface MutationToDeleteSchoolResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteSchoolArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteStudentArgs {
    id: IUUID;
}
export interface MutationToDeleteStudentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteStudentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteStudentTutorArgs {
    id: IUUID;
}
export interface MutationToDeleteStudentTutorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteStudentTutorArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBeneficiarieArgs {
    input: IBeneficiarieInput;
}
export interface MutationToCreateBeneficiarieResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBeneficiarieArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBeneficiarieArgs {
    id: IUUID;
    input: IBeneficiarieInput;
}
export interface MutationToUpdateBeneficiarieResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBeneficiarieArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteBeneficiarieArgs {
    id: IUUID;
}
export interface MutationToDeleteBeneficiarieResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteBeneficiarieArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateFormAccidentDiseaseArgs {
    input: IFormAccidentDiseaseInput;
}
export interface MutationToCreateFormAccidentDiseaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateFormAccidentDiseaseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateFormAccidentDiseaseArgs {
    id: IUUID;
    input: IFormAccidentDiseaseInput;
}
export interface MutationToUpdateFormAccidentDiseaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateFormAccidentDiseaseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteFormAccidentDiseaseArgs {
    id: IUUID;
}
export interface MutationToDeleteFormAccidentDiseaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteFormAccidentDiseaseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateFormAutomobileDamageArgs {
    input: IFormAutomobileDamageInput;
}
export interface MutationToCreateFormAutomobileDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateFormAutomobileDamageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateFormAutomobileDamageArgs {
    id: IUUID;
    input: IFormAutomobileDamageInput;
}
export interface MutationToUpdateFormAutomobileDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateFormAutomobileDamageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteFormAutomobileDamageArgs {
    id: IUUID;
}
export interface MutationToDeleteFormAutomobileDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteFormAutomobileDamageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateFormCarCatalogArgs {
    input: IFormCarCatalogInput;
}
export interface MutationToCreateFormCarCatalogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateFormCarCatalogArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateFormCarCatalogArgs {
    id: IUUID;
    input: IFormCarCatalogInput;
}
export interface MutationToUpdateFormCarCatalogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateFormCarCatalogArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteFormCarCatalogArgs {
    id: IUUID;
}
export interface MutationToDeleteFormCarCatalogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteFormCarCatalogArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateFormDamageArgs {
    input: IFormDamageInput;
}
export interface MutationToCreateFormDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateFormDamageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateFormDamageArgs {
    id: IUUID;
    input: IFormDamageInput;
}
export interface MutationToUpdateFormDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateFormDamageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteFormDamageArgs {
    id: IUUID;
}
export interface MutationToDeleteFormDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteFormDamageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateFormLifeArgs {
    input: IFormLifeInput;
}
export interface MutationToCreateFormLifeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateFormLifeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateFormLifeArgs {
    id: IUUID;
    input: IFormLifeInput;
}
export interface MutationToUpdateFormLifeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateFormLifeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteFormLifeArgs {
    id: IUUID;
}
export interface MutationToDeleteFormLifeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteFormLifeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInvolvedReferrerArgs {
    input: IInvolvedReferrerInput;
}
export interface MutationToCreateInvolvedReferrerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInvolvedReferrerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInvolvedReferrerArgs {
    id: IUUID;
    input: IInvolvedReferrerInput;
}
export interface MutationToUpdateInvolvedReferrerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInvolvedReferrerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInvolvedReferrerArgs {
    id: IUUID;
}
export interface MutationToDeleteInvolvedReferrerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInvolvedReferrerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateOldPoliceArgs {
    input: IOldPoliceInput;
}
export interface MutationToCreateOldPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateOldPoliceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateOldPoliceArgs {
    id: IUUID;
    input: IOldPoliceInput;
}
export interface MutationToUpdateOldPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateOldPoliceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteOldPoliceArgs {
    id: IUUID;
}
export interface MutationToDeleteOldPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteOldPoliceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePersonalInformationArgs {
    input: IPersonalInformationInput;
}
export interface MutationToCreatePersonalInformationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePersonalInformationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePersonalInformationArgs {
    id: IUUID;
    input: IPersonalInformationInput;
}
export interface MutationToUpdatePersonalInformationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePersonalInformationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePersonalInformationArgs {
    id: IUUID;
}
export interface MutationToDeletePersonalInformationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePersonalInformationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePoliceArgs {
    input: IPoliceInput;
}
export interface MutationToCreatePoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePoliceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePoliceArgs {
    id: IUUID;
    input: IPoliceInput;
}
export interface MutationToUpdatePoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePoliceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePoliceArgs {
    id: IUUID;
}
export interface MutationToDeletePoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePoliceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePoliceAssignArgs {
    input: IPoliceAssignInput;
}
export interface MutationToCreatePoliceAssignResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePoliceAssignArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePoliceAssignArgs {
    id: IUUID;
    input: IPoliceAssignInput;
}
export interface MutationToUpdatePoliceAssignResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePoliceAssignArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePoliceAssignArgs {
    id: IUUID;
}
export interface MutationToDeletePoliceAssignResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePoliceAssignArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePolicePendientArgs {
    input: IPolicePendientInput;
}
export interface MutationToCreatePolicePendientResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePolicePendientArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePolicePendientArgs {
    id: IUUID;
    input: IPolicePendientInput;
}
export interface MutationToUpdatePolicePendientResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePolicePendientArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePolicePendientArgs {
    id: IUUID;
}
export interface MutationToDeletePolicePendientResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePolicePendientArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePoliceQuoteArgs {
    input: IPoliceQuoteInput;
}
export interface MutationToCreatePoliceQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePoliceQuoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePoliceQuoteArgs {
    id: IUUID;
    input: IPoliceQuoteInput;
}
export interface MutationToUpdatePoliceQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePoliceQuoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePoliceQuoteArgs {
    id: IUUID;
}
export interface MutationToDeletePoliceQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePoliceQuoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePoliceQuotePrimaArgs {
    id: IUUID;
    input: IPoliceQuotePrimaInput;
}
export interface MutationToUpdatePoliceQuotePrimaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePoliceQuotePrimaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePoliceQuotePrimaArgs {
    id: IUUID;
}
export interface MutationToDeletePoliceQuotePrimaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePoliceQuotePrimaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateRelationShipArgs {
    input: IRelationShipInput;
}
export interface MutationToCreateRelationShipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateRelationShipArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateRelationShipArgs {
    id: IUUID;
    input: IRelationShipInput;
}
export interface MutationToUpdateRelationShipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateRelationShipArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteRelationShipArgs {
    id: IUUID;
}
export interface MutationToDeleteRelationShipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteRelationShipArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateSucursalArgs {
    input: ISucursalInput;
}
export interface MutationToCreateSucursalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateSucursalArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateSucursalArgs {
    id: IUUID;
    input: ISucursalInput;
}
export interface MutationToUpdateSucursalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSucursalArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteSucursalArgs {
    id: IUUID;
}
export interface MutationToDeleteSucursalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteSucursalArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateAgentKeyArgs {
    input: IAgentKeyInput;
}
export interface MutationToCreateAgentKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateAgentKeyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateAgentKeyArgs {
    id: IUUID;
    input: IAgentKeyInput;
}
export interface MutationToUpdateAgentKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateAgentKeyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteAgentKeyArgs {
    id: IUUID;
}
export interface MutationToDeleteAgentKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteAgentKeyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateAgentProviderContactArgs {
    input: IAgentProviderContactInput;
}
export interface MutationToCreateAgentProviderContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateAgentProviderContactArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateAgentProviderContactArgs {
    id: IUUID;
    input: IAgentProviderContactInput;
}
export interface MutationToUpdateAgentProviderContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateAgentProviderContactArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteAgentProviderContactArgs {
    id: IUUID;
}
export interface MutationToDeleteAgentProviderContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteAgentProviderContactArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateAgentProviderArgs {
    input: IAgentProviderInput;
}
export interface MutationToCreateAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateAgentProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateAgentProviderArgs {
    id: IUUID;
    input: IAgentProviderInput;
}
export interface MutationToUpdateAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateAgentProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteAgentProviderArgs {
    id: IUUID;
}
export interface MutationToDeleteAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteAgentProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBranchArgs {
    input: IBranchInput;
}
export interface MutationToCreateBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBranchArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateBranchArgs {
    id: IUUID;
    input: IBranchInput;
}
export interface MutationToUpdateBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateBranchArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteBranchArgs {
    id: IUUID;
}
export interface MutationToDeleteBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteBranchArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateComissionArgs {
    input: IComissionInput;
}
export interface MutationToCreateComissionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateComissionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateComissionArgs {
    id: IUUID;
    input: IComissionInput;
}
export interface MutationToUpdateComissionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateComissionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteComissionArgs {
    id: IUUID;
}
export interface MutationToDeleteComissionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteComissionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateContractorCelulaArgs {
    input: IContractorCelulaInput;
}
export interface MutationToCreateContractorCelulaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateContractorCelulaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateContractorCelulaArgs {
    id: IUUID;
    input: IContractorCelulaInput;
}
export interface MutationToUpdateContractorCelulaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateContractorCelulaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteContractorCelulaArgs {
    id: IUUID;
}
export interface MutationToDeleteContractorCelulaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteContractorCelulaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateContractorClassificationArgs {
    input: IContractorClassificationInput;
}
export interface MutationToCreateContractorClassificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateContractorClassificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateContractorClassificationArgs {
    id: IUUID;
    input: IContractorClassificationInput;
}
export interface MutationToUpdateContractorClassificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateContractorClassificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteContractorClassificationArgs {
    id: IUUID;
}
export interface MutationToDeleteContractorClassificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteContractorClassificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateContractorGroupingLevelArgs {
    input: IContractorGroupingLevelInput;
}
export interface MutationToCreateContractorGroupingLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateContractorGroupingLevelArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateContractorGroupingLevelArgs {
    id: IUUID;
    input: IContractorGroupingLevelInput;
}
export interface MutationToUpdateContractorGroupingLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateContractorGroupingLevelArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteContractorGroupingLevelArgs {
    id: IUUID;
}
export interface MutationToDeleteContractorGroupingLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteContractorGroupingLevelArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToSaam_createContractorArgs {
    input: IContractorInput;
}
export interface MutationToSaam_createContractorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSaam_createContractorArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToSaam_updateContractorArgs {
    id: IUUID;
    input: IContractorInput;
}
export interface MutationToSaam_updateContractorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSaam_updateContractorArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToSaam_deleteContractorArgs {
    id: IUUID;
}
export interface MutationToSaam_deleteContractorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSaam_deleteContractorArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateContractorProcessDocumentArgs {
    input: IContractorProcessDocumentInput;
}
export interface MutationToCreateContractorProcessDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateContractorProcessDocumentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateContractorProcessDocumentArgs {
    id: IUUID;
    input: IContractorProcessDocumentInput;
}
export interface MutationToUpdateContractorProcessDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateContractorProcessDocumentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteContractorProcessDocumentArgs {
    id: IUUID;
}
export interface MutationToDeleteContractorProcessDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteContractorProcessDocumentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCoverageCoinsuranceArgs {
    input: ICoverageCoinsuranceInput;
}
export interface MutationToCreateCoverageCoinsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCoverageCoinsuranceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCoverageCoinsuranceArgs {
    id: IUUID;
    input: ICoverageCoinsuranceInput;
}
export interface MutationToUpdateCoverageCoinsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCoverageCoinsuranceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCoverageCoinsuranceArgs {
    id: IUUID;
}
export interface MutationToDeleteCoverageCoinsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCoverageCoinsuranceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCoverageDeductibleArgs {
    input: ICoverageDeductibleInput;
}
export interface MutationToCreateCoverageDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCoverageDeductibleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCoverageDeductibleArgs {
    id: IUUID;
    input: ICoverageDeductibleInput;
}
export interface MutationToUpdateCoverageDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCoverageDeductibleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCoverageDeductibleArgs {
    id: IUUID;
}
export interface MutationToDeleteCoverageDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCoverageDeductibleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCoverageInPolicyArgs {
    input: ICoverageInPolicyInput;
}
export interface MutationToCreateCoverageInPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCoverageInPolicyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCoverageInPolicyArgs {
    id: IUUID;
    input: ICoverageInPolicyInput;
}
export interface MutationToUpdateCoverageInPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCoverageInPolicyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCoverageInPolicyArgs {
    id: IUUID;
}
export interface MutationToDeleteCoverageInPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCoverageInPolicyArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCoverageArgs {
    input: ICoverageInput;
}
export interface MutationToCreateCoverageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCoverageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCoverageArgs {
    id: IUUID;
    input: ICoverageInput;
}
export interface MutationToUpdateCoverageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCoverageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCoverageArgs {
    id: IUUID;
}
export interface MutationToDeleteCoverageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCoverageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCoveragePackageArgs {
    input: ICoveragePackageInput;
}
export interface MutationToCreateCoveragePackageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCoveragePackageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCoveragePackageArgs {
    id: IUUID;
    input: ICoveragePackageInput;
}
export interface MutationToUpdateCoveragePackageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCoveragePackageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCoveragePackageArgs {
    id: IUUID;
}
export interface MutationToDeleteCoveragePackageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCoveragePackageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCoverageSuminsuredArgs {
    input: ICoverageSuminsuredInput;
}
export interface MutationToCreateCoverageSuminsuredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCoverageSuminsuredArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCoverageSuminsuredArgs {
    id: IUUID;
    input: ICoverageSuminsuredInput;
}
export interface MutationToUpdateCoverageSuminsuredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCoverageSuminsuredArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCoverageSuminsuredArgs {
    id: IUUID;
}
export interface MutationToDeleteCoverageSuminsuredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCoverageSuminsuredArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCoverageTopecoinsuranceArgs {
    input: ICoverageTopecoinsuranceInput;
}
export interface MutationToCreateCoverageTopecoinsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCoverageTopecoinsuranceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateCoverageTopecoinsuranceArgs {
    id: IUUID;
    input: ICoverageTopecoinsuranceInput;
}
export interface MutationToUpdateCoverageTopecoinsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateCoverageTopecoinsuranceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCoverageTopecoinsuranceArgs {
    id: IUUID;
}
export interface MutationToDeleteCoverageTopecoinsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCoverageTopecoinsuranceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateProcessDocumentArgs {
    input: IProcessDocumentInput;
}
export interface MutationToCreateProcessDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateProcessDocumentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateProcessDocumentArgs {
    id: IUUID;
    input: IProcessDocumentInput;
}
export interface MutationToUpdateProcessDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateProcessDocumentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteProcessDocumentArgs {
    id: IUUID;
}
export interface MutationToDeleteProcessDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProcessDocumentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateProjectAgentProviderBranchArgs {
    input: IProjectAgentProviderBranchInput;
}
export interface MutationToCreateProjectAgentProviderBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateProjectAgentProviderBranchArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateProjectAgentProviderBranchArgs {
    id: IUUID;
    input: IProjectAgentProviderBranchInput;
}
export interface MutationToUpdateProjectAgentProviderBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateProjectAgentProviderBranchArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteProjectAgentProviderBranchArgs {
    id: IUUID;
}
export interface MutationToDeleteProjectAgentProviderBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProjectAgentProviderBranchArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateProjectAgentProviderArgs {
    input: IProjectAgentProviderInput;
}
export interface MutationToCreateProjectAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateProjectAgentProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateProjectAgentProviderArgs {
    id: IUUID;
    input: IProjectAgentProviderInput;
}
export interface MutationToUpdateProjectAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateProjectAgentProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteProjectAgentProviderArgs {
    id: IUUID;
}
export interface MutationToDeleteProjectAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProjectAgentProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateReferrerAccountStateArgs {
    input: IReferrerAccountStateInput;
}
export interface MutationToCreateReferrerAccountStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateReferrerAccountStateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateReferrerAccountStateArgs {
    id: IUUID;
    input: IReferrerAccountStateInput;
}
export interface MutationToUpdateReferrerAccountStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateReferrerAccountStateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteReferrerAccountStateArgs {
    id: IUUID;
}
export interface MutationToDeleteReferrerAccountStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteReferrerAccountStateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateReferrerBranchArgs {
    input: IReferrerBranchInput;
}
export interface MutationToCreateReferrerBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateReferrerBranchArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateReferrerBranchArgs {
    id: IUUID;
    input: IReferrerBranchInput;
}
export interface MutationToUpdateReferrerBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateReferrerBranchArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteReferrerBranchArgs {
    id: IUUID;
}
export interface MutationToDeleteReferrerBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteReferrerBranchArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateReferrerArgs {
    input: IReferrerInput;
}
export interface MutationToCreateReferrerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateReferrerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateReferrerArgs {
    id: IUUID;
    input: IReferrerInput;
}
export interface MutationToUpdateReferrerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateReferrerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteReferrerArgs {
    id: IUUID;
}
export interface MutationToDeleteReferrerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteReferrerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateResponsableInvolvedArgs {
    input: IResponsableInvolvedInput;
}
export interface MutationToCreateResponsableInvolvedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateResponsableInvolvedArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateResponsableInvolvedArgs {
    id: IUUID;
    input: IResponsableInvolvedInput;
}
export interface MutationToUpdateResponsableInvolvedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateResponsableInvolvedArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteResponsableInvolvedArgs {
    id: IUUID;
}
export interface MutationToDeleteResponsableInvolvedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteResponsableInvolvedArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateSubBranchArgs {
    input: ISubBranchInput;
}
export interface MutationToCreateSubBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateSubBranchArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateSubBranchArgs {
    id: IUUID;
    input: ISubBranchInput;
}
export interface MutationToUpdateSubBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSubBranchArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteSubBranchArgs {
    id: IUUID;
}
export interface MutationToDeleteSubBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteSubBranchArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateProjectAgentProviderEmailReminderArgs {
    input: IProjectAgentProviderEmailReminderInput;
}
export interface MutationToCreateProjectAgentProviderEmailReminderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateProjectAgentProviderEmailReminderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateProjectAgentProviderEmailReminderArgs {
    id: IUUID;
    input: IProjectAgentProviderEmailReminderInput;
}
export interface MutationToUpdateProjectAgentProviderEmailReminderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateProjectAgentProviderEmailReminderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteProjectAgentProviderEmailReminderArgs {
    id: IUUID;
}
export interface MutationToDeleteProjectAgentProviderEmailReminderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteProjectAgentProviderEmailReminderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateEndorsementArgs {
    input: IEndorsementInput;
}
export interface MutationToCreateEndorsementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateEndorsementArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateEndorsementArgs {
    id: IUUID;
    input: IEndorsementInput;
}
export interface MutationToUpdateEndorsementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateEndorsementArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteEndorsementArgs {
    id: IUUID;
}
export interface MutationToDeleteEndorsementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteEndorsementArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateEndorsementCertArgs {
    input: IEndorsementCertInput;
}
export interface MutationToCreateEndorsementCertResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateEndorsementCertArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateEndorsementCertArgs {
    id: IUUID;
    input: IEndorsementCertInput;
}
export interface MutationToUpdateEndorsementCertResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateEndorsementCertArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteEndorsementCertArgs {
    id: IUUID;
}
export interface MutationToDeleteEndorsementCertResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteEndorsementCertArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateSinisterArgs {
    input: ISinisterInput;
}
export interface MutationToCreateSinisterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateSinisterArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateSinisterArgs {
    id: IUUID;
    input: ISinisterInput;
}
export interface MutationToUpdateSinisterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSinisterArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteSinisterArgs {
    id: IUUID;
}
export interface MutationToDeleteSinisterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteSinisterArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateSinisterAilingArgs {
    input: ISinisterAilingInput;
}
export interface MutationToCreateSinisterAilingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateSinisterAilingArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateSinisterAilingArgs {
    id: IUUID;
    input: ISinisterAilingInput;
}
export interface MutationToUpdateSinisterAilingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSinisterAilingArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteSinisterAilingArgs {
    id: IUUID;
}
export interface MutationToDeleteSinisterAilingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteSinisterAilingArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateSinisterCarArgs {
    input: ISinisterCarInput;
}
export interface MutationToCreateSinisterCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateSinisterCarArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateSinisterCarArgs {
    id: IUUID;
    input: ISinisterCarInput;
}
export interface MutationToUpdateSinisterCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSinisterCarArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteSinisterCarArgs {
    id: IUUID;
}
export interface MutationToDeleteSinisterCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteSinisterCarArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateSinisterCarContactArgs {
    input: ISinisterCarContactInput;
}
export interface MutationToCreateSinisterCarContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateSinisterCarContactArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateSinisterCarContactArgs {
    id: IUUID;
    input: ISinisterCarContactInput;
}
export interface MutationToUpdateSinisterCarContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSinisterCarContactArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteSinisterCarContactArgs {
    id: IUUID;
}
export interface MutationToDeleteSinisterCarContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteSinisterCarContactArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateSinisterDamageArgs {
    input: ISinisterDamageInput;
}
export interface MutationToCreateSinisterDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateSinisterDamageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateSinisterDamageArgs {
    id: IUUID;
    input: ISinisterDamageInput;
}
export interface MutationToUpdateSinisterDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSinisterDamageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteSinisterDamageArgs {
    id: IUUID;
}
export interface MutationToDeleteSinisterDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteSinisterDamageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateSinisterDamageContactArgs {
    input: ISinisterDamageContactInput;
}
export interface MutationToCreateSinisterDamageContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateSinisterDamageContactArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateSinisterDamageContactArgs {
    id: IUUID;
    input: ISinisterDamageContactInput;
}
export interface MutationToUpdateSinisterDamageContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSinisterDamageContactArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteSinisterDamageContactArgs {
    id: IUUID;
}
export interface MutationToDeleteSinisterDamageContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteSinisterDamageContactArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateSinisterLifeArgs {
    input: ISinisterLifeInput;
}
export interface MutationToCreateSinisterLifeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateSinisterLifeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateSinisterLifeArgs {
    id: IUUID;
    input: ISinisterLifeInput;
}
export interface MutationToUpdateSinisterLifeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSinisterLifeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteSinisterLifeArgs {
    id: IUUID;
}
export interface MutationToDeleteSinisterLifeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteSinisterLifeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateSinisterLifeContactArgs {
    input: ISinisterLifeContactInput;
}
export interface MutationToCreateSinisterLifeContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateSinisterLifeContactArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateSinisterLifeContactArgs {
    id: IUUID;
    input: ISinisterLifeContactInput;
}
export interface MutationToUpdateSinisterLifeContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSinisterLifeContactArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteSinisterLifeContactArgs {
    id: IUUID;
}
export interface MutationToDeleteSinisterLifeContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteSinisterLifeContactArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateSinisterHospitalArgs {
    input: ISinisterHospitalInput;
}
export interface MutationToCreateSinisterHospitalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateSinisterHospitalArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateSinisterHospitalArgs {
    id: IUUID;
    input: ISinisterHospitalInput;
}
export interface MutationToUpdateSinisterHospitalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSinisterHospitalArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteSinisterHospitalArgs {
    id: IUUID;
}
export interface MutationToDeleteSinisterHospitalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteSinisterHospitalArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateSinisterFacturaArgs {
    input: ISinisterFacturaInput;
}
export interface MutationToCreateSinisterFacturaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateSinisterFacturaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateSinisterFacturaArgs {
    id: IUUID;
    input: ISinisterFacturaInput;
}
export interface MutationToUpdateSinisterFacturaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateSinisterFacturaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteSinisterFacturaArgs {
    id: IUUID;
}
export interface MutationToDeleteSinisterFacturaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteSinisterFacturaArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePoliceReceiptArgs {
    input: IPoliceReceiptInput;
}
export interface MutationToCreatePoliceReceiptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePoliceReceiptArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePoliceReceiptArgs {
    id: IUUID;
    input: IPoliceReceiptInput;
}
export interface MutationToUpdatePoliceReceiptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePoliceReceiptArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePoliceReceiptArgs {
    id: IUUID;
}
export interface MutationToDeletePoliceReceiptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePoliceReceiptArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePoliceReceiptAccountArgs {
    input: IPoliceReceiptAccountInput;
}
export interface MutationToCreatePoliceReceiptAccountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePoliceReceiptAccountArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePoliceReceiptAccountArgs {
    id: IUUID;
    input: IPoliceReceiptAccountInput;
}
export interface MutationToUpdatePoliceReceiptAccountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePoliceReceiptAccountArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePoliceReceiptAccountArgs {
    id: IUUID;
}
export interface MutationToDeletePoliceReceiptAccountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePoliceReceiptAccountArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePoliceReceiptAccountStateArgs {
    input: IPoliceReceiptAccountStateInput;
}
export interface MutationToCreatePoliceReceiptAccountStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePoliceReceiptAccountStateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePoliceReceiptAccountStateArgs {
    id: IUUID;
    input: IPoliceReceiptAccountStateInput;
}
export interface MutationToUpdatePoliceReceiptAccountStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePoliceReceiptAccountStateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePoliceReceiptAccountStateArgs {
    id: IUUID;
}
export interface MutationToDeletePoliceReceiptAccountStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePoliceReceiptAccountStateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePoliceReceiptFolioArgs {
    input: IPoliceReceiptFolioInput;
}
export interface MutationToCreatePoliceReceiptFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePoliceReceiptFolioArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePoliceReceiptFolioArgs {
    id: IUUID;
    input: IPoliceReceiptFolioInput;
}
export interface MutationToUpdatePoliceReceiptFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePoliceReceiptFolioArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePoliceReceiptFolioArgs {
    id: IUUID;
}
export interface MutationToDeletePoliceReceiptFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePoliceReceiptFolioArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePoliceReceiptPaymentArgs {
    input: IPoliceReceiptPaymentInput;
}
export interface MutationToCreatePoliceReceiptPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePoliceReceiptPaymentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePoliceReceiptPaymentArgs {
    id: IUUID;
    input: IPoliceReceiptPaymentInput;
}
export interface MutationToUpdatePoliceReceiptPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePoliceReceiptPaymentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePoliceReceiptPaymentArgs {
    id: IUUID;
}
export interface MutationToDeletePoliceReceiptPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePoliceReceiptPaymentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePoliceFileArgs {
    input: IPoliceFileInput;
}
export interface MutationToCreatePoliceFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePoliceFileArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdatePoliceFileArgs {
    id: IUUID;
    input: IPoliceFileInput;
}
export interface MutationToUpdatePoliceFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdatePoliceFileArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePoliceFileArgs {
    id: IUUID;
}
export interface MutationToDeletePoliceFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePoliceFileArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerCommentArgs {
    input: IInsurerCommentInput;
}
export interface MutationToCreateInsurerCommentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerCommentArgs {
    id: IUUID;
    input: IInsurerCommentInput;
}
export interface MutationToUpdateInsurerCommentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerCommentArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerCommentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerFileReadingArgs {
    input: IInsurerFileReadingInput;
}
export interface MutationToCreateInsurerFileReadingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerFileReadingArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerFileReadingArgs {
    id: IUUID;
    input: IInsurerFileReadingInput;
}
export interface MutationToUpdateInsurerFileReadingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerFileReadingArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerFileReadingArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerFileReadingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerFileReadingArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerFileReadingTagArgs {
    input: IInsurerFileReadingTagInput;
}
export interface MutationToCreateInsurerFileReadingTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerFileReadingTagArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerFileReadingTagArgs {
    id: IUUID;
    input: IInsurerFileReadingTagInput;
}
export interface MutationToUpdateInsurerFileReadingTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerFileReadingTagArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerFileReadingTagArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerFileReadingTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerFileReadingTagArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerBailTypeArgs {
    id: IUUID;
    input: IInsurerBailTypeInput;
}
export interface MutationToUpdateInsurerBailTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerBailTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerBailTypeArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerBailTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerBailTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerInvolvedArgs {
    input: IInsurerInvolvedInput;
}
export interface MutationToCreateInsurerInvolvedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerInvolvedArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerInvolvedArgs {
    id: IUUID;
    input: IInsurerInvolvedInput;
}
export interface MutationToUpdateInsurerInvolvedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerInvolvedArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerInvolvedArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerInvolvedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerInvolvedArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerLogArgs {
    input: IInsurerLogInput;
}
export interface MutationToCreateInsurerLogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerLogArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerLogArgs {
    id: IUUID;
    input: IInsurerLogInput;
}
export interface MutationToUpdateInsurerLogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerLogArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerLogArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerLogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerLogArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerLogEmailArgs {
    input: IInsurerLogEmailInput;
}
export interface MutationToCreateInsurerLogEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerLogEmailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerLogEmailArgs {
    id: IUUID;
    input: IInsurerLogEmailInput;
}
export interface MutationToUpdateInsurerLogEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerLogEmailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerLogEmailArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerLogEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerLogEmailArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerOrgInfoArgs {
    input: IInsurerOrgInfoInput;
}
export interface MutationToCreateInsurerOrgInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerOrgInfoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerOrgInfoArgs {
    id: IUUID;
    input: IInsurerOrgInfoInput;
}
export interface MutationToUpdateInsurerOrgInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerOrgInfoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerOrgInfoArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerOrgInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerOrgInfoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerTicketArgs {
    input: IInsurerTicketInput;
}
export interface MutationToCreateInsurerTicketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerTicketArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerTicketArgs {
    id: IUUID;
    input: IInsurerTicketInput;
}
export interface MutationToUpdateInsurerTicketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerTicketArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerTicketArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerTicketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerTicketArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerScheduleArgs {
    input: IInsurerScheduleInput;
}
export interface MutationToCreateInsurerScheduleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerScheduleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerScheduleArgs {
    id: IUUID;
    input: IInsurerScheduleInput;
}
export interface MutationToUpdateInsurerScheduleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerScheduleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerScheduleArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerScheduleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerScheduleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerScheduleParticipantArgs {
    input: IInsurerScheduleParticipantInput;
}
export interface MutationToCreateInsurerScheduleParticipantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerScheduleParticipantArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerScheduleParticipantArgs {
    id: IUUID;
    input: IInsurerScheduleParticipantInput;
}
export interface MutationToUpdateInsurerScheduleParticipantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerScheduleParticipantArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerScheduleParticipantArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerScheduleParticipantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerScheduleParticipantArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerNotificationArgs {
    input: IInsurerNotificationInput;
}
export interface MutationToCreateInsurerNotificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerNotificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerNotificationArgs {
    id: IUUID;
    input: IInsurerNotificationInput;
}
export interface MutationToUpdateInsurerNotificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerNotificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerNotificationArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerNotificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerNotificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerReminderArgs {
    input: IInsurerReminderInput;
}
export interface MutationToCreateInsurerReminderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerReminderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerReminderArgs {
    id: IUUID;
    input: IInsurerReminderInput;
}
export interface MutationToUpdateInsurerReminderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerReminderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerReminderArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerReminderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerReminderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerReminderProjectAgentProviderArgs {
    input: IInsurerReminderProjectAgentProviderInput;
}
export interface MutationToCreateInsurerReminderProjectAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerReminderProjectAgentProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerReminderProjectAgentProviderArgs {
    id: IUUID;
    input: IInsurerReminderProjectAgentProviderInput;
}
export interface MutationToUpdateInsurerReminderProjectAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerReminderProjectAgentProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerReminderProjectAgentProviderArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerReminderProjectAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerReminderProjectAgentProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerReminderRecordArgs {
    input: IInsurerReminderRecordInput;
}
export interface MutationToCreateInsurerReminderRecordResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerReminderRecordArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerReminderRecordArgs {
    id: IUUID;
    input: IInsurerReminderRecordInput;
}
export interface MutationToUpdateInsurerReminderRecordResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerReminderRecordArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerReminderRecordArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerReminderRecordResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerReminderRecordArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerReminderSubBranchArgs {
    input: IInsurerReminderSubBranchInput;
}
export interface MutationToCreateInsurerReminderSubBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerReminderSubBranchArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerReminderSubBranchArgs {
    id: IUUID;
    input: IInsurerReminderSubBranchInput;
}
export interface MutationToUpdateInsurerReminderSubBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerReminderSubBranchArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerReminderSubBranchArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerReminderSubBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerReminderSubBranchArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerBailTypeArgs {
    input: IInsurerBailTypeInput;
}
export interface MutationToCreateInsurerBailTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerBailTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerBirthDateTemplateArgs {
    input: IInsurerBirthDateTemplateInput;
}
export interface MutationToCreateInsurerBirthDateTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerBirthDateTemplateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerBirthDateTemplateArgs {
    id: IUUID;
    input: IInsurerBirthDateTemplateInput;
}
export interface MutationToUpdateInsurerBirthDateTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerBirthDateTemplateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerBirthDateTemplateArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerBirthDateTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerBirthDateTemplateArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerDirectoryArgs {
    input: IInsurerDirectoryInput;
}
export interface MutationToCreateInsurerDirectoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerDirectoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerDirectoryArgs {
    id: IUUID;
    input: IInsurerDirectoryInput;
}
export interface MutationToUpdateInsurerDirectoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerDirectoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerDirectoryArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerDirectoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerDirectoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerExpenseArgs {
    input: IInsurerExpenseInput;
}
export interface MutationToCreateInsurerExpenseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerExpenseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerExpenseArgs {
    id: IUUID;
    input: IInsurerExpenseInput;
}
export interface MutationToUpdateInsurerExpenseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerExpenseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerExpenseArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerExpenseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerExpenseArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerIbisFormArgs {
    input: IInsurerIbisFormInput;
}
export interface MutationToCreateInsurerIbisFormResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerIbisFormArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerIbisFormArgs {
    id: IUUID;
    input: IInsurerIbisFormInput;
}
export interface MutationToUpdateInsurerIbisFormResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerIbisFormArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerIbisFormArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerIbisFormResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerIbisFormArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerIbisProviderArgs {
    input: IInsurerIbisProviderInput;
}
export interface MutationToCreateInsurerIbisProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerIbisProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerIbisProviderArgs {
    id: IUUID;
    input: IInsurerIbisProviderInput;
}
export interface MutationToUpdateInsurerIbisProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerIbisProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerIbisProviderArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerIbisProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerIbisProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerSenderArgs {
    input: IInsurerSenderInput;
}
export interface MutationToCreateInsurerSenderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerSenderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerSenderArgs {
    id: IUUID;
    input: IInsurerSenderInput;
}
export interface MutationToUpdateInsurerSenderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerSenderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerSenderArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerSenderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerSenderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateInsurerZipCodeSepomexArgs {
    input: IInsurerZipCodeSepomexInput;
}
export interface MutationToCreateInsurerZipCodeSepomexResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateInsurerZipCodeSepomexArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateInsurerZipCodeSepomexArgs {
    id: IUUID;
    input: IInsurerZipCodeSepomexInput;
}
export interface MutationToUpdateInsurerZipCodeSepomexResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateInsurerZipCodeSepomexArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteInsurerZipCodeSepomexArgs {
    id: IUUID;
}
export interface MutationToDeleteInsurerZipCodeSepomexResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteInsurerZipCodeSepomexArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateAgentProviderBonoArgs {
    input: IAgentProviderBonoInput;
}
export interface MutationToCreateAgentProviderBonoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateAgentProviderBonoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateAgentProviderBonoArgs {
    id: IUUID;
    input: IAgentProviderBonoInput;
}
export interface MutationToUpdateAgentProviderBonoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateAgentProviderBonoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteAgentProviderBonoArgs {
    id: IUUID;
}
export interface MutationToDeleteAgentProviderBonoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteAgentProviderBonoArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToSaam_sendNotificationArgs {
    input: ISendNotificationInput;
}
export interface MutationToSaam_sendNotificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSaam_sendNotificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMultipleNotificationArgs {
    input: ICreateMultipleNotificationInput;
}
export interface MutationToCreateMultipleNotificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMultipleNotificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMultipleMemberNotificationArgs {
    input: ICreateMultipleMemberNotificationInput;
}
export interface MutationToCreateMultipleMemberNotificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMultipleMemberNotificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateMemberNotificationArgs {
    input: ICreateMemberNotificationInput;
}
export interface MutationToCreateMemberNotificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateMemberNotificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateNotificationArgs {
    input: INotificationInput;
}
export interface MutationToCreateNotificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateNotificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateMultipleNotificationArgs {
    input: IMultipleNotificationInput;
}
export interface MutationToUpdateMultipleNotificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateMultipleNotificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateNotificationArgs {
    id: IUUID;
    input: IUpdateNotificationInput;
}
export interface MutationToUpdateNotificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateNotificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteNotificationArgs {
    id: IUUID;
}
export interface MutationToDeleteNotificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteNotificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateDeviceArgs {
    input: IDeviceInput;
}
export interface MutationToCreateDeviceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateDeviceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToUpdateDeviceArgs {
    id: IUUID;
    input: IDeviceInput;
}
export interface MutationToUpdateDeviceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUpdateDeviceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteDeviceArgs {
    id: IUUID;
}
export interface MutationToDeleteDeviceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteDeviceArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToAddDotsArgs {
    id: IUUID;
}
export interface MutationToAddDotsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAddDotsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToSetCodeAsUnavailableArgs {
    input: ISetCodeAsUnavailableInput;
}
export interface MutationToSetCodeAsUnavailableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSetCodeAsUnavailableArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateAdminCodeArgs {
    input: ICreateAdminCodeInput;
}
export interface MutationToCreateAdminCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateAdminCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToScanCodeArgs {
    input: IScanCodeInput;
}
export interface MutationToScanCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToScanCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToSendMessageArgs {
    input: ISendMessageInput;
}
export interface MutationToSendMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSendMessageArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToLookForCodeArgs {
    input: ILookForCodeInput;
}
export interface MutationToLookForCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToLookForCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateCodeArgs {
    input: ICreateCodeInput;
}
export interface MutationToCreateCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToExchange_createProviderArgs {
    input: ICreateProviderInput;
}
export interface MutationToExchange_createProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToExchange_createProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePrizeCategoryArgs {
    input: ICreatePrizeCategoryInput;
}
export interface MutationToCreatePrizeCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePrizeCategoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreatePrizeCodeArgs {
    input: ICreatePrizeCodeInput;
}
export interface MutationToCreatePrizeCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreatePrizeCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteCodeArgs {
    input: IDeleteCodeInput;
}
export interface MutationToDeleteCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeletePrizeCodeArgs {
    input: IDeletePrizeCodeInput;
}
export interface MutationToDeletePrizeCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeletePrizeCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToExchange_deleteProviderArgs {
    input: IDeleteProviderInput;
}
export interface MutationToExchange_deleteProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToExchange_deleteProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToExchangeDotsArgs {
    input: IExchangeDotsInput;
}
export interface MutationToExchangeDotsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToExchangeDotsArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateAdverseEventArgs {
    input: ICreateAdverseEventInput;
}
export interface MutationToCreateAdverseEventResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateAdverseEventArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToExecCreateCodesArgs {
    projectId: IUUID;
}
export interface MutationToExecCreateCodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToExecCreateCodesArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToSetGlobalCodeArgs {
    dots: number;
    projectId: IUUID;
}
export interface MutationToSetGlobalCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSetGlobalCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToDeleteAdverseEventArgs {
    input: IDeleteAdverseEventInput;
}
export interface MutationToDeleteAdverseEventResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeleteAdverseEventArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MutationToCreateBrandArgs {
    input: ICreateBrandInput;
}
export interface MutationToCreateBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCreateBrandArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISendQuizToEmailPayloadTypeResolver<TParent = any> {
    message?: SendQuizToEmailPayloadToMessageResolver<TParent>;
}
export interface SendQuizToEmailPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateProfileWithIdPayloadTypeResolver<TParent = any> {
    member?: UpdateProfileWithIdPayloadToMemberResolver<TParent>;
}
export interface UpdateProfileWithIdPayloadToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface INichePayloadTypeResolver<TParent = any> {
    niche?: NichePayloadToNicheResolver<TParent>;
}
export interface NichePayloadToNicheResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface INicheServicePayloadTypeResolver<TParent = any> {
    nicheService?: NicheServicePayloadToNicheServiceResolver<TParent>;
}
export interface NicheServicePayloadToNicheServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateBulkTutorPayloadTypeResolver<TParent = any> {
    message?: CreateBulkTutorPayloadToMessageResolver<TParent>;
}
export interface CreateBulkTutorPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateBillingDataPayloadTypeResolver<TParent = any> {
    billingData?: UpdateBillingDataPayloadToBillingDataResolver<TParent>;
}
export interface UpdateBillingDataPayloadToBillingDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateCompanyDataPayloadTypeResolver<TParent = any> {
    enterpriseData?: UpdateCompanyDataPayloadToEnterpriseDataResolver<TParent>;
}
export interface UpdateCompanyDataPayloadToEnterpriseDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateBulkTeacherPayloadTypeResolver<TParent = any> {
    message?: CreateBulkTeacherPayloadToMessageResolver<TParent>;
}
export interface CreateBulkTeacherPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateHealthInsurancePayloadTypeResolver<TParent = any> {
    healthInsurance?: UpdateHealthInsurancePayloadToHealthInsuranceResolver<TParent>;
}
export interface UpdateHealthInsurancePayloadToHealthInsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateAttendanceExcelPayloadTypeResolver<TParent = any> {
    url?: CreateAttendanceExcelPayloadToUrlResolver<TParent>;
}
export interface CreateAttendanceExcelPayloadToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateBulkUserPayloadTypeResolver<TParent = any> {
    message?: CreateBulkUserPayloadToMessageResolver<TParent>;
}
export interface CreateBulkUserPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateAttendancePayloadTypeResolver<TParent = any> {
    attendance?: CreateAttendancePayloadToAttendanceResolver<TParent>;
}
export interface CreateAttendancePayloadToAttendanceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateCheisiUsersExcelPayloadTypeResolver<TParent = any> {
    url?: CreateCheisiUsersExcelPayloadToUrlResolver<TParent>;
}
export interface CreateCheisiUsersExcelPayloadToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface INewContactFormPayloadTypeResolver<TParent = any> {
    message?: NewContactFormPayloadToMessageResolver<TParent>;
}
export interface NewContactFormPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface INewExternalLoginPayloadTypeResolver<TParent = any> {
    externalLogin?: NewExternalLoginPayloadToExternalLoginResolver<TParent>;
}
export interface NewExternalLoginPayloadToExternalLoginResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IExternalLoginTypeResolver<TParent = any> {
    memberId?: ExternalLoginToMemberIdResolver<TParent>;
    token?: ExternalLoginToTokenResolver<TParent>;
    providerName?: ExternalLoginToProviderNameResolver<TParent>;
    email?: ExternalLoginToEmailResolver<TParent>;
    id?: ExternalLoginToIdResolver<TParent>;
    createdAt?: ExternalLoginToCreatedAtResolver<TParent>;
    updatedAt?: ExternalLoginToUpdatedAtResolver<TParent>;
}
export interface ExternalLoginToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ExternalLoginToTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ExternalLoginToProviderNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ExternalLoginToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ExternalLoginToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ExternalLoginToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ExternalLoginToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteUserPayloadTypeResolver<TParent = any> {
    message?: DeleteUserPayloadToMessageResolver<TParent>;
}
export interface DeleteUserPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ITestBulkPayloadTypeResolver<TParent = any> {
    message?: TestBulkPayloadToMessageResolver<TParent>;
}
export interface TestBulkPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdatePositionColumnsPayloadTypeResolver<TParent = any> {
    items?: UpdatePositionColumnsPayloadToItemsResolver<TParent>;
}
export interface UpdatePositionColumnsPayloadToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IViewColumnPageTypeResolver<TParent = any> {
    id?: ViewColumnPageToIdResolver<TParent>;
    position?: ViewColumnPageToPositionResolver<TParent>;
}
export interface ViewColumnPageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewColumnPageToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdatePositionBlockColumnsPayloadTypeResolver<TParent = any> {
    items?: UpdatePositionBlockColumnsPayloadToItemsResolver<TParent>;
}
export interface UpdatePositionBlockColumnsPayloadToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IViewBlockColumnPageTypeResolver<TParent = any> {
    id?: ViewBlockColumnPageToIdResolver<TParent>;
    position?: ViewBlockColumnPageToPositionResolver<TParent>;
}
export interface ViewBlockColumnPageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ViewBlockColumnPageToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ILoginWithProviderPayloadTypeResolver<TParent = any> {
    externalLogin?: LoginWithProviderPayloadToExternalLoginResolver<TParent>;
}
export interface LoginWithProviderPayloadToExternalLoginResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateProjectSocialNetworkPayloadTypeResolver<TParent = any> {
    projectSocialNetwork?: CreateProjectSocialNetworkPayloadToProjectSocialNetworkResolver<TParent>;
}
export interface CreateProjectSocialNetworkPayloadToProjectSocialNetworkResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateProjectSocialNetworkPayloadTypeResolver<TParent = any> {
    message?: UpdateProjectSocialNetworkPayloadToMessageResolver<TParent>;
}
export interface UpdateProjectSocialNetworkPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteProjectSocialNetworkPayloadTypeResolver<TParent = any> {
    message?: DeleteProjectSocialNetworkPayloadToMessageResolver<TParent>;
}
export interface DeleteProjectSocialNetworkPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateRecommendedProjectPayloadTypeResolver<TParent = any> {
    recommendedProject?: CreateRecommendedProjectPayloadToRecommendedProjectResolver<TParent>;
}
export interface CreateRecommendedProjectPayloadToRecommendedProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateRecommendedProjectPayloadTypeResolver<TParent = any> {
    message?: UpdateRecommendedProjectPayloadToMessageResolver<TParent>;
}
export interface UpdateRecommendedProjectPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteRecommendedProjectPayloadTypeResolver<TParent = any> {
    message?: DeleteRecommendedProjectPayloadToMessageResolver<TParent>;
}
export interface DeleteRecommendedProjectPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISetProjectToProductionPayloadTypeResolver<TParent = any> {
    message?: SetProjectToProductionPayloadToMessageResolver<TParent>;
}
export interface SetProjectToProductionPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateProjectTemplatePayloadTypeResolver<TParent = any> {
    projectTemplate?: CreateProjectTemplatePayloadToProjectTemplateResolver<TParent>;
}
export interface CreateProjectTemplatePayloadToProjectTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateProjectTemplatePayloadTypeResolver<TParent = any> {
    message?: UpdateProjectTemplatePayloadToMessageResolver<TParent>;
}
export interface UpdateProjectTemplatePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteProjectTemplatePayloadTypeResolver<TParent = any> {
    message?: DeleteProjectTemplatePayloadToMessageResolver<TParent>;
}
export interface DeleteProjectTemplatePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMemberPayloadTypeResolver<TParent = any> {
    accessToken?: CreateMemberPayloadToAccessTokenResolver<TParent>;
    member?: CreateMemberPayloadToMemberResolver<TParent>;
}
export interface CreateMemberPayloadToAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CreateMemberPayloadToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ILoginMemberPayloadTypeResolver<TParent = any> {
    accessToken?: LoginMemberPayloadToAccessTokenResolver<TParent>;
    member?: LoginMemberPayloadToMemberResolver<TParent>;
}
export interface LoginMemberPayloadToAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LoginMemberPayloadToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateCompanyPayloadTypeResolver<TParent = any> {
    company?: CreateCompanyPayloadToCompanyResolver<TParent>;
}
export interface CreateCompanyPayloadToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateProjectPayloadTypeResolver<TParent = any> {
    project?: CreateProjectPayloadToProjectResolver<TParent>;
}
export interface CreateProjectPayloadToProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateNewRolesPayloadTypeResolver<TParent = any> {
    message?: CreateNewRolesPayloadToMessageResolver<TParent>;
}
export interface CreateNewRolesPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateUserPayloadTypeResolver<TParent = any> {
    accessToken?: CreateUserPayloadToAccessTokenResolver<TParent>;
    member?: CreateUserPayloadToMemberResolver<TParent>;
}
export interface CreateUserPayloadToAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CreateUserPayloadToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateOrFindUserPayloadTypeResolver<TParent = any> {
    member?: CreateOrFindUserPayloadToMemberResolver<TParent>;
}
export interface CreateOrFindUserPayloadToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateOrdinaryUserPayloadTypeResolver<TParent = any> {
    member?: CreateOrdinaryUserPayloadToMemberResolver<TParent>;
}
export interface CreateOrdinaryUserPayloadToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateProfilePayloadTypeResolver<TParent = any> {
    member?: UpdateProfilePayloadToMemberResolver<TParent>;
}
export interface UpdateProfilePayloadToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdatePasswordPayloadTypeResolver<TParent = any> {
    member?: UpdatePasswordPayloadToMemberResolver<TParent>;
}
export interface UpdatePasswordPayloadToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IActiveMemberPayloadTypeResolver<TParent = any> {
    member?: ActiveMemberPayloadToMemberResolver<TParent>;
}
export interface ActiveMemberPayloadToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateProjectRolePayloadTypeResolver<TParent = any> {
    projectRole?: CreateProjectRolePayloadToProjectRoleResolver<TParent>;
}
export interface CreateProjectRolePayloadToProjectRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUploadPhotoProfilePayloadTypeResolver<TParent = any> {
    member?: UploadPhotoProfilePayloadToMemberResolver<TParent>;
}
export interface UploadPhotoProfilePayloadToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteProjectPayloadTypeResolver<TParent = any> {
    project?: DeleteProjectPayloadToProjectResolver<TParent>;
}
export interface DeleteProjectPayloadToProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateCompanyPayloadTypeResolver<TParent = any> {
    company?: UpdateCompanyPayloadToCompanyResolver<TParent>;
}
export interface UpdateCompanyPayloadToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRestorePasswordPayloadTypeResolver<TParent = any> {
    member?: RestorePasswordPayloadToMemberResolver<TParent>;
}
export interface RestorePasswordPayloadToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRecoverPasswordPayloadTypeResolver<TParent = any> {
    member?: RecoverPasswordPayloadToMemberResolver<TParent>;
}
export interface RecoverPasswordPayloadToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IVerifyTokenPayloadTypeResolver<TParent = any> {
    member?: VerifyTokenPayloadToMemberResolver<TParent>;
}
export interface VerifyTokenPayloadToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateGroupPayloadTypeResolver<TParent = any> {
    group?: CreateGroupPayloadToGroupResolver<TParent>;
}
export interface CreateGroupPayloadToGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAddGroupToMemberPayloadTypeResolver<TParent = any> {
    memberGroup?: AddGroupToMemberPayloadToMemberGroupResolver<TParent>;
}
export interface AddGroupToMemberPayloadToMemberGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberGroupTypeResolver<TParent = any> {
    memberId?: MemberGroupToMemberIdResolver<TParent>;
    member?: MemberGroupToMemberResolver<TParent>;
    groupId?: MemberGroupToGroupIdResolver<TParent>;
    group?: MemberGroupToGroupResolver<TParent>;
}
export interface MemberGroupToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberGroupToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberGroupToGroupIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MemberGroupToGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAddGroupToTaxonomyPayloadTypeResolver<TParent = any> {
    groupTaxonomy?: AddGroupToTaxonomyPayloadToGroupTaxonomyResolver<TParent>;
}
export interface AddGroupToTaxonomyPayloadToGroupTaxonomyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAddTaxonomyToMemberPayloadTypeResolver<TParent = any> {
    memberTaxonomy?: AddTaxonomyToMemberPayloadToMemberTaxonomyResolver<TParent>;
}
export interface AddTaxonomyToMemberPayloadToMemberTaxonomyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteGroupPayloadTypeResolver<TParent = any> {
    member?: DeleteGroupPayloadToMemberResolver<TParent>;
}
export interface DeleteGroupPayloadToMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteGroupTaxonomyPayloadTypeResolver<TParent = any> {
    memberTaxonomy?: DeleteGroupTaxonomyPayloadToMemberTaxonomyResolver<TParent>;
}
export interface DeleteGroupTaxonomyPayloadToMemberTaxonomyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMemberGroupMutationPayloadTypeResolver<TParent = any> {
    memberGroup?: DeleteMemberGroupMutationPayloadToMemberGroupResolver<TParent>;
}
export interface DeleteMemberGroupMutationPayloadToMemberGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMemberTaxonomyPayloadTypeResolver<TParent = any> {
    memberTaxonomy?: DeleteMemberTaxonomyPayloadToMemberTaxonomyResolver<TParent>;
}
export interface DeleteMemberTaxonomyPayloadToMemberTaxonomyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteProjectRolePayloadTypeResolver<TParent = any> {
    message?: DeleteProjectRolePayloadToMessageResolver<TParent>;
}
export interface DeleteProjectRolePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateUpdatePermissionPayloadTypeResolver<TParent = any> {
    permission?: CreateUpdatePermissionPayloadToPermissionResolver<TParent>;
}
export interface CreateUpdatePermissionPayloadToPermissionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateProjectPayloadTypeResolver<TParent = any> {
    project?: UpdateProjectPayloadToProjectResolver<TParent>;
}
export interface UpdateProjectPayloadToProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateProjectRolePayloadTypeResolver<TParent = any> {
    projectRole?: UpdateProjectRolePayloadToProjectRoleResolver<TParent>;
}
export interface UpdateProjectRolePayloadToProjectRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateGroupPayloadTypeResolver<TParent = any> {
    group?: UpdateGroupPayloadToGroupResolver<TParent>;
}
export interface UpdateGroupPayloadToGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAddMemberAsAdminPayloadTypeResolver<TParent = any> {
    message?: AddMemberAsAdminPayloadToMessageResolver<TParent>;
}
export interface AddMemberAsAdminPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMemberStreamPayloadTypeResolver<TParent = any> {
    memberStream?: CreateMemberStreamPayloadToMemberStreamResolver<TParent>;
}
export interface CreateMemberStreamPayloadToMemberStreamResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMemberFromMemberProjectsPayloadTypeResolver<TParent = any> {
    message?: DeleteMemberFromMemberProjectsPayloadToMessageResolver<TParent>;
}
export interface DeleteMemberFromMemberProjectsPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAddMemberToCompanyPayloadTypeResolver<TParent = any> {
    message?: AddMemberToCompanyPayloadToMessageResolver<TParent>;
}
export interface AddMemberToCompanyPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreatePageManagerPayloadTypeResolver<TParent = any> {
    pageManager?: CreatePageManagerPayloadToPageManagerResolver<TParent>;
}
export interface CreatePageManagerPayloadToPageManagerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateViewManagerPayloadTypeResolver<TParent = any> {
    viewManager?: CreateViewManagerPayloadToViewManagerResolver<TParent>;
}
export interface CreateViewManagerPayloadToViewManagerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateViewColumnPayloadTypeResolver<TParent = any> {
    viewColumn?: CreateViewColumnPayloadToViewColumnResolver<TParent>;
}
export interface CreateViewColumnPayloadToViewColumnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateViewBlockColumnPayloadTypeResolver<TParent = any> {
    viewBlockColumn?: CreateViewBlockColumnPayloadToViewBlockColumnResolver<TParent>;
}
export interface CreateViewBlockColumnPayloadToViewBlockColumnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdatePageManagerPayloadTypeResolver<TParent = any> {
    message?: UpdatePageManagerPayloadToMessageResolver<TParent>;
}
export interface UpdatePageManagerPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateViewManagerPayloadTypeResolver<TParent = any> {
    message?: UpdateViewManagerPayloadToMessageResolver<TParent>;
}
export interface UpdateViewManagerPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateViewColumnPayloadTypeResolver<TParent = any> {
    message?: UpdateViewColumnPayloadToMessageResolver<TParent>;
}
export interface UpdateViewColumnPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateViewBlockColumnPayloadTypeResolver<TParent = any> {
    message?: UpdateViewBlockColumnPayloadToMessageResolver<TParent>;
}
export interface UpdateViewBlockColumnPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeletePageManagerPayloadTypeResolver<TParent = any> {
    message?: DeletePageManagerPayloadToMessageResolver<TParent>;
}
export interface DeletePageManagerPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteViewManagerPayloadTypeResolver<TParent = any> {
    message?: DeleteViewManagerPayloadToMessageResolver<TParent>;
}
export interface DeleteViewManagerPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteViewColumnPayloadTypeResolver<TParent = any> {
    message?: DeleteViewColumnPayloadToMessageResolver<TParent>;
}
export interface DeleteViewColumnPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ILinkTransactionToSellPayloadTypeResolver<TParent = any> {
    message?: LinkTransactionToSellPayloadToMessageResolver<TParent>;
}
export interface LinkTransactionToSellPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateSellPayloadTypeResolver<TParent = any> {
    sell?: UpdateSellPayloadToSellResolver<TParent>;
}
export interface UpdateSellPayloadToSellResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteViewBlockColumnPayloadTypeResolver<TParent = any> {
    message?: DeleteViewBlockColumnPayloadToMessageResolver<TParent>;
}
export interface DeleteViewBlockColumnPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMultipleMemberRelationPayloadTypeResolver<TParent = any> {
    memberRelation?: MultipleMemberRelationPayloadToMemberRelationResolver<TParent>;
}
export interface MultipleMemberRelationPayloadToMemberRelationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberRelationPayloadTypeResolver<TParent = any> {
    memberRelation?: MemberRelationPayloadToMemberRelationResolver<TParent>;
}
export interface MemberRelationPayloadToMemberRelationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateProductSellPayloadTypeResolver<TParent = any> {
    message?: UpdateProductSellPayloadToMessageResolver<TParent>;
}
export interface UpdateProductSellPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateTaxPayloadTypeResolver<TParent = any> {
    tax?: CreateTaxPayloadToTaxResolver<TParent>;
}
export interface CreateTaxPayloadToTaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteTaxPayloadTypeResolver<TParent = any> {
    message?: DeleteTaxPayloadToMessageResolver<TParent>;
}
export interface DeleteTaxPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IImportProductsFromExcelPayloadTypeResolver<TParent = any> {
    message?: ImportProductsFromExcelPayloadToMessageResolver<TParent>;
}
export interface ImportProductsFromExcelPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateRoutePayloadTypeResolver<TParent = any> {
    route?: CreateRoutePayloadToRouteResolver<TParent>;
}
export interface CreateRoutePayloadToRouteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteRoutePayloadTypeResolver<TParent = any> {
    message?: DeleteRoutePayloadToMessageResolver<TParent>;
}
export interface DeleteRoutePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateProductSellPayloadTypeResolver<TParent = any> {
    productSell?: CreateProductSellPayloadToProductSellResolver<TParent>;
}
export interface CreateProductSellPayloadToProductSellResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteProductSellPayloadTypeResolver<TParent = any> {
    message?: DeleteProductSellPayloadToMessageResolver<TParent>;
}
export interface DeleteProductSellPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreatePurchaseQuotePayloadTypeResolver<TParent = any> {
    purchaseQuote?: CreatePurchaseQuotePayloadToPurchaseQuoteResolver<TParent>;
}
export interface CreatePurchaseQuotePayloadToPurchaseQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeletePurchaseQuotePayloadTypeResolver<TParent = any> {
    message?: DeletePurchaseQuotePayloadToMessageResolver<TParent>;
}
export interface DeletePurchaseQuotePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateStockAlertPayloadTypeResolver<TParent = any> {
    stockAlert?: CreateStockAlertPayloadToStockAlertResolver<TParent>;
}
export interface CreateStockAlertPayloadToStockAlertResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteStockAlertPayloadTypeResolver<TParent = any> {
    message?: DeleteStockAlertPayloadToMessageResolver<TParent>;
}
export interface DeleteStockAlertPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateStockAlertPayloadTypeResolver<TParent = any> {
    message?: UpdateStockAlertPayloadToMessageResolver<TParent>;
}
export interface UpdateStockAlertPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateLegalTermPayloadTypeResolver<TParent = any> {
    legalTerm?: CreateLegalTermPayloadToLegalTermResolver<TParent>;
}
export interface CreateLegalTermPayloadToLegalTermResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateInsuranceFormPayloadTypeResolver<TParent = any> {
    insuranceForm?: CreateInsuranceFormPayloadToInsuranceFormResolver<TParent>;
}
export interface CreateInsuranceFormPayloadToInsuranceFormResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateInsuranceFormPayloadTypeResolver<TParent = any> {
    insuranceForm?: UpdateInsuranceFormPayloadToInsuranceFormResolver<TParent>;
}
export interface UpdateInsuranceFormPayloadToInsuranceFormResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateLegalTermPayloadTypeResolver<TParent = any> {
    message?: UpdateLegalTermPayloadToMessageResolver<TParent>;
}
export interface UpdateLegalTermPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteLegalTermPayloadTypeResolver<TParent = any> {
    message?: DeleteLegalTermPayloadToMessageResolver<TParent>;
}
export interface DeleteLegalTermPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateArticlePayloadTypeResolver<TParent = any> {
    article?: CreateArticlePayloadToArticleResolver<TParent>;
}
export interface CreateArticlePayloadToArticleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateStatusArticlePayloadTypeResolver<TParent = any> {
    article?: UpdateStatusArticlePayloadToArticleResolver<TParent>;
}
export interface UpdateStatusArticlePayloadToArticleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateTaxonomyPayloadTypeResolver<TParent = any> {
    taxonomy?: CreateTaxonomyPayloadToTaxonomyResolver<TParent>;
}
export interface CreateTaxonomyPayloadToTaxonomyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateArticlePayloadTypeResolver<TParent = any> {
    article?: UpdateArticlePayloadToArticleResolver<TParent>;
}
export interface UpdateArticlePayloadToArticleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateTaxonomyPayloadTypeResolver<TParent = any> {
    taxonomy?: UpdateTaxonomyPayloadToTaxonomyResolver<TParent>;
}
export interface UpdateTaxonomyPayloadToTaxonomyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteArticlePayloadTypeResolver<TParent = any> {
    article?: DeleteArticlePayloadToArticleResolver<TParent>;
}
export interface DeleteArticlePayloadToArticleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteTaxonomyPayloadTypeResolver<TParent = any> {
    taxonomy?: DeleteTaxonomyPayloadToTaxonomyResolver<TParent>;
}
export interface DeleteTaxonomyPayloadToTaxonomyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface INewSurveyPayloadTypeResolver<TParent = any> {
    survey?: NewSurveyPayloadToSurveyResolver<TParent>;
}
export interface NewSurveyPayloadToSurveyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateSurveyPayloadTypeResolver<TParent = any> {
    survey?: UpdateSurveyPayloadToSurveyResolver<TParent>;
}
export interface UpdateSurveyPayloadToSurveyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteSurveyPayloadTypeResolver<TParent = any> {
    survey?: DeleteSurveyPayloadToSurveyResolver<TParent>;
}
export interface DeleteSurveyPayloadToSurveyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface INewQuestionPayloadTypeResolver<TParent = any> {
    question?: NewQuestionPayloadToQuestionResolver<TParent>;
}
export interface NewQuestionPayloadToQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteQuestionPayloadTypeResolver<TParent = any> {
    question?: DeleteQuestionPayloadToQuestionResolver<TParent>;
}
export interface DeleteQuestionPayloadToQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateQuestionPayloadTypeResolver<TParent = any> {
    question?: UpdateQuestionPayloadToQuestionResolver<TParent>;
}
export interface UpdateQuestionPayloadToQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface INewOptionPayloadTypeResolver<TParent = any> {
    option?: NewOptionPayloadToOptionResolver<TParent>;
}
export interface NewOptionPayloadToOptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteOptionPayloadTypeResolver<TParent = any> {
    option?: DeleteOptionPayloadToOptionResolver<TParent>;
}
export interface DeleteOptionPayloadToOptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateOptionPayloadTypeResolver<TParent = any> {
    option?: UpdateOptionPayloadToOptionResolver<TParent>;
}
export interface UpdateOptionPayloadToOptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAnswerQuestionPayloadTypeResolver<TParent = any> {
    message?: AnswerQuestionPayloadToMessageResolver<TParent>;
}
export interface AnswerQuestionPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateProductPayloadTypeResolver<TParent = any> {
    product?: CreateProductPayloadToProductResolver<TParent>;
}
export interface CreateProductPayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateProductPayloadTypeResolver<TParent = any> {
    product?: UpdateProductPayloadToProductResolver<TParent>;
}
export interface UpdateProductPayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteProductPayloadTypeResolver<TParent = any> {
    product?: DeleteProductPayloadToProductResolver<TParent>;
}
export interface DeleteProductPayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateAddressPayloadTypeResolver<TParent = any> {
    address?: CreateAddressPayloadToAddressResolver<TParent>;
}
export interface CreateAddressPayloadToAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateAddressPayloadTypeResolver<TParent = any> {
    address?: UpdateAddressPayloadToAddressResolver<TParent>;
}
export interface UpdateAddressPayloadToAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteAddressPayloadTypeResolver<TParent = any> {
    address?: DeleteAddressPayloadToAddressResolver<TParent>;
}
export interface DeleteAddressPayloadToAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateUpdateShopPayloadTypeResolver<TParent = any> {
    shop?: CreateUpdateShopPayloadToShopResolver<TParent>;
}
export interface CreateUpdateShopPayloadToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateDiseasePayloadTypeResolver<TParent = any> {
    disease?: CreateDiseasePayloadToDiseaseResolver<TParent>;
}
export interface CreateDiseasePayloadToDiseaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateDiseasePayloadTypeResolver<TParent = any> {
    disease?: UpdateDiseasePayloadToDiseaseResolver<TParent>;
}
export interface UpdateDiseasePayloadToDiseaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteDiseasePayloadTypeResolver<TParent = any> {
    message?: DeleteDiseasePayloadToMessageResolver<TParent>;
}
export interface DeleteDiseasePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateTopicDiseasePayloadTypeResolver<TParent = any> {
    topicDisease?: CreateTopicDiseasePayloadToTopicDiseaseResolver<TParent>;
}
export interface CreateTopicDiseasePayloadToTopicDiseaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateTopicDiseasePayloadTypeResolver<TParent = any> {
    topicDisease?: UpdateTopicDiseasePayloadToTopicDiseaseResolver<TParent>;
}
export interface UpdateTopicDiseasePayloadToTopicDiseaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteTopicDiseasePayloadTypeResolver<TParent = any> {
    message?: DeleteTopicDiseasePayloadToMessageResolver<TParent>;
}
export interface DeleteTopicDiseasePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateFAQPayloadTypeResolver<TParent = any> {
    faq?: CreateFAQPayloadToFaqResolver<TParent>;
}
export interface CreateFAQPayloadToFaqResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateFAQPayloadTypeResolver<TParent = any> {
    faq?: UpdateFAQPayloadToFaqResolver<TParent>;
}
export interface UpdateFAQPayloadToFaqResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteFAQPayloadTypeResolver<TParent = any> {
    message?: DeleteFAQPayloadToMessageResolver<TParent>;
}
export interface DeleteFAQPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRunJobShopPayloadTypeResolver<TParent = any> {
    message?: RunJobShopPayloadToMessageResolver<TParent>;
}
export interface RunJobShopPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateCoursePayloadTypeResolver<TParent = any> {
    course?: CreateCoursePayloadToCourseResolver<TParent>;
}
export interface CreateCoursePayloadToCourseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateBeginCoursePayloadTypeResolver<TParent = any> {
    beginCourse?: CreateBeginCoursePayloadToBeginCourseResolver<TParent>;
}
export interface CreateBeginCoursePayloadToBeginCourseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBeginCourseTypeResolver<TParent = any> {
    courseId?: BeginCourseToCourseIdResolver<TParent>;
    startDate?: BeginCourseToStartDateResolver<TParent>;
    limitDate?: BeginCourseToLimitDateResolver<TParent>;
    endDate?: BeginCourseToEndDateResolver<TParent>;
    name?: BeginCourseToNameResolver<TParent>;
    price?: BeginCourseToPriceResolver<TParent>;
    course?: BeginCourseToCourseResolver<TParent>;
    id?: BeginCourseToIdResolver<TParent>;
    createdAt?: BeginCourseToCreatedAtResolver<TParent>;
    updatedAt?: BeginCourseToUpdatedAtResolver<TParent>;
}
export interface BeginCourseToCourseIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeginCourseToStartDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeginCourseToLimitDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeginCourseToEndDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeginCourseToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeginCourseToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeginCourseToCourseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeginCourseToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeginCourseToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface BeginCourseToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateCourseFormPayloadTypeResolver<TParent = any> {
    courseForm?: CreateCourseFormPayloadToCourseFormResolver<TParent>;
}
export interface CreateCourseFormPayloadToCourseFormResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICourseFormTypeResolver<TParent = any> {
    courseId?: CourseFormToCourseIdResolver<TParent>;
    formId?: CourseFormToFormIdResolver<TParent>;
    position?: CourseFormToPositionResolver<TParent>;
    course?: CourseFormToCourseResolver<TParent>;
    id?: CourseFormToIdResolver<TParent>;
    createdAt?: CourseFormToCreatedAtResolver<TParent>;
    updatedAt?: CourseFormToUpdatedAtResolver<TParent>;
}
export interface CourseFormToCourseIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseFormToFormIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseFormToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseFormToCourseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseFormToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseFormToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CourseFormToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateCoursePayloadTypeResolver<TParent = any> {
    message?: UpdateCoursePayloadToMessageResolver<TParent>;
}
export interface UpdateCoursePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateBeginCoursePayloadTypeResolver<TParent = any> {
    message?: UpdateBeginCoursePayloadToMessageResolver<TParent>;
}
export interface UpdateBeginCoursePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateCourseFormPayloadTypeResolver<TParent = any> {
    message?: UpdateCourseFormPayloadToMessageResolver<TParent>;
}
export interface UpdateCourseFormPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteCoursePayloadTypeResolver<TParent = any> {
    message?: DeleteCoursePayloadToMessageResolver<TParent>;
}
export interface DeleteCoursePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteBeginCoursePayloadTypeResolver<TParent = any> {
    message?: DeleteBeginCoursePayloadToMessageResolver<TParent>;
}
export interface DeleteBeginCoursePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteCourseFormPayloadTypeResolver<TParent = any> {
    message?: DeleteCourseFormPayloadToMessageResolver<TParent>;
}
export interface DeleteCourseFormPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFixProductPayloadTypeResolver<TParent = any> {
    message?: FixProductPayloadToMessageResolver<TParent>;
}
export interface FixProductPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteCourseSchedulePayloadTypeResolver<TParent = any> {
    message?: DeleteCourseSchedulePayloadToMessageResolver<TParent>;
}
export interface DeleteCourseSchedulePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateCourseSchedulePayloadTypeResolver<TParent = any> {
    message?: UpdateCourseSchedulePayloadToMessageResolver<TParent>;
}
export interface UpdateCourseSchedulePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateBranchOfficePayloadTypeResolver<TParent = any> {
    branchOffice?: CreateBranchOfficePayloadToBranchOfficeResolver<TParent>;
}
export interface CreateBranchOfficePayloadToBranchOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateManagerPayloadTypeResolver<TParent = any> {
    manager?: CreateManagerPayloadToManagerResolver<TParent>;
}
export interface CreateManagerPayloadToManagerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateProductPurchasePayloadTypeResolver<TParent = any> {
    message?: CreateProductPurchasePayloadToMessageResolver<TParent>;
}
export interface CreateProductPurchasePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreatePurchasePayloadTypeResolver<TParent = any> {
    purchase?: CreatePurchasePayloadToPurchaseResolver<TParent>;
}
export interface CreatePurchasePayloadToPurchaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateStorePayloadTypeResolver<TParent = any> {
    store?: CreateStorePayloadToStoreResolver<TParent>;
}
export interface CreateStorePayloadToStoreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface INewStoreTransferPayloadTypeResolver<TParent = any> {
    storeTransfer?: NewStoreTransferPayloadToStoreTransferResolver<TParent>;
}
export interface NewStoreTransferPayloadToStoreTransferResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateProviderPayloadTypeResolver<TParent = any> {
    provider?: CreateProviderPayloadToProviderResolver<TParent>;
}
export interface CreateProviderPayloadToProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateBranchOfficePayloadTypeResolver<TParent = any> {
    message?: UpdateBranchOfficePayloadToMessageResolver<TParent>;
}
export interface UpdateBranchOfficePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateManagerPayloadTypeResolver<TParent = any> {
    message?: UpdateManagerPayloadToMessageResolver<TParent>;
}
export interface UpdateManagerPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdatePurchasePayloadTypeResolver<TParent = any> {
    message?: UpdatePurchasePayloadToMessageResolver<TParent>;
}
export interface UpdatePurchasePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateStorePayloadTypeResolver<TParent = any> {
    message?: UpdateStorePayloadToMessageResolver<TParent>;
}
export interface UpdateStorePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteStorePayloadTypeResolver<TParent = any> {
    message?: DeleteStorePayloadToMessageResolver<TParent>;
}
export interface DeleteStorePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteManagerPayloadTypeResolver<TParent = any> {
    message?: DeleteManagerPayloadToMessageResolver<TParent>;
}
export interface DeleteManagerPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateProviderPayloadTypeResolver<TParent = any> {
    message?: UpdateProviderPayloadToMessageResolver<TParent>;
}
export interface UpdateProviderPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteProviderPayloadTypeResolver<TParent = any> {
    message?: DeleteProviderPayloadToMessageResolver<TParent>;
}
export interface DeleteProviderPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeletePurchasePayloadTypeResolver<TParent = any> {
    message?: DeletePurchasePayloadToMessageResolver<TParent>;
}
export interface DeletePurchasePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteProductPurchasePayloadTypeResolver<TParent = any> {
    message?: DeleteProductPurchasePayloadToMessageResolver<TParent>;
}
export interface DeleteProductPurchasePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteBranchOfficePayloadTypeResolver<TParent = any> {
    message?: DeleteBranchOfficePayloadToMessageResolver<TParent>;
}
export interface DeleteBranchOfficePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAssociationServiceToProjectPayloadTypeResolver<TParent = any> {
    projectMicroservice?: AssociationServiceToProjectPayloadToProjectMicroserviceResolver<TParent>;
}
export interface AssociationServiceToProjectPayloadToProjectMicroserviceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateArrayFunctionPayloadTypeResolver<TParent = any> {
    service?: CreateArrayFunctionPayloadToServiceResolver<TParent>;
}
export interface CreateArrayFunctionPayloadToServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteArrayFunctionPayloadTypeResolver<TParent = any> {
    service?: DeleteArrayFunctionPayloadToServiceResolver<TParent>;
}
export interface DeleteArrayFunctionPayloadToServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateServiceProjectPayloadTypeResolver<TParent = any> {
    message?: UpdateServiceProjectPayloadToMessageResolver<TParent>;
}
export interface UpdateServiceProjectPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteServiceProjectPayloadTypeResolver<TParent = any> {
    message?: DeleteServiceProjectPayloadToMessageResolver<TParent>;
}
export interface DeleteServiceProjectPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICancelEventPayloadTypeResolver<TParent = any> {
    message?: CancelEventPayloadToMessageResolver<TParent>;
}
export interface CancelEventPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateEventTypePayloadTypeResolver<TParent = any> {
    message?: CreateEventTypePayloadToMessageResolver<TParent>;
}
export interface CreateEventTypePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateSubEventTypePayloadTypeResolver<TParent = any> {
    subEventType?: CreateSubEventTypePayloadToSubEventTypeResolver<TParent>;
}
export interface CreateSubEventTypePayloadToSubEventTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteSubEventTypePayloadTypeResolver<TParent = any> {
    message?: DeleteSubEventTypePayloadToMessageResolver<TParent>;
}
export interface DeleteSubEventTypePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateSubEventTypePayloadTypeResolver<TParent = any> {
    message?: UpdateSubEventTypePayloadToMessageResolver<TParent>;
}
export interface UpdateSubEventTypePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAddSubTypeToEventTypePayloadTypeResolver<TParent = any> {
    message?: AddSubTypeToEventTypePayloadToMessageResolver<TParent>;
}
export interface AddSubTypeToEventTypePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteEventTypePayloadTypeResolver<TParent = any> {
    message?: DeleteEventTypePayloadToMessageResolver<TParent>;
}
export interface DeleteEventTypePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateEventTypePayloadTypeResolver<TParent = any> {
    message?: UpdateEventTypePayloadToMessageResolver<TParent>;
}
export interface UpdateEventTypePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateEventPayloadTypeResolver<TParent = any> {
    eventCalendar?: CreateEventPayloadToEventCalendarResolver<TParent>;
}
export interface CreateEventPayloadToEventCalendarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateEventMemberPayloadTypeResolver<TParent = any> {
    message?: CreateEventMemberPayloadToMessageResolver<TParent>;
}
export interface CreateEventMemberPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateEventPayloadTypeResolver<TParent = any> {
    eventCalendar?: UpdateEventPayloadToEventCalendarResolver<TParent>;
}
export interface UpdateEventPayloadToEventCalendarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteEventPayloadTypeResolver<TParent = any> {
    message?: DeleteEventPayloadToMessageResolver<TParent>;
}
export interface DeleteEventPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateEventSessionPayloadTypeResolver<TParent = any> {
    eventSession?: CreateEventSessionPayloadToEventSessionResolver<TParent>;
}
export interface CreateEventSessionPayloadToEventSessionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateEventSessionPayloadTypeResolver<TParent = any> {
    eventSession?: UpdateEventSessionPayloadToEventSessionResolver<TParent>;
}
export interface UpdateEventSessionPayloadToEventSessionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteEventSessionPayloadTypeResolver<TParent = any> {
    message?: DeleteEventSessionPayloadToMessageResolver<TParent>;
}
export interface DeleteEventSessionPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateSchedulePayloadTypeResolver<TParent = any> {
    message?: CreateSchedulePayloadToMessageResolver<TParent>;
}
export interface CreateSchedulePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAssociationMemberToConsultPayloadTypeResolver<TParent = any> {
    message?: AssociationMemberToConsultPayloadToMessageResolver<TParent>;
}
export interface AssociationMemberToConsultPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICancellationMemberToConsultPayloadTypeResolver<TParent = any> {
    message?: CancellationMemberToConsultPayloadToMessageResolver<TParent>;
}
export interface CancellationMemberToConsultPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IChangeStatusEventPayloadTypeResolver<TParent = any> {
    message?: ChangeStatusEventPayloadToMessageResolver<TParent>;
}
export interface ChangeStatusEventPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteSchedulePayloadTypeResolver<TParent = any> {
    message?: DeleteSchedulePayloadToMessageResolver<TParent>;
}
export interface DeleteSchedulePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteTurnPayloadTypeResolver<TParent = any> {
    message?: DeleteTurnPayloadToMessageResolver<TParent>;
}
export interface DeleteTurnPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IResourceQuotePayloadTypeResolver<TParent = any> {
    resourceQuote?: ResourceQuotePayloadToResourceQuoteResolver<TParent>;
}
export interface ResourceQuotePayloadToResourceQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IResourceQuoteDetailPayloadTypeResolver<TParent = any> {
    resourceQuoteDetail?: ResourceQuoteDetailPayloadToResourceQuoteDetailResolver<TParent>;
}
export interface ResourceQuoteDetailPayloadToResourceQuoteDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProposalPayloadTypeResolver<TParent = any> {
    proposal?: ProposalPayloadToProposalResolver<TParent>;
}
export interface ProposalPayloadToProposalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICollaboratorPayloadTypeResolver<TParent = any> {
    collaborator?: CollaboratorPayloadToCollaboratorResolver<TParent>;
}
export interface CollaboratorPayloadToCollaboratorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICollaboratorHoursPayloadTypeResolver<TParent = any> {
    collaboratorHours?: CollaboratorHoursPayloadToCollaboratorHoursResolver<TParent>;
}
export interface CollaboratorHoursPayloadToCollaboratorHoursResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IHiringPayloadTypeResolver<TParent = any> {
    hiring?: HiringPayloadToHiringResolver<TParent>;
}
export interface HiringPayloadToHiringResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IHiringServicePayloadTypeResolver<TParent = any> {
    hiringService?: HiringServicePayloadToHiringServiceResolver<TParent>;
}
export interface HiringServicePayloadToHiringServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IHiringTypePayloadTypeResolver<TParent = any> {
    hiringType?: HiringTypePayloadToHiringTypeResolver<TParent>;
}
export interface HiringTypePayloadToHiringTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IShiftPayloadTypeResolver<TParent = any> {
    shift?: ShiftPayloadToShiftResolver<TParent>;
}
export interface ShiftPayloadToShiftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateBusinessTypePayloadTypeResolver<TParent = any> {
    businessType?: CreateBusinessTypePayloadToBusinessTypeResolver<TParent>;
}
export interface CreateBusinessTypePayloadToBusinessTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateBusinessTypePayloadTypeResolver<TParent = any> {
    message?: UpdateBusinessTypePayloadToMessageResolver<TParent>;
}
export interface UpdateBusinessTypePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteBusinessPayloadTypeResolver<TParent = any> {
    message?: DeleteBusinessPayloadToMessageResolver<TParent>;
}
export interface DeleteBusinessPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateBusinessRulePayloadTypeResolver<TParent = any> {
    businessRule?: CreateBusinessRulePayloadToBusinessRuleResolver<TParent>;
}
export interface CreateBusinessRulePayloadToBusinessRuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateBusinessRulePayloadTypeResolver<TParent = any> {
    message?: UpdateBusinessRulePayloadToMessageResolver<TParent>;
}
export interface UpdateBusinessRulePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteBusinessRulePayloadTypeResolver<TParent = any> {
    message?: DeleteBusinessRulePayloadToMessageResolver<TParent>;
}
export interface DeleteBusinessRulePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteCouponFromTemplatePayloadTypeResolver<TParent = any> {
    message?: DeleteCouponFromTemplatePayloadToMessageResolver<TParent>;
}
export interface DeleteCouponFromTemplatePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAddCouponsToTemplatePayloadTypeResolver<TParent = any> {
    message?: AddCouponsToTemplatePayloadToMessageResolver<TParent>;
}
export interface AddCouponsToTemplatePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateUpdateConfigurationTemplatePayloadTypeResolver<TParent = any> {
    configurationTemplate?: CreateUpdateConfigurationTemplatePayloadToConfigurationTemplateResolver<TParent>;
}
export interface CreateUpdateConfigurationTemplatePayloadToConfigurationTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISendTemplatePayloadTypeResolver<TParent = any> {
    template?: SendTemplatePayloadToTemplateResolver<TParent>;
}
export interface SendTemplatePayloadToTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPutFirebaseDevicePayloadTypeResolver<TParent = any> {
    message?: PutFirebaseDevicePayloadToMessageResolver<TParent>;
}
export interface PutFirebaseDevicePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateCouponPayloadTypeResolver<TParent = any> {
    coupon?: CreateCouponPayloadToCouponResolver<TParent>;
}
export interface CreateCouponPayloadToCouponResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateCouponPayloadTypeResolver<TParent = any> {
    message?: UpdateCouponPayloadToMessageResolver<TParent>;
}
export interface UpdateCouponPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteCouponPayloadTypeResolver<TParent = any> {
    message?: DeleteCouponPayloadToMessageResolver<TParent>;
}
export interface DeleteCouponPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateTemplatePayloadTypeResolver<TParent = any> {
    template?: CreateTemplatePayloadToTemplateResolver<TParent>;
}
export interface CreateTemplatePayloadToTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateTemplatePayloadTypeResolver<TParent = any> {
    message?: UpdateTemplatePayloadToMessageResolver<TParent>;
}
export interface UpdateTemplatePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteTemplatePayloadTypeResolver<TParent = any> {
    message?: DeleteTemplatePayloadToMessageResolver<TParent>;
}
export interface DeleteTemplatePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateErrorPagePayloadTypeResolver<TParent = any> {
    errorPage?: CreateErrorPagePayloadToErrorPageResolver<TParent>;
}
export interface CreateErrorPagePayloadToErrorPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateErrorPagePayloadTypeResolver<TParent = any> {
    message?: UpdateErrorPagePayloadToMessageResolver<TParent>;
}
export interface UpdateErrorPagePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteErrorPagePayloadTypeResolver<TParent = any> {
    message?: DeleteErrorPagePayloadToMessageResolver<TParent>;
}
export interface DeleteErrorPagePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateErrorPageValidationPayloadTypeResolver<TParent = any> {
    errorPageValidation?: CreateErrorPageValidationPayloadToErrorPageValidationResolver<TParent>;
}
export interface CreateErrorPageValidationPayloadToErrorPageValidationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateErrorPageValidationPayloadTypeResolver<TParent = any> {
    message?: UpdateErrorPageValidationPayloadToMessageResolver<TParent>;
}
export interface UpdateErrorPageValidationPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteErrorPageValidationPayloadTypeResolver<TParent = any> {
    message?: DeleteErrorPageValidationPayloadToMessageResolver<TParent>;
}
export interface DeleteErrorPageValidationPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateBusinessPayloadTypeResolver<TParent = any> {
    business?: CreateBusinessPayloadToBusinessResolver<TParent>;
}
export interface CreateBusinessPayloadToBusinessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateBusinessPayloadTypeResolver<TParent = any> {
    business?: UpdateBusinessPayloadToBusinessResolver<TParent>;
}
export interface UpdateBusinessPayloadToBusinessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAssociateBusinessRulesPayloadTypeResolver<TParent = any> {
    business?: AssociateBusinessRulesPayloadToBusinessResolver<TParent>;
}
export interface AssociateBusinessRulesPayloadToBusinessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAssociateProjectPlanSubscriptionPayloadTypeResolver<TParent = any> {
    projectPlanSubscription?: AssociateProjectPlanSubscriptionPayloadToProjectPlanSubscriptionResolver<TParent>;
}
export interface AssociateProjectPlanSubscriptionPayloadToProjectPlanSubscriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateProjectPlanPayloadTypeResolver<TParent = any> {
    projectPlan?: CreateProjectPlanPayloadToProjectPlanResolver<TParent>;
}
export interface CreateProjectPlanPayloadToProjectPlanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateProjectPlanPayloadTypeResolver<TParent = any> {
    projectPlan?: UpdateProjectPlanPayloadToProjectPlanResolver<TParent>;
}
export interface UpdateProjectPlanPayloadToProjectPlanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteProjectPlanPayloadTypeResolver<TParent = any> {
    message?: DeleteProjectPlanPayloadToMessageResolver<TParent>;
}
export interface DeleteProjectPlanPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteProjectPlanSubscriptionPayloadTypeResolver<TParent = any> {
    message?: DeleteProjectPlanSubscriptionPayloadToMessageResolver<TParent>;
}
export interface DeleteProjectPlanSubscriptionPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPutConfigPayloadTypeResolver<TParent = any> {
    configuration?: PutConfigPayloadToConfigurationResolver<TParent>;
}
export interface PutConfigPayloadToConfigurationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteConfigPayloadTypeResolver<TParent = any> {
    configuration?: DeleteConfigPayloadToConfigurationResolver<TParent>;
}
export interface DeleteConfigPayloadToConfigurationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateOrderPagesPayloadTypeResolver<TParent = any> {
    items?: UpdateOrderPagesPayloadToItemsResolver<TParent>;
}
export interface UpdateOrderPagesPayloadToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPagesDtoTypeResolver<TParent = any> {
    pageId?: PagesDtoToPageIdResolver<TParent>;
    position?: PagesDtoToPositionResolver<TParent>;
}
export interface PagesDtoToPageIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PagesDtoToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateBatchWewbsiteComponentPayloadTypeResolver<TParent = any> {
    items?: UpdateBatchWewbsiteComponentPayloadToItemsResolver<TParent>;
}
export interface UpdateBatchWewbsiteComponentPayloadToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IComponentDtoTypeResolver<TParent = any> {
    webSitePageComponentId?: ComponentDtoToWebSitePageComponentIdResolver<TParent>;
    position?: ComponentDtoToPositionResolver<TParent>;
}
export interface ComponentDtoToWebSitePageComponentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ComponentDtoToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateComponentPayloadTypeResolver<TParent = any> {
    message?: CreateComponentPayloadToMessageResolver<TParent>;
}
export interface CreateComponentPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateWebsiteComponentPayloadTypeResolver<TParent = any> {
    message?: CreateWebsiteComponentPayloadToMessageResolver<TParent>;
}
export interface CreateWebsiteComponentPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateWebsitePagePayloadTypeResolver<TParent = any> {
    message?: CreateWebsitePagePayloadToMessageResolver<TParent>;
}
export interface CreateWebsitePagePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateWebsiteSeoPayloadTypeResolver<TParent = any> {
    message?: CreateWebsiteSeoPayloadToMessageResolver<TParent>;
}
export interface CreateWebsiteSeoPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateComponentPayloadTypeResolver<TParent = any> {
    message?: UpdateComponentPayloadToMessageResolver<TParent>;
}
export interface UpdateComponentPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateWebsiteComponentPayloadTypeResolver<TParent = any> {
    message?: UpdateWebsiteComponentPayloadToMessageResolver<TParent>;
}
export interface UpdateWebsiteComponentPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateWebsitePagePayloadTypeResolver<TParent = any> {
    message?: UpdateWebsitePagePayloadToMessageResolver<TParent>;
}
export interface UpdateWebsitePagePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateWebsiteSeoPayloadTypeResolver<TParent = any> {
    message?: UpdateWebsiteSeoPayloadToMessageResolver<TParent>;
}
export interface UpdateWebsiteSeoPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteComponentPayloadTypeResolver<TParent = any> {
    message?: DeleteComponentPayloadToMessageResolver<TParent>;
}
export interface DeleteComponentPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteWebsiteComponentPayloadTypeResolver<TParent = any> {
    message?: DeleteWebsiteComponentPayloadToMessageResolver<TParent>;
}
export interface DeleteWebsiteComponentPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteWebsitePagePayloadTypeResolver<TParent = any> {
    message?: DeleteWebsitePagePayloadToMessageResolver<TParent>;
}
export interface DeleteWebsitePagePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteWebsiteSeoPayloadTypeResolver<TParent = any> {
    message?: DeleteWebsiteSeoPayloadToMessageResolver<TParent>;
}
export interface DeleteWebsiteSeoPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDocumentCategoryPayloadTypeResolver<TParent = any> {
    documentCategory?: DocumentCategoryPayloadToDocumentCategoryResolver<TParent>;
}
export interface DocumentCategoryPayloadToDocumentCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDocumentCategoryDetailPayloadTypeResolver<TParent = any> {
    document?: DocumentCategoryDetailPayloadToDocumentResolver<TParent>;
}
export interface DocumentCategoryDetailPayloadToDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDocumentPayloadTypeResolver<TParent = any> {
    document?: DocumentPayloadToDocumentResolver<TParent>;
}
export interface DocumentPayloadToDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDocumentTemplatePayloadTypeResolver<TParent = any> {
    document?: DocumentTemplatePayloadToDocumentResolver<TParent>;
}
export interface DocumentTemplatePayloadToDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ITemplatePagePayloadTypeResolver<TParent = any> {
    templatePage?: TemplatePagePayloadToTemplatePageResolver<TParent>;
}
export interface TemplatePagePayloadToTemplatePageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDocumentTagPayloadTypeResolver<TParent = any> {
    documentTag?: DocumentTagPayloadToDocumentTagResolver<TParent>;
}
export interface DocumentTagPayloadToDocumentTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDocumentScanPayloadTypeResolver<TParent = any> {
    documentScan?: DocumentScanPayloadToDocumentScanResolver<TParent>;
}
export interface DocumentScanPayloadToDocumentScanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDocumentReadPayloadTypeResolver<TParent = any> {
    documentRead?: DocumentReadPayloadToDocumentReadResolver<TParent>;
}
export interface DocumentReadPayloadToDocumentReadResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateVideoCallPayloadTypeResolver<TParent = any> {
    videoCall?: CreateVideoCallPayloadToVideoCallResolver<TParent>;
    roomAccessToken?: CreateVideoCallPayloadToRoomAccessTokenResolver<TParent>;
}
export interface CreateVideoCallPayloadToVideoCallResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CreateVideoCallPayloadToRoomAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRoomAccessTokenTypeResolver<TParent = any> {
    createdAt?: RoomAccessTokenToCreatedAtResolver<TParent>;
    roomName?: RoomAccessTokenToRoomNameResolver<TParent>;
    token?: RoomAccessTokenToTokenResolver<TParent>;
    participantIdentity?: RoomAccessTokenToParticipantIdentityResolver<TParent>;
}
export interface RoomAccessTokenToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RoomAccessTokenToRoomNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RoomAccessTokenToTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RoomAccessTokenToParticipantIdentityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateVideoCallPayloadTypeResolver<TParent = any> {
    videoCall?: UpdateVideoCallPayloadToVideoCallResolver<TParent>;
}
export interface UpdateVideoCallPayloadToVideoCallResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteVideoCallPayloadTypeResolver<TParent = any> {
    videoCall?: DeleteVideoCallPayloadToVideoCallResolver<TParent>;
}
export interface DeleteVideoCallPayloadToVideoCallResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateVideoRoomPayloadTypeResolver<TParent = any> {
    videoCall?: CreateVideoRoomPayloadToVideoCallResolver<TParent>;
    roomAccessToken?: CreateVideoRoomPayloadToRoomAccessTokenResolver<TParent>;
}
export interface CreateVideoRoomPayloadToVideoCallResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CreateVideoRoomPayloadToRoomAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISendNotificationUsersPayloadTypeResolver<TParent = any> {
    message?: SendNotificationUsersPayloadToMessageResolver<TParent>;
}
export interface SendNotificationUsersPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISendEmailDownloadPayloadTypeResolver<TParent = any> {
    message?: SendEmailDownloadPayloadToMessageResolver<TParent>;
}
export interface SendEmailDownloadPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISendEmailNotificationPayloadTypeResolver<TParent = any> {
    message?: SendEmailNotificationPayloadToMessageResolver<TParent>;
}
export interface SendEmailNotificationPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRecordingPathTypeResolver<TParent = any> {
    url?: RecordingPathToUrlResolver<TParent>;
    signedUrl?: RecordingPathToSignedUrlResolver<TParent>;
    size?: RecordingPathToSizeResolver<TParent>;
    name?: RecordingPathToNameResolver<TParent>;
}
export interface RecordingPathToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RecordingPathToSignedUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RecordingPathToSizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface RecordingPathToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateUpdateContactEmailPayloadTypeResolver<TParent = any> {
    contactEmail?: CreateUpdateContactEmailPayloadToContactEmailResolver<TParent>;
}
export interface CreateUpdateContactEmailPayloadToContactEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISendEmailPayloadTypeResolver<TParent = any> {
    responseEmail?: SendEmailPayloadToResponseEmailResolver<TParent>;
}
export interface SendEmailPayloadToResponseEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IResponseEmailTypeResolver<TParent = any> {
    message?: ResponseEmailToMessageResolver<TParent>;
}
export interface ResponseEmailToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteContactEmailPayloadTypeResolver<TParent = any> {
    message?: DeleteContactEmailPayloadToMessageResolver<TParent>;
}
export interface DeleteContactEmailPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISendMailBotPayloadTypeResolver<TParent = any> {
    responseEmail?: SendMailBotPayloadToResponseEmailResolver<TParent>;
}
export interface SendMailBotPayloadToResponseEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IServiceAreaPayloadTypeResolver<TParent = any> {
    serviceArea?: ServiceAreaPayloadToServiceAreaResolver<TParent>;
}
export interface ServiceAreaPayloadToServiceAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAreaPayloadTypeResolver<TParent = any> {
    area?: AreaPayloadToAreaResolver<TParent>;
}
export interface AreaPayloadToAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IServiceMemberPayloadTypeResolver<TParent = any> {
    serviceMember?: ServiceMemberPayloadToServiceMemberResolver<TParent>;
}
export interface ServiceMemberPayloadToServiceMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IServiceQuizPayloadTypeResolver<TParent = any> {
    serviceQuiz?: ServiceQuizPayloadToServiceQuizResolver<TParent>;
}
export interface ServiceQuizPayloadToServiceQuizResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizPayloadTypeResolver<TParent = any> {
    quiz?: QuizPayloadToQuizResolver<TParent>;
}
export interface QuizPayloadToQuizResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizSectionPayloadTypeResolver<TParent = any> {
    quizSection?: QuizSectionPayloadToQuizSectionResolver<TParent>;
}
export interface QuizSectionPayloadToQuizSectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizQuestionPayloadTypeResolver<TParent = any> {
    quizQuestion?: QuizQuestionPayloadToQuizQuestionResolver<TParent>;
}
export interface QuizQuestionPayloadToQuizQuestionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizQuestionNestedPayloadTypeResolver<TParent = any> {
    quizQuestionNested?: QuizQuestionNestedPayloadToQuizQuestionNestedResolver<TParent>;
}
export interface QuizQuestionNestedPayloadToQuizQuestionNestedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizQuestionAnswerPayloadTypeResolver<TParent = any> {
    questionAnswer?: QuizQuestionAnswerPayloadToQuestionAnswerResolver<TParent>;
}
export interface QuizQuestionAnswerPayloadToQuestionAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizAnswerPayloadTypeResolver<TParent = any> {
    quizAnswer?: QuizAnswerPayloadToQuizAnswerResolver<TParent>;
}
export interface QuizAnswerPayloadToQuizAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizMemberPayloadTypeResolver<TParent = any> {
    quizMember?: QuizMemberPayloadToQuizMemberResolver<TParent>;
}
export interface QuizMemberPayloadToQuizMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizQuestionMemberPayloadTypeResolver<TParent = any> {
    quizQuestionMember?: QuizQuestionMemberPayloadToQuizQuestionMemberResolver<TParent>;
}
export interface QuizQuestionMemberPayloadToQuizQuestionMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizMemberAnswerPayloadTypeResolver<TParent = any> {
    memberAnswer?: QuizMemberAnswerPayloadToMemberAnswerResolver<TParent>;
}
export interface QuizMemberAnswerPayloadToMemberAnswerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuizMemberDescriptionPayloadTypeResolver<TParent = any> {
    memberDescription?: QuizMemberDescriptionPayloadToMemberDescriptionResolver<TParent>;
}
export interface QuizMemberDescriptionPayloadToMemberDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IKeyPayloadTypeResolver<TParent = any> {
    key?: KeyPayloadToKeyResolver<TParent>;
}
export interface KeyPayloadToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IKeyTypeResolver<TParent = any> {
    user?: KeyToUserResolver<TParent>;
    device?: KeyToDeviceResolver<TParent>;
    origin?: KeyToOriginResolver<TParent>;
    idAplication?: KeyToIdAplicationResolver<TParent>;
    projectId?: KeyToProjectIdResolver<TParent>;
    id?: KeyToIdResolver<TParent>;
    createdAt?: KeyToCreatedAtResolver<TParent>;
    updatedAt?: KeyToUpdatedAtResolver<TParent>;
}
export interface KeyToUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface KeyToDeviceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface KeyToOriginResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface KeyToIdAplicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface KeyToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface KeyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface KeyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface KeyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuotationPayloadTypeResolver<TParent = any> {
    idPeticionCotizacion?: QuotationPayloadToIdPeticionCotizacionResolver<TParent>;
    error?: QuotationPayloadToErrorResolver<TParent>;
}
export interface QuotationPayloadToIdPeticionCotizacionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationPayloadToErrorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ILoginPayloadTypeResolver<TParent = any> {
    name?: LoginPayloadToNameResolver<TParent>;
    idCredential?: LoginPayloadToIdCredentialResolver<TParent>;
    token?: LoginPayloadToTokenResolver<TParent>;
    aplicaciones?: LoginPayloadToAplicacionesResolver<TParent>;
    error?: LoginPayloadToErrorResolver<TParent>;
}
export interface LoginPayloadToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LoginPayloadToIdCredentialResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LoginPayloadToTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LoginPayloadToAplicacionesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface LoginPayloadToErrorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IErrorDataTypeResolver<TParent = any> {
    numero?: ErrorDataToNumeroResolver<TParent>;
    descripcion?: ErrorDataToDescripcionResolver<TParent>;
}
export interface ErrorDataToNumeroResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ErrorDataToDescripcionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPolicyPayloadTypeResolver<TParent = any> {
    error?: PolicyPayloadToErrorResolver<TParent>;
    poliza?: PolicyPayloadToPolizaResolver<TParent>;
    condiciones?: PolicyPayloadToCondicionesResolver<TParent>;
    siniestro?: PolicyPayloadToSiniestroResolver<TParent>;
    polizaGR?: PolicyPayloadToPolizaGRResolver<TParent>;
}
export interface PolicyPayloadToErrorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyPayloadToPolizaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyPayloadToCondicionesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyPayloadToSiniestroResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface PolicyPayloadToPolizaGRResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuotationDownloadPDFPayloadTypeResolver<TParent = any> {
    error?: QuotationDownloadPDFPayloadToErrorResolver<TParent>;
    pdf64?: QuotationDownloadPDFPayloadToPdf64Resolver<TParent>;
}
export interface QuotationDownloadPDFPayloadToErrorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationDownloadPDFPayloadToPdf64Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPdf64DataTypeResolver<TParent = any> {
    amplia?: Pdf64DataToAmpliaResolver<TParent>;
    ampliaPlus?: Pdf64DataToAmpliaPlusResolver<TParent>;
    limitada?: Pdf64DataToLimitadaResolver<TParent>;
}
export interface Pdf64DataToAmpliaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface Pdf64DataToAmpliaPlusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface Pdf64DataToLimitadaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IQuotationEmitPayloadTypeResolver<TParent = any> {
    numeroPoliza?: QuotationEmitPayloadToNumeroPolizaResolver<TParent>;
    error?: QuotationEmitPayloadToErrorResolver<TParent>;
}
export interface QuotationEmitPayloadToNumeroPolizaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface QuotationEmitPayloadToErrorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISendQuotationPayloadTypeResolver<TParent = any> {
    error?: SendQuotationPayloadToErrorResolver<TParent>;
}
export interface SendQuotationPayloadToErrorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreatePaymentMethodPayloadTypeResolver<TParent = any> {
    paymentMethod?: CreatePaymentMethodPayloadToPaymentMethodResolver<TParent>;
}
export interface CreatePaymentMethodPayloadToPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISetupIntentStripePayloadTypeResolver<TParent = any> {
    setupIntentClientSecret?: SetupIntentStripePayloadToSetupIntentClientSecretResolver<TParent>;
    customerId?: SetupIntentStripePayloadToCustomerIdResolver<TParent>;
    publicKey?: SetupIntentStripePayloadToPublicKeyResolver<TParent>;
}
export interface SetupIntentStripePayloadToSetupIntentClientSecretResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SetupIntentStripePayloadToCustomerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface SetupIntentStripePayloadToPublicKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISetDefaultPaymentMethodOnCustomerPayloadTypeResolver<TParent = any> {
    message?: SetDefaultPaymentMethodOnCustomerPayloadToMessageResolver<TParent>;
}
export interface SetDefaultPaymentMethodOnCustomerPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdatePriceStripePayloadTypeResolver<TParent = any> {
    message?: UpdatePriceStripePayloadToMessageResolver<TParent>;
}
export interface UpdatePriceStripePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface INewPaymentsAnyTypePayloadTypeResolver<TParent = any> {
    message?: NewPaymentsAnyTypePayloadToMessageResolver<TParent>;
}
export interface NewPaymentsAnyTypePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateProductStripePayloadTypeResolver<TParent = any> {
    productId?: CreateProductStripePayloadToProductIdResolver<TParent>;
}
export interface CreateProductStripePayloadToProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPlanPayloadTypeResolver<TParent = any> {
    plan?: PlanPayloadToPlanResolver<TParent>;
}
export interface PlanPayloadToPlanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateStripePricePayloadTypeResolver<TParent = any> {
    plan?: CreateStripePricePayloadToPlanResolver<TParent>;
}
export interface CreateStripePricePayloadToPlanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMethodPaymentPayloadTypeResolver<TParent = any> {
    methodPayment?: CreateMethodPaymentPayloadToMethodPaymentResolver<TParent>;
}
export interface CreateMethodPaymentPayloadToMethodPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMethodPaymentPayloadTypeResolver<TParent = any> {
    methodPayment?: UpdateMethodPaymentPayloadToMethodPaymentResolver<TParent>;
}
export interface UpdateMethodPaymentPayloadToMethodPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMethodPaymentPayloadTypeResolver<TParent = any> {
    methodPayment?: DeleteMethodPaymentPayloadToMethodPaymentResolver<TParent>;
}
export interface DeleteMethodPaymentPayloadToMethodPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreatePaymentStripePayloadTypeResolver<TParent = any> {
    transaction?: CreatePaymentStripePayloadToTransactionResolver<TParent>;
}
export interface CreatePaymentStripePayloadToTransactionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateSuscriptionStripePayloadTypeResolver<TParent = any> {
    userKey?: CreateSuscriptionStripePayloadToUserKeyResolver<TParent>;
    trans?: CreateSuscriptionStripePayloadToTransResolver<TParent>;
}
export interface CreateSuscriptionStripePayloadToUserKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CreateSuscriptionStripePayloadToTransResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateSuscriptionExternalStripePayloadTypeResolver<TParent = any> {
    userKey?: CreateSuscriptionExternalStripePayloadToUserKeyResolver<TParent>;
    trans?: CreateSuscriptionExternalStripePayloadToTransResolver<TParent>;
}
export interface CreateSuscriptionExternalStripePayloadToUserKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CreateSuscriptionExternalStripePayloadToTransResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteSuscriptionExternalStripePayloadTypeResolver<TParent = any> {
    userKey?: DeleteSuscriptionExternalStripePayloadToUserKeyResolver<TParent>;
}
export interface DeleteSuscriptionExternalStripePayloadToUserKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateStripeAccountPayloadTypeResolver<TParent = any> {
    userKey?: CreateStripeAccountPayloadToUserKeyResolver<TParent>;
    url?: CreateStripeAccountPayloadToUrlResolver<TParent>;
}
export interface CreateStripeAccountPayloadToUserKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface CreateStripeAccountPayloadToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeletePaymentPayloadTypeResolver<TParent = any> {
    transaction?: DeletePaymentPayloadToTransactionResolver<TParent>;
}
export interface DeletePaymentPayloadToTransactionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdatePaymentPayloadTypeResolver<TParent = any> {
    transaction?: UpdatePaymentPayloadToTransactionResolver<TParent>;
}
export interface UpdatePaymentPayloadToTransactionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateInvoicePayloadTypeResolver<TParent = any> {
    invoice?: CreateInvoicePayloadToInvoiceResolver<TParent>;
}
export interface CreateInvoicePayloadToInvoiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateStatusInvoicePayloadTypeResolver<TParent = any> {
    invoice?: UpdateStatusInvoicePayloadToInvoiceResolver<TParent>;
}
export interface UpdateStatusInvoicePayloadToInvoiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeletePaymentMethodPayloadTypeResolver<TParent = any> {
    message?: DeletePaymentMethodPayloadToMessageResolver<TParent>;
}
export interface DeletePaymentMethodPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateBatchInsurerCoveragesPayloadTypeResolver<TParent = any> {
    message?: CreateBatchInsurerCoveragesPayloadToMessageResolver<TParent>;
}
export interface CreateBatchInsurerCoveragesPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateQuotePayloadTypeResolver<TParent = any> {
    quoteId?: CreateQuotePayloadToQuoteIdResolver<TParent>;
}
export interface CreateQuotePayloadToQuoteIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateNewOfficesPayloadTypeResolver<TParent = any> {
    message?: CreateNewOfficesPayloadToMessageResolver<TParent>;
}
export interface CreateNewOfficesPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateNewProfilesPayloadTypeResolver<TParent = any> {
    message?: CreateNewProfilesPayloadToMessageResolver<TParent>;
}
export interface CreateNewProfilesPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateInsurerPayloadTypeResolver<TParent = any> {
    message?: CreateInsurerPayloadToMessageResolver<TParent>;
}
export interface CreateInsurerPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateOfficePayloadTypeResolver<TParent = any> {
    message?: CreateOfficePayloadToMessageResolver<TParent>;
}
export interface CreateOfficePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateRegistrationPayloadTypeResolver<TParent = any> {
    message?: CreateRegistrationPayloadToMessageResolver<TParent>;
}
export interface CreateRegistrationPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateQuatorProfilePayloadTypeResolver<TParent = any> {
    message?: CreateQuatorProfilePayloadToMessageResolver<TParent>;
}
export interface CreateQuatorProfilePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteInsurerPayloadTypeResolver<TParent = any> {
    message?: DeleteInsurerPayloadToMessageResolver<TParent>;
}
export interface DeleteInsurerPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteOfficePayloadTypeResolver<TParent = any> {
    message?: DeleteOfficePayloadToMessageResolver<TParent>;
}
export interface DeleteOfficePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteQuoterProfilePayloadTypeResolver<TParent = any> {
    message?: DeleteQuoterProfilePayloadToMessageResolver<TParent>;
}
export interface DeleteQuoterProfilePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateInsurerPayloadTypeResolver<TParent = any> {
    message?: UpdateInsurerPayloadToMessageResolver<TParent>;
}
export interface UpdateInsurerPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateOfficePayloadTypeResolver<TParent = any> {
    message?: UpdateOfficePayloadToMessageResolver<TParent>;
}
export interface UpdateOfficePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateQuoterProfilePayloadTypeResolver<TParent = any> {
    message?: UpdateQuoterProfilePayloadToMessageResolver<TParent>;
}
export interface UpdateQuoterProfilePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateCatalogPayloadTypeResolver<TParent = any> {
    message?: CreateCatalogPayloadToMessageResolver<TParent>;
}
export interface CreateCatalogPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPopulateCredentialsPayloadTypeResolver<TParent = any> {
    message?: PopulateCredentialsPayloadToMessageResolver<TParent>;
}
export interface PopulateCredentialsPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPopulateServicesPayloadTypeResolver<TParent = any> {
    message?: PopulateServicesPayloadToMessageResolver<TParent>;
}
export interface PopulateServicesPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEmissionCarPayloadTypeResolver<TParent = any> {
    message?: EmissionCarPayloadToMessageResolver<TParent>;
}
export interface EmissionCarPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPrintEmissionPayloadTypeResolver<TParent = any> {
    message?: PrintEmissionPayloadToMessageResolver<TParent>;
}
export interface PrintEmissionPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateQuoteCoveragePayloadTypeResolver<TParent = any> {
    quoteCoverage?: CreateQuoteCoveragePayloadToQuoteCoverageResolver<TParent>;
}
export interface CreateQuoteCoveragePayloadToQuoteCoverageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateQuoteCoveragePayloadTypeResolver<TParent = any> {
    message?: UpdateQuoteCoveragePayloadToMessageResolver<TParent>;
}
export interface UpdateQuoteCoveragePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteQuoteCoveragePayloadTypeResolver<TParent = any> {
    message?: DeleteQuoteCoveragePayloadToMessageResolver<TParent>;
}
export interface DeleteQuoteCoveragePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAssociationWithQuoterProfilePayloadTypeResolver<TParent = any> {
    message?: AssociationWithQuoterProfilePayloadToMessageResolver<TParent>;
}
export interface AssociationWithQuoterProfilePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateQuotePayloadTypeResolver<TParent = any> {
    message?: UpdateQuotePayloadToMessageResolver<TParent>;
}
export interface UpdateQuotePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateInsurerCredentialPayloadTypeResolver<TParent = any> {
    message?: CreateInsurerCredentialPayloadToMessageResolver<TParent>;
}
export interface CreateInsurerCredentialPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateInsurerCredentialPayloadTypeResolver<TParent = any> {
    message?: UpdateInsurerCredentialPayloadToMessageResolver<TParent>;
}
export interface UpdateInsurerCredentialPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAssociationRelationCarPayloadTypeResolver<TParent = any> {
    message?: AssociationRelationCarPayloadToMessageResolver<TParent>;
}
export interface AssociationRelationCarPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateCoverageProjectPayloadTypeResolver<TParent = any> {
    message?: CreateCoverageProjectPayloadToMessageResolver<TParent>;
}
export interface CreateCoverageProjectPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateCoverageProjectPayloadTypeResolver<TParent = any> {
    message?: UpdateCoverageProjectPayloadToMessageResolver<TParent>;
}
export interface UpdateCoverageProjectPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateBatchCoverageProjectPayloadTypeResolver<TParent = any> {
    message?: UpdateBatchCoverageProjectPayloadToMessageResolver<TParent>;
}
export interface UpdateBatchCoverageProjectPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateApiServicePayloadTypeResolver<TParent = any> {
    apiService?: CreateApiServicePayloadToApiServiceResolver<TParent>;
}
export interface CreateApiServicePayloadToApiServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateApiServicePayloadTypeResolver<TParent = any> {
    message?: UpdateApiServicePayloadToMessageResolver<TParent>;
}
export interface UpdateApiServicePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicCustomMetaPayloadTypeResolver<TParent = any> {
    dynamicCustomMeta?: DynamicCustomMetaPayloadToDynamicCustomMetaResolver<TParent>;
}
export interface DynamicCustomMetaPayloadToDynamicCustomMetaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicCustomValuePayloadTypeResolver<TParent = any> {
    dynamicCustomValue?: DynamicCustomValuePayloadToDynamicCustomValueResolver<TParent>;
}
export interface DynamicCustomValuePayloadToDynamicCustomValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicPagePayloadTypeResolver<TParent = any> {
    dynamicPage?: DynamicPagePayloadToDynamicPageResolver<TParent>;
}
export interface DynamicPagePayloadToDynamicPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicBlockPayloadTypeResolver<TParent = any> {
    dynamicBlock?: DynamicBlockPayloadToDynamicBlockResolver<TParent>;
}
export interface DynamicBlockPayloadToDynamicBlockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicSectionPayloadTypeResolver<TParent = any> {
    dynamicSection?: DynamicSectionPayloadToDynamicSectionResolver<TParent>;
}
export interface DynamicSectionPayloadToDynamicSectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicSectionBlockPayloadTypeResolver<TParent = any> {
    dynamicSectionBlock?: DynamicSectionBlockPayloadToDynamicSectionBlockResolver<TParent>;
}
export interface DynamicSectionBlockPayloadToDynamicSectionBlockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDynamicTabPayloadTypeResolver<TParent = any> {
    dynamicTab?: DynamicTabPayloadToDynamicTabResolver<TParent>;
}
export interface DynamicTabPayloadToDynamicTabResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateChargePayloadTypeResolver<TParent = any> {
    message?: CreateChargePayloadToMessageResolver<TParent>;
}
export interface CreateChargePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateClinicHistoryPayloadTypeResolver<TParent = any> {
    message?: CreateClinicHistoryPayloadToMessageResolver<TParent>;
}
export interface CreateClinicHistoryPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateClinicHistoryMedicalBackgroundDetailPayloadTypeResolver<TParent = any> {
    message?: CreateClinicHistoryMedicalBackgroundDetailPayloadToMessageResolver<TParent>;
}
export interface CreateClinicHistoryMedicalBackgroundDetailPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateEventDetailPayloadTypeResolver<TParent = any> {
    message?: CreateEventDetailPayloadToMessageResolver<TParent>;
}
export interface CreateEventDetailPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateFisicExamPayloadTypeResolver<TParent = any> {
    message?: CreateFisicExamPayloadToMessageResolver<TParent>;
}
export interface CreateFisicExamPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateFormatPayloadTypeResolver<TParent = any> {
    format?: CreateFormatPayloadToFormatResolver<TParent>;
}
export interface CreateFormatPayloadToFormatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMedicalBackgroundDetailPayloadTypeResolver<TParent = any> {
    message?: CreateMedicalBackgroundDetailPayloadToMessageResolver<TParent>;
}
export interface CreateMedicalBackgroundDetailPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMedicalBackgroundPayloadTypeResolver<TParent = any> {
    message?: CreateMedicalBackgroundPayloadToMessageResolver<TParent>;
}
export interface CreateMedicalBackgroundPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMedicalConfigPayloadTypeResolver<TParent = any> {
    message?: CreateMedicalConfigPayloadToMessageResolver<TParent>;
}
export interface CreateMedicalConfigPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMedicalServicePaylodTypeResolver<TParent = any> {
    message?: CreateMedicalServicePaylodToMessageResolver<TParent>;
}
export interface CreateMedicalServicePaylodToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMedicinePayloadTypeResolver<TParent = any> {
    message?: CreateMedicinePayloadToMessageResolver<TParent>;
}
export interface CreateMedicinePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateVaccinePayloadTypeResolver<TParent = any> {
    message?: CreateVaccinePayloadToMessageResolver<TParent>;
}
export interface CreateVaccinePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateVitalSignsPayloadTypeResolver<TParent = any> {
    message?: CreateVitalSignsPayloadToMessageResolver<TParent>;
}
export interface CreateVitalSignsPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMedicRecipePayloadTypeResolver<TParent = any> {
    message?: CreateMedicRecipePayloadToMessageResolver<TParent>;
}
export interface CreateMedicRecipePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateRecipeConfigPaylodTypeResolver<TParent = any> {
    message?: CreateRecipeConfigPaylodToMessageResolver<TParent>;
}
export interface CreateRecipeConfigPaylodToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateRegistSesionPayloadTypeResolver<TParent = any> {
    message?: CreateRegistSesionPayloadToMessageResolver<TParent>;
}
export interface CreateRegistSesionPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreatePacientNotePayloadTypeResolver<TParent = any> {
    message?: CreatePacientNotePayloadToMessageResolver<TParent>;
}
export interface CreatePacientNotePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateDiagnosticPayloadTypeResolver<TParent = any> {
    message?: CreateDiagnosticPayloadToMessageResolver<TParent>;
}
export interface CreateDiagnosticPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateConsultNotePayloadTypeResolver<TParent = any> {
    message?: CreateConsultNotePayloadToMessageResolver<TParent>;
}
export interface CreateConsultNotePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMedicalBackgroundSetPayloadTypeResolver<TParent = any> {
    id?: CreateMedicalBackgroundSetPayloadToIdResolver<TParent>;
}
export interface CreateMedicalBackgroundSetPayloadToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreatePacientMedicalBackgroundPaylodTypeResolver<TParent = any> {
    message?: CreatePacientMedicalBackgroundPaylodToMessageResolver<TParent>;
}
export interface CreatePacientMedicalBackgroundPaylodToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreatePatientVitalSignsResponsePayloadTypeResolver<TParent = any> {
    message?: CreatePatientVitalSignsResponsePayloadToMessageResolver<TParent>;
}
export interface CreatePatientVitalSignsResponsePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateChargePayloadTypeResolver<TParent = any> {
    message?: UpdateChargePayloadToMessageResolver<TParent>;
}
export interface UpdateChargePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateClinicHistoryPayloadsTypeResolver<TParent = any> {
    message?: UpdateClinicHistoryPayloadsToMessageResolver<TParent>;
}
export interface UpdateClinicHistoryPayloadsToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateClinicHistoryMedicalBackgroundDetailPayloadTypeResolver<TParent = any> {
    message?: UpdateClinicHistoryMedicalBackgroundDetailPayloadToMessageResolver<TParent>;
}
export interface UpdateClinicHistoryMedicalBackgroundDetailPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateEventDetailtPayloadTypeResolver<TParent = any> {
    message?: UpdateEventDetailtPayloadToMessageResolver<TParent>;
}
export interface UpdateEventDetailtPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateFisicExamPayloadTypeResolver<TParent = any> {
    message?: UpdateFisicExamPayloadToMessageResolver<TParent>;
}
export interface UpdateFisicExamPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateFormatPayloadTypeResolver<TParent = any> {
    message?: UpdateFormatPayloadToMessageResolver<TParent>;
}
export interface UpdateFormatPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMedicalBackgroundDetailPayloadTypeResolver<TParent = any> {
    message?: UpdateMedicalBackgroundDetailPayloadToMessageResolver<TParent>;
}
export interface UpdateMedicalBackgroundDetailPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMedicalBackgroundPayloadTypeResolver<TParent = any> {
    message?: UpdateMedicalBackgroundPayloadToMessageResolver<TParent>;
}
export interface UpdateMedicalBackgroundPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMedicalConfigPayloadTypeResolver<TParent = any> {
    message?: UpdateMedicalConfigPayloadToMessageResolver<TParent>;
}
export interface UpdateMedicalConfigPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMedicalServicePayloadTypeResolver<TParent = any> {
    message?: UpdateMedicalServicePayloadToMessageResolver<TParent>;
}
export interface UpdateMedicalServicePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMedicinePayloadTypeResolver<TParent = any> {
    message?: UpdateMedicinePayloadToMessageResolver<TParent>;
}
export interface UpdateMedicinePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateVaccinePayloadTypeResolver<TParent = any> {
    message?: UpdateVaccinePayloadToMessageResolver<TParent>;
}
export interface UpdateVaccinePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateVitalSingsPayloadsTypeResolver<TParent = any> {
    message?: UpdateVitalSingsPayloadsToMessageResolver<TParent>;
}
export interface UpdateVitalSingsPayloadsToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMedicRecipePayloadTypeResolver<TParent = any> {
    message?: UpdateMedicRecipePayloadToMessageResolver<TParent>;
}
export interface UpdateMedicRecipePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateRecipeConfigPayloadTypeResolver<TParent = any> {
    message?: UpdateRecipeConfigPayloadToMessageResolver<TParent>;
}
export interface UpdateRecipeConfigPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateRegistSesionPayloadTypeResolver<TParent = any> {
    message?: UpdateRegistSesionPayloadToMessageResolver<TParent>;
}
export interface UpdateRegistSesionPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdatePacientNotePayloadTypeResolver<TParent = any> {
    message?: UpdatePacientNotePayloadToMessageResolver<TParent>;
}
export interface UpdatePacientNotePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateTherapyPayloadTypeResolver<TParent = any> {
    message?: UpdateTherapyPayloadToMessageResolver<TParent>;
}
export interface UpdateTherapyPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateDiagnosticPayloadTypeResolver<TParent = any> {
    message?: UpdateDiagnosticPayloadToMessageResolver<TParent>;
}
export interface UpdateDiagnosticPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateConsultNotePayloadTypeResolver<TParent = any> {
    message?: UpdateConsultNotePayloadToMessageResolver<TParent>;
}
export interface UpdateConsultNotePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdatePacientMedicalBackgroundPayloadTypeResolver<TParent = any> {
    message?: UpdatePacientMedicalBackgroundPayloadToMessageResolver<TParent>;
}
export interface UpdatePacientMedicalBackgroundPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateBillingRequestPayloadTypeResolver<TParent = any> {
    message?: UpdateBillingRequestPayloadToMessageResolver<TParent>;
}
export interface UpdateBillingRequestPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateSortFormatPayloadTypeResolver<TParent = any> {
    message?: UpdateSortFormatPayloadToMessageResolver<TParent>;
}
export interface UpdateSortFormatPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdatePatientVitalSignsResponsePayloadsTypeResolver<TParent = any> {
    message?: UpdatePatientVitalSignsResponsePayloadsToMessageResolver<TParent>;
}
export interface UpdatePatientVitalSignsResponsePayloadsToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteChargePayloadTypeResolver<TParent = any> {
    message?: DeleteChargePayloadToMessageResolver<TParent>;
}
export interface DeleteChargePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteClinicHistoryPayloadTypeResolver<TParent = any> {
    message?: DeleteClinicHistoryPayloadToMessageResolver<TParent>;
}
export interface DeleteClinicHistoryPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteClinicHistoryMedicalBackgroundDetailPayloadTypeResolver<TParent = any> {
    message?: DeleteClinicHistoryMedicalBackgroundDetailPayloadToMessageResolver<TParent>;
}
export interface DeleteClinicHistoryMedicalBackgroundDetailPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteConsultPayloadTypeResolver<TParent = any> {
    message?: DeleteConsultPayloadToMessageResolver<TParent>;
}
export interface DeleteConsultPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteFisicalExamPayloadTypeResolver<TParent = any> {
    message?: DeleteFisicalExamPayloadToMessageResolver<TParent>;
}
export interface DeleteFisicalExamPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMedicalBackgroundDetailPayloadTypeResolver<TParent = any> {
    message?: DeleteMedicalBackgroundDetailPayloadToMessageResolver<TParent>;
}
export interface DeleteMedicalBackgroundDetailPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMedicalBackgroundPayloadTypeResolver<TParent = any> {
    message?: DeleteMedicalBackgroundPayloadToMessageResolver<TParent>;
}
export interface DeleteMedicalBackgroundPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMedicalConfigPayloadTypeResolver<TParent = any> {
    message?: DeleteMedicalConfigPayloadToMessageResolver<TParent>;
}
export interface DeleteMedicalConfigPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMedicalServicePayloadTypeResolver<TParent = any> {
    message?: DeleteMedicalServicePayloadToMessageResolver<TParent>;
}
export interface DeleteMedicalServicePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMedicinePayloadTypeResolver<TParent = any> {
    message?: DeleteMedicinePayloadToMessageResolver<TParent>;
}
export interface DeleteMedicinePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteVaccinePayloadTypeResolver<TParent = any> {
    message?: DeleteVaccinePayloadToMessageResolver<TParent>;
}
export interface DeleteVaccinePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteVitalSignPayloadTypeResolver<TParent = any> {
    message?: DeleteVitalSignPayloadToMessageResolver<TParent>;
}
export interface DeleteVitalSignPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMedicRecipePayloadTypeResolver<TParent = any> {
    message?: DeleteMedicRecipePayloadToMessageResolver<TParent>;
}
export interface DeleteMedicRecipePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteRecipeConfigPayloadTypeResolver<TParent = any> {
    message?: DeleteRecipeConfigPayloadToMessageResolver<TParent>;
}
export interface DeleteRecipeConfigPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteRegistSesionPayloadTypeResolver<TParent = any> {
    message?: DeleteRegistSesionPayloadToMessageResolver<TParent>;
}
export interface DeleteRegistSesionPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteTherapyPayloadTypeResolver<TParent = any> {
    message?: DeleteTherapyPayloadToMessageResolver<TParent>;
}
export interface DeleteTherapyPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteDiagnosticPayloadTypeResolver<TParent = any> {
    message?: DeleteDiagnosticPayloadToMessageResolver<TParent>;
}
export interface DeleteDiagnosticPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteConsultNotePayloadTypeResolver<TParent = any> {
    message?: DeleteConsultNotePayloadToMessageResolver<TParent>;
}
export interface DeleteConsultNotePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeletePacientNotePayloadTypeResolver<TParent = any> {
    message?: DeletePacientNotePayloadToMessageResolver<TParent>;
}
export interface DeletePacientNotePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeletePacientMedicalBackgroundPayloadTypeResolver<TParent = any> {
    message?: DeletePacientMedicalBackgroundPayloadToMessageResolver<TParent>;
}
export interface DeletePacientMedicalBackgroundPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteBillingRequestPayloadTypeResolver<TParent = any> {
    message?: DeleteBillingRequestPayloadToMessageResolver<TParent>;
}
export interface DeleteBillingRequestPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteFormatPayloadTypeResolver<TParent = any> {
    message?: DeleteFormatPayloadToMessageResolver<TParent>;
}
export interface DeleteFormatPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreatePDFPayloadTypeResolver<TParent = any> {
    base64?: CreatePDFPayloadToBase64Resolver<TParent>;
}
export interface CreatePDFPayloadToBase64Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IOrderingMemberBoardPayloadTypeResolver<TParent = any> {
    memberBoard?: OrderingMemberBoardPayloadToMemberBoardResolver<TParent>;
}
export interface OrderingMemberBoardPayloadToMemberBoardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISpacePayloadTypeResolver<TParent = any> {
    space?: SpacePayloadToSpaceResolver<TParent>;
}
export interface SpacePayloadToSpaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberSpacePayloadTypeResolver<TParent = any> {
    memberSpace?: MemberSpacePayloadToMemberSpaceResolver<TParent>;
}
export interface MemberSpacePayloadToMemberSpaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardStatusPayloadTypeResolver<TParent = any> {
    boardStatus?: BoardStatusPayloadToBoardStatusResolver<TParent>;
}
export interface BoardStatusPayloadToBoardStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardPayloadTypeResolver<TParent = any> {
    board?: BoardPayloadToBoardResolver<TParent>;
}
export interface BoardPayloadToBoardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardListPayloadTypeResolver<TParent = any> {
    board?: BoardListPayloadToBoardResolver<TParent>;
}
export interface BoardListPayloadToBoardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardGroupColumnPayloadTypeResolver<TParent = any> {
    boardGroupColumn?: BoardGroupColumnPayloadToBoardGroupColumnResolver<TParent>;
}
export interface BoardGroupColumnPayloadToBoardGroupColumnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardColumnTypePayloadTypeResolver<TParent = any> {
    boardColumnType?: BoardColumnTypePayloadToBoardColumnTypeResolver<TParent>;
}
export interface BoardColumnTypePayloadToBoardColumnTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardColumnValuePayloadTypeResolver<TParent = any> {
    boardColumnValue?: BoardColumnValuePayloadToBoardColumnValueResolver<TParent>;
}
export interface BoardColumnValuePayloadToBoardColumnValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICardColumnValuePayloadTypeResolver<TParent = any> {
    cardColumnValue?: CardColumnValuePayloadToCardColumnValueResolver<TParent>;
}
export interface CardColumnValuePayloadToCardColumnValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardMemberReferencePayloadTypeResolver<TParent = any> {
    boardMemberReference?: BoardMemberReferencePayloadToBoardMemberReferenceResolver<TParent>;
}
export interface BoardMemberReferencePayloadToBoardMemberReferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBoardRowPayloadTypeResolver<TParent = any> {
    boardRow?: BoardRowPayloadToBoardRowResolver<TParent>;
}
export interface BoardRowPayloadToBoardRowResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICardPayloadTypeResolver<TParent = any> {
    card?: CardPayloadToCardResolver<TParent>;
}
export interface CardPayloadToCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICardChecklistPayloadTypeResolver<TParent = any> {
    cardChecklist?: CardChecklistPayloadToCardChecklistResolver<TParent>;
}
export interface CardChecklistPayloadToCardChecklistResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICardCheckComponentPayloadTypeResolver<TParent = any> {
    cardCheckComponent?: CardCheckComponentPayloadToCardCheckComponentResolver<TParent>;
}
export interface CardCheckComponentPayloadToCardCheckComponentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICardReplyPayloadTypeResolver<TParent = any> {
    cardReply?: CardReplyPayloadToCardReplyResolver<TParent>;
}
export interface CardReplyPayloadToCardReplyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface INestedFilesPayloadTypeResolver<TParent = any> {
    nestedFile?: NestedFilesPayloadToNestedFileResolver<TParent>;
}
export interface NestedFilesPayloadToNestedFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberCardPayloadTypeResolver<TParent = any> {
    memberCard?: MemberCardPayloadToMemberCardResolver<TParent>;
}
export interface MemberCardPayloadToMemberCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberBoardPayloadTypeResolver<TParent = any> {
    memberBoard?: MemberBoardPayloadToMemberBoardResolver<TParent>;
}
export interface MemberBoardPayloadToMemberBoardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMeasurePayloadTypeResolver<TParent = any> {
    message?: DeleteMeasurePayloadToMessageResolver<TParent>;
}
export interface DeleteMeasurePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMeasurePayloadTypeResolver<TParent = any> {
    message?: UpdateMeasurePayloadToMessageResolver<TParent>;
}
export interface UpdateMeasurePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMaterialCategoryPayloadTypeResolver<TParent = any> {
    message?: DeleteMaterialCategoryPayloadToMessageResolver<TParent>;
}
export interface DeleteMaterialCategoryPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMeasureValuePayloadTypeResolver<TParent = any> {
    measureValue?: CreateMeasureValuePayloadToMeasureValueResolver<TParent>;
}
export interface CreateMeasureValuePayloadToMeasureValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMeasureValuePayloadTypeResolver<TParent = any> {
    message?: UpdateMeasureValuePayloadToMessageResolver<TParent>;
}
export interface UpdateMeasureValuePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMeasureValuePayloadTypeResolver<TParent = any> {
    message?: DeleteMeasureValuePayloadToMessageResolver<TParent>;
}
export interface DeleteMeasureValuePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMeasureUnityTwoPayloadTypeResolver<TParent = any> {
    message?: DeleteMeasureUnityTwoPayloadToMessageResolver<TParent>;
}
export interface DeleteMeasureUnityTwoPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateModulePayloadTypeResolver<TParent = any> {
    message?: UpdateModulePayloadToMessageResolver<TParent>;
}
export interface UpdateModulePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMaterialQuotationPayloadTypeResolver<TParent = any> {
    materialQuotation?: CreateMaterialQuotationPayloadToMaterialQuotationResolver<TParent>;
}
export interface CreateMaterialQuotationPayloadToMaterialQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMaterialQuotationPayloadTypeResolver<TParent = any> {
    message?: UpdateMaterialQuotationPayloadToMessageResolver<TParent>;
}
export interface UpdateMaterialQuotationPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMaterialQuotationPayloadTypeResolver<TParent = any> {
    message?: DeleteMaterialQuotationPayloadToMessageResolver<TParent>;
}
export interface DeleteMaterialQuotationPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMaterialModulePayloadTypeResolver<TParent = any> {
    materialModule?: CreateMaterialModulePayloadToMaterialModuleResolver<TParent>;
}
export interface CreateMaterialModulePayloadToMaterialModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMaterialModulePayloadTypeResolver<TParent = any> {
    message?: UpdateMaterialModulePayloadToMessageResolver<TParent>;
}
export interface UpdateMaterialModulePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMaterialModulePayloadTypeResolver<TParent = any> {
    message?: DeleteMaterialModulePayloadToMessageResolver<TParent>;
}
export interface DeleteMaterialModulePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateUserCustomerPayloadTypeResolver<TParent = any> {
    userCustomer?: CreateUserCustomerPayloadToUserCustomerResolver<TParent>;
}
export interface CreateUserCustomerPayloadToUserCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMeasureUnityPayloadTypeResolver<TParent = any> {
    measureUnity?: CreateMeasureUnityPayloadToMeasureUnityResolver<TParent>;
}
export interface CreateMeasureUnityPayloadToMeasureUnityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMeasureUnityPayloadTypeResolver<TParent = any> {
    message?: UpdateMeasureUnityPayloadToMessageResolver<TParent>;
}
export interface UpdateMeasureUnityPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMeasureUnityPayloadTypeResolver<TParent = any> {
    message?: DeleteMeasureUnityPayloadToMessageResolver<TParent>;
}
export interface DeleteMeasureUnityPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateAttributePayloadTypeResolver<TParent = any> {
    attribute?: CreateAttributePayloadToAttributeResolver<TParent>;
}
export interface CreateAttributePayloadToAttributeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateAttributeValuePayloadTypeResolver<TParent = any> {
    attributeValue?: CreateAttributeValuePayloadToAttributeValueResolver<TParent>;
}
export interface CreateAttributeValuePayloadToAttributeValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateBuildingSiteAddressPayloadTypeResolver<TParent = any> {
    buildingSiteAddress?: CreateBuildingSiteAddressPayloadToBuildingSiteAddressResolver<TParent>;
}
export interface CreateBuildingSiteAddressPayloadToBuildingSiteAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMadreQuotationPayloadTypeResolver<TParent = any> {
    madreQuotation?: CreateMadreQuotationPayloadToMadreQuotationResolver<TParent>;
}
export interface CreateMadreQuotationPayloadToMadreQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMaterialCategoryPayloadTypeResolver<TParent = any> {
    materialCategory?: CreateMaterialCategoryPayloadToMaterialCategoryResolver<TParent>;
}
export interface CreateMaterialCategoryPayloadToMaterialCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMaterialCombinationPayloadTypeResolver<TParent = any> {
    materialCombination?: CreateMaterialCombinationPayloadToMaterialCombinationResolver<TParent>;
}
export interface CreateMaterialCombinationPayloadToMaterialCombinationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMaterialPayloadTypeResolver<TParent = any> {
    material?: CreateMaterialPayloadToMaterialResolver<TParent>;
}
export interface CreateMaterialPayloadToMaterialResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMaterialStockMeasurePayloadTypeResolver<TParent = any> {
    materialStockMeasure?: CreateMaterialStockMeasurePayloadToMaterialStockMeasureResolver<TParent>;
}
export interface CreateMaterialStockMeasurePayloadToMaterialStockMeasureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMaterialStockPayloadTypeResolver<TParent = any> {
    materialStock?: CreateMaterialStockPayloadToMaterialStockResolver<TParent>;
}
export interface CreateMaterialStockPayloadToMaterialStockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMaterialVariableQuotationPayloadTypeResolver<TParent = any> {
    materialVariableQuotation?: CreateMaterialVariableQuotationPayloadToMaterialVariableQuotationResolver<TParent>;
}
export interface CreateMaterialVariableQuotationPayloadToMaterialVariableQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMeasurePayloadTypeResolver<TParent = any> {
    measure?: CreateMeasurePayloadToMeasureResolver<TParent>;
}
export interface CreateMeasurePayloadToMeasureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMeasureTwoPayloadTypeResolver<TParent = any> {
    measureUnityTwo?: CreateMeasureTwoPayloadToMeasureUnityTwoResolver<TParent>;
}
export interface CreateMeasureTwoPayloadToMeasureUnityTwoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateModuleCategoryPayloadTypeResolver<TParent = any> {
    moduleCategory?: CreateModuleCategoryPayloadToModuleCategoryResolver<TParent>;
}
export interface CreateModuleCategoryPayloadToModuleCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateModulePayloadTypeResolver<TParent = any> {
    module?: CreateModulePayloadToModuleResolver<TParent>;
}
export interface CreateModulePayloadToModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateQuotationPayloadTypeResolver<TParent = any> {
    quotation?: CreateQuotationPayloadToQuotationResolver<TParent>;
}
export interface CreateQuotationPayloadToQuotationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateQuotationModulePayloadTypeResolver<TParent = any> {
    quotationModule?: CreateQuotationModulePayloadToQuotationModuleResolver<TParent>;
}
export interface CreateQuotationModulePayloadToQuotationModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateVariablePayloadTypeResolver<TParent = any> {
    variable?: CreateVariablePayloadToVariableResolver<TParent>;
}
export interface CreateVariablePayloadToVariableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteAttributePayloadTypeResolver<TParent = any> {
    message?: DeleteAttributePayloadToMessageResolver<TParent>;
}
export interface DeleteAttributePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteAttributeValuePayloadTypeResolver<TParent = any> {
    message?: DeleteAttributeValuePayloadToMessageResolver<TParent>;
}
export interface DeleteAttributeValuePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteBuildingSiteAddressPayloadTypeResolver<TParent = any> {
    message?: DeleteBuildingSiteAddressPayloadToMessageResolver<TParent>;
}
export interface DeleteBuildingSiteAddressPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMaterialCombinationPayloadTypeResolver<TParent = any> {
    message?: DeleteMaterialCombinationPayloadToMessageResolver<TParent>;
}
export interface DeleteMaterialCombinationPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMaterialPayloadTypeResolver<TParent = any> {
    message?: DeleteMaterialPayloadToMessageResolver<TParent>;
}
export interface DeleteMaterialPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMaterialStockPayloadTypeResolver<TParent = any> {
    message?: DeleteMaterialStockPayloadToMessageResolver<TParent>;
}
export interface DeleteMaterialStockPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMaterialStockMeasurePayloadTypeResolver<TParent = any> {
    message?: DeleteMaterialStockMeasurePayloadToMessageResolver<TParent>;
}
export interface DeleteMaterialStockMeasurePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMaterialVariableQuotationPayloadTypeResolver<TParent = any> {
    message?: DeleteMaterialVariableQuotationPayloadToMessageResolver<TParent>;
}
export interface DeleteMaterialVariableQuotationPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteModuleCategoryPayloadTypeResolver<TParent = any> {
    message?: DeleteModuleCategoryPayloadToMessageResolver<TParent>;
}
export interface DeleteModuleCategoryPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteModulePayloadTypeResolver<TParent = any> {
    message?: DeleteModulePayloadToMessageResolver<TParent>;
}
export interface DeleteModulePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteQuotationModulePayloadTypeResolver<TParent = any> {
    message?: DeleteQuotationModulePayloadToMessageResolver<TParent>;
}
export interface DeleteQuotationModulePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteQuotationPayloadTypeResolver<TParent = any> {
    message?: DeleteQuotationPayloadToMessageResolver<TParent>;
}
export interface DeleteQuotationPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteVariablePayloadTypeResolver<TParent = any> {
    message?: DeleteVariablePayloadToMessageResolver<TParent>;
}
export interface DeleteVariablePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateAttributePayloadTypeResolver<TParent = any> {
    message?: UpdateAttributePayloadToMessageResolver<TParent>;
}
export interface UpdateAttributePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateAttributeValuePayloadTypeResolver<TParent = any> {
    message?: UpdateAttributeValuePayloadToMessageResolver<TParent>;
}
export interface UpdateAttributeValuePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateBuildingSiteAddressPayloadTypeResolver<TParent = any> {
    message?: UpdateBuildingSiteAddressPayloadToMessageResolver<TParent>;
}
export interface UpdateBuildingSiteAddressPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMaterialCategoryPayloadTypeResolver<TParent = any> {
    message?: UpdateMaterialCategoryPayloadToMessageResolver<TParent>;
}
export interface UpdateMaterialCategoryPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMaterialCombinationPayloadTypeResolver<TParent = any> {
    message?: UpdateMaterialCombinationPayloadToMessageResolver<TParent>;
}
export interface UpdateMaterialCombinationPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMaterialPayloadTypeResolver<TParent = any> {
    message?: UpdateMaterialPayloadToMessageResolver<TParent>;
}
export interface UpdateMaterialPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMaterialStockMeasurePayloadTypeResolver<TParent = any> {
    message?: UpdateMaterialStockMeasurePayloadToMessageResolver<TParent>;
}
export interface UpdateMaterialStockMeasurePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMaterialStockPayloadTypeResolver<TParent = any> {
    message?: UpdateMaterialStockPayloadToMessageResolver<TParent>;
}
export interface UpdateMaterialStockPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMadreQuotationPayloadTypeResolver<TParent = any> {
    message?: UpdateMadreQuotationPayloadToMessageResolver<TParent>;
}
export interface UpdateMadreQuotationPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMadreQuotationPayloadTypeResolver<TParent = any> {
    message?: DeleteMadreQuotationPayloadToMessageResolver<TParent>;
}
export interface DeleteMadreQuotationPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMaterialVariableQuotationPayloadTypeResolver<TParent = any> {
    message?: UpdateMaterialVariableQuotationPayloadToMessageResolver<TParent>;
}
export interface UpdateMaterialVariableQuotationPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMeasureUnityTwoPayloadTypeResolver<TParent = any> {
    message?: UpdateMeasureUnityTwoPayloadToMessageResolver<TParent>;
}
export interface UpdateMeasureUnityTwoPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateModuleCategoryPayloadTypeResolver<TParent = any> {
    message?: UpdateModuleCategoryPayloadToMessageResolver<TParent>;
}
export interface UpdateModuleCategoryPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateQuotationModulePayloadTypeResolver<TParent = any> {
    message?: UpdateQuotationModulePayloadToMessageResolver<TParent>;
}
export interface UpdateQuotationModulePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateQuotationPayloadTypeResolver<TParent = any> {
    message?: UpdateQuotationPayloadToMessageResolver<TParent>;
}
export interface UpdateQuotationPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateVariablePayloadTypeResolver<TParent = any> {
    message?: UpdateVariablePayloadToMessageResolver<TParent>;
}
export interface UpdateVariablePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateAnalysisPayloadTypeResolver<TParent = any> {
    analysis?: UpdateAnalysisPayloadToAnalysisResolver<TParent>;
}
export interface UpdateAnalysisPayloadToAnalysisResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateClientPayloadTypeResolver<TParent = any> {
    client?: CreateClientPayloadToClientResolver<TParent>;
}
export interface CreateClientPayloadToClientResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateClientPayloadTypeResolver<TParent = any> {
    client?: UpdateClientPayloadToClientResolver<TParent>;
}
export interface UpdateClientPayloadToClientResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateConsultPayloadTypeResolver<TParent = any> {
    consult?: CreateConsultPayloadToConsultResolver<TParent>;
}
export interface CreateConsultPayloadToConsultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateConsultPayloadTypeResolver<TParent = any> {
    consult?: UpdateConsultPayloadToConsultResolver<TParent>;
}
export interface UpdateConsultPayloadToConsultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateComparedPayloadTypeResolver<TParent = any> {
    compared?: CreateComparedPayloadToComparedResolver<TParent>;
}
export interface CreateComparedPayloadToComparedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateComparedPayloadTypeResolver<TParent = any> {
    compared?: UpdateComparedPayloadToComparedResolver<TParent>;
}
export interface UpdateComparedPayloadToComparedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteComparedPayloadTypeResolver<TParent = any> {
    message?: DeleteComparedPayloadToMessageResolver<TParent>;
}
export interface DeleteComparedPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateCarMercadoPayloadTypeResolver<TParent = any> {
    carMercado?: CreateCarMercadoPayloadToCarMercadoResolver<TParent>;
}
export interface CreateCarMercadoPayloadToCarMercadoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateCarMercadoMassivePayloadTypeResolver<TParent = any> {
    carMercado?: CreateCarMercadoMassivePayloadToCarMercadoResolver<TParent>;
}
export interface CreateCarMercadoMassivePayloadToCarMercadoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteCarMercadoPayloadTypeResolver<TParent = any> {
    message?: DeleteCarMercadoPayloadToMessageResolver<TParent>;
}
export interface DeleteCarMercadoPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IZipFolderContentPayloadTypeResolver<TParent = any> {
    fileUrl?: ZipFolderContentPayloadToFileUrlResolver<TParent>;
}
export interface ZipFolderContentPayloadToFileUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFolderPayloadTypeResolver<TParent = any> {
    message?: FolderPayloadToMessageResolver<TParent>;
}
export interface FolderPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteFolderPayLoadTypeResolver<TParent = any> {
    message?: DeleteFolderPayLoadToMessageResolver<TParent>;
}
export interface DeleteFolderPayLoadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateFilePayloadTypeResolver<TParent = any> {
    message?: CreateFilePayloadToMessageResolver<TParent>;
}
export interface CreateFilePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateFilesPayloadTypeResolver<TParent = any> {
    message?: UpdateFilesPayloadToMessageResolver<TParent>;
}
export interface UpdateFilesPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteFilePayLoadTypeResolver<TParent = any> {
    message?: DeleteFilePayLoadToMessageResolver<TParent>;
}
export interface DeleteFilePayLoadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IShareFilePayloadTypeResolver<TParent = any> {
    sharedFile?: ShareFilePayloadToSharedFileResolver<TParent>;
}
export interface ShareFilePayloadToSharedFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IShareFolderPayloadTypeResolver<TParent = any> {
    sharedFolders?: ShareFolderPayloadToSharedFoldersResolver<TParent>;
}
export interface ShareFolderPayloadToSharedFoldersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStopSharingFolderPayloadTypeResolver<TParent = any> {
    message?: StopSharingFolderPayloadToMessageResolver<TParent>;
}
export interface StopSharingFolderPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStopSharingFilePayloadTypeResolver<TParent = any> {
    message?: StopSharingFilePayloadToMessageResolver<TParent>;
}
export interface StopSharingFilePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUploadFilePrivatePayloadTypeResolver<TParent = any> {
    fileId?: UploadFilePrivatePayloadToFileIdResolver<TParent>;
    url?: UploadFilePrivatePayloadToUrlResolver<TParent>;
    message?: UploadFilePrivatePayloadToMessageResolver<TParent>;
    token?: UploadFilePrivatePayloadToTokenResolver<TParent>;
    partialUrl?: UploadFilePrivatePayloadToPartialUrlResolver<TParent>;
}
export interface UploadFilePrivatePayloadToFileIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface UploadFilePrivatePayloadToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface UploadFilePrivatePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface UploadFilePrivatePayloadToTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface UploadFilePrivatePayloadToPartialUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAddChatMemberPayloadTypeResolver<TParent = any> {
    conversationReplies?: AddChatMemberPayloadToConversationRepliesResolver<TParent>;
}
export interface AddChatMemberPayloadToConversationRepliesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAddChatMemberWsPayloadTypeResolver<TParent = any> {
    conversationReplies?: AddChatMemberWsPayloadToConversationRepliesResolver<TParent>;
}
export interface AddChatMemberWsPayloadToConversationRepliesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IGetConversationIdPayloadTypeResolver<TParent = any> {
    conversationId?: GetConversationIdPayloadToConversationIdResolver<TParent>;
}
export interface GetConversationIdPayloadToConversationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteReplyPayloadTypeResolver<TParent = any> {
    message?: DeleteReplyPayloadToMessageResolver<TParent>;
}
export interface DeleteReplyPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IWalletPayloadTypeResolver<TParent = any> {
    eWallet?: WalletPayloadToEWalletResolver<TParent>;
}
export interface WalletPayloadToEWalletResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IWalletTransactionPayloadTypeResolver<TParent = any> {
    walletTransaction?: WalletTransactionPayloadToWalletTransactionResolver<TParent>;
    publicKey?: WalletTransactionPayloadToPublicKeyResolver<TParent>;
}
export interface WalletTransactionPayloadToWalletTransactionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface WalletTransactionPayloadToPublicKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMultipleWalletTransactionPayloadTypeResolver<TParent = any> {
    transactions?: MultipleWalletTransactionPayloadToTransactionsResolver<TParent>;
}
export interface MultipleWalletTransactionPayloadToTransactionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IWalletTransactionStatusPayloadTypeResolver<TParent = any> {
    walletTransactionStatus?: WalletTransactionStatusPayloadToWalletTransactionStatusResolver<TParent>;
}
export interface WalletTransactionStatusPayloadToWalletTransactionStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IWalletTransactionMemberRelationPayloadTypeResolver<TParent = any> {
    walletTransactionMember?: WalletTransactionMemberRelationPayloadToWalletTransactionMemberResolver<TParent>;
}
export interface WalletTransactionMemberRelationPayloadToWalletTransactionMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberWalletPayloadTypeResolver<TParent = any> {
    memberWallet?: MemberWalletPayloadToMemberWalletResolver<TParent>;
}
export interface MemberWalletPayloadToMemberWalletResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectWalletKeyPayloadTypeResolver<TParent = any> {
    projectWalletKey?: ProjectWalletKeyPayloadToProjectWalletKeyResolver<TParent>;
}
export interface ProjectWalletKeyPayloadToProjectWalletKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectWalletKeyTypeResolver<TParent = any> {
    projectId?: ProjectWalletKeyToProjectIdResolver<TParent>;
    publicKey?: ProjectWalletKeyToPublicKeyResolver<TParent>;
    service?: ProjectWalletKeyToServiceResolver<TParent>;
    id?: ProjectWalletKeyToIdResolver<TParent>;
    createdAt?: ProjectWalletKeyToCreatedAtResolver<TParent>;
    updatedAt?: ProjectWalletKeyToUpdatedAtResolver<TParent>;
}
export interface ProjectWalletKeyToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectWalletKeyToPublicKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectWalletKeyToServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectWalletKeyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectWalletKeyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ProjectWalletKeyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateCertificateMovementPayloadTypeResolver<TParent = any> {
    certificateMovement?: CreateCertificateMovementPayloadToCertificateMovementResolver<TParent>;
}
export interface CreateCertificateMovementPayloadToCertificateMovementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteCertificatePayloadTypeResolver<TParent = any> {
    message?: DeleteCertificatePayloadToMessageResolver<TParent>;
}
export interface DeleteCertificatePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateInsurerModulePayloadTypeResolver<TParent = any> {
    message?: UpdateInsurerModulePayloadToMessageResolver<TParent>;
}
export interface UpdateInsurerModulePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateInsurerModulePayloadTypeResolver<TParent = any> {
    insurerModule?: CreateInsurerModulePayloadToInsurerModuleResolver<TParent>;
}
export interface CreateInsurerModulePayloadToInsurerModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreatePolicyModulePayloadTypeResolver<TParent = any> {
    policyModule?: CreatePolicyModulePayloadToPolicyModuleResolver<TParent>;
}
export interface CreatePolicyModulePayloadToPolicyModuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdatePolicyModulePayloadTypeResolver<TParent = any> {
    message?: UpdatePolicyModulePayloadToMessageResolver<TParent>;
}
export interface UpdatePolicyModulePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeletePolicyModulePayloadTypeResolver<TParent = any> {
    message?: DeletePolicyModulePayloadToMessageResolver<TParent>;
}
export interface DeletePolicyModulePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateInsurerFeePayloadTypeResolver<TParent = any> {
    insurerFee?: CreateInsurerFeePayloadToInsurerFeeResolver<TParent>;
}
export interface CreateInsurerFeePayloadToInsurerFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteInsurerFeePayloadTypeResolver<TParent = any> {
    message?: DeleteInsurerFeePayloadToMessageResolver<TParent>;
}
export interface DeleteInsurerFeePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateInsurerFeePayloadTypeResolver<TParent = any> {
    message?: UpdateInsurerFeePayloadToMessageResolver<TParent>;
}
export interface UpdateInsurerFeePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreatePolicyPayloadTypeResolver<TParent = any> {
    policy?: CreatePolicyPayloadToPolicyResolver<TParent>;
}
export interface CreatePolicyPayloadToPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICancelCertificatePayloadTypeResolver<TParent = any> {
    message?: CancelCertificatePayloadToMessageResolver<TParent>;
}
export interface CancelCertificatePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateBeneficiaryPayloadTypeResolver<TParent = any> {
    beneficiary?: CreateBeneficiaryPayloadToBeneficiaryResolver<TParent>;
}
export interface CreateBeneficiaryPayloadToBeneficiaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateCertificatePayloadTypeResolver<TParent = any> {
    certificate?: CreateCertificatePayloadToCertificateResolver<TParent>;
}
export interface CreateCertificatePayloadToCertificateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateCertificateFilePayloadTypeResolver<TParent = any> {
    message?: CreateCertificateFilePayloadToMessageResolver<TParent>;
}
export interface CreateCertificateFilePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateContactPayloadTypeResolver<TParent = any> {
    contact?: CreateContactPayloadToContactResolver<TParent>;
}
export interface CreateContactPayloadToContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateContractorBranchOfficePayloadTypeResolver<TParent = any> {
    contractorBranchOffice?: CreateContractorBranchOfficePayloadToContractorBranchOfficeResolver<TParent>;
}
export interface CreateContractorBranchOfficePayloadToContractorBranchOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateContractorContactPayloadTypeResolver<TParent = any> {
    contractorContact?: CreateContractorContactPayloadToContractorContactResolver<TParent>;
}
export interface CreateContractorContactPayloadToContractorContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateContractorPayloadTypeResolver<TParent = any> {
    contractor?: CreateContractorPayloadToContractorResolver<TParent>;
}
export interface CreateContractorPayloadToContractorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateContractorPolicyPayloadTypeResolver<TParent = any> {
    contractorPolicy?: CreateContractorPolicyPayloadToContractorPolicyResolver<TParent>;
}
export interface CreateContractorPolicyPayloadToContractorPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateCountryRequestPayloadTypeResolver<TParent = any> {
    countryRequest?: CreateCountryRequestPayloadToCountryRequestResolver<TParent>;
}
export interface CreateCountryRequestPayloadToCountryRequestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateFeePayloadTypeResolver<TParent = any> {
    fee?: CreateFeePayloadToFeeResolver<TParent>;
}
export interface CreateFeePayloadToFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateInsurerCompanyPayloadTypeResolver<TParent = any> {
    insurerCompany?: CreateInsurerCompanyPayloadToInsurerCompanyResolver<TParent>;
}
export interface CreateInsurerCompanyPayloadToInsurerCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateIssuedReportPayloadTypeResolver<TParent = any> {
    issuedReport?: CreateIssuedReportPayloadToIssuedReportResolver<TParent>;
}
export interface CreateIssuedReportPayloadToIssuedReportResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IIssuedReportTypeResolver<TParent = any> {
    name?: IssuedReportToNameResolver<TParent>;
    url?: IssuedReportToUrlResolver<TParent>;
    projectId?: IssuedReportToProjectIdResolver<TParent>;
    id?: IssuedReportToIdResolver<TParent>;
    createdAt?: IssuedReportToCreatedAtResolver<TParent>;
    updatedAt?: IssuedReportToUpdatedAtResolver<TParent>;
}
export interface IssuedReportToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IssuedReportToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IssuedReportToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IssuedReportToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IssuedReportToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IssuedReportToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMerchandiseDetailPayloadTypeResolver<TParent = any> {
    merchandiseDetail?: CreateMerchandiseDetailPayloadToMerchandiseDetailResolver<TParent>;
}
export interface CreateMerchandiseDetailPayloadToMerchandiseDetailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMerchandisePayloadTypeResolver<TParent = any> {
    merchandise?: CreateMerchandisePayloadToMerchandiseResolver<TParent>;
}
export interface CreateMerchandisePayloadToMerchandiseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMoneyPayloadTypeResolver<TParent = any> {
    money?: CreateMoneyPayloadToMoneyResolver<TParent>;
}
export interface CreateMoneyPayloadToMoneyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateMoneyPolicyPayloadTypeResolver<TParent = any> {
    moneyPolicy?: CreateMoneyPolicyPayloadToMoneyPolicyResolver<TParent>;
}
export interface CreateMoneyPolicyPayloadToMoneyPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMoneyPolicyTypeResolver<TParent = any> {
    moneyId?: MoneyPolicyToMoneyIdResolver<TParent>;
    policyId?: MoneyPolicyToPolicyIdResolver<TParent>;
    money?: MoneyPolicyToMoneyResolver<TParent>;
    policy?: MoneyPolicyToPolicyResolver<TParent>;
    projectId?: MoneyPolicyToProjectIdResolver<TParent>;
    id?: MoneyPolicyToIdResolver<TParent>;
    createdAt?: MoneyPolicyToCreatedAtResolver<TParent>;
    updatedAt?: MoneyPolicyToUpdatedAtResolver<TParent>;
}
export interface MoneyPolicyToMoneyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MoneyPolicyToPolicyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MoneyPolicyToMoneyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MoneyPolicyToPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MoneyPolicyToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MoneyPolicyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MoneyPolicyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface MoneyPolicyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteBeneficiaryPayloadTypeResolver<TParent = any> {
    message?: DeleteBeneficiaryPayloadToMessageResolver<TParent>;
}
export interface DeleteBeneficiaryPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteContactPayloadTypeResolver<TParent = any> {
    message?: DeleteContactPayloadToMessageResolver<TParent>;
}
export interface DeleteContactPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteContractorPayloadTypeResolver<TParent = any> {
    message?: DeleteContractorPayloadToMessageResolver<TParent>;
}
export interface DeleteContractorPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteContractorOfficePayloadTypeResolver<TParent = any> {
    message?: DeleteContractorOfficePayloadToMessageResolver<TParent>;
}
export interface DeleteContractorOfficePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteContractorPolicyPayloadTypeResolver<TParent = any> {
    message?: DeleteContractorPolicyPayloadToMessageResolver<TParent>;
}
export interface DeleteContractorPolicyPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteInsurerModulePayloadTypeResolver<TParent = any> {
    message?: DeleteInsurerModulePayloadToMessageResolver<TParent>;
}
export interface DeleteInsurerModulePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteFeePayloadTypeResolver<TParent = any> {
    message?: DeleteFeePayloadToMessageResolver<TParent>;
}
export interface DeleteFeePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMerchandisePayloadTypeResolver<TParent = any> {
    message?: DeleteMerchandisePayloadToMessageResolver<TParent>;
}
export interface DeleteMerchandisePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteInsurerCompanyPayloadTypeResolver<TParent = any> {
    message?: DeleteInsurerCompanyPayloadToMessageResolver<TParent>;
}
export interface DeleteInsurerCompanyPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteMoneyPayloadTypeResolver<TParent = any> {
    message?: DeleteMoneyPayloadToMessageResolver<TParent>;
}
export interface DeleteMoneyPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeletePolicyPayloadTypeResolver<TParent = any> {
    message?: DeletePolicyPayloadToMessageResolver<TParent>;
}
export interface DeletePolicyPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateBeneficiaryPayloadTypeResolver<TParent = any> {
    message?: UpdateBeneficiaryPayloadToMessageResolver<TParent>;
}
export interface UpdateBeneficiaryPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateCertificatePayloadTypeResolver<TParent = any> {
    message?: UpdateCertificatePayloadToMessageResolver<TParent>;
}
export interface UpdateCertificatePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateContactPayloadTypeResolver<TParent = any> {
    message?: UpdateContactPayloadToMessageResolver<TParent>;
}
export interface UpdateContactPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateContractorPayloadTypeResolver<TParent = any> {
    message?: UpdateContractorPayloadToMessageResolver<TParent>;
}
export interface UpdateContractorPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateFeePayloadTypeResolver<TParent = any> {
    message?: UpdateFeePayloadToMessageResolver<TParent>;
}
export interface UpdateFeePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateInsurerCompanyPayloadTypeResolver<TParent = any> {
    message?: UpdateInsurerCompanyPayloadToMessageResolver<TParent>;
}
export interface UpdateInsurerCompanyPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMerchandisePayloadTypeResolver<TParent = any> {
    message?: UpdateMerchandisePayloadToMessageResolver<TParent>;
}
export interface UpdateMerchandisePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateMoneyPayloadTypeResolver<TParent = any> {
    message?: UpdateMoneyPayloadToMessageResolver<TParent>;
}
export interface UpdateMoneyPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdatePolicyPayloadTypeResolver<TParent = any> {
    message?: UpdatePolicyPayloadToMessageResolver<TParent>;
}
export interface UpdatePolicyPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAttendancePayloadTypeResolver<TParent = any> {
    attendance?: AttendancePayloadToAttendanceResolver<TParent>;
}
export interface AttendancePayloadToAttendanceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IClassroomPayloadTypeResolver<TParent = any> {
    classroom?: ClassroomPayloadToClassroomResolver<TParent>;
}
export interface ClassroomPayloadToClassroomResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDayServicePayloadTypeResolver<TParent = any> {
    dayService?: DayServicePayloadToDayServiceResolver<TParent>;
}
export interface DayServicePayloadToDayServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IGradePayloadTypeResolver<TParent = any> {
    grade?: GradePayloadToGradeResolver<TParent>;
}
export interface GradePayloadToGradeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ILevelPayloadTypeResolver<TParent = any> {
    level?: LevelPayloadToLevelResolver<TParent>;
}
export interface LevelPayloadToLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISchoolPayloadTypeResolver<TParent = any> {
    school?: SchoolPayloadToSchoolResolver<TParent>;
}
export interface SchoolPayloadToSchoolResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStudentPayloadTypeResolver<TParent = any> {
    student?: StudentPayloadToStudentResolver<TParent>;
}
export interface StudentPayloadToStudentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateBulkStudentPayloadTypeResolver<TParent = any> {
    message?: CreateBulkStudentPayloadToMessageResolver<TParent>;
}
export interface CreateBulkStudentPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBeneficiariePayloadTypeResolver<TParent = any> {
    beneficiarie?: BeneficiariePayloadToBeneficiarieResolver<TParent>;
}
export interface BeneficiariePayloadToBeneficiarieResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFormAccidentDiseasePayloadTypeResolver<TParent = any> {
    formAccidentDisease?: FormAccidentDiseasePayloadToFormAccidentDiseaseResolver<TParent>;
}
export interface FormAccidentDiseasePayloadToFormAccidentDiseaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFormAutomobileDamagePayloadTypeResolver<TParent = any> {
    formAutomobileDamage?: FormAutomobileDamagePayloadToFormAutomobileDamageResolver<TParent>;
}
export interface FormAutomobileDamagePayloadToFormAutomobileDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFormCarCatalogPayloadTypeResolver<TParent = any> {
    formCarCatalog?: FormCarCatalogPayloadToFormCarCatalogResolver<TParent>;
}
export interface FormCarCatalogPayloadToFormCarCatalogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFormDamagePayloadTypeResolver<TParent = any> {
    formDamage?: FormDamagePayloadToFormDamageResolver<TParent>;
}
export interface FormDamagePayloadToFormDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IFormLifePayloadTypeResolver<TParent = any> {
    formLife?: FormLifePayloadToFormLifeResolver<TParent>;
}
export interface FormLifePayloadToFormLifeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInvolvedReferrerPayloadTypeResolver<TParent = any> {
    involvedReferrer?: InvolvedReferrerPayloadToInvolvedReferrerResolver<TParent>;
}
export interface InvolvedReferrerPayloadToInvolvedReferrerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IOldPolicePayloadTypeResolver<TParent = any> {
    oldPolice?: OldPolicePayloadToOldPoliceResolver<TParent>;
}
export interface OldPolicePayloadToOldPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPersonalInformationPayloadTypeResolver<TParent = any> {
    personalInformation?: PersonalInformationPayloadToPersonalInformationResolver<TParent>;
}
export interface PersonalInformationPayloadToPersonalInformationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPolicePayloadTypeResolver<TParent = any> {
    police?: PolicePayloadToPoliceResolver<TParent>;
}
export interface PolicePayloadToPoliceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceAssignPayloadTypeResolver<TParent = any> {
    policeAssign?: PoliceAssignPayloadToPoliceAssignResolver<TParent>;
}
export interface PoliceAssignPayloadToPoliceAssignResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPolicePendientPayloadTypeResolver<TParent = any> {
    policePendient?: PolicePendientPayloadToPolicePendientResolver<TParent>;
}
export interface PolicePendientPayloadToPolicePendientResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceQuotePayloadTypeResolver<TParent = any> {
    policeQuote?: PoliceQuotePayloadToPoliceQuoteResolver<TParent>;
}
export interface PoliceQuotePayloadToPoliceQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceQuotePrimaPayloadTypeResolver<TParent = any> {
    policeQuotePrima?: PoliceQuotePrimaPayloadToPoliceQuotePrimaResolver<TParent>;
}
export interface PoliceQuotePrimaPayloadToPoliceQuotePrimaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IRelationShipPayloadTypeResolver<TParent = any> {
    relationShip?: RelationShipPayloadToRelationShipResolver<TParent>;
}
export interface RelationShipPayloadToRelationShipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISucursalPayloadTypeResolver<TParent = any> {
    sucursal?: SucursalPayloadToSucursalResolver<TParent>;
}
export interface SucursalPayloadToSucursalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAgentKeyPayloadTypeResolver<TParent = any> {
    agentKey?: AgentKeyPayloadToAgentKeyResolver<TParent>;
}
export interface AgentKeyPayloadToAgentKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAgentProviderContactPayloadTypeResolver<TParent = any> {
    agentProviderContact?: AgentProviderContactPayloadToAgentProviderContactResolver<TParent>;
}
export interface AgentProviderContactPayloadToAgentProviderContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAgentProviderPayloadTypeResolver<TParent = any> {
    agentProvider?: AgentProviderPayloadToAgentProviderResolver<TParent>;
}
export interface AgentProviderPayloadToAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IBranchPayloadTypeResolver<TParent = any> {
    branch?: BranchPayloadToBranchResolver<TParent>;
}
export interface BranchPayloadToBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IComissionPayloadTypeResolver<TParent = any> {
    comission?: ComissionPayloadToComissionResolver<TParent>;
}
export interface ComissionPayloadToComissionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorCelulaPayloadTypeResolver<TParent = any> {
    contractorCelula?: ContractorCelulaPayloadToContractorCelulaResolver<TParent>;
}
export interface ContractorCelulaPayloadToContractorCelulaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorClassificationPayloadTypeResolver<TParent = any> {
    contractorClassification?: ContractorClassificationPayloadToContractorClassificationResolver<TParent>;
}
export interface ContractorClassificationPayloadToContractorClassificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorGroupingLevelPayloadTypeResolver<TParent = any> {
    contractorGroupingLevel?: ContractorGroupingLevelPayloadToContractorGroupingLevelResolver<TParent>;
}
export interface ContractorGroupingLevelPayloadToContractorGroupingLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorPayloadTypeResolver<TParent = any> {
    contractor?: ContractorPayloadToContractorResolver<TParent>;
}
export interface ContractorPayloadToContractorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IContractorProcessDocumentPayloadTypeResolver<TParent = any> {
    contractorProcessDocument?: ContractorProcessDocumentPayloadToContractorProcessDocumentResolver<TParent>;
}
export interface ContractorProcessDocumentPayloadToContractorProcessDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoverageCoinsurancePayloadTypeResolver<TParent = any> {
    coverageCoinsurance?: CoverageCoinsurancePayloadToCoverageCoinsuranceResolver<TParent>;
}
export interface CoverageCoinsurancePayloadToCoverageCoinsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoverageDeductiblePayloadTypeResolver<TParent = any> {
    coverageDeductible?: CoverageDeductiblePayloadToCoverageDeductibleResolver<TParent>;
}
export interface CoverageDeductiblePayloadToCoverageDeductibleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoverageInPolicyPayloadTypeResolver<TParent = any> {
    coverageInPolicy?: CoverageInPolicyPayloadToCoverageInPolicyResolver<TParent>;
}
export interface CoverageInPolicyPayloadToCoverageInPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoveragePayloadTypeResolver<TParent = any> {
    coverage?: CoveragePayloadToCoverageResolver<TParent>;
}
export interface CoveragePayloadToCoverageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoveragePackagePayloadTypeResolver<TParent = any> {
    coveragePackage?: CoveragePackagePayloadToCoveragePackageResolver<TParent>;
}
export interface CoveragePackagePayloadToCoveragePackageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoverageSuminsuredPayloadTypeResolver<TParent = any> {
    coverageSuminsured?: CoverageSuminsuredPayloadToCoverageSuminsuredResolver<TParent>;
}
export interface CoverageSuminsuredPayloadToCoverageSuminsuredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICoverageTopecoinsurancePayloadTypeResolver<TParent = any> {
    coverageTopecoinsurance?: CoverageTopecoinsurancePayloadToCoverageTopecoinsuranceResolver<TParent>;
}
export interface CoverageTopecoinsurancePayloadToCoverageTopecoinsuranceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProcessDocumentPayloadTypeResolver<TParent = any> {
    processDocument?: ProcessDocumentPayloadToProcessDocumentResolver<TParent>;
}
export interface ProcessDocumentPayloadToProcessDocumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectAgentProviderBranchPayloadTypeResolver<TParent = any> {
    projectAgentProviderBranch?: ProjectAgentProviderBranchPayloadToProjectAgentProviderBranchResolver<TParent>;
}
export interface ProjectAgentProviderBranchPayloadToProjectAgentProviderBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectAgentProviderPayloadTypeResolver<TParent = any> {
    projectAgentProvider?: ProjectAgentProviderPayloadToProjectAgentProviderResolver<TParent>;
}
export interface ProjectAgentProviderPayloadToProjectAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IReferrerAccountStatePayloadTypeResolver<TParent = any> {
    referrerAccountState?: ReferrerAccountStatePayloadToReferrerAccountStateResolver<TParent>;
}
export interface ReferrerAccountStatePayloadToReferrerAccountStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IReferrerBranchPayloadTypeResolver<TParent = any> {
    referrerBranch?: ReferrerBranchPayloadToReferrerBranchResolver<TParent>;
}
export interface ReferrerBranchPayloadToReferrerBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IReferrerPayloadTypeResolver<TParent = any> {
    referrer?: ReferrerPayloadToReferrerResolver<TParent>;
}
export interface ReferrerPayloadToReferrerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IResponsableInvolvedPayloadTypeResolver<TParent = any> {
    responsableInvolved?: ResponsableInvolvedPayloadToResponsableInvolvedResolver<TParent>;
}
export interface ResponsableInvolvedPayloadToResponsableInvolvedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISubBranchPayloadTypeResolver<TParent = any> {
    subbranch?: SubBranchPayloadToSubbranchResolver<TParent>;
}
export interface SubBranchPayloadToSubbranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IProjectAgentProviderEmailReminderPayloadTypeResolver<TParent = any> {
    projectAgentProviderEmailReminder?: ProjectAgentProviderEmailReminderPayloadToProjectAgentProviderEmailReminderResolver<TParent>;
}
export interface ProjectAgentProviderEmailReminderPayloadToProjectAgentProviderEmailReminderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEndorsementPayloadTypeResolver<TParent = any> {
    endorsement?: EndorsementPayloadToEndorsementResolver<TParent>;
}
export interface EndorsementPayloadToEndorsementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IEndorsementCertPayloadTypeResolver<TParent = any> {
    endorsementCert?: EndorsementCertPayloadToEndorsementCertResolver<TParent>;
}
export interface EndorsementCertPayloadToEndorsementCertResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterPayloadTypeResolver<TParent = any> {
    sinister?: SinisterPayloadToSinisterResolver<TParent>;
}
export interface SinisterPayloadToSinisterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterAilingPayloadTypeResolver<TParent = any> {
    sinisterAiling?: SinisterAilingPayloadToSinisterAilingResolver<TParent>;
}
export interface SinisterAilingPayloadToSinisterAilingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterCarPayloadTypeResolver<TParent = any> {
    sinisterCar?: SinisterCarPayloadToSinisterCarResolver<TParent>;
}
export interface SinisterCarPayloadToSinisterCarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterCarContactPayloadTypeResolver<TParent = any> {
    sinisterCarContact?: SinisterCarContactPayloadToSinisterCarContactResolver<TParent>;
}
export interface SinisterCarContactPayloadToSinisterCarContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterDamagePayloadTypeResolver<TParent = any> {
    sinisterDamage?: SinisterDamagePayloadToSinisterDamageResolver<TParent>;
}
export interface SinisterDamagePayloadToSinisterDamageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterDamageContactPayloadTypeResolver<TParent = any> {
    sinisterDamageContact?: SinisterDamageContactPayloadToSinisterDamageContactResolver<TParent>;
}
export interface SinisterDamageContactPayloadToSinisterDamageContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterLifePayloadTypeResolver<TParent = any> {
    sinisterLife?: SinisterLifePayloadToSinisterLifeResolver<TParent>;
}
export interface SinisterLifePayloadToSinisterLifeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterLifeContactPayloadTypeResolver<TParent = any> {
    sinisterLifeContact?: SinisterLifeContactPayloadToSinisterLifeContactResolver<TParent>;
}
export interface SinisterLifeContactPayloadToSinisterLifeContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterHospitalPayloadTypeResolver<TParent = any> {
    sinisterHospital?: SinisterHospitalPayloadToSinisterHospitalResolver<TParent>;
}
export interface SinisterHospitalPayloadToSinisterHospitalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISinisterFacturaPayloadTypeResolver<TParent = any> {
    sinisterFactura?: SinisterFacturaPayloadToSinisterFacturaResolver<TParent>;
}
export interface SinisterFacturaPayloadToSinisterFacturaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceReceiptPayloadTypeResolver<TParent = any> {
    policeReceipt?: PoliceReceiptPayloadToPoliceReceiptResolver<TParent>;
}
export interface PoliceReceiptPayloadToPoliceReceiptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceReceiptAccountPayloadTypeResolver<TParent = any> {
    policeReceiptAccount?: PoliceReceiptAccountPayloadToPoliceReceiptAccountResolver<TParent>;
}
export interface PoliceReceiptAccountPayloadToPoliceReceiptAccountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceReceiptAccountStatePayloadTypeResolver<TParent = any> {
    policeReceiptAccountState?: PoliceReceiptAccountStatePayloadToPoliceReceiptAccountStateResolver<TParent>;
}
export interface PoliceReceiptAccountStatePayloadToPoliceReceiptAccountStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceReceiptFolioPayloadTypeResolver<TParent = any> {
    policeReceiptFolio?: PoliceReceiptFolioPayloadToPoliceReceiptFolioResolver<TParent>;
}
export interface PoliceReceiptFolioPayloadToPoliceReceiptFolioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceReceiptPaymentPayloadTypeResolver<TParent = any> {
    policeReceiptPayment?: PoliceReceiptPaymentPayloadToPoliceReceiptPaymentResolver<TParent>;
}
export interface PoliceReceiptPaymentPayloadToPoliceReceiptPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IPoliceFilePayloadTypeResolver<TParent = any> {
    policeFile?: PoliceFilePayloadToPoliceFileResolver<TParent>;
}
export interface PoliceFilePayloadToPoliceFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerCommentPayloadTypeResolver<TParent = any> {
    insurerComment?: InsurerCommentPayloadToInsurerCommentResolver<TParent>;
}
export interface InsurerCommentPayloadToInsurerCommentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerFileReadingPayloadTypeResolver<TParent = any> {
    insurerFileReading?: InsurerFileReadingPayloadToInsurerFileReadingResolver<TParent>;
}
export interface InsurerFileReadingPayloadToInsurerFileReadingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerFileReadingTagPayloadTypeResolver<TParent = any> {
    insurerFileReadingTag?: InsurerFileReadingTagPayloadToInsurerFileReadingTagResolver<TParent>;
}
export interface InsurerFileReadingTagPayloadToInsurerFileReadingTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerBailTypePayloadTypeResolver<TParent = any> {
    insurerBailType?: InsurerBailTypePayloadToInsurerBailTypeResolver<TParent>;
}
export interface InsurerBailTypePayloadToInsurerBailTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerInvolvedPayloadTypeResolver<TParent = any> {
    insurerInvolved?: InsurerInvolvedPayloadToInsurerInvolvedResolver<TParent>;
}
export interface InsurerInvolvedPayloadToInsurerInvolvedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerLogPayloadTypeResolver<TParent = any> {
    insurerLog?: InsurerLogPayloadToInsurerLogResolver<TParent>;
}
export interface InsurerLogPayloadToInsurerLogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerLogEmailPayloadTypeResolver<TParent = any> {
    insurerLogEmail?: InsurerLogEmailPayloadToInsurerLogEmailResolver<TParent>;
}
export interface InsurerLogEmailPayloadToInsurerLogEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerOrgInfoPayloadTypeResolver<TParent = any> {
    insurerOrgInfo?: InsurerOrgInfoPayloadToInsurerOrgInfoResolver<TParent>;
}
export interface InsurerOrgInfoPayloadToInsurerOrgInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerTicketPayloadTypeResolver<TParent = any> {
    insurerTicket?: InsurerTicketPayloadToInsurerTicketResolver<TParent>;
}
export interface InsurerTicketPayloadToInsurerTicketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerSchedulePayloadTypeResolver<TParent = any> {
    insurerSchedule?: InsurerSchedulePayloadToInsurerScheduleResolver<TParent>;
}
export interface InsurerSchedulePayloadToInsurerScheduleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerScheduleParticipantPayloadTypeResolver<TParent = any> {
    insurerScheduleParticipant?: InsurerScheduleParticipantPayloadToInsurerScheduleParticipantResolver<TParent>;
}
export interface InsurerScheduleParticipantPayloadToInsurerScheduleParticipantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerNotificationPayloadTypeResolver<TParent = any> {
    insurerNotification?: InsurerNotificationPayloadToInsurerNotificationResolver<TParent>;
}
export interface InsurerNotificationPayloadToInsurerNotificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerReminderPayloadTypeResolver<TParent = any> {
    insurerReminder?: InsurerReminderPayloadToInsurerReminderResolver<TParent>;
}
export interface InsurerReminderPayloadToInsurerReminderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerReminderProjectAgentProviderPayloadTypeResolver<TParent = any> {
    insurerReminderProjectAgentProvider?: InsurerReminderProjectAgentProviderPayloadToInsurerReminderProjectAgentProviderResolver<TParent>;
}
export interface InsurerReminderProjectAgentProviderPayloadToInsurerReminderProjectAgentProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerReminderRecordPayloadTypeResolver<TParent = any> {
    insurerReminderRecord?: InsurerReminderRecordPayloadToInsurerReminderRecordResolver<TParent>;
}
export interface InsurerReminderRecordPayloadToInsurerReminderRecordResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerReminderSubBranchPayloadTypeResolver<TParent = any> {
    insurerReminderSubBranch?: InsurerReminderSubBranchPayloadToInsurerReminderSubBranchResolver<TParent>;
}
export interface InsurerReminderSubBranchPayloadToInsurerReminderSubBranchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerBirthDateTemplatePayloadTypeResolver<TParent = any> {
    insurerBirthDateTemplate?: InsurerBirthDateTemplatePayloadToInsurerBirthDateTemplateResolver<TParent>;
}
export interface InsurerBirthDateTemplatePayloadToInsurerBirthDateTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerDirectoryPayloadTypeResolver<TParent = any> {
    insurerDirectory?: InsurerDirectoryPayloadToInsurerDirectoryResolver<TParent>;
}
export interface InsurerDirectoryPayloadToInsurerDirectoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerExpensePayloadTypeResolver<TParent = any> {
    insurerExpense?: InsurerExpensePayloadToInsurerExpenseResolver<TParent>;
}
export interface InsurerExpensePayloadToInsurerExpenseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerIbisFormPayloadTypeResolver<TParent = any> {
    insurerIbisForm?: InsurerIbisFormPayloadToInsurerIbisFormResolver<TParent>;
}
export interface InsurerIbisFormPayloadToInsurerIbisFormResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerIbisProviderPayloadTypeResolver<TParent = any> {
    insurerIbisProvider?: InsurerIbisProviderPayloadToInsurerIbisProviderResolver<TParent>;
}
export interface InsurerIbisProviderPayloadToInsurerIbisProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerSenderPayloadTypeResolver<TParent = any> {
    insurerSender?: InsurerSenderPayloadToInsurerSenderResolver<TParent>;
}
export interface InsurerSenderPayloadToInsurerSenderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IInsurerZipCodeSepomexPayloadTypeResolver<TParent = any> {
    insurerZipCodeSepomex?: InsurerZipCodeSepomexPayloadToInsurerZipCodeSepomexResolver<TParent>;
}
export interface InsurerZipCodeSepomexPayloadToInsurerZipCodeSepomexResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAgentProviderBonoPayloadTypeResolver<TParent = any> {
    agentProviderBono?: AgentProviderBonoPayloadToAgentProviderBonoResolver<TParent>;
}
export interface AgentProviderBonoPayloadToAgentProviderBonoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISendNotificationPayloadTypeResolver<TParent = any> {
    sended?: SendNotificationPayloadToSendedResolver<TParent>;
}
export interface SendNotificationPayloadToSendedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMultipleNotificationPayloadTypeResolver<TParent = any> {
    notifications?: MultipleNotificationPayloadToNotificationsResolver<TParent>;
}
export interface MultipleNotificationPayloadToNotificationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMultipleMemberNotificationPayloadTypeResolver<TParent = any> {
    notifications?: MultipleMemberNotificationPayloadToNotificationsResolver<TParent>;
}
export interface MultipleMemberNotificationPayloadToNotificationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IMemberNotificationPayloadTypeResolver<TParent = any> {
    notifications?: MemberNotificationPayloadToNotificationsResolver<TParent>;
}
export interface MemberNotificationPayloadToNotificationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface INotificationPayloadTypeResolver<TParent = any> {
    notification?: NotificationPayloadToNotificationResolver<TParent>;
}
export interface NotificationPayloadToNotificationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDevicePayloadTypeResolver<TParent = any> {
    device?: DevicePayloadToDeviceResolver<TParent>;
}
export interface DevicePayloadToDeviceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISetCodeAsUnavailablePayloadTypeResolver<TParent = any> {
    success?: SetCodeAsUnavailablePayloadToSuccessResolver<TParent>;
}
export interface SetCodeAsUnavailablePayloadToSuccessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateAdminCodePayloadTypeResolver<TParent = any> {
    adminCode?: CreateAdminCodePayloadToAdminCodeResolver<TParent>;
}
export interface CreateAdminCodePayloadToAdminCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAdminCodeTypeResolver<TParent = any> {
    code?: AdminCodeToCodeResolver<TParent>;
    isAvailable?: AdminCodeToIsAvailableResolver<TParent>;
    id?: AdminCodeToIdResolver<TParent>;
    createdAt?: AdminCodeToCreatedAtResolver<TParent>;
    updatedAt?: AdminCodeToUpdatedAtResolver<TParent>;
}
export interface AdminCodeToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AdminCodeToIsAvailableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AdminCodeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AdminCodeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AdminCodeToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IScanCodePayloadTypeResolver<TParent = any> {
    code?: ScanCodePayloadToCodeResolver<TParent>;
}
export interface ScanCodePayloadToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISendMessagePayloadTypeResolver<TParent = any> {
    code?: SendMessagePayloadToCodeResolver<TParent>;
}
export interface SendMessagePayloadToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ILookForCodePayloadTypeResolver<TParent = any> {
    success?: LookForCodePayloadToSuccessResolver<TParent>;
}
export interface LookForCodePayloadToSuccessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateCodePayloadTypeResolver<TParent = any> {
    code?: CreateCodePayloadToCodeResolver<TParent>;
}
export interface CreateCodePayloadToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreatePrizeCategoryPayloadTypeResolver<TParent = any> {
    prizeCategory?: CreatePrizeCategoryPayloadToPrizeCategoryResolver<TParent>;
}
export interface CreatePrizeCategoryPayloadToPrizeCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreatePrizeCodePayloadTypeResolver<TParent = any> {
    prizeCode?: CreatePrizeCodePayloadToPrizeCodeResolver<TParent>;
}
export interface CreatePrizeCodePayloadToPrizeCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteCodePayloadTypeResolver<TParent = any> {
    message?: DeleteCodePayloadToMessageResolver<TParent>;
}
export interface DeleteCodePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeletePrizeCodePayloadTypeResolver<TParent = any> {
    message?: DeletePrizeCodePayloadToMessageResolver<TParent>;
}
export interface DeletePrizeCodePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IExchangeDotsPayloadTypeResolver<TParent = any> {
    dotMovement?: ExchangeDotsPayloadToDotMovementResolver<TParent>;
}
export interface ExchangeDotsPayloadToDotMovementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateAdverseEventPayloadTypeResolver<TParent = any> {
    adverseEvent?: CreateAdverseEventPayloadToAdverseEventResolver<TParent>;
}
export interface CreateAdverseEventPayloadToAdverseEventResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAdverseEventTypeResolver<TParent = any> {
    projectId?: AdverseEventToProjectIdResolver<TParent>;
    memberId?: AdverseEventToMemberIdResolver<TParent>;
    name?: AdverseEventToNameResolver<TParent>;
    email?: AdverseEventToEmailResolver<TParent>;
    problem?: AdverseEventToProblemResolver<TParent>;
    description?: AdverseEventToDescriptionResolver<TParent>;
    problemStatus?: AdverseEventToProblemStatusResolver<TParent>;
    id?: AdverseEventToIdResolver<TParent>;
    createdAt?: AdverseEventToCreatedAtResolver<TParent>;
    updatedAt?: AdverseEventToUpdatedAtResolver<TParent>;
}
export interface AdverseEventToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AdverseEventToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AdverseEventToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AdverseEventToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AdverseEventToProblemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AdverseEventToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AdverseEventToProblemStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AdverseEventToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AdverseEventToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AdverseEventToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IDeleteAdverseEventPayloadTypeResolver<TParent = any> {
    message?: DeleteAdverseEventPayloadToMessageResolver<TParent>;
}
export interface DeleteAdverseEventPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateBrandPayloadTypeResolver<TParent = any> {
    brand?: CreateBrandPayloadToBrandResolver<TParent>;
}
export interface CreateBrandPayloadToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ISubscriptionTypeResolver<TParent = any> {
    conversationPublished?: SubscriptionToConversationPublishedResolver<TParent>;
}
export interface SubscriptionToConversationPublishedArgs {
    conversationId: string;
}
export interface SubscriptionToConversationPublishedResolver<TParent = any, TResult = any> {
    resolve?: (parent: TParent, args: SubscriptionToConversationPublishedArgs, context: any, info: GraphQLResolveInfo) => TResult;
    subscribe: (parent: TParent, args: SubscriptionToConversationPublishedArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}
export interface Iexchange_CreateProviderPayloadTypeResolver<TParent = any> {
    provider?: exchange_CreateProviderPayloadToProviderResolver<TParent>;
}
export interface exchange_CreateProviderPayloadToProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdatePurchaseQuoteMutationTypeResolver<TParent = any> {
    updatePurchaseQuote?: UpdatePurchaseQuoteMutationToUpdatePurchaseQuoteResolver<TParent>;
}
export interface UpdatePurchaseQuoteMutationToUpdatePurchaseQuoteArgs {
    input: IUpdatePurchaseQuoteInput;
}
export interface UpdatePurchaseQuoteMutationToUpdatePurchaseQuoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: UpdatePurchaseQuoteMutationToUpdatePurchaseQuoteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdatePurchaseQuotePayloadTypeResolver<TParent = any> {
    message?: UpdatePurchaseQuotePayloadToMessageResolver<TParent>;
}
export interface UpdatePurchaseQuotePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateRouteMutationTypeResolver<TParent = any> {
    updateRoute?: UpdateRouteMutationToUpdateRouteResolver<TParent>;
}
export interface UpdateRouteMutationToUpdateRouteArgs {
    input: IUpdateRouteInput;
}
export interface UpdateRouteMutationToUpdateRouteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: UpdateRouteMutationToUpdateRouteArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IUpdateRoutePayloadTypeResolver<TParent = any> {
    message?: UpdateRoutePayloadToMessageResolver<TParent>;
}
export interface UpdateRoutePayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface Idocsreader_CreateTemplatePayloadTypeResolver<TParent = any> {
    scans?: docsreader_CreateTemplatePayloadToScansResolver<TParent>;
}
export interface docsreader_CreateTemplatePayloadToScansResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateDettachedStripeSuscriptionMutationTypeResolver<TParent = any> {
    createDettachedStripeSuscription?: CreateDettachedStripeSuscriptionMutationToCreateDettachedStripeSuscriptionResolver<TParent>;
}
export interface CreateDettachedStripeSuscriptionMutationToCreateDettachedStripeSuscriptionArgs {
    input: ICreateDettachedStripeSuscriptionInput;
}
export interface CreateDettachedStripeSuscriptionMutationToCreateDettachedStripeSuscriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CreateDettachedStripeSuscriptionMutationToCreateDettachedStripeSuscriptionArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateDettachedStripeSuscriptionPayloadTypeResolver<TParent = any> {
    message?: CreateDettachedStripeSuscriptionPayloadToMessageResolver<TParent>;
}
export interface CreateDettachedStripeSuscriptionPayloadToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateStripeCustomerMutationTypeResolver<TParent = any> {
    createStripeCustomer?: CreateStripeCustomerMutationToCreateStripeCustomerResolver<TParent>;
}
export interface CreateStripeCustomerMutationToCreateStripeCustomerArgs {
    input: ICreateStripeCustomerInput;
}
export interface CreateStripeCustomerMutationToCreateStripeCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CreateStripeCustomerMutationToCreateStripeCustomerArgs, context: any, info: GraphQLResolveInfo): TResult;
}
export interface ICreateStripeCustomerPayloadTypeResolver<TParent = any> {
    customer?: CreateStripeCustomerPayloadToCustomerResolver<TParent>;
}
export interface CreateStripeCustomerPayloadToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IStripeCustomerTypeResolver<TParent = any> {
    memberId?: StripeCustomerToMemberIdResolver<TParent>;
    projectId?: StripeCustomerToProjectIdResolver<TParent>;
    stripeId?: StripeCustomerToStripeIdResolver<TParent>;
    paymentMethodId?: StripeCustomerToPaymentMethodIdResolver<TParent>;
    paymentMethod?: StripeCustomerToPaymentMethodResolver<TParent>;
    id?: StripeCustomerToIdResolver<TParent>;
    createdAt?: StripeCustomerToCreatedAtResolver<TParent>;
    updatedAt?: StripeCustomerToUpdatedAtResolver<TParent>;
}
export interface StripeCustomerToMemberIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StripeCustomerToProjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StripeCustomerToStripeIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StripeCustomerToPaymentMethodIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StripeCustomerToPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StripeCustomerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StripeCustomerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface StripeCustomerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface IAuthorizeDirectiveTypeResolver<TParent = any> {
    policy?: AuthorizeDirectiveToPolicyResolver<TParent>;
    roles?: AuthorizeDirectiveToRolesResolver<TParent>;
    apply?: AuthorizeDirectiveToApplyResolver<TParent>;
}
export interface AuthorizeDirectiveToPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AuthorizeDirectiveToRolesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface AuthorizeDirectiveToApplyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
export interface Iitus_CreateOfficePayloadTypeResolver<TParent = any> {
    office?: itus_CreateOfficePayloadToOfficeResolver<TParent>;
}
export interface itus_CreateOfficePayloadToOfficeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
