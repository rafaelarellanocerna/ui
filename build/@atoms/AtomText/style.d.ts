/// <reference types="react" />
export declare const TextStyledDefault: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLSpanElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLSpanElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLSpanElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLSpanElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLSpanElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLSpanElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLSpanElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLSpanElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLSpanElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLSpanElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLSpanElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLSpanElement>;
    onFocus?: import("react").FocusEventHandler<HTMLSpanElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLSpanElement>;
    onBlur?: import("react").FocusEventHandler<HTMLSpanElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLSpanElement>;
    onChange?: import("react").FormEventHandler<HTMLSpanElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLSpanElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLSpanElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLSpanElement>;
    onInput?: import("react").FormEventHandler<HTMLSpanElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLSpanElement>;
    onReset?: import("react").FormEventHandler<HTMLSpanElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLSpanElement>;
    onSubmit?: import("react").FormEventHandler<HTMLSpanElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLSpanElement>;
    onInvalid?: import("react").FormEventHandler<HTMLSpanElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLSpanElement>;
    onLoad?: import("react").ReactEventHandler<HTMLSpanElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onError?: import("react").ReactEventHandler<HTMLSpanElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLSpanElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLSpanElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLSpanElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLSpanElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLSpanElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLSpanElement>;
    onAbort?: import("react").ReactEventHandler<HTMLSpanElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLSpanElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLSpanElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLSpanElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLSpanElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLSpanElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onEnded?: import("react").ReactEventHandler<HTMLSpanElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLSpanElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLSpanElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLSpanElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onPause?: import("react").ReactEventHandler<HTMLSpanElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onPlay?: import("react").ReactEventHandler<HTMLSpanElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLSpanElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onProgress?: import("react").ReactEventHandler<HTMLSpanElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLSpanElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLSpanElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLSpanElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onStalled?: import("react").ReactEventHandler<HTMLSpanElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLSpanElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLSpanElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLSpanElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLSpanElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLSpanElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLSpanElement>;
    onClick?: import("react").MouseEventHandler<HTMLSpanElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLSpanElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLSpanElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLSpanElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLSpanElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLSpanElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragExit?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragOver?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLSpanElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLSpanElement>;
    onDrop?: import("react").DragEventHandler<HTMLSpanElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLSpanElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLSpanElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLSpanElement>;
    onSelect?: import("react").ReactEventHandler<HTMLSpanElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLSpanElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLSpanElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLSpanElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLSpanElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLSpanElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLSpanElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLSpanElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLSpanElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLSpanElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLSpanElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLSpanElement>;
    onScroll?: import("react").UIEventHandler<HTMLSpanElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLSpanElement>;
    onWheel?: import("react").WheelEventHandler<HTMLSpanElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLSpanElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLSpanElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLSpanElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLSpanElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLSpanElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLSpanElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLSpanElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLSpanElement>;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLSpanElement> & {
    theme?: import("@emotion/react").Theme;
} & {
    as?: "a" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "p" | "span";
    color?: string;
    font?: string;
    className?: string;
    href?: string;
    children?: import("react").ReactNode;
    align?: "inherit" | "left" | "right" | "center";
    padding?: string;
    margin?: string;
    width?: string;
    maxWidth?: string;
    fontSize?: string;
    textDecoration?: "inherit" | "none" | "line-through" | "underline";
    ref?: import("react").Ref<any>;
    fontWeight?: "inherit" | "normal" | "bold" | "light" | "semibold" | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;
    cursor?: "progress" | "text" | "custom" | "inherit" | "cell" | "alias" | "all-scroll" | "col-resize" | "context-menu" | "copy" | "crosshair" | "default" | "e-resize" | "ew-resize" | "grab" | "grabbing" | "help" | "move" | "n-resize" | "ne-resize" | "nesw-resize" | "no-drop" | "not-allowed" | "ns-resize" | "nw-resize" | "nwse-resize" | "pointer" | "row-resize" | "s-resize" | "se-resize" | "sw-resize" | "vertical-text" | "w-resize" | "wait" | "zoom-in" | "zoom-out";
    customCSS?: import("@emotion/utils").SerializedStyles;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
}, {}, {}>;
export declare const TextStyledA: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLAnchorElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLAnchorElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLAnchorElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLAnchorElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLAnchorElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLAnchorElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLAnchorElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLAnchorElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLAnchorElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLAnchorElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLAnchorElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLAnchorElement>;
    onFocus?: import("react").FocusEventHandler<HTMLAnchorElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLAnchorElement>;
    onBlur?: import("react").FocusEventHandler<HTMLAnchorElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLAnchorElement>;
    onChange?: import("react").FormEventHandler<HTMLAnchorElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLAnchorElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLAnchorElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLAnchorElement>;
    onInput?: import("react").FormEventHandler<HTMLAnchorElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLAnchorElement>;
    onReset?: import("react").FormEventHandler<HTMLAnchorElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLAnchorElement>;
    onSubmit?: import("react").FormEventHandler<HTMLAnchorElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLAnchorElement>;
    onInvalid?: import("react").FormEventHandler<HTMLAnchorElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLAnchorElement>;
    onLoad?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onError?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLAnchorElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLAnchorElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLAnchorElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLAnchorElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLAnchorElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLAnchorElement>;
    onAbort?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onEnded?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onPause?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onPlay?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onProgress?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onStalled?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onClick?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragExit?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragOver?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDrop?: import("react").DragEventHandler<HTMLAnchorElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLAnchorElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLAnchorElement>;
    onSelect?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLAnchorElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLAnchorElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLAnchorElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLAnchorElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLAnchorElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLAnchorElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLAnchorElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLAnchorElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLAnchorElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLAnchorElement>;
    onScroll?: import("react").UIEventHandler<HTMLAnchorElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLAnchorElement>;
    onWheel?: import("react").WheelEventHandler<HTMLAnchorElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLAnchorElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLAnchorElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLAnchorElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLAnchorElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLAnchorElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLAnchorElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLAnchorElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLAnchorElement>;
    download?: any;
    href?: string;
    hrefLang?: string;
    media?: string;
    ping?: string;
    rel?: string;
    target?: import("react").HTMLAttributeAnchorTarget;
    type?: string;
    referrerPolicy?: import("react").HTMLAttributeReferrerPolicy;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLAnchorElement> & {
    theme?: import("@emotion/react").Theme;
} & {
    as?: "a" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "p" | "span";
    color?: string;
    font?: string;
    className?: string;
    href?: string;
    children?: import("react").ReactNode;
    align?: "inherit" | "left" | "right" | "center";
    padding?: string;
    margin?: string;
    width?: string;
    maxWidth?: string;
    fontSize?: string;
    textDecoration?: "inherit" | "none" | "line-through" | "underline";
    ref?: import("react").Ref<any>;
    fontWeight?: "inherit" | "normal" | "bold" | "light" | "semibold" | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;
    cursor?: "progress" | "text" | "custom" | "inherit" | "cell" | "alias" | "all-scroll" | "col-resize" | "context-menu" | "copy" | "crosshair" | "default" | "e-resize" | "ew-resize" | "grab" | "grabbing" | "help" | "move" | "n-resize" | "ne-resize" | "nesw-resize" | "no-drop" | "not-allowed" | "ns-resize" | "nw-resize" | "nwse-resize" | "pointer" | "row-resize" | "s-resize" | "se-resize" | "sw-resize" | "vertical-text" | "w-resize" | "wait" | "zoom-in" | "zoom-out";
    customCSS?: import("@emotion/utils").SerializedStyles;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
}, {}, {}>;
export declare const TextStyledP: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLParagraphElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLParagraphElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLParagraphElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLParagraphElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLParagraphElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLParagraphElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLParagraphElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLParagraphElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLParagraphElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLParagraphElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLParagraphElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLParagraphElement>;
    onFocus?: import("react").FocusEventHandler<HTMLParagraphElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLParagraphElement>;
    onBlur?: import("react").FocusEventHandler<HTMLParagraphElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLParagraphElement>;
    onChange?: import("react").FormEventHandler<HTMLParagraphElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLParagraphElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLParagraphElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLParagraphElement>;
    onInput?: import("react").FormEventHandler<HTMLParagraphElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLParagraphElement>;
    onReset?: import("react").FormEventHandler<HTMLParagraphElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLParagraphElement>;
    onSubmit?: import("react").FormEventHandler<HTMLParagraphElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLParagraphElement>;
    onInvalid?: import("react").FormEventHandler<HTMLParagraphElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLParagraphElement>;
    onLoad?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onError?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLParagraphElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLParagraphElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLParagraphElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLParagraphElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLParagraphElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLParagraphElement>;
    onAbort?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onEnded?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onPause?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onPlay?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onProgress?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onStalled?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onClick?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLParagraphElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLParagraphElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLParagraphElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLParagraphElement>;
    onDragExit?: import("react").DragEventHandler<HTMLParagraphElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLParagraphElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLParagraphElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLParagraphElement>;
    onDragOver?: import("react").DragEventHandler<HTMLParagraphElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLParagraphElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLParagraphElement>;
    onDrop?: import("react").DragEventHandler<HTMLParagraphElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLParagraphElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLParagraphElement>;
    onSelect?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLParagraphElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLParagraphElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLParagraphElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLParagraphElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLParagraphElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLParagraphElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLParagraphElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLParagraphElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLParagraphElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLParagraphElement>;
    onScroll?: import("react").UIEventHandler<HTMLParagraphElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLParagraphElement>;
    onWheel?: import("react").WheelEventHandler<HTMLParagraphElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLParagraphElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLParagraphElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLParagraphElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLParagraphElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLParagraphElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLParagraphElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLParagraphElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLParagraphElement>;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLParagraphElement> & {
    theme?: import("@emotion/react").Theme;
} & {
    as?: "a" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "p" | "span";
    color?: string;
    font?: string;
    className?: string;
    href?: string;
    children?: import("react").ReactNode;
    align?: "inherit" | "left" | "right" | "center";
    padding?: string;
    margin?: string;
    width?: string;
    maxWidth?: string;
    fontSize?: string;
    textDecoration?: "inherit" | "none" | "line-through" | "underline";
    ref?: import("react").Ref<any>;
    fontWeight?: "inherit" | "normal" | "bold" | "light" | "semibold" | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;
    cursor?: "progress" | "text" | "custom" | "inherit" | "cell" | "alias" | "all-scroll" | "col-resize" | "context-menu" | "copy" | "crosshair" | "default" | "e-resize" | "ew-resize" | "grab" | "grabbing" | "help" | "move" | "n-resize" | "ne-resize" | "nesw-resize" | "no-drop" | "not-allowed" | "ns-resize" | "nw-resize" | "nwse-resize" | "pointer" | "row-resize" | "s-resize" | "se-resize" | "sw-resize" | "vertical-text" | "w-resize" | "wait" | "zoom-in" | "zoom-out";
    customCSS?: import("@emotion/utils").SerializedStyles;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
}, {}, {}>;
export declare const TextStyledH1: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onFocus?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onBlur?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onChange?: import("react").FormEventHandler<HTMLHeadingElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLHeadingElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInput?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onReset?: import("react").FormEventHandler<HTMLHeadingElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onSubmit?: import("react").FormEventHandler<HTMLHeadingElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInvalid?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onLoad?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onError?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onAbort?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEnded?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPause?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlay?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onProgress?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onStalled?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onClick?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragExit?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragOver?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDrop?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onSelect?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onScroll?: import("react").UIEventHandler<HTMLHeadingElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLHeadingElement>;
    onWheel?: import("react").WheelEventHandler<HTMLHeadingElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLHeadingElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLHeadingElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLHeadingElement>;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLHeadingElement> & {
    theme?: import("@emotion/react").Theme;
} & {
    as?: "a" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "p" | "span";
    color?: string;
    font?: string;
    className?: string;
    href?: string;
    children?: import("react").ReactNode;
    align?: "inherit" | "left" | "right" | "center";
    padding?: string;
    margin?: string;
    width?: string;
    maxWidth?: string;
    fontSize?: string;
    textDecoration?: "inherit" | "none" | "line-through" | "underline";
    ref?: import("react").Ref<any>;
    fontWeight?: "inherit" | "normal" | "bold" | "light" | "semibold" | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;
    cursor?: "progress" | "text" | "custom" | "inherit" | "cell" | "alias" | "all-scroll" | "col-resize" | "context-menu" | "copy" | "crosshair" | "default" | "e-resize" | "ew-resize" | "grab" | "grabbing" | "help" | "move" | "n-resize" | "ne-resize" | "nesw-resize" | "no-drop" | "not-allowed" | "ns-resize" | "nw-resize" | "nwse-resize" | "pointer" | "row-resize" | "s-resize" | "se-resize" | "sw-resize" | "vertical-text" | "w-resize" | "wait" | "zoom-in" | "zoom-out";
    customCSS?: import("@emotion/utils").SerializedStyles;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
}, {}, {}>;
export declare const TextStyledH2: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onFocus?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onBlur?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onChange?: import("react").FormEventHandler<HTMLHeadingElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLHeadingElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInput?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onReset?: import("react").FormEventHandler<HTMLHeadingElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onSubmit?: import("react").FormEventHandler<HTMLHeadingElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInvalid?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onLoad?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onError?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onAbort?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEnded?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPause?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlay?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onProgress?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onStalled?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onClick?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragExit?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragOver?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDrop?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onSelect?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onScroll?: import("react").UIEventHandler<HTMLHeadingElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLHeadingElement>;
    onWheel?: import("react").WheelEventHandler<HTMLHeadingElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLHeadingElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLHeadingElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLHeadingElement>;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLHeadingElement> & {
    theme?: import("@emotion/react").Theme;
} & {
    as?: "a" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "p" | "span";
    color?: string;
    font?: string;
    className?: string;
    href?: string;
    children?: import("react").ReactNode;
    align?: "inherit" | "left" | "right" | "center";
    padding?: string;
    margin?: string;
    width?: string;
    maxWidth?: string;
    fontSize?: string;
    textDecoration?: "inherit" | "none" | "line-through" | "underline";
    ref?: import("react").Ref<any>;
    fontWeight?: "inherit" | "normal" | "bold" | "light" | "semibold" | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;
    cursor?: "progress" | "text" | "custom" | "inherit" | "cell" | "alias" | "all-scroll" | "col-resize" | "context-menu" | "copy" | "crosshair" | "default" | "e-resize" | "ew-resize" | "grab" | "grabbing" | "help" | "move" | "n-resize" | "ne-resize" | "nesw-resize" | "no-drop" | "not-allowed" | "ns-resize" | "nw-resize" | "nwse-resize" | "pointer" | "row-resize" | "s-resize" | "se-resize" | "sw-resize" | "vertical-text" | "w-resize" | "wait" | "zoom-in" | "zoom-out";
    customCSS?: import("@emotion/utils").SerializedStyles;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
}, {}, {}>;
export declare const TextStyledH3: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onFocus?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onBlur?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onChange?: import("react").FormEventHandler<HTMLHeadingElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLHeadingElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInput?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onReset?: import("react").FormEventHandler<HTMLHeadingElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onSubmit?: import("react").FormEventHandler<HTMLHeadingElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInvalid?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onLoad?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onError?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onAbort?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEnded?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPause?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlay?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onProgress?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onStalled?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onClick?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragExit?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragOver?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDrop?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onSelect?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onScroll?: import("react").UIEventHandler<HTMLHeadingElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLHeadingElement>;
    onWheel?: import("react").WheelEventHandler<HTMLHeadingElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLHeadingElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLHeadingElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLHeadingElement>;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLHeadingElement> & {
    theme?: import("@emotion/react").Theme;
} & {
    as?: "a" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "p" | "span";
    color?: string;
    font?: string;
    className?: string;
    href?: string;
    children?: import("react").ReactNode;
    align?: "inherit" | "left" | "right" | "center";
    padding?: string;
    margin?: string;
    width?: string;
    maxWidth?: string;
    fontSize?: string;
    textDecoration?: "inherit" | "none" | "line-through" | "underline";
    ref?: import("react").Ref<any>;
    fontWeight?: "inherit" | "normal" | "bold" | "light" | "semibold" | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;
    cursor?: "progress" | "text" | "custom" | "inherit" | "cell" | "alias" | "all-scroll" | "col-resize" | "context-menu" | "copy" | "crosshair" | "default" | "e-resize" | "ew-resize" | "grab" | "grabbing" | "help" | "move" | "n-resize" | "ne-resize" | "nesw-resize" | "no-drop" | "not-allowed" | "ns-resize" | "nw-resize" | "nwse-resize" | "pointer" | "row-resize" | "s-resize" | "se-resize" | "sw-resize" | "vertical-text" | "w-resize" | "wait" | "zoom-in" | "zoom-out";
    customCSS?: import("@emotion/utils").SerializedStyles;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
}, {}, {}>;
export declare const TextStyledH4: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onFocus?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onBlur?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onChange?: import("react").FormEventHandler<HTMLHeadingElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLHeadingElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInput?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onReset?: import("react").FormEventHandler<HTMLHeadingElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onSubmit?: import("react").FormEventHandler<HTMLHeadingElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInvalid?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onLoad?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onError?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onAbort?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEnded?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPause?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlay?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onProgress?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onStalled?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onClick?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragExit?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragOver?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDrop?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onSelect?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onScroll?: import("react").UIEventHandler<HTMLHeadingElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLHeadingElement>;
    onWheel?: import("react").WheelEventHandler<HTMLHeadingElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLHeadingElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLHeadingElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLHeadingElement>;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLHeadingElement> & {
    theme?: import("@emotion/react").Theme;
} & {
    as?: "a" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "p" | "span";
    color?: string;
    font?: string;
    className?: string;
    href?: string;
    children?: import("react").ReactNode;
    align?: "inherit" | "left" | "right" | "center";
    padding?: string;
    margin?: string;
    width?: string;
    maxWidth?: string;
    fontSize?: string;
    textDecoration?: "inherit" | "none" | "line-through" | "underline";
    ref?: import("react").Ref<any>;
    fontWeight?: "inherit" | "normal" | "bold" | "light" | "semibold" | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;
    cursor?: "progress" | "text" | "custom" | "inherit" | "cell" | "alias" | "all-scroll" | "col-resize" | "context-menu" | "copy" | "crosshair" | "default" | "e-resize" | "ew-resize" | "grab" | "grabbing" | "help" | "move" | "n-resize" | "ne-resize" | "nesw-resize" | "no-drop" | "not-allowed" | "ns-resize" | "nw-resize" | "nwse-resize" | "pointer" | "row-resize" | "s-resize" | "se-resize" | "sw-resize" | "vertical-text" | "w-resize" | "wait" | "zoom-in" | "zoom-out";
    customCSS?: import("@emotion/utils").SerializedStyles;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
}, {}, {}>;
export declare const TextStyledH5: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onFocus?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onBlur?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onChange?: import("react").FormEventHandler<HTMLHeadingElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLHeadingElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInput?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onReset?: import("react").FormEventHandler<HTMLHeadingElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onSubmit?: import("react").FormEventHandler<HTMLHeadingElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInvalid?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onLoad?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onError?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onAbort?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEnded?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPause?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlay?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onProgress?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onStalled?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onClick?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragExit?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragOver?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDrop?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onSelect?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onScroll?: import("react").UIEventHandler<HTMLHeadingElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLHeadingElement>;
    onWheel?: import("react").WheelEventHandler<HTMLHeadingElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLHeadingElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLHeadingElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLHeadingElement>;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLHeadingElement> & {
    theme?: import("@emotion/react").Theme;
} & {
    as?: "a" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "p" | "span";
    color?: string;
    font?: string;
    className?: string;
    href?: string;
    children?: import("react").ReactNode;
    align?: "inherit" | "left" | "right" | "center";
    padding?: string;
    margin?: string;
    width?: string;
    maxWidth?: string;
    fontSize?: string;
    textDecoration?: "inherit" | "none" | "line-through" | "underline";
    ref?: import("react").Ref<any>;
    fontWeight?: "inherit" | "normal" | "bold" | "light" | "semibold" | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;
    cursor?: "progress" | "text" | "custom" | "inherit" | "cell" | "alias" | "all-scroll" | "col-resize" | "context-menu" | "copy" | "crosshair" | "default" | "e-resize" | "ew-resize" | "grab" | "grabbing" | "help" | "move" | "n-resize" | "ne-resize" | "nesw-resize" | "no-drop" | "not-allowed" | "ns-resize" | "nw-resize" | "nwse-resize" | "pointer" | "row-resize" | "s-resize" | "se-resize" | "sw-resize" | "vertical-text" | "w-resize" | "wait" | "zoom-in" | "zoom-out";
    customCSS?: import("@emotion/utils").SerializedStyles;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
}, {}, {}>;
export declare const TextStyledH6: import("@emotion/styled").StyledComponent<{
    slot?: string;
    title?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "true" | "false";
    "aria-autocomplete"?: "list" | "none" | "inline" | "both";
    "aria-busy"?: boolean | "true" | "false";
    "aria-checked"?: boolean | "true" | "false" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "true" | "false";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "true" | "false";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "true" | "false";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "true" | "false";
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "true" | "false";
    "aria-multiline"?: boolean | "true" | "false";
    "aria-multiselectable"?: boolean | "true" | "false";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "true" | "false" | "mixed";
    "aria-readonly"?: boolean | "true" | "false";
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "true" | "false";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "true" | "false";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLHeadingElement>;
    onFocus?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onBlur?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLHeadingElement>;
    onChange?: import("react").FormEventHandler<HTMLHeadingElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLHeadingElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInput?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onReset?: import("react").FormEventHandler<HTMLHeadingElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onSubmit?: import("react").FormEventHandler<HTMLHeadingElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInvalid?: import("react").FormEventHandler<HTMLHeadingElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLHeadingElement>;
    onLoad?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onError?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement>;
    onAbort?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEnded?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPause?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlay?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onProgress?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onStalled?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onClick?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragExit?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragOver?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDrop?: import("react").DragEventHandler<HTMLHeadingElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLHeadingElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLHeadingElement>;
    onSelect?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLHeadingElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLHeadingElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLHeadingElement>;
    onScroll?: import("react").UIEventHandler<HTMLHeadingElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLHeadingElement>;
    onWheel?: import("react").WheelEventHandler<HTMLHeadingElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLHeadingElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLHeadingElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLHeadingElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLHeadingElement>;
} & import("framer-motion").MotionProps & import("react").RefAttributes<HTMLHeadingElement> & {
    theme?: import("@emotion/react").Theme;
} & {
    as?: "a" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "p" | "span";
    color?: string;
    font?: string;
    className?: string;
    href?: string;
    children?: import("react").ReactNode;
    align?: "inherit" | "left" | "right" | "center";
    padding?: string;
    margin?: string;
    width?: string;
    maxWidth?: string;
    fontSize?: string;
    textDecoration?: "inherit" | "none" | "line-through" | "underline";
    ref?: import("react").Ref<any>;
    fontWeight?: "inherit" | "normal" | "bold" | "light" | "semibold" | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;
    cursor?: "progress" | "text" | "custom" | "inherit" | "cell" | "alias" | "all-scroll" | "col-resize" | "context-menu" | "copy" | "crosshair" | "default" | "e-resize" | "ew-resize" | "grab" | "grabbing" | "help" | "move" | "n-resize" | "ne-resize" | "nesw-resize" | "no-drop" | "not-allowed" | "ns-resize" | "nw-resize" | "nwse-resize" | "pointer" | "row-resize" | "s-resize" | "se-resize" | "sw-resize" | "vertical-text" | "w-resize" | "wait" | "zoom-in" | "zoom-out";
    customCSS?: import("@emotion/utils").SerializedStyles;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
}, {}, {}>;
