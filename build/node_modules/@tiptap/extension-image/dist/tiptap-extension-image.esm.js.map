{"version":3,"file":"tiptap-extension-image.esm.js","sources":["../../../../../node_modules/@tiptap/extension-image/dist/tiptap-extension-image.esm.js"],"sourcesContent":["import { Node, mergeAttributes, nodeInputRule } from '@tiptap/core';\n\nconst inputRegex = /(!\\[(.+|:?)]\\((\\S+)(?:(?:\\s+)[\"'](\\S+)[\"'])?\\))$/;\r\nconst Image = Node.create({\r\n    name: 'image',\r\n    addOptions() {\r\n        return {\r\n            inline: false,\r\n            allowBase64: false,\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    inline() {\r\n        return this.options.inline;\r\n    },\r\n    group() {\r\n        return this.options.inline ? 'inline' : 'block';\r\n    },\r\n    draggable: true,\r\n    addAttributes() {\r\n        return {\r\n            src: {\r\n                default: null,\r\n            },\r\n            alt: {\r\n                default: null,\r\n            },\r\n            title: {\r\n                default: null,\r\n            },\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: this.options.allowBase64\r\n                    ? 'img[src]'\r\n                    : 'img[src]:not([src^=\"data:\"])',\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['img', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            setImage: options => ({ commands }) => {\r\n                return commands.insertContent({\r\n                    type: this.name,\r\n                    attrs: options,\r\n                });\r\n            },\r\n        };\r\n    },\r\n    addInputRules() {\r\n        return [\r\n            nodeInputRule({\r\n                find: inputRegex,\r\n                type: this.type,\r\n                getAttributes: match => {\r\n                    const [, , alt, src, title] = match;\r\n                    return { src, alt, title };\r\n                },\r\n            }),\r\n        ];\r\n    },\r\n});\n\nexport { Image, Image as default, inputRegex };\n//# sourceMappingURL=tiptap-extension-image.esm.js.map\n"],"names":["Node","mergeAttributes","nodeInputRule"],"mappings":";;;;;;AAEK,MAAC,UAAU,GAAG,mDAAmD;AACjE,MAAC,KAAK,GAAGA,mBAAI,CAAC,MAAM,CAAC;AAC1B,IAAI,IAAI,EAAE,OAAO;AACjB,IAAI,UAAU,GAAG;AACjB,QAAQ,OAAO;AACf,YAAY,MAAM,EAAE,KAAK;AACzB,YAAY,WAAW,EAAE,KAAK;AAC9B,YAAY,cAAc,EAAE,EAAE;AAC9B,SAAS,CAAC;AACV,KAAK;AACL,IAAI,MAAM,GAAG;AACb,QAAQ,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;AACnC,KAAK;AACL,IAAI,KAAK,GAAG;AACZ,QAAQ,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,QAAQ,GAAG,OAAO,CAAC;AACxD,KAAK;AACL,IAAI,SAAS,EAAE,IAAI;AACnB,IAAI,aAAa,GAAG;AACpB,QAAQ,OAAO;AACf,YAAY,GAAG,EAAE;AACjB,gBAAgB,OAAO,EAAE,IAAI;AAC7B,aAAa;AACb,YAAY,GAAG,EAAE;AACjB,gBAAgB,OAAO,EAAE,IAAI;AAC7B,aAAa;AACb,YAAY,KAAK,EAAE;AACnB,gBAAgB,OAAO,EAAE,IAAI;AAC7B,aAAa;AACb,SAAS,CAAC;AACV,KAAK;AACL,IAAI,SAAS,GAAG;AAChB,QAAQ,OAAO;AACf,YAAY;AACZ,gBAAgB,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW;AAC7C,sBAAsB,UAAU;AAChC,sBAAsB,8BAA8B;AACpD,aAAa;AACb,SAAS,CAAC;AACV,KAAK;AACL,IAAI,UAAU,CAAC,EAAE,cAAc,EAAE,EAAE;AACnC,QAAQ,OAAO,CAAC,KAAK,EAAEC,8BAAe,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC,CAAC;AACrF,KAAK;AACL,IAAI,WAAW,GAAG;AAClB,QAAQ,OAAO;AACf,YAAY,QAAQ,EAAE,OAAO,IAAI,CAAC,EAAE,QAAQ,EAAE,KAAK;AACnD,gBAAgB,OAAO,QAAQ,CAAC,aAAa,CAAC;AAC9C,oBAAoB,IAAI,EAAE,IAAI,CAAC,IAAI;AACnC,oBAAoB,KAAK,EAAE,OAAO;AAClC,iBAAiB,CAAC,CAAC;AACnB,aAAa;AACb,SAAS,CAAC;AACV,KAAK;AACL,IAAI,aAAa,GAAG;AACpB,QAAQ,OAAO;AACf,YAAYC,4BAAa,CAAC;AAC1B,gBAAgB,IAAI,EAAE,UAAU;AAChC,gBAAgB,IAAI,EAAE,IAAI,CAAC,IAAI;AAC/B,gBAAgB,aAAa,EAAE,KAAK,IAAI;AACxC,oBAAoB,MAAM,KAAK,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,GAAG,KAAK,CAAC;AACxD,oBAAoB,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;AAC/C,iBAAiB;AACjB,aAAa,CAAC;AACd,SAAS,CAAC;AACV,KAAK;AACL,CAAC;;;;;;"}