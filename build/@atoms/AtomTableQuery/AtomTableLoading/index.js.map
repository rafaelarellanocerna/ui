{"version":3,"file":"index.js","sources":["../../../../@atoms/AtomTableQuery/AtomTableLoading/index.tsx"],"sourcesContent":["import { css } from '@emotion/react';\r\n\r\nimport AtomWrapper from '../../AtomWrapper';\r\nimport AtomText from '../../AtomText';\r\nimport AtomInput from '../../AtomInput';\r\n\r\nimport { INPUT_TEXT } from '../css/inputs';\r\n\r\nimport LoaderSmall from '../LoaderSmall';\r\nimport { AtomTbodyStyled, TDStyled, TRStyled } from '../styled';\r\nimport { AtomTableColumnTypes } from '../types';\r\n\r\ntype IsLoadingProps<T extends object> = {\r\n  take?: number;\r\n  loading: boolean;\r\n  columns: AtomTableColumnTypes<T>[];\r\n  children?: React.ReactNode;\r\n};\r\n\r\nconst IsLoadingTable = <T extends object>(props: IsLoadingProps<T>) => {\r\n  const { loading, columns, take } = props;\r\n  if (loading)\r\n    return (\r\n      <>\r\n        <thead>\r\n          {columns.filter((item) => item?.searchable).length > 0 && (\r\n            <tr className=\"searchTR\">\r\n              {columns.map((_, index) =>\r\n                columns?.length === index + 1 ? (\r\n                  <th>\r\n                    <AtomWrapper\r\n                      customCSS={css`\r\n                        flex-direction: row;\r\n                        justify-content: flex-end;\r\n                        align-items: center;\r\n                        gap: 10px;\r\n                      `}\r\n                    >\r\n                      <AtomText\r\n                        customCSS={css`\r\n                          font-size: 12px;\r\n                          font-weight: 600;\r\n                          color: #383838;\r\n                        `}\r\n                      >\r\n                        Buscar:{' '}\r\n                      </AtomText>\r\n                      <AtomInput\r\n                        customCSS={css`\r\n                          ${INPUT_TEXT}\r\n                        `}\r\n                      />\r\n                    </AtomWrapper>\r\n                  </th>\r\n                ) : (\r\n                  <th>\r\n                    <></>\r\n                  </th>\r\n                )\r\n              )}\r\n            </tr>\r\n          )}\r\n          <tr>\r\n            {columns?.map((e, i) => (\r\n              <th key={`header ${i + 1}`}>\r\n                <LoaderSmall />\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n\r\n        <AtomTbodyStyled>\r\n          {Array.from({ length: take ?? 5 }).map((e, i) => (\r\n            <TRStyled\r\n              key={`row ${i + 1}`}\r\n              animate={{\r\n                opacity: 1,\r\n              }}\r\n              initial={{ opacity: 0 }}\r\n              transition={{ delay: i * 0.045, duration: 0.1 }}\r\n            >\r\n              {Array.from({ length: columns.length })?.map((_, i2) => (\r\n                <TDStyled key={`Loading-${i2 + 1}`}>\r\n                  <LoaderSmall />\r\n                </TDStyled>\r\n              ))}\r\n            </TRStyled>\r\n          ))}\r\n        </AtomTbodyStyled>\r\n      </>\r\n    );\r\n\r\n  return <>{props.children}</>;\r\n};\r\n\r\nexport default IsLoadingTable;\r\n"],"names":["_jsxs","_Fragment","_jsx","index","AtomWrapper","__assign","css","__makeTemplateObject","AtomText","AtomInput","INPUT_TEXT","LoaderSmall","AtomTbodyStyled","TRStyled","TDStyled"],"mappings":"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"}